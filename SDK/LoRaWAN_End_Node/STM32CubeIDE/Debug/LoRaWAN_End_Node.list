
LoRaWAN_End_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012268  08000138  08000138  00001138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f20  080123a0  080123a0  000133a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080132c0  080132c0  000155d8  2**0
                  CONTENTS
  4 .ARM          00000008  080132c0  080132c0  000142c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080132c8  080132c8  000155d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080132c8  080132c8  000142c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080132d0  080132d0  000142d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .USER_embedded_Keys 000000d8  0803e500  0803e500  00015500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000108  20000000  080132d8  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 LW_NVM_RAM    00000b98  20008000  20008000  00016000  2**2
                  ALLOC
 11 .bss          00001578  20000108  20000108  00016108  2**2
                  ALLOC
 12 RAM1_region   00000000  20001680  20001680  000155d8  2**0
                  CONTENTS
 13 RAM2_region   00000000  20009000  20009000  000155d8  2**0
                  CONTENTS
 14 ._user_heap_stack 00000a00  20001680  20001680  00016108  2**0
                  ALLOC
 15 .ARM.attributes 0000002a  00000000  00000000  000155d8  2**0
                  CONTENTS, READONLY
 16 .debug_info   00056b13  00000000  00000000  00015602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000bb01  00000000  00000000  0006c115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loclists 0001919d  00000000  00000000  00077c16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002ce8  00000000  00000000  00090db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00002433  00000000  00000000  00093aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002bb26  00000000  00000000  00095ed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0004dc45  00000000  00000000  000c19f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000e0bad  00000000  00000000  0010f63e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000043  00000000  00000000  001f01eb  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00007c10  00000000  00000000  001f0230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 000000b8  00000000  00000000  001f7e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000108 	.word	0x20000108
 8000154:	00000000 	.word	0x00000000
 8000158:	08012388 	.word	0x08012388

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000010c 	.word	0x2000010c
 8000174:	08012388 	.word	0x08012388

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	@ 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	@ 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_fmul>:
 800087c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000880:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000884:	bf1e      	ittt	ne
 8000886:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800088a:	ea92 0f0c 	teqne	r2, ip
 800088e:	ea93 0f0c 	teqne	r3, ip
 8000892:	d06f      	beq.n	8000974 <__aeabi_fmul+0xf8>
 8000894:	441a      	add	r2, r3
 8000896:	ea80 0c01 	eor.w	ip, r0, r1
 800089a:	0240      	lsls	r0, r0, #9
 800089c:	bf18      	it	ne
 800089e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008a2:	d01e      	beq.n	80008e2 <__aeabi_fmul+0x66>
 80008a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80008a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b0:	fba0 3101 	umull	r3, r1, r0, r1
 80008b4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80008b8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80008bc:	bf3e      	ittt	cc
 80008be:	0049      	lslcc	r1, r1, #1
 80008c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008c4:	005b      	lslcc	r3, r3, #1
 80008c6:	ea40 0001 	orr.w	r0, r0, r1
 80008ca:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80008ce:	2afd      	cmp	r2, #253	@ 0xfd
 80008d0:	d81d      	bhi.n	800090e <__aeabi_fmul+0x92>
 80008d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80008d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008da:	bf08      	it	eq
 80008dc:	f020 0001 	biceq.w	r0, r0, #1
 80008e0:	4770      	bx	lr
 80008e2:	f090 0f00 	teq	r0, #0
 80008e6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80008ea:	bf08      	it	eq
 80008ec:	0249      	lsleq	r1, r1, #9
 80008ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008f6:	3a7f      	subs	r2, #127	@ 0x7f
 80008f8:	bfc2      	ittt	gt
 80008fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80008fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000902:	4770      	bxgt	lr
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	3a01      	subs	r2, #1
 800090e:	dc5d      	bgt.n	80009cc <__aeabi_fmul+0x150>
 8000910:	f112 0f19 	cmn.w	r2, #25
 8000914:	bfdc      	itt	le
 8000916:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800091a:	4770      	bxle	lr
 800091c:	f1c2 0200 	rsb	r2, r2, #0
 8000920:	0041      	lsls	r1, r0, #1
 8000922:	fa21 f102 	lsr.w	r1, r1, r2
 8000926:	f1c2 0220 	rsb	r2, r2, #32
 800092a:	fa00 fc02 	lsl.w	ip, r0, r2
 800092e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000932:	f140 0000 	adc.w	r0, r0, #0
 8000936:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800093a:	bf08      	it	eq
 800093c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000940:	4770      	bx	lr
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800094a:	bf02      	ittt	eq
 800094c:	0040      	lsleq	r0, r0, #1
 800094e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000952:	3a01      	subeq	r2, #1
 8000954:	d0f9      	beq.n	800094a <__aeabi_fmul+0xce>
 8000956:	ea40 000c 	orr.w	r0, r0, ip
 800095a:	f093 0f00 	teq	r3, #0
 800095e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0049      	lsleq	r1, r1, #1
 8000966:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800096a:	3b01      	subeq	r3, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xe6>
 800096e:	ea41 010c 	orr.w	r1, r1, ip
 8000972:	e78f      	b.n	8000894 <__aeabi_fmul+0x18>
 8000974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	bf18      	it	ne
 800097e:	ea93 0f0c 	teqne	r3, ip
 8000982:	d00a      	beq.n	800099a <__aeabi_fmul+0x11e>
 8000984:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000988:	bf18      	it	ne
 800098a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800098e:	d1d8      	bne.n	8000942 <__aeabi_fmul+0xc6>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000998:	4770      	bx	lr
 800099a:	f090 0f00 	teq	r0, #0
 800099e:	bf17      	itett	ne
 80009a0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80009a4:	4608      	moveq	r0, r1
 80009a6:	f091 0f00 	teqne	r1, #0
 80009aa:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80009ae:	d014      	beq.n	80009da <__aeabi_fmul+0x15e>
 80009b0:	ea92 0f0c 	teq	r2, ip
 80009b4:	d101      	bne.n	80009ba <__aeabi_fmul+0x13e>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d10f      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009ba:	ea93 0f0c 	teq	r3, ip
 80009be:	d103      	bne.n	80009c8 <__aeabi_fmul+0x14c>
 80009c0:	024b      	lsls	r3, r1, #9
 80009c2:	bf18      	it	ne
 80009c4:	4608      	movne	r0, r1
 80009c6:	d108      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009c8:	ea80 0001 	eor.w	r0, r0, r1
 80009cc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009d8:	4770      	bx	lr
 80009da:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009de:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_fdiv>:
 80009e4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80009e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009ec:	bf1e      	ittt	ne
 80009ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f2:	ea92 0f0c 	teqne	r2, ip
 80009f6:	ea93 0f0c 	teqne	r3, ip
 80009fa:	d069      	beq.n	8000ad0 <__aeabi_fdiv+0xec>
 80009fc:	eba2 0203 	sub.w	r2, r2, r3
 8000a00:	ea80 0c01 	eor.w	ip, r0, r1
 8000a04:	0249      	lsls	r1, r1, #9
 8000a06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a0a:	d037      	beq.n	8000a7c <__aeabi_fdiv+0x98>
 8000a0c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000a10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a18:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	bf38      	it	cc
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000a26:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	bf24      	itt	cs
 8000a2e:	1a5b      	subcs	r3, r3, r1
 8000a30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a38:	bf24      	itt	cs
 8000a3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a46:	bf24      	itt	cs
 8000a48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a54:	bf24      	itt	cs
 8000a56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	bf18      	it	ne
 8000a62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a66:	d1e0      	bne.n	8000a2a <__aeabi_fdiv+0x46>
 8000a68:	2afd      	cmp	r2, #253	@ 0xfd
 8000a6a:	f63f af50 	bhi.w	800090e <__aeabi_fmul+0x92>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000a80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a84:	327f      	adds	r2, #127	@ 0x7f
 8000a86:	bfc2      	ittt	gt
 8000a88:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000a8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a90:	4770      	bxgt	lr
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	e737      	b.n	800090e <__aeabi_fmul+0x92>
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fdiv+0xc2>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xda>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e795      	b.n	80009fc <__aeabi_fdiv+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	d108      	bne.n	8000aec <__aeabi_fdiv+0x108>
 8000ada:	0242      	lsls	r2, r0, #9
 8000adc:	f47f af7d 	bne.w	80009da <__aeabi_fmul+0x15e>
 8000ae0:	ea93 0f0c 	teq	r3, ip
 8000ae4:	f47f af70 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000ae8:	4608      	mov	r0, r1
 8000aea:	e776      	b.n	80009da <__aeabi_fmul+0x15e>
 8000aec:	ea93 0f0c 	teq	r3, ip
 8000af0:	d104      	bne.n	8000afc <__aeabi_fdiv+0x118>
 8000af2:	024b      	lsls	r3, r1, #9
 8000af4:	f43f af4c 	beq.w	8000990 <__aeabi_fmul+0x114>
 8000af8:	4608      	mov	r0, r1
 8000afa:	e76e      	b.n	80009da <__aeabi_fmul+0x15e>
 8000afc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000b00:	bf18      	it	ne
 8000b02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000b06:	d1ca      	bne.n	8000a9e <__aeabi_fdiv+0xba>
 8000b08:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000b0c:	f47f af5c 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000b10:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000b14:	f47f af3c 	bne.w	8000990 <__aeabi_fmul+0x114>
 8000b18:	e75f      	b.n	80009da <__aeabi_fmul+0x15e>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_f2iz>:
 8000b1c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b20:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000b24:	d30f      	bcc.n	8000b46 <__aeabi_f2iz+0x2a>
 8000b26:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000b2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_f2iz+0x30>
 8000b30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b34:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b38:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b3c:	fa23 f002 	lsr.w	r0, r3, r2
 8000b40:	bf18      	it	ne
 8000b42:	4240      	negne	r0, r0
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0000 	mov.w	r0, #0
 8000b4a:	4770      	bx	lr
 8000b4c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000b50:	d101      	bne.n	8000b56 <__aeabi_f2iz+0x3a>
 8000b52:	0242      	lsls	r2, r0, #9
 8000b54:	d105      	bne.n	8000b62 <__aeabi_f2iz+0x46>
 8000b56:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000b5a:	bf08      	it	eq
 8000b5c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0000 	mov.w	r0, #0
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_f2uiz>:
 8000b68:	0042      	lsls	r2, r0, #1
 8000b6a:	d20e      	bcs.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b6c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000b70:	d30b      	bcc.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b72:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000b76:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b7a:	d409      	bmi.n	8000b90 <__aeabi_f2uiz+0x28>
 8000b7c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b80:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b84:	fa23 f002 	lsr.w	r0, r3, r2
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0000 	mov.w	r0, #0
 8000b8e:	4770      	bx	lr
 8000b90:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000b94:	d101      	bne.n	8000b9a <__aeabi_f2uiz+0x32>
 8000b96:	0242      	lsls	r2, r0, #9
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_f2uiz+0x38>
 8000b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000ed4:	b508      	push	{r3, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000ed6:	4813      	ldr	r0, [pc, #76]	@ (8000f24 <MX_ADC_Init+0x50>)
 8000ed8:	4b13      	ldr	r3, [pc, #76]	@ (8000f28 <MX_ADC_Init+0x54>)
 8000eda:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000edc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000ee0:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ee6:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ee8:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eea:	2204      	movs	r2, #4
 8000eec:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000eee:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000ef0:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000ef2:	7683      	strb	r3, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	61c2      	str	r2, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000ef8:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000efc:	6243      	str	r3, [r0, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000efe:	6283      	str	r3, [r0, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000f00:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f04:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f08:	6302      	str	r2, [r0, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000f0a:	2207      	movs	r2, #7
 8000f0c:	6342      	str	r2, [r0, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000f0e:	6382      	str	r2, [r0, #56]	@ 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000f10:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000f14:	64c3      	str	r3, [r0, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000f16:	f001 fe39 	bl	8002b8c <HAL_ADC_Init>
 8000f1a:	b900      	cbnz	r0, 8000f1e <MX_ADC_Init+0x4a>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000f1c:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000f1e:	f000 fb11 	bl	8001544 <Error_Handler>
}
 8000f22:	e7fb      	b.n	8000f1c <MX_ADC_Init+0x48>
 8000f24:	20000124 	.word	0x20000124
 8000f28:	40012400 	.word	0x40012400

08000f2c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8000f2c:	6802      	ldr	r2, [r0, #0]
 8000f2e:	4b09      	ldr	r3, [pc, #36]	@ (8000f54 <HAL_ADC_MspInit+0x28>)
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d000      	beq.n	8000f36 <HAL_ADC_MspInit+0xa>
 8000f34:	4770      	bx	lr
{
 8000f36:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f3c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000f3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000f42:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000f4a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000f4c:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_ADC_CLK_ENABLE();
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000f4e:	b002      	add	sp, #8
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	40012400 	.word	0x40012400

08000f58 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8000f58:	6802      	ldr	r2, [r0, #0]
 8000f5a:	4b05      	ldr	r3, [pc, #20]	@ (8000f70 <HAL_ADC_MspDeInit+0x18>)
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d000      	beq.n	8000f62 <HAL_ADC_MspDeInit+0xa>
    __HAL_RCC_ADC_CLK_DISABLE();
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000f60:	4770      	bx	lr
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000f62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f66:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8000f68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000f6c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f6e:	e7f7      	b.n	8000f60 <HAL_ADC_MspDeInit+0x8>
 8000f70:	40012400 	.word	0x40012400

08000f74 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8000f74:	b530      	push	{r4, r5, lr}
 8000f76:	b085      	sub	sp, #20
 8000f78:	4604      	mov	r4, r0
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	9301      	str	r3, [sp, #4]
 8000f7e:	9302      	str	r3, [sp, #8]
 8000f80:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 8000f82:	f7ff ffa7 	bl	8000ed4 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8000f86:	4816      	ldr	r0, [pc, #88]	@ (8000fe0 <ADC_ReadChannels+0x6c>)
 8000f88:	f002 fa38 	bl	80033fc <HAL_ADCEx_Calibration_Start>
 8000f8c:	b9f8      	cbnz	r0, 8000fce <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8000f8e:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f90:	2300      	movs	r3, #0
 8000f92:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000f94:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f96:	a901      	add	r1, sp, #4
 8000f98:	4811      	ldr	r0, [pc, #68]	@ (8000fe0 <ADC_ReadChannels+0x6c>)
 8000f9a:	f001 ff71 	bl	8002e80 <HAL_ADC_ConfigChannel>
 8000f9e:	b9c8      	cbnz	r0, 8000fd4 <ADC_ReadChannels+0x60>
  {
    Error_Handler();
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8000fa0:	480f      	ldr	r0, [pc, #60]	@ (8000fe0 <ADC_ReadChannels+0x6c>)
 8000fa2:	f002 f92f 	bl	8003204 <HAL_ADC_Start>
 8000fa6:	b9c0      	cbnz	r0, 8000fda <ADC_ReadChannels+0x66>
  {
    /* Start Error */
    Error_Handler();
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000fa8:	4c0d      	ldr	r4, [pc, #52]	@ (8000fe0 <ADC_ReadChannels+0x6c>)
 8000faa:	f04f 31ff 	mov.w	r1, #4294967295
 8000fae:	4620      	mov	r0, r4
 8000fb0:	f001 ff04 	bl	8002dbc <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8000fb4:	4620      	mov	r0, r4
 8000fb6:	f002 fa01 	bl	80033bc <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8000fba:	4620      	mov	r0, r4
 8000fbc:	f001 ff5d 	bl	8002e7a <HAL_ADC_GetValue>
 8000fc0:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 8000fc2:	4620      	mov	r0, r4
 8000fc4:	f002 f99a 	bl	80032fc <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8000fc8:	4628      	mov	r0, r5
 8000fca:	b005      	add	sp, #20
 8000fcc:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8000fce:	f000 fab9 	bl	8001544 <Error_Handler>
 8000fd2:	e7dc      	b.n	8000f8e <ADC_ReadChannels+0x1a>
    Error_Handler();
 8000fd4:	f000 fab6 	bl	8001544 <Error_Handler>
 8000fd8:	e7e2      	b.n	8000fa0 <ADC_ReadChannels+0x2c>
    Error_Handler();
 8000fda:	f000 fab3 	bl	8001544 <Error_Handler>
 8000fde:	e7e3      	b.n	8000fa8 <ADC_ReadChannels+0x34>
 8000fe0:	20000124 	.word	0x20000124

08000fe4 <SYS_InitMeasurement>:
  hadc.Instance = ADC;
 8000fe4:	4b01      	ldr	r3, [pc, #4]	@ (8000fec <SYS_InitMeasurement+0x8>)
 8000fe6:	4a02      	ldr	r2, [pc, #8]	@ (8000ff0 <SYS_InitMeasurement+0xc>)
 8000fe8:	601a      	str	r2, [r3, #0]
}
 8000fea:	4770      	bx	lr
 8000fec:	20000124 	.word	0x20000124
 8000ff0:	40012400 	.word	0x40012400

08000ff4 <SYS_GetBatteryLevel>:
{
 8000ff4:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8000ff6:	480d      	ldr	r0, [pc, #52]	@ (800102c <SYS_GetBatteryLevel+0x38>)
 8000ff8:	f7ff ffbc 	bl	8000f74 <ADC_ReadChannels>
  if (measuredLevel == 0)
 8000ffc:	b1a0      	cbz	r0, 8001028 <SYS_GetBatteryLevel+0x34>
 8000ffe:	4603      	mov	r3, r0
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8001000:	4a0b      	ldr	r2, [pc, #44]	@ (8001030 <SYS_GetBatteryLevel+0x3c>)
 8001002:	f8b2 00aa 	ldrh.w	r0, [r2, #170]	@ 0xaa
 8001006:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800100a:	4290      	cmp	r0, r2
 800100c:	d007      	beq.n	800101e <SYS_GetBatteryLevel+0x2a>
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 800100e:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8001012:	fb02 f000 	mul.w	r0, r2, r0
 8001016:	fbb0 f0f3 	udiv	r0, r0, r3
 800101a:	b280      	uxth	r0, r0
 800101c:	e005      	b.n	800102a <SYS_GetBatteryLevel+0x36>
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 800101e:	4805      	ldr	r0, [pc, #20]	@ (8001034 <SYS_GetBatteryLevel+0x40>)
 8001020:	fbb0 f0f3 	udiv	r0, r0, r3
 8001024:	b280      	uxth	r0, r0
 8001026:	e000      	b.n	800102a <SYS_GetBatteryLevel+0x36>
    batteryLevelmV = 0;
 8001028:	2000      	movs	r0, #0
}
 800102a:	bd08      	pop	{r3, pc}
 800102c:	b4002000 	.word	0xb4002000
 8001030:	1fff7500 	.word	0x1fff7500
 8001034:	004c08d8 	.word	0x004c08d8

08001038 <SYS_GetTemperatureLevel>:
{
 8001038:	b510      	push	{r4, lr}
 800103a:	b082      	sub	sp, #8
  __IO int16_t temperatureDegreeC = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8001042:	f7ff ffd7 	bl	8000ff4 <SYS_GetBatteryLevel>
 8001046:	4604      	mov	r4, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8001048:	4821      	ldr	r0, [pc, #132]	@ (80010d0 <SYS_GetTemperatureLevel+0x98>)
 800104a:	f7ff ff93 	bl	8000f74 <ADC_ReadChannels>
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 800104e:	4b21      	ldr	r3, [pc, #132]	@ (80010d4 <SYS_GetTemperatureLevel+0x9c>)
 8001050:	f8b3 20c8 	ldrh.w	r2, [r3, #200]	@ 0xc8
 8001054:	f8b3 10a8 	ldrh.w	r1, [r3, #168]	@ 0xa8
 8001058:	428a      	cmp	r2, r1
 800105a:	d01d      	beq.n	8001098 <SYS_GetTemperatureLevel+0x60>
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 800105c:	fb00 f304 	mul.w	r3, r0, r4
 8001060:	089b      	lsrs	r3, r3, #2
 8001062:	481d      	ldr	r0, [pc, #116]	@ (80010d8 <SYS_GetTemperatureLevel+0xa0>)
 8001064:	fba0 0303 	umull	r0, r3, r0, r3
 8001068:	ebc1 1353 	rsb	r3, r1, r3, lsr #5
 800106c:	2064      	movs	r0, #100	@ 0x64
 800106e:	fb00 f303 	mul.w	r3, r0, r3
 8001072:	1a52      	subs	r2, r2, r1
 8001074:	fb93 f3f2 	sdiv	r3, r3, r2
 8001078:	331e      	adds	r3, #30
 800107a:	b21b      	sxth	r3, r3
 800107c:	f8ad 3006 	strh.w	r3, [sp, #6]
  temperatureDegreeC <<= 8;
 8001080:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001084:	b21b      	sxth	r3, r3
 8001086:	021b      	lsls	r3, r3, #8
 8001088:	b21b      	sxth	r3, r3
 800108a:	f8ad 3006 	strh.w	r3, [sp, #6]
  return (int16_t) temperatureDegreeC;
 800108e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
 8001092:	b200      	sxth	r0, r0
 8001094:	b002      	add	sp, #8
 8001096:	bd10      	pop	{r4, pc}
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8001098:	fb04 f000 	mul.w	r0, r4, r0
 800109c:	4b0f      	ldr	r3, [pc, #60]	@ (80010dc <SYS_GetTemperatureLevel+0xa4>)
 800109e:	fba3 2300 	umull	r2, r3, r3, r0
 80010a2:	1ac4      	subs	r4, r0, r3
 80010a4:	eb03 0354 	add.w	r3, r3, r4, lsr #1
 80010a8:	0adb      	lsrs	r3, r3, #11
 80010aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010ae:	fb02 f303 	mul.w	r3, r2, r3
 80010b2:	f5a3 2339 	sub.w	r3, r3, #757760	@ 0xb9000
 80010b6:	f5a3 630c 	sub.w	r3, r3, #2240	@ 0x8c0
 80010ba:	4a09      	ldr	r2, [pc, #36]	@ (80010e0 <SYS_GetTemperatureLevel+0xa8>)
 80010bc:	fb82 1203 	smull	r1, r2, r2, r3
 80010c0:	17db      	asrs	r3, r3, #31
 80010c2:	ebc3 23a2 	rsb	r3, r3, r2, asr #10
 80010c6:	331e      	adds	r3, #30
 80010c8:	b21b      	sxth	r3, r3
 80010ca:	f8ad 3006 	strh.w	r3, [sp, #6]
 80010ce:	e7d7      	b.n	8001080 <SYS_GetTemperatureLevel+0x48>
 80010d0:	b0001000 	.word	0xb0001000
 80010d4:	1fff7500 	.word	0x1fff7500
 80010d8:	09ee009f 	.word	0x09ee009f
 80010dc:	00100101 	.word	0x00100101
 80010e0:	68db8bad 	.word	0x68db8bad

080010e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010e4:	b500      	push	{lr}
 80010e6:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 80010e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80010ee:	f042 0204 	orr.w	r2, r2, #4
 80010f2:	649a      	str	r2, [r3, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80010f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80010f6:	f002 0204 	and.w	r2, r2, #4
 80010fa:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80010fc:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80010fe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001100:	f042 0201 	orr.w	r2, r2, #1
 8001104:	649a      	str	r2, [r3, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001106:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800110e:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8001110:	2200      	movs	r2, #0
 8001112:	2102      	movs	r1, #2
 8001114:	200f      	movs	r0, #15
 8001116:	f002 fa77 	bl	8003608 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800111a:	200f      	movs	r0, #15
 800111c:	f002 fa84 	bl	8003628 <HAL_NVIC_EnableIRQ>

}
 8001120:	b003      	add	sp, #12
 8001122:	f85d fb04 	ldr.w	pc, [sp], #4

08001126 <FLASH_IF_INT_IsEmpty>:
  int32_t status = FLASH_IF_MEM_EMPTY;
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 8001126:	2300      	movs	r3, #0
 8001128:	e001      	b.n	800112e <FLASH_IF_INT_IsEmpty+0x8>
    if (*(uint64_t *)pStart != UINT64_MAX)
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
      break;
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 800112a:	3008      	adds	r0, #8
  for (index = 0; index < uLength; index += 8)
 800112c:	3308      	adds	r3, #8
 800112e:	428b      	cmp	r3, r1
 8001130:	d20a      	bcs.n	8001148 <FLASH_IF_INT_IsEmpty+0x22>
    if (*(uint64_t *)pStart != UINT64_MAX)
 8001132:	6842      	ldr	r2, [r0, #4]
 8001134:	f8d0 c000 	ldr.w	ip, [r0]
 8001138:	f1b2 3fff 	cmp.w	r2, #4294967295
 800113c:	bf08      	it	eq
 800113e:	f1bc 3fff 	cmpeq.w	ip, #4294967295
 8001142:	d0f2      	beq.n	800112a <FLASH_IF_INT_IsEmpty+0x4>
      status = FLASH_IF_MEM_NOT_EMPTY;
 8001144:	2001      	movs	r0, #1
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
}
 8001146:	4770      	bx	lr
  int32_t status = FLASH_IF_MEM_EMPTY;
 8001148:	2000      	movs	r0, #0
 800114a:	4770      	bx	lr

0800114c <FLASH_IF_INT_Read>:
  if ((pDestination == NULL) || (pSource == NULL))
 800114c:	b130      	cbz	r0, 800115c <FLASH_IF_INT_Read+0x10>
{
 800114e:	b508      	push	{r3, lr}
  if ((pDestination == NULL) || (pSource == NULL))
 8001150:	b139      	cbz	r1, 8001162 <FLASH_IF_INT_Read+0x16>
  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 8001152:	b292      	uxth	r2, r2
 8001154:	f010 fbb6 	bl	80118c4 <UTIL_MEM_cpy_8>
  return ret_status;
 8001158:	2000      	movs	r0, #0
}
 800115a:	bd08      	pop	{r3, pc}
    return FLASH_IF_PARAM_ERROR;
 800115c:	f06f 0005 	mvn.w	r0, #5
}
 8001160:	4770      	bx	lr
    return FLASH_IF_PARAM_ERROR;
 8001162:	f06f 0005 	mvn.w	r0, #5
 8001166:	e7f8      	b.n	800115a <FLASH_IF_INT_Read+0xe>

08001168 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 8001168:	b508      	push	{r3, lr}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800116a:	f002 fd13 	bl	8003b94 <HAL_FLASH_Unlock>
 800116e:	b978      	cbnz	r0, 8001190 <FLASH_IF_INT_Clear_Error+0x28>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001170:	4b09      	ldr	r3, [pc, #36]	@ (8001198 <FLASH_IF_INT_Clear_Error+0x30>)
 8001172:	699a      	ldr	r2, [r3, #24]
 8001174:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 8001178:	619a      	str	r2, [r3, #24]
 800117a:	f24c 32fa 	movw	r2, #50170	@ 0xc3fa
 800117e:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8001180:	f002 fd20 	bl	8003bc4 <HAL_FLASH_Lock>
 8001184:	b908      	cbnz	r0, 800118a <FLASH_IF_INT_Clear_Error+0x22>
    {
      ret_status = FLASH_IF_OK;
 8001186:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
}
 8001188:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 800118a:	f06f 0004 	mvn.w	r0, #4
 800118e:	e7fb      	b.n	8001188 <FLASH_IF_INT_Clear_Error+0x20>
 8001190:	f06f 0004 	mvn.w	r0, #4
 8001194:	e7f8      	b.n	8001188 <FLASH_IF_INT_Clear_Error+0x20>
 8001196:	bf00      	nop
 8001198:	58004000 	.word	0x58004000

0800119c <FLASH_IF_INT_Erase>:
{
 800119c:	b570      	push	{r4, r5, r6, lr}
 800119e:	b084      	sub	sp, #16
  uint32_t page_error = 0U;
 80011a0:	2300      	movs	r3, #0
 80011a2:	9303      	str	r3, [sp, #12]
  if (pStart == NULL)
 80011a4:	2800      	cmp	r0, #0
 80011a6:	d039      	beq.n	800121c <FLASH_IF_INT_Erase+0x80>
 80011a8:	460e      	mov	r6, r1
 80011aa:	4604      	mov	r4, r0
  ret_status = FLASH_IF_INT_Clear_Error();
 80011ac:	f7ff ffdc 	bl	8001168 <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 80011b0:	4605      	mov	r5, r0
 80011b2:	b110      	cbz	r0, 80011ba <FLASH_IF_INT_Erase+0x1e>
}
 80011b4:	4628      	mov	r0, r5
 80011b6:	b004      	add	sp, #16
 80011b8:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 80011ba:	f002 fceb 	bl	8003b94 <HAL_FLASH_Unlock>
 80011be:	bb80      	cbnz	r0, 8001222 <FLASH_IF_INT_Erase+0x86>
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 80011c0:	2302      	movs	r3, #2
 80011c2:	9300      	str	r3, [sp, #0]
      erase_init.Page = PAGE_INDEX(uStart);
 80011c4:	f104 4378 	add.w	r3, r4, #4160749568	@ 0xf8000000
 80011c8:	4817      	ldr	r0, [pc, #92]	@ (8001228 <FLASH_IF_INT_Erase+0x8c>)
 80011ca:	f8d0 15e0 	ldr.w	r1, [r0, #1504]	@ 0x5e0
 80011ce:	4a17      	ldr	r2, [pc, #92]	@ (800122c <FLASH_IF_INT_Erase+0x90>)
 80011d0:	ea02 2181 	and.w	r1, r2, r1, lsl #10
 80011d4:	fbb3 fcf1 	udiv	ip, r3, r1
 80011d8:	fb01 331c 	mls	r3, r1, ip, r3
 80011dc:	0adb      	lsrs	r3, r3, #11
 80011de:	9301      	str	r3, [sp, #4]
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 80011e0:	19a1      	adds	r1, r4, r6
 80011e2:	f101 4178 	add.w	r1, r1, #4160749568	@ 0xf8000000
 80011e6:	3901      	subs	r1, #1
 80011e8:	f8d0 05e0 	ldr.w	r0, [r0, #1504]	@ 0x5e0
 80011ec:	ea02 2280 	and.w	r2, r2, r0, lsl #10
 80011f0:	fbb1 f0f2 	udiv	r0, r1, r2
 80011f4:	fb02 1110 	mls	r1, r2, r0, r1
 80011f8:	ebc3 23d1 	rsb	r3, r3, r1, lsr #11
 80011fc:	3301      	adds	r3, #1
 80011fe:	9302      	str	r3, [sp, #8]
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8001200:	a903      	add	r1, sp, #12
 8001202:	4668      	mov	r0, sp
 8001204:	f002 fdb4 	bl	8003d70 <HAL_FLASHEx_Erase>
      if (hal_status != HAL_OK)
 8001208:	b118      	cbz	r0, 8001212 <FLASH_IF_INT_Erase+0x76>
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 800120a:	2802      	cmp	r0, #2
 800120c:	d004      	beq.n	8001218 <FLASH_IF_INT_Erase+0x7c>
 800120e:	f06f 0501 	mvn.w	r5, #1
      HAL_FLASH_Lock();
 8001212:	f002 fcd7 	bl	8003bc4 <HAL_FLASH_Lock>
 8001216:	e7cd      	b.n	80011b4 <FLASH_IF_INT_Erase+0x18>
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 8001218:	2501      	movs	r5, #1
 800121a:	e7fa      	b.n	8001212 <FLASH_IF_INT_Erase+0x76>
    return FLASH_IF_PARAM_ERROR;
 800121c:	f06f 0505 	mvn.w	r5, #5
 8001220:	e7c8      	b.n	80011b4 <FLASH_IF_INT_Erase+0x18>
      ret_status = FLASH_IF_LOCK_ERROR;
 8001222:	f06f 0504 	mvn.w	r5, #4
 8001226:	e7c5      	b.n	80011b4 <FLASH_IF_INT_Erase+0x18>
 8001228:	1fff7000 	.word	0x1fff7000
 800122c:	03fffc00 	.word	0x03fffc00

08001230 <FLASH_IF_INT_Write>:
{
 8001230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001234:	b089      	sub	sp, #36	@ 0x24
 8001236:	9003      	str	r0, [sp, #12]
 8001238:	9204      	str	r2, [sp, #16]
  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 800123a:	2800      	cmp	r0, #0
 800123c:	f000 80b4 	beq.w	80013a8 <FLASH_IF_INT_Write+0x178>
 8001240:	4683      	mov	fp, r0
 8001242:	460e      	mov	r6, r1
 8001244:	2900      	cmp	r1, #0
 8001246:	f000 80b3 	beq.w	80013b0 <FLASH_IF_INT_Write+0x180>
 800124a:	f012 0f07 	tst.w	r2, #7
 800124e:	f040 80b3 	bne.w	80013b8 <FLASH_IF_INT_Write+0x188>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 8001252:	f010 0307 	ands.w	r3, r0, #7
 8001256:	9305      	str	r3, [sp, #20]
 8001258:	f040 80b2 	bne.w	80013c0 <FLASH_IF_INT_Write+0x190>
  ret_status = FLASH_IF_INT_Clear_Error();
 800125c:	f7ff ff84 	bl	8001168 <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 8001260:	9001      	str	r0, [sp, #4]
 8001262:	b118      	cbz	r0, 800126c <FLASH_IF_INT_Write+0x3c>
}
 8001264:	9801      	ldr	r0, [sp, #4]
 8001266:	b009      	add	sp, #36	@ 0x24
 8001268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 800126c:	f002 fc92 	bl	8003b94 <HAL_FLASH_Unlock>
 8001270:	2800      	cmp	r0, #0
 8001272:	f040 80a9 	bne.w	80013c8 <FLASH_IF_INT_Write+0x198>
      start_page_index = PAGE_INDEX(uDest);
 8001276:	9c03      	ldr	r4, [sp, #12]
 8001278:	f104 4278 	add.w	r2, r4, #4160749568	@ 0xf8000000
 800127c:	4b54      	ldr	r3, [pc, #336]	@ (80013d0 <FLASH_IF_INT_Write+0x1a0>)
 800127e:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	@ 0x5e0
 8001282:	4954      	ldr	r1, [pc, #336]	@ (80013d4 <FLASH_IF_INT_Write+0x1a4>)
 8001284:	ea01 2183 	and.w	r1, r1, r3, lsl #10
 8001288:	fbb2 f3f1 	udiv	r3, r2, r1
 800128c:	fb01 2213 	mls	r2, r1, r3, r2
 8001290:	0ad3      	lsrs	r3, r2, #11
 8001292:	9306      	str	r3, [sp, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 8001294:	9b04      	ldr	r3, [sp, #16]
 8001296:	18e3      	adds	r3, r4, r3
 8001298:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 800129c:	3b01      	subs	r3, #1
 800129e:	fbb3 f0f1 	udiv	r0, r3, r1
 80012a2:	fb01 3310 	mls	r3, r1, r0, r3
 80012a6:	0adb      	lsrs	r3, r3, #11
 80012a8:	eba3 23d2 	sub.w	r3, r3, r2, lsr #11
 80012ac:	3301      	adds	r3, #1
      if (number_pages > 1)
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d907      	bls.n	80012c2 <FLASH_IF_INT_Write+0x92>
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 80012b2:	f3c4 090a 	ubfx	r9, r4, #0, #11
 80012b6:	f5c9 6900 	rsb	r9, r9, #2048	@ 0x800
            ret_status = FLASH_IF_WRITE_ERROR;
 80012ba:	f8dd a018 	ldr.w	sl, [sp, #24]
 80012be:	9307      	str	r3, [sp, #28]
 80012c0:	e031      	b.n	8001326 <FLASH_IF_INT_Write+0xf6>
  uint32_t length = uLength;
 80012c2:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80012c6:	e7f8      	b.n	80012ba <FLASH_IF_INT_Write+0x8a>
          current_length = length;
 80012c8:	46c8      	mov	r8, r9
          current_source = uSource;
 80012ca:	4637      	mov	r7, r6
          current_dest = uDest;
 80012cc:	465c      	mov	r4, fp
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 80012ce:	9d05      	ldr	r5, [sp, #20]
 80012d0:	f8cd b008 	str.w	fp, [sp, #8]
 80012d4:	4545      	cmp	r5, r8
 80012d6:	d215      	bcs.n	8001304 <FLASH_IF_INT_Write+0xd4>
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 80012d8:	eb05 0b07 	add.w	fp, r5, r7
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 80012dc:	e9db 2300 	ldrd	r2, r3, [fp]
 80012e0:	4621      	mov	r1, r4
 80012e2:	2001      	movs	r0, #1
 80012e4:	f002 fcbc 	bl	8003c60 <HAL_FLASH_Program>
 80012e8:	2800      	cmp	r0, #0
 80012ea:	d147      	bne.n	800137c <FLASH_IF_INT_Write+0x14c>
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 80012ec:	6820      	ldr	r0, [r4, #0]
 80012ee:	6862      	ldr	r2, [r4, #4]
 80012f0:	59e9      	ldr	r1, [r5, r7]
 80012f2:	f8db 3004 	ldr.w	r3, [fp, #4]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	bf08      	it	eq
 80012fa:	4288      	cmpeq	r0, r1
 80012fc:	d144      	bne.n	8001388 <FLASH_IF_INT_Write+0x158>
            current_dest = current_dest + 8U;
 80012fe:	3408      	adds	r4, #8
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001300:	3508      	adds	r5, #8
 8001302:	e7e7      	b.n	80012d4 <FLASH_IF_INT_Write+0xa4>
 8001304:	f8dd b008 	ldr.w	fp, [sp, #8]
        if (ret_status != FLASH_IF_OK)
 8001308:	9b01      	ldr	r3, [sp, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d145      	bne.n	800139a <FLASH_IF_INT_Write+0x16a>
        uDest += length;
 800130e:	44cb      	add	fp, r9
        uSource += length;
 8001310:	444e      	add	r6, r9
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 8001312:	9b04      	ldr	r3, [sp, #16]
 8001314:	eba3 0909 	sub.w	r9, r3, r9
 8001318:	f5b9 6f00 	cmp.w	r9, #2048	@ 0x800
 800131c:	bf28      	it	cs
 800131e:	f44f 6900 	movcs.w	r9, #2048	@ 0x800
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 8001322:	f10a 0a01 	add.w	sl, sl, #1
 8001326:	9b06      	ldr	r3, [sp, #24]
 8001328:	9a07      	ldr	r2, [sp, #28]
 800132a:	4413      	add	r3, r2
 800132c:	4553      	cmp	r3, sl
 800132e:	d934      	bls.n	800139a <FLASH_IF_INT_Write+0x16a>
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 8001330:	f50a 3480 	add.w	r4, sl, #65536	@ 0x10000
 8001334:	02e4      	lsls	r4, r4, #11
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 8001336:	4649      	mov	r1, r9
 8001338:	9803      	ldr	r0, [sp, #12]
 800133a:	f7ff fef4 	bl	8001126 <FLASH_IF_INT_IsEmpty>
 800133e:	2800      	cmp	r0, #0
 8001340:	d0c2      	beq.n	80012c8 <FLASH_IF_INT_Write+0x98>
          if (pAllocatedBuffer == NULL)
 8001342:	4b25      	ldr	r3, [pc, #148]	@ (80013d8 <FLASH_IF_INT_Write+0x1a8>)
 8001344:	6818      	ldr	r0, [r3, #0]
 8001346:	b328      	cbz	r0, 8001394 <FLASH_IF_INT_Write+0x164>
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 8001348:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800134c:	4621      	mov	r1, r4
 800134e:	f7ff fefd 	bl	800114c <FLASH_IF_INT_Read>
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 8001352:	4b21      	ldr	r3, [pc, #132]	@ (80013d8 <FLASH_IF_INT_Write+0x1a8>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f3cb 000a 	ubfx	r0, fp, #0, #11
 800135a:	fa1f f289 	uxth.w	r2, r9
 800135e:	4631      	mov	r1, r6
 8001360:	4418      	add	r0, r3
 8001362:	f010 faaf 	bl	80118c4 <UTIL_MEM_cpy_8>
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 8001366:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800136a:	4620      	mov	r0, r4
 800136c:	f7ff ff16 	bl	800119c <FLASH_IF_INT_Erase>
 8001370:	b9b0      	cbnz	r0, 80013a0 <FLASH_IF_INT_Write+0x170>
          current_source = (uint32_t)pAllocatedBuffer;
 8001372:	4b19      	ldr	r3, [pc, #100]	@ (80013d8 <FLASH_IF_INT_Write+0x1a8>)
 8001374:	681f      	ldr	r7, [r3, #0]
          current_length = FLASH_PAGE_SIZE;
 8001376:	f44f 6800 	mov.w	r8, #2048	@ 0x800
 800137a:	e7a8      	b.n	80012ce <FLASH_IF_INT_Write+0x9e>
            ret_status = FLASH_IF_WRITE_ERROR;
 800137c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8001380:	f06f 0303 	mvn.w	r3, #3
 8001384:	9301      	str	r3, [sp, #4]
 8001386:	e7bf      	b.n	8001308 <FLASH_IF_INT_Write+0xd8>
              ret_status = FLASH_IF_WRITE_ERROR;
 8001388:	f8dd b008 	ldr.w	fp, [sp, #8]
 800138c:	f06f 0303 	mvn.w	r3, #3
 8001390:	9301      	str	r3, [sp, #4]
 8001392:	e7b9      	b.n	8001308 <FLASH_IF_INT_Write+0xd8>
            ret_status = FLASH_IF_PARAM_ERROR;
 8001394:	f06f 0305 	mvn.w	r3, #5
 8001398:	9301      	str	r3, [sp, #4]
      HAL_FLASH_Lock();
 800139a:	f002 fc13 	bl	8003bc4 <HAL_FLASH_Lock>
 800139e:	e761      	b.n	8001264 <FLASH_IF_INT_Write+0x34>
            ret_status = FLASH_IF_ERASE_ERROR;
 80013a0:	f06f 0301 	mvn.w	r3, #1
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	e7f8      	b.n	800139a <FLASH_IF_INT_Write+0x16a>
    return FLASH_IF_PARAM_ERROR;
 80013a8:	f06f 0305 	mvn.w	r3, #5
 80013ac:	9301      	str	r3, [sp, #4]
 80013ae:	e759      	b.n	8001264 <FLASH_IF_INT_Write+0x34>
 80013b0:	f06f 0305 	mvn.w	r3, #5
 80013b4:	9301      	str	r3, [sp, #4]
 80013b6:	e755      	b.n	8001264 <FLASH_IF_INT_Write+0x34>
 80013b8:	f06f 0305 	mvn.w	r3, #5
 80013bc:	9301      	str	r3, [sp, #4]
 80013be:	e751      	b.n	8001264 <FLASH_IF_INT_Write+0x34>
 80013c0:	f06f 0305 	mvn.w	r3, #5
 80013c4:	9301      	str	r3, [sp, #4]
 80013c6:	e74d      	b.n	8001264 <FLASH_IF_INT_Write+0x34>
      ret_status = FLASH_IF_LOCK_ERROR;
 80013c8:	f06f 0304 	mvn.w	r3, #4
 80013cc:	9301      	str	r3, [sp, #4]
 80013ce:	e749      	b.n	8001264 <FLASH_IF_INT_Write+0x34>
 80013d0:	1fff7000 	.word	0x1fff7000
 80013d4:	03fffc00 	.word	0x03fffc00
 80013d8:	20000188 	.word	0x20000188

080013dc <FLASH_IF_Init>:
  pAllocatedBuffer = (uint8_t *)pAllocRamBuffer;
 80013dc:	4b01      	ldr	r3, [pc, #4]	@ (80013e4 <FLASH_IF_Init+0x8>)
 80013de:	6018      	str	r0, [r3, #0]
}
 80013e0:	2000      	movs	r0, #0
 80013e2:	4770      	bx	lr
 80013e4:	20000188 	.word	0x20000188

080013e8 <FLASH_IF_Write>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 80013e8:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
 80013ec:	d30e      	bcc.n	800140c <FLASH_IF_Write+0x24>
{
 80013ee:	b510      	push	{r4, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 80013f0:	4b09      	ldr	r3, [pc, #36]	@ (8001418 <FLASH_IF_Write+0x30>)
 80013f2:	f8d3 45e0 	ldr.w	r4, [r3, #1504]	@ 0x5e0
 80013f6:	4b09      	ldr	r3, [pc, #36]	@ (800141c <FLASH_IF_Write+0x34>)
 80013f8:	ea03 2384 	and.w	r3, r3, r4, lsl #10
 80013fc:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8001400:	3b01      	subs	r3, #1
 8001402:	4298      	cmp	r0, r3
 8001404:	d805      	bhi.n	8001412 <FLASH_IF_Write+0x2a>
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 8001406:	f7ff ff13 	bl	8001230 <FLASH_IF_INT_Write>
}
 800140a:	bd10      	pop	{r4, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 800140c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001410:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001412:	f04f 30ff 	mov.w	r0, #4294967295
 8001416:	e7f8      	b.n	800140a <FLASH_IF_Write+0x22>
 8001418:	1fff7000 	.word	0x1fff7000
 800141c:	03fffc00 	.word	0x03fffc00

08001420 <FLASH_IF_Read>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 8001420:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
 8001424:	d30e      	bcc.n	8001444 <FLASH_IF_Read+0x24>
{
 8001426:	b510      	push	{r4, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 8001428:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <FLASH_IF_Read+0x30>)
 800142a:	f8d3 45e0 	ldr.w	r4, [r3, #1504]	@ 0x5e0
 800142e:	4b09      	ldr	r3, [pc, #36]	@ (8001454 <FLASH_IF_Read+0x34>)
 8001430:	ea03 2384 	and.w	r3, r3, r4, lsl #10
 8001434:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8001438:	3b01      	subs	r3, #1
 800143a:	4299      	cmp	r1, r3
 800143c:	d805      	bhi.n	800144a <FLASH_IF_Read+0x2a>
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 800143e:	f7ff fe85 	bl	800114c <FLASH_IF_INT_Read>
}
 8001442:	bd10      	pop	{r4, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001444:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001448:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 800144a:	f04f 30ff 	mov.w	r0, #4294967295
 800144e:	e7f8      	b.n	8001442 <FLASH_IF_Read+0x22>
 8001450:	1fff7000 	.word	0x1fff7000
 8001454:	03fffc00 	.word	0x03fffc00

08001458 <FLASH_IF_Erase>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 8001458:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
 800145c:	d30e      	bcc.n	800147c <FLASH_IF_Erase+0x24>
{
 800145e:	b508      	push	{r3, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 8001460:	4b09      	ldr	r3, [pc, #36]	@ (8001488 <FLASH_IF_Erase+0x30>)
 8001462:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	@ 0x5e0
 8001466:	4b09      	ldr	r3, [pc, #36]	@ (800148c <FLASH_IF_Erase+0x34>)
 8001468:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 800146c:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8001470:	3b01      	subs	r3, #1
 8001472:	4298      	cmp	r0, r3
 8001474:	d805      	bhi.n	8001482 <FLASH_IF_Erase+0x2a>
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 8001476:	f7ff fe91 	bl	800119c <FLASH_IF_INT_Erase>
}
 800147a:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 800147c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001480:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001482:	f04f 30ff 	mov.w	r0, #4294967295
 8001486:	e7f8      	b.n	800147a <FLASH_IF_Erase+0x22>
 8001488:	1fff7000 	.word	0x1fff7000
 800148c:	03fffc00 	.word	0x03fffc00

08001490 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001492:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	2400      	movs	r4, #0
 8001496:	9403      	str	r4, [sp, #12]
 8001498:	9404      	str	r4, [sp, #16]
 800149a:	9405      	str	r4, [sp, #20]
 800149c:	9406      	str	r4, [sp, #24]
 800149e:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80014a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014a4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014a6:	f042 0202 	orr.w	r2, r2, #2
 80014aa:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014ac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014ae:	f002 0202 	and.w	r2, r2, #2
 80014b2:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80014b4:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80014b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014b8:	f042 0204 	orr.w	r2, r2, #4
 80014bc:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014c0:	f002 0204 	and.w	r2, r2, #4
 80014c4:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80014c6:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80014c8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014ca:	f042 0201 	orr.w	r2, r2, #1
 80014ce:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80014d8:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|PROB2_Pin|PROB1_Pin
 80014da:	4e19      	ldr	r6, [pc, #100]	@ (8001540 <MX_GPIO_Init+0xb0>)
 80014dc:	4622      	mov	r2, r4
 80014de:	f44f 413a 	mov.w	r1, #47616	@ 0xba00
 80014e2:	4630      	mov	r0, r6
 80014e4:	f002 fdd4 	bl	8004090 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80014e8:	f44f 430a 	mov.w	r3, #35328	@ 0x8a00
 80014ec:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ee:	2501      	movs	r5, #1
 80014f0:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014f4:	2702      	movs	r7, #2
 80014f6:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f8:	a903      	add	r1, sp, #12
 80014fa:	4630      	mov	r0, r6
 80014fc:	f002 fc78 	bl	8003df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PROB2_Pin PROB1_Pin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 8001500:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001504:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001506:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150a:	2303      	movs	r3, #3
 800150c:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150e:	a903      	add	r1, sp, #12
 8001510:	4630      	mov	r0, r6
 8001512:	f002 fc6d 	bl	8003df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT2_Pin */
  GPIO_InitStruct.Pin = BUT2_Pin;
 8001516:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001518:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800151c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800151e:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUT2_GPIO_Port, &GPIO_InitStruct);
 8001520:	a903      	add	r1, sp, #12
 8001522:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001526:	f002 fc63 	bl	8003df0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800152a:	4622      	mov	r2, r4
 800152c:	4621      	mov	r1, r4
 800152e:	2007      	movs	r0, #7
 8001530:	f002 f86a 	bl	8003608 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001534:	2007      	movs	r0, #7
 8001536:	f002 f877 	bl	8003628 <HAL_NVIC_EnableIRQ>

}
 800153a:	b009      	add	sp, #36	@ 0x24
 800153c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800153e:	bf00      	nop
 8001540:	48000400 	.word	0x48000400

08001544 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001544:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001546:	e7fe      	b.n	8001546 <Error_Handler+0x2>

08001548 <SystemClock_Config>:
{
 8001548:	b510      	push	{r4, lr}
 800154a:	b09a      	sub	sp, #104	@ 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800154c:	2248      	movs	r2, #72	@ 0x48
 800154e:	2100      	movs	r1, #0
 8001550:	a808      	add	r0, sp, #32
 8001552:	f010 fe55 	bl	8012200 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001556:	2400      	movs	r4, #0
 8001558:	9401      	str	r4, [sp, #4]
 800155a:	9402      	str	r4, [sp, #8]
 800155c:	9403      	str	r4, [sp, #12]
 800155e:	9404      	str	r4, [sp, #16]
 8001560:	9405      	str	r4, [sp, #20]
 8001562:	9406      	str	r4, [sp, #24]
 8001564:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 8001566:	f002 fdaf 	bl	80040c8 <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800156a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800156e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8001572:	f023 0318 	bic.w	r3, r3, #24
 8001576:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800157a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800157e:	6813      	ldr	r3, [r2, #0]
 8001580:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001584:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	6813      	ldr	r3, [r2, #0]
 800158c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001594:	2324      	movs	r3, #36	@ 0x24
 8001596:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001598:	2381      	movs	r3, #129	@ 0x81
 800159a:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800159c:	2301      	movs	r3, #1
 800159e:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80015a0:	9411      	str	r4, [sp, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80015a2:	23b0      	movs	r3, #176	@ 0xb0
 80015a4:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015a6:	9413      	str	r4, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015a8:	a808      	add	r0, sp, #32
 80015aa:	f002 ff27 	bl	80043fc <HAL_RCC_OscConfig>
 80015ae:	b970      	cbnz	r0, 80015ce <SystemClock_Config+0x86>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80015b0:	234f      	movs	r3, #79	@ 0x4f
 80015b2:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80015b4:	2300      	movs	r3, #0
 80015b6:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015b8:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015ba:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015bc:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80015be:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015c0:	2102      	movs	r1, #2
 80015c2:	a801      	add	r0, sp, #4
 80015c4:	f003 fa4c 	bl	8004a60 <HAL_RCC_ClockConfig>
 80015c8:	b918      	cbnz	r0, 80015d2 <SystemClock_Config+0x8a>
}
 80015ca:	b01a      	add	sp, #104	@ 0x68
 80015cc:	bd10      	pop	{r4, pc}
    Error_Handler();
 80015ce:	f7ff ffb9 	bl	8001544 <Error_Handler>
    Error_Handler();
 80015d2:	f7ff ffb7 	bl	8001544 <Error_Handler>

080015d6 <main>:
{
 80015d6:	b508      	push	{r3, lr}
  HAL_Init();
 80015d8:	f001 fa8a 	bl	8002af0 <HAL_Init>
  SystemClock_Config();
 80015dc:	f7ff ffb4 	bl	8001548 <SystemClock_Config>
  MX_GPIO_Init();
 80015e0:	f7ff ff56 	bl	8001490 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 80015e4:	f000 fcf0 	bl	8001fc8 <MX_LoRaWAN_Init>
    MX_LoRaWAN_Process();
 80015e8:	f000 fcf4 	bl	8001fd4 <MX_LoRaWAN_Process>
  while (1)
 80015ec:	e7fc      	b.n	80015e8 <main+0x12>
	...

080015f0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80015f0:	b500      	push	{lr}
 80015f2:	b08d      	sub	sp, #52	@ 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80015f4:	222c      	movs	r2, #44	@ 0x2c
 80015f6:	2100      	movs	r1, #0
 80015f8:	a801      	add	r0, sp, #4
 80015fa:	f010 fe01 	bl	8012200 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015fe:	4819      	ldr	r0, [pc, #100]	@ (8001664 <MX_RTC_Init+0x74>)
 8001600:	4b19      	ldr	r3, [pc, #100]	@ (8001668 <MX_RTC_Init+0x78>)
 8001602:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001604:	231f      	movs	r3, #31
 8001606:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800160c:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800160e:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001610:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001614:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001616:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001618:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800161c:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800161e:	f003 fd69 	bl	80050f4 <HAL_RTC_Init>
 8001622:	b9a8      	cbnz	r0, 8001650 <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001624:	480f      	ldr	r0, [pc, #60]	@ (8001664 <MX_RTC_Init+0x74>)
 8001626:	f003 fea9 	bl	800537c <HAL_RTCEx_SetSSRU_IT>
 800162a:	b9a0      	cbnz	r0, 8001656 <MX_RTC_Init+0x66>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800162c:	2200      	movs	r2, #0
 800162e:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001630:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001632:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001634:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001638:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800163a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800163e:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001640:	a901      	add	r1, sp, #4
 8001642:	4808      	ldr	r0, [pc, #32]	@ (8001664 <MX_RTC_Init+0x74>)
 8001644:	f003 fdbe 	bl	80051c4 <HAL_RTC_SetAlarm_IT>
 8001648:	b940      	cbnz	r0, 800165c <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800164a:	b00d      	add	sp, #52	@ 0x34
 800164c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001650:	f7ff ff78 	bl	8001544 <Error_Handler>
 8001654:	e7e6      	b.n	8001624 <MX_RTC_Init+0x34>
    Error_Handler();
 8001656:	f7ff ff75 	bl	8001544 <Error_Handler>
 800165a:	e7e7      	b.n	800162c <MX_RTC_Init+0x3c>
    Error_Handler();
 800165c:	f7ff ff72 	bl	8001544 <Error_Handler>
}
 8001660:	e7f3      	b.n	800164a <MX_RTC_Init+0x5a>
 8001662:	bf00      	nop
 8001664:	2000018c 	.word	0x2000018c
 8001668:	40002800 	.word	0x40002800

0800166c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800166c:	b510      	push	{r4, lr}
 800166e:	b090      	sub	sp, #64	@ 0x40
 8001670:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001672:	2238      	movs	r2, #56	@ 0x38
 8001674:	2100      	movs	r1, #0
 8001676:	a802      	add	r0, sp, #8
 8001678:	f010 fdc2 	bl	8012200 <memset>
  if(rtcHandle->Instance==RTC)
 800167c:	6822      	ldr	r2, [r4, #0]
 800167e:	4b1a      	ldr	r3, [pc, #104]	@ (80016e8 <HAL_RTC_MspInit+0x7c>)
 8001680:	429a      	cmp	r2, r3
 8001682:	d001      	beq.n	8001688 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001684:	b010      	add	sp, #64	@ 0x40
 8001686:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001688:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800168c:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800168e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001692:	930f      	str	r3, [sp, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001694:	a802      	add	r0, sp, #8
 8001696:	f003 fb47 	bl	8004d28 <HAL_RCCEx_PeriphCLKConfig>
 800169a:	bb08      	cbnz	r0, 80016e0 <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800169c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016a0:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80016a4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80016a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 80016ac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80016ae:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80016b2:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80016b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016ba:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80016bc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	4611      	mov	r1, r2
 80016c2:	2002      	movs	r0, #2
 80016c4:	f001 ffa0 	bl	8003608 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80016c8:	2002      	movs	r0, #2
 80016ca:	f001 ffad 	bl	8003628 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	4611      	mov	r1, r2
 80016d2:	202a      	movs	r0, #42	@ 0x2a
 80016d4:	f001 ff98 	bl	8003608 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80016d8:	202a      	movs	r0, #42	@ 0x2a
 80016da:	f001 ffa5 	bl	8003628 <HAL_NVIC_EnableIRQ>
}
 80016de:	e7d1      	b.n	8001684 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 80016e0:	f7ff ff30 	bl	8001544 <Error_Handler>
 80016e4:	e7da      	b.n	800169c <HAL_RTC_MspInit+0x30>
 80016e6:	bf00      	nop
 80016e8:	40002800 	.word	0x40002800

080016ec <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80016ec:	4770      	bx	lr

080016ee <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80016ee:	4770      	bx	lr

080016f0 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 80016f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 80016f2:	f001 fa13 	bl	8002b1c <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 80016f6:	2001      	movs	r0, #1
 80016f8:	4b02      	ldr	r3, [pc, #8]	@ (8001704 <PWR_EnterStopMode+0x14>)
 80016fa:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80016fe:	f002 fd47 	bl	8004190 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001702:	bd08      	pop	{r3, pc}
 8001704:	58000400 	.word	0x58000400

08001708 <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 8001708:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 800170a:	f001 fa0e 	bl	8002b2a <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 800170e:	bd08      	pop	{r3, pc}

08001710 <PWR_ExitStopMode>:
{
 8001710:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 8001712:	f001 fa0a 	bl	8002b2a <HAL_ResumeTick>
  vcom_Resume();
 8001716:	f000 fc17 	bl	8001f48 <vcom_Resume>
}
 800171a:	bd08      	pop	{r3, pc}

0800171c <PWR_EnterSleepMode>:
{
 800171c:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 800171e:	f001 f9fd 	bl	8002b1c <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001722:	2101      	movs	r1, #1
 8001724:	2000      	movs	r0, #0
 8001726:	f002 fcd7 	bl	80040d8 <HAL_PWR_EnterSLEEPMode>
}
 800172a:	bd08      	pop	{r3, pc}

0800172c <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800172c:	4770      	bx	lr

0800172e <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800172e:	e7fe      	b.n	800172e <NMI_Handler>

08001730 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <HardFault_Handler>

08001732 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001732:	e7fe      	b.n	8001732 <MemManage_Handler>

08001734 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001734:	e7fe      	b.n	8001734 <BusFault_Handler>

08001736 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001736:	e7fe      	b.n	8001736 <UsageFault_Handler>

08001738 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001738:	4770      	bx	lr

0800173a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800173a:	4770      	bx	lr

0800173c <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800173c:	4770      	bx	lr

0800173e <SysTick_Handler>:

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800173e:	4770      	bx	lr

08001740 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001740:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001742:	4802      	ldr	r0, [pc, #8]	@ (800174c <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 8001744:	f003 fe46 	bl	80053d4 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001748:	bd08      	pop	{r3, pc}
 800174a:	bf00      	nop
 800174c:	2000018c 	.word	0x2000018c

08001750 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001750:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT2_Pin);
 8001752:	2002      	movs	r0, #2
 8001754:	f002 fcaa 	bl	80040ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001758:	bd08      	pop	{r3, pc}
	...

0800175c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800175c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800175e:	4802      	ldr	r0, [pc, #8]	@ (8001768 <DMA1_Channel5_IRQHandler+0xc>)
 8001760:	f002 f966 	bl	8003a30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001764:	bd08      	pop	{r3, pc}
 8001766:	bf00      	nop
 8001768:	200001dc 	.word	0x200001dc

0800176c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 800176c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800176e:	4802      	ldr	r0, [pc, #8]	@ (8001778 <USART2_IRQHandler+0xc>)
 8001770:	f004 faf2 	bl	8005d58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001774:	bd08      	pop	{r3, pc}
 8001776:	bf00      	nop
 8001778:	2000023c 	.word	0x2000023c

0800177c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 800177c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800177e:	4802      	ldr	r0, [pc, #8]	@ (8001788 <RTC_Alarm_IRQHandler+0xc>)
 8001780:	f003 fc32 	bl	8004fe8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001784:	bd08      	pop	{r3, pc}
 8001786:	bf00      	nop
 8001788:	2000018c 	.word	0x2000018c

0800178c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 800178c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 800178e:	4802      	ldr	r0, [pc, #8]	@ (8001798 <SUBGHZ_Radio_IRQHandler+0xc>)
 8001790:	f004 f8d8 	bl	8005944 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001794:	bd08      	pop	{r3, pc}
 8001796:	bf00      	nop
 8001798:	200001c4 	.word	0x200001c4

0800179c <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 800179c:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 800179e:	4805      	ldr	r0, [pc, #20]	@ (80017b4 <MX_SUBGHZ_Init+0x18>)
 80017a0:	2308      	movs	r3, #8
 80017a2:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80017a4:	f003 fe4c 	bl	8005440 <HAL_SUBGHZ_Init>
 80017a8:	b900      	cbnz	r0, 80017ac <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80017aa:	bd08      	pop	{r3, pc}
    Error_Handler();
 80017ac:	f7ff feca 	bl	8001544 <Error_Handler>
}
 80017b0:	e7fb      	b.n	80017aa <MX_SUBGHZ_Init+0xe>
 80017b2:	bf00      	nop
 80017b4:	200001c4 	.word	0x200001c4

080017b8 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80017b8:	b500      	push	{lr}
 80017ba:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80017bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017c0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80017c2:	f042 0201 	orr.w	r2, r2, #1
 80017c6:	665a      	str	r2, [r3, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80017c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80017d0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	4611      	mov	r1, r2
 80017d6:	2032      	movs	r0, #50	@ 0x32
 80017d8:	f001 ff16 	bl	8003608 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80017dc:	2032      	movs	r0, #50	@ 0x32
 80017de:	f001 ff23 	bl	8003628 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80017e2:	b003      	add	sp, #12
 80017e4:	f85d fb04 	ldr.w	pc, [sp], #4

080017e8 <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80017e8:	b40c      	push	{r2, r3}
 80017ea:	b500      	push	{lr}
 80017ec:	b083      	sub	sp, #12
 80017ee:	ab04      	add	r3, sp, #16
 80017f0:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 80017f4:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80017f6:	f010 fc3f 	bl	8012078 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80017fa:	b003      	add	sp, #12
 80017fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8001800:	b002      	add	sp, #8
 8001802:	4770      	bx	lr

08001804 <TimestampNow>:
{
 8001804:	b530      	push	{r4, r5, lr}
 8001806:	b085      	sub	sp, #20
 8001808:	4604      	mov	r4, r0
 800180a:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 800180c:	a802      	add	r0, sp, #8
 800180e:	f010 f9a7 	bl	8011b60 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001812:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	9b02      	ldr	r3, [sp, #8]
 800181a:	4a05      	ldr	r2, [pc, #20]	@ (8001830 <TimestampNow+0x2c>)
 800181c:	2110      	movs	r1, #16
 800181e:	4620      	mov	r0, r4
 8001820:	f7ff ffe2 	bl	80017e8 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001824:	4620      	mov	r0, r4
 8001826:	f7fe fca7 	bl	8000178 <strlen>
 800182a:	8028      	strh	r0, [r5, #0]
}
 800182c:	b005      	add	sp, #20
 800182e:	bd30      	pop	{r4, r5, pc}
 8001830:	0801242c 	.word	0x0801242c

08001834 <SystemApp_Init>:
{
 8001834:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001836:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800183a:	6893      	ldr	r3, [r2, #8]
 800183c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001840:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 8001842:	f010 fa11 	bl	8011c68 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001846:	2401      	movs	r4, #1
 8001848:	4b0d      	ldr	r3, [pc, #52]	@ (8001880 <SystemApp_Init+0x4c>)
 800184a:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 800184c:	f000 f8bc 	bl	80019c8 <DBG_Init>
  UTIL_ADV_TRACE_Init();
 8001850:	f00f feae 	bl	80115b0 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001854:	480b      	ldr	r0, [pc, #44]	@ (8001884 <SystemApp_Init+0x50>)
 8001856:	f00f fec5 	bl	80115e4 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800185a:	4b0b      	ldr	r3, [pc, #44]	@ (8001888 <SystemApp_Init+0x54>)
 800185c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001860:	611a      	str	r2, [r3, #16]
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001862:	2002      	movs	r0, #2
 8001864:	f00f fec4 	bl	80115f0 <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 8001868:	f7ff fbbc 	bl	8000fe4 <SYS_InitMeasurement>
  EnvSensors_Init();
 800186c:	f000 f90c 	bl	8001a88 <EnvSensors_Init>
  UTIL_LPM_Init();
 8001870:	f00f ffce 	bl	8011810 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001874:	4621      	mov	r1, r4
 8001876:	4620      	mov	r0, r4
 8001878:	f00f ffea 	bl	8011850 <UTIL_LPM_SetOffMode>
}
 800187c:	bd10      	pop	{r4, pc}
 800187e:	bf00      	nop
 8001880:	200001d0 	.word	0x200001d0
 8001884:	08001805 	.word	0x08001805
 8001888:	58004000 	.word	0x58004000

0800188c <UTIL_SEQ_Idle>:
{
 800188c:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 800188e:	f00f fff5 	bl	801187c <UTIL_LPM_EnterLowPower>
}
 8001892:	bd08      	pop	{r3, pc}

08001894 <GetBatteryLevel>:
{
 8001894:	b508      	push	{r3, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001896:	f7ff fbad 	bl	8000ff4 <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 800189a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800189e:	4298      	cmp	r0, r3
 80018a0:	d80d      	bhi.n	80018be <GetBatteryLevel+0x2a>
  else if (batteryLevelmV < VDD_MIN)
 80018a2:	f5b0 6fe1 	cmp.w	r0, #1800	@ 0x708
 80018a6:	d30c      	bcc.n	80018c2 <GetBatteryLevel+0x2e>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80018a8:	f5a0 60e1 	sub.w	r0, r0, #1800	@ 0x708
 80018ac:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
 80018b0:	0040      	lsls	r0, r0, #1
 80018b2:	4b05      	ldr	r3, [pc, #20]	@ (80018c8 <GetBatteryLevel+0x34>)
 80018b4:	fba3 3000 	umull	r3, r0, r3, r0
 80018b8:	f3c0 10c7 	ubfx	r0, r0, #7, #8
 80018bc:	e000      	b.n	80018c0 <GetBatteryLevel+0x2c>
    batteryLevel = LORAWAN_MAX_BAT;
 80018be:	20fe      	movs	r0, #254	@ 0xfe
}
 80018c0:	bd08      	pop	{r3, pc}
    batteryLevel = 0;
 80018c2:	2000      	movs	r0, #0
 80018c4:	e7fc      	b.n	80018c0 <GetBatteryLevel+0x2c>
 80018c6:	bf00      	nop
 80018c8:	1b4e81b5 	.word	0x1b4e81b5

080018cc <GetTemperatureLevel>:
{
 80018cc:	b500      	push	{lr}
 80018ce:	b087      	sub	sp, #28
  EnvSensors_Read(&sensor_data);
 80018d0:	4668      	mov	r0, sp
 80018d2:	f000 f8bd 	bl	8001a50 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 80018d6:	9801      	ldr	r0, [sp, #4]
 80018d8:	f7ff f920 	bl	8000b1c <__aeabi_f2iz>
}
 80018dc:	b200      	sxth	r0, r0
 80018de:	b007      	add	sp, #28
 80018e0:	f85d fb04 	ldr.w	pc, [sp], #4

080018e4 <GetUniqueId>:
{
 80018e4:	b538      	push	{r3, r4, r5, lr}
 80018e6:	4604      	mov	r4, r0
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80018e8:	4b18      	ldr	r3, [pc, #96]	@ (800194c <GetUniqueId+0x68>)
 80018ea:	f8d3 3580 	ldr.w	r3, [r3, #1408]	@ 0x580
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 80018ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018f2:	d013      	beq.n	800191c <GetUniqueId+0x38>
    id[7] = val & 0xFF;
 80018f4:	71c3      	strb	r3, [r0, #7]
    id[6] = (val >> 8) & 0xFF;
 80018f6:	0a1a      	lsrs	r2, r3, #8
 80018f8:	7182      	strb	r2, [r0, #6]
    id[5] = (val >> 16) & 0xFF;
 80018fa:	0c1a      	lsrs	r2, r3, #16
 80018fc:	7142      	strb	r2, [r0, #5]
    id[4] = (val >> 24) & 0xFF;
 80018fe:	0e1b      	lsrs	r3, r3, #24
 8001900:	7103      	strb	r3, [r0, #4]
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001902:	4b12      	ldr	r3, [pc, #72]	@ (800194c <GetUniqueId+0x68>)
 8001904:	f8d3 2584 	ldr.w	r2, [r3, #1412]	@ 0x584
    id[3] = val & 0xFF;
 8001908:	70c2      	strb	r2, [r0, #3]
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800190a:	f8d3 3584 	ldr.w	r3, [r3, #1412]	@ 0x584
 800190e:	0a1a      	lsrs	r2, r3, #8
    id[2] = val & 0xFF;
 8001910:	7082      	strb	r2, [r0, #2]
    id[1] = (val >> 8) & 0xFF;
 8001912:	0c1a      	lsrs	r2, r3, #16
 8001914:	7042      	strb	r2, [r0, #1]
    id[0] = (val >> 16) & 0xFF;
 8001916:	0e1b      	lsrs	r3, r3, #24
 8001918:	7003      	strb	r3, [r0, #0]
}
 800191a:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 800191c:	f001 f90c 	bl	8002b38 <HAL_GetUIDw0>
 8001920:	4605      	mov	r5, r0
 8001922:	f001 f915 	bl	8002b50 <HAL_GetUIDw2>
 8001926:	4405      	add	r5, r0
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001928:	f001 f90c 	bl	8002b44 <HAL_GetUIDw1>
    id[7] = (ID_1_3_val) >> 24;
 800192c:	0e2b      	lsrs	r3, r5, #24
 800192e:	71e3      	strb	r3, [r4, #7]
    id[6] = (ID_1_3_val) >> 16;
 8001930:	0c2b      	lsrs	r3, r5, #16
 8001932:	71a3      	strb	r3, [r4, #6]
    id[5] = (ID_1_3_val) >> 8;
 8001934:	0a2b      	lsrs	r3, r5, #8
 8001936:	7163      	strb	r3, [r4, #5]
    id[4] = (ID_1_3_val);
 8001938:	7125      	strb	r5, [r4, #4]
    id[3] = (ID_2_val) >> 24;
 800193a:	0e03      	lsrs	r3, r0, #24
 800193c:	70e3      	strb	r3, [r4, #3]
    id[2] = (ID_2_val) >> 16;
 800193e:	0c03      	lsrs	r3, r0, #16
 8001940:	70a3      	strb	r3, [r4, #2]
    id[1] = (ID_2_val) >> 8;
 8001942:	0a03      	lsrs	r3, r0, #8
 8001944:	7063      	strb	r3, [r4, #1]
    id[0] = (ID_2_val);
 8001946:	7020      	strb	r0, [r4, #0]
 8001948:	e7e7      	b.n	800191a <GetUniqueId+0x36>
 800194a:	bf00      	nop
 800194c:	1fff7000 	.word	0x1fff7000

08001950 <GetDevAddr>:
{
 8001950:	b538      	push	{r3, r4, r5, lr}
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001952:	4b0a      	ldr	r3, [pc, #40]	@ (800197c <GetDevAddr+0x2c>)
 8001954:	f8d3 3580 	ldr.w	r3, [r3, #1408]	@ 0x580
  *devAddr = LL_FLASH_GetUDN();
 8001958:	6003      	str	r3, [r0, #0]
  if (*devAddr == 0xFFFFFFFF)
 800195a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800195e:	d000      	beq.n	8001962 <GetDevAddr+0x12>
}
 8001960:	bd38      	pop	{r3, r4, r5, pc}
 8001962:	4604      	mov	r4, r0
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001964:	f001 f8e8 	bl	8002b38 <HAL_GetUIDw0>
 8001968:	4605      	mov	r5, r0
 800196a:	f001 f8eb 	bl	8002b44 <HAL_GetUIDw1>
 800196e:	4045      	eors	r5, r0
 8001970:	f001 f8ee 	bl	8002b50 <HAL_GetUIDw2>
 8001974:	4045      	eors	r5, r0
 8001976:	6025      	str	r5, [r4, #0]
}
 8001978:	e7f2      	b.n	8001960 <GetDevAddr+0x10>
 800197a:	bf00      	nop
 800197c:	1fff7000 	.word	0x1fff7000

08001980 <UTIL_ADV_TRACE_PreSendHook>:
{
 8001980:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001982:	2101      	movs	r1, #1
 8001984:	2002      	movs	r0, #2
 8001986:	f00f ff4d 	bl	8011824 <UTIL_LPM_SetStopMode>
}
 800198a:	bd08      	pop	{r3, pc}

0800198c <UTIL_ADV_TRACE_PostSendHook>:
{
 800198c:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 800198e:	2100      	movs	r1, #0
 8001990:	2002      	movs	r0, #2
 8001992:	f00f ff47 	bl	8011824 <UTIL_LPM_SetStopMode>
}
 8001996:	bd08      	pop	{r3, pc}

08001998 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001998:	2000      	movs	r0, #0
 800199a:	4770      	bx	lr

0800199c <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 800199c:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 800199e:	4b04      	ldr	r3, [pc, #16]	@ (80019b0 <HAL_GetTick+0x14>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	b90b      	cbnz	r3, 80019a8 <HAL_GetTick+0xc>
  uint32_t ret = 0;
 80019a4:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 80019a6:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 80019a8:	f000 f89a 	bl	8001ae0 <TIMER_IF_GetTimerValue>
 80019ac:	e7fb      	b.n	80019a6 <HAL_GetTick+0xa>
 80019ae:	bf00      	nop
 80019b0:	200001d0 	.word	0x200001d0

080019b4 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80019b4:	b500      	push	{lr}
 80019b6:	b083      	sub	sp, #12
 80019b8:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 80019ba:	9801      	ldr	r0, [sp, #4]
 80019bc:	f000 f976 	bl	8001cac <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80019c0:	b003      	add	sp, #12
 80019c2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080019c8 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 80019c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ca:	b089      	sub	sp, #36	@ 0x24

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 80019cc:	f001 f8c6 	bl	8002b5c <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 80019d0:	f001 f8cc 	bl	8002b6c <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 80019d4:	f001 f8d2 	bl	8002b7c <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 80019d8:	2400      	movs	r4, #0
 80019da:	9403      	str	r4, [sp, #12]
 80019dc:	9404      	str	r4, [sp, #16]
 80019de:	9405      	str	r4, [sp, #20]
 80019e0:	9406      	str	r4, [sp, #24]
 80019e2:	9407      	str	r4, [sp, #28]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 80019e4:	2301      	movs	r3, #1
 80019e6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e8:	2303      	movs	r3, #3
 80019ea:	9306      	str	r3, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80019ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019f0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80019f2:	f042 0202 	orr.w	r2, r2, #2
 80019f6:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80019f8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80019fa:	f002 0202 	and.w	r2, r2, #2
 80019fe:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001a00:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a04:	f042 0202 	orr.w	r2, r2, #2
 8001a08:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001a12:	9b01      	ldr	r3, [sp, #4]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
  PROBE_LINE2_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8001a14:	f44f 5780 	mov.w	r7, #4096	@ 0x1000
 8001a18:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001a1a:	4d0c      	ldr	r5, [pc, #48]	@ (8001a4c <DBG_Init+0x84>)
 8001a1c:	a903      	add	r1, sp, #12
 8001a1e:	4628      	mov	r0, r5
 8001a20:	f002 f9e6 	bl	8003df0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001a24:	f44f 5600 	mov.w	r6, #8192	@ 0x2000
 8001a28:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001a2a:	a903      	add	r1, sp, #12
 8001a2c:	4628      	mov	r0, r5
 8001a2e:	f002 f9df 	bl	8003df0 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8001a32:	4622      	mov	r2, r4
 8001a34:	4639      	mov	r1, r7
 8001a36:	4628      	mov	r0, r5
 8001a38:	f002 fb2a 	bl	8004090 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001a3c:	4622      	mov	r2, r4
 8001a3e:	4631      	mov	r1, r6
 8001a40:	4628      	mov	r0, r5
 8001a42:	f002 fb25 	bl	8004090 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001a46:	b009      	add	sp, #36	@ 0x24
 8001a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	48000400 	.word	0x48000400

08001a50 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8001a50:	b510      	push	{r4, lr}
 8001a52:	4604      	mov	r4, r0
#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &PRESSURE_Value);
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_TEMPERATURE, &TEMPERATURE_Value);
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#else
  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 8001a54:	f7ff faf0 	bl	8001038 <SYS_GetTemperatureLevel>
 8001a58:	f340 200f 	sbfx	r0, r0, #8, #16
 8001a5c:	f7fe feba 	bl	80007d4 <__aeabi_i2f>
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001a60:	4b05      	ldr	r3, [pc, #20]	@ (8001a78 <EnvSensors_Read+0x28>)
 8001a62:	60a3      	str	r3, [r4, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001a64:	6060      	str	r0, [r4, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001a66:	4b05      	ldr	r3, [pc, #20]	@ (8001a7c <EnvSensors_Read+0x2c>)
 8001a68:	6023      	str	r3, [r4, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001a6a:	4b05      	ldr	r3, [pc, #20]	@ (8001a80 <EnvSensors_Read+0x30>)
 8001a6c:	60e3      	str	r3, [r4, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001a6e:	4b05      	ldr	r3, [pc, #20]	@ (8001a84 <EnvSensors_Read+0x34>)
 8001a70:	6123      	str	r3, [r4, #16]

  return 0;
  /* USER CODE END EnvSensors_Read */
}
 8001a72:	2000      	movs	r0, #0
 8001a74:	bd10      	pop	{r4, pc}
 8001a76:	bf00      	nop
 8001a78:	42480000 	.word	0x42480000
 8001a7c:	447a0000 	.word	0x447a0000
 8001a80:	003e090d 	.word	0x003e090d
 8001a84:	000503ab 	.word	0x000503ab

08001a88 <EnvSensors_Init>:
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8001a88:	2000      	movs	r0, #0
 8001a8a:	4770      	bx	lr

08001a8c <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001a8c:	4b06      	ldr	r3, [pc, #24]	@ (8001aa8 <TIMER_IF_SetTimerContext+0x1c>)
 8001a8e:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001a90:	e001      	b.n	8001a96 <TIMER_IF_SetTimerContext+0xa>
 8001a92:	4b05      	ldr	r3, [pc, #20]	@ (8001aa8 <TIMER_IF_SetTimerContext+0x1c>)
 8001a94:	6898      	ldr	r0, [r3, #8]
 8001a96:	4b04      	ldr	r3, [pc, #16]	@ (8001aa8 <TIMER_IF_SetTimerContext+0x1c>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	4283      	cmp	r3, r0
 8001a9c:	d1f9      	bne.n	8001a92 <TIMER_IF_SetTimerContext+0x6>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 8001a9e:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 8001aa0:	4b02      	ldr	r3, [pc, #8]	@ (8001aac <TIMER_IF_SetTimerContext+0x20>)
 8001aa2:	6018      	str	r0, [r3, #0]
}
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40002800 	.word	0x40002800
 8001aac:	200001d4 	.word	0x200001d4

08001ab0 <TIMER_IF_GetTimerContext>:
}
 8001ab0:	4b01      	ldr	r3, [pc, #4]	@ (8001ab8 <TIMER_IF_GetTimerContext+0x8>)
 8001ab2:	6818      	ldr	r0, [r3, #0]
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	200001d4 	.word	0x200001d4

08001abc <TIMER_IF_GetTimerElapsedTime>:
 8001abc:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001abe:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001ac0:	e001      	b.n	8001ac6 <TIMER_IF_GetTimerElapsedTime+0xa>
 8001ac2:	4b05      	ldr	r3, [pc, #20]	@ (8001ad8 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001ac4:	6898      	ldr	r0, [r3, #8]
 8001ac6:	4b04      	ldr	r3, [pc, #16]	@ (8001ad8 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	4283      	cmp	r3, r0
 8001acc:	d1f9      	bne.n	8001ac2 <TIMER_IF_GetTimerElapsedTime+0x6>
  return UINT32_MAX - ssr;
 8001ace:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001ad0:	4b02      	ldr	r3, [pc, #8]	@ (8001adc <TIMER_IF_GetTimerElapsedTime+0x20>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
}
 8001ad4:	1ac0      	subs	r0, r0, r3
 8001ad6:	4770      	bx	lr
 8001ad8:	40002800 	.word	0x40002800
 8001adc:	200001d4 	.word	0x200001d4

08001ae0 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 8001ae0:	4b07      	ldr	r3, [pc, #28]	@ (8001b00 <TIMER_IF_GetTimerValue+0x20>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	b153      	cbz	r3, 8001afc <TIMER_IF_GetTimerValue+0x1c>
 8001ae6:	4b07      	ldr	r3, [pc, #28]	@ (8001b04 <TIMER_IF_GetTimerValue+0x24>)
 8001ae8:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001aea:	e001      	b.n	8001af0 <TIMER_IF_GetTimerValue+0x10>
 8001aec:	4b05      	ldr	r3, [pc, #20]	@ (8001b04 <TIMER_IF_GetTimerValue+0x24>)
 8001aee:	6898      	ldr	r0, [r3, #8]
 8001af0:	4b04      	ldr	r3, [pc, #16]	@ (8001b04 <TIMER_IF_GetTimerValue+0x24>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	4283      	cmp	r3, r0
 8001af6:	d1f9      	bne.n	8001aec <TIMER_IF_GetTimerValue+0xc>
  return UINT32_MAX - ssr;
 8001af8:	43c0      	mvns	r0, r0
 8001afa:	4770      	bx	lr
  uint32_t ret = 0;
 8001afc:	2000      	movs	r0, #0
}
 8001afe:	4770      	bx	lr
 8001b00:	200001d8 	.word	0x200001d8
 8001b04:	40002800 	.word	0x40002800

08001b08 <TIMER_IF_GetMinimumTimeout>:
}
 8001b08:	2003      	movs	r0, #3
 8001b0a:	4770      	bx	lr

08001b0c <TIMER_IF_Convert_ms2Tick>:
{
 8001b0c:	b508      	push	{r3, lr}
 8001b0e:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001b10:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b14:	2300      	movs	r3, #0
 8001b16:	0280      	lsls	r0, r0, #10
 8001b18:	0d89      	lsrs	r1, r1, #22
 8001b1a:	f7ff f845 	bl	8000ba8 <__aeabi_uldivmod>
}
 8001b1e:	bd08      	pop	{r3, pc}

08001b20 <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001b20:	0ec2      	lsrs	r2, r0, #27
 8001b22:	0143      	lsls	r3, r0, #5
 8001b24:	1a1b      	subs	r3, r3, r0
 8001b26:	f162 0200 	sbc.w	r2, r2, #0
 8001b2a:	0092      	lsls	r2, r2, #2
 8001b2c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	181b      	adds	r3, r3, r0
 8001b34:	f142 0000 	adc.w	r0, r2, #0
 8001b38:	00c0      	lsls	r0, r0, #3
 8001b3a:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8001b3e:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 8001b42:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 8001b46:	4770      	bx	lr

08001b48 <TIMER_IF_StopTimer>:
{
 8001b48:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001b4a:	4b07      	ldr	r3, [pc, #28]	@ (8001b68 <TIMER_IF_StopTimer+0x20>)
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	65da      	str	r2, [r3, #92]	@ 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001b50:	4c06      	ldr	r4, [pc, #24]	@ (8001b6c <TIMER_IF_StopTimer+0x24>)
 8001b52:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b56:	4620      	mov	r0, r4
 8001b58:	f003 fa06 	bl	8004f68 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b60:	6323      	str	r3, [r4, #48]	@ 0x30
}
 8001b62:	2000      	movs	r0, #0
 8001b64:	bd10      	pop	{r4, pc}
 8001b66:	bf00      	nop
 8001b68:	40002800 	.word	0x40002800
 8001b6c:	2000018c 	.word	0x2000018c

08001b70 <TIMER_IF_BkUp_Write_MSBticks>:
{
 8001b70:	b508      	push	{r3, lr}
 8001b72:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001b74:	2102      	movs	r1, #2
 8001b76:	4802      	ldr	r0, [pc, #8]	@ (8001b80 <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 8001b78:	f003 fc41 	bl	80053fe <HAL_RTCEx_BKUPWrite>
}
 8001b7c:	bd08      	pop	{r3, pc}
 8001b7e:	bf00      	nop
 8001b80:	2000018c 	.word	0x2000018c

08001b84 <TIMER_IF_Init>:
{
 8001b84:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 8001b86:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc4 <TIMER_IF_Init+0x40>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	b10b      	cbz	r3, 8001b90 <TIMER_IF_Init+0xc>
}
 8001b8c:	2000      	movs	r0, #0
 8001b8e:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001b90:	4c0d      	ldr	r4, [pc, #52]	@ (8001bc8 <TIMER_IF_Init+0x44>)
 8001b92:	f04f 35ff 	mov.w	r5, #4294967295
 8001b96:	6325      	str	r5, [r4, #48]	@ 0x30
    MX_RTC_Init();
 8001b98:	f7ff fd2a 	bl	80015f0 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 8001b9c:	f7ff ffd4 	bl	8001b48 <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001ba0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ba4:	4620      	mov	r0, r4
 8001ba6:	f003 f9df 	bl	8004f68 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001baa:	6325      	str	r5, [r4, #48]	@ 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001bac:	4620      	mov	r0, r4
 8001bae:	f003 fbc5 	bl	800533c <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001bb2:	2000      	movs	r0, #0
 8001bb4:	f7ff ffdc 	bl	8001b70 <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 8001bb8:	f7ff ff68 	bl	8001a8c <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 8001bbc:	4b01      	ldr	r3, [pc, #4]	@ (8001bc4 <TIMER_IF_Init+0x40>)
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	701a      	strb	r2, [r3, #0]
 8001bc2:	e7e3      	b.n	8001b8c <TIMER_IF_Init+0x8>
 8001bc4:	200001d8 	.word	0x200001d8
 8001bc8:	2000018c 	.word	0x2000018c

08001bcc <TIMER_IF_BkUp_Write_Seconds>:
{
 8001bcc:	b508      	push	{r3, lr}
 8001bce:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	4802      	ldr	r0, [pc, #8]	@ (8001bdc <TIMER_IF_BkUp_Write_Seconds+0x10>)
 8001bd4:	f003 fc13 	bl	80053fe <HAL_RTCEx_BKUPWrite>
}
 8001bd8:	bd08      	pop	{r3, pc}
 8001bda:	bf00      	nop
 8001bdc:	2000018c 	.word	0x2000018c

08001be0 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 8001be0:	b508      	push	{r3, lr}
 8001be2:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001be4:	2101      	movs	r1, #1
 8001be6:	4802      	ldr	r0, [pc, #8]	@ (8001bf0 <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 8001be8:	f003 fc09 	bl	80053fe <HAL_RTCEx_BKUPWrite>
}
 8001bec:	bd08      	pop	{r3, pc}
 8001bee:	bf00      	nop
 8001bf0:	2000018c 	.word	0x2000018c

08001bf4 <TIMER_IF_StartTimer>:
{
 8001bf4:	b510      	push	{r4, lr}
 8001bf6:	b08c      	sub	sp, #48	@ 0x30
 8001bf8:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 8001bfa:	222c      	movs	r2, #44	@ 0x2c
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	a801      	add	r0, sp, #4
 8001c00:	f010 fafe 	bl	8012200 <memset>
  TIMER_IF_StopTimer();
 8001c04:	f7ff ffa0 	bl	8001b48 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001c08:	4b0c      	ldr	r3, [pc, #48]	@ (8001c3c <TIMER_IF_StartTimer+0x48>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	441c      	add	r4, r3
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001c12:	43e4      	mvns	r4, r4
 8001c14:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001c16:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001c18:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001c1c:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001c1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c22:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001c24:	2201      	movs	r2, #1
 8001c26:	a901      	add	r1, sp, #4
 8001c28:	4805      	ldr	r0, [pc, #20]	@ (8001c40 <TIMER_IF_StartTimer+0x4c>)
 8001c2a:	f003 facb 	bl	80051c4 <HAL_RTC_SetAlarm_IT>
 8001c2e:	b910      	cbnz	r0, 8001c36 <TIMER_IF_StartTimer+0x42>
}
 8001c30:	2000      	movs	r0, #0
 8001c32:	b00c      	add	sp, #48	@ 0x30
 8001c34:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001c36:	f7ff fc85 	bl	8001544 <Error_Handler>
 8001c3a:	e7f9      	b.n	8001c30 <TIMER_IF_StartTimer+0x3c>
 8001c3c:	200001d4 	.word	0x200001d4
 8001c40:	2000018c 	.word	0x2000018c

08001c44 <TIMER_IF_BkUp_Read_MSBticks>:
{
 8001c44:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8001c46:	2102      	movs	r1, #2
 8001c48:	4801      	ldr	r0, [pc, #4]	@ (8001c50 <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 8001c4a:	f003 fbdf 	bl	800540c <HAL_RTCEx_BKUPRead>
}
 8001c4e:	bd08      	pop	{r3, pc}
 8001c50:	2000018c 	.word	0x2000018c

08001c54 <TIMER_IF_GetTime>:
{
 8001c54:	b538      	push	{r3, r4, r5, lr}
 8001c56:	4605      	mov	r5, r0
 8001c58:	4b0b      	ldr	r3, [pc, #44]	@ (8001c88 <TIMER_IF_GetTime+0x34>)
 8001c5a:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001c5c:	e001      	b.n	8001c62 <TIMER_IF_GetTime+0xe>
 8001c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c88 <TIMER_IF_GetTime+0x34>)
 8001c60:	689c      	ldr	r4, [r3, #8]
 8001c62:	4a09      	ldr	r2, [pc, #36]	@ (8001c88 <TIMER_IF_GetTime+0x34>)
 8001c64:	6892      	ldr	r2, [r2, #8]
 8001c66:	42a2      	cmp	r2, r4
 8001c68:	d1f9      	bne.n	8001c5e <TIMER_IF_GetTime+0xa>
  return UINT32_MAX - ssr;
 8001c6a:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8001c6c:	f7ff ffea 	bl	8001c44 <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8001c70:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8001c72:	0aa4      	lsrs	r4, r4, #10
 8001c74:	ea44 5480 	orr.w	r4, r4, r0, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8001c78:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8001c7c:	f7ff ff50 	bl	8001b20 <TIMER_IF_Convert_Tick2ms>
 8001c80:	8028      	strh	r0, [r5, #0]
}
 8001c82:	4620      	mov	r0, r4
 8001c84:	bd38      	pop	{r3, r4, r5, pc}
 8001c86:	bf00      	nop
 8001c88:	40002800 	.word	0x40002800

08001c8c <TIMER_IF_BkUp_Read_Seconds>:
{
 8001c8c:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8001c8e:	2100      	movs	r1, #0
 8001c90:	4801      	ldr	r0, [pc, #4]	@ (8001c98 <TIMER_IF_BkUp_Read_Seconds+0xc>)
 8001c92:	f003 fbbb 	bl	800540c <HAL_RTCEx_BKUPRead>
}
 8001c96:	bd08      	pop	{r3, pc}
 8001c98:	2000018c 	.word	0x2000018c

08001c9c <TIMER_IF_BkUp_Read_SubSeconds>:
{
 8001c9c:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	4801      	ldr	r0, [pc, #4]	@ (8001ca8 <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 8001ca2:	f003 fbb3 	bl	800540c <HAL_RTCEx_BKUPRead>
}
 8001ca6:	bd08      	pop	{r3, pc}
 8001ca8:	2000018c 	.word	0x2000018c

08001cac <TIMER_IF_DelayMs>:
{
 8001cac:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8001cae:	f7ff ff2d 	bl	8001b0c <TIMER_IF_Convert_ms2Tick>
 8001cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce4 <TIMER_IF_DelayMs+0x38>)
 8001cb4:	6899      	ldr	r1, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001cb6:	e001      	b.n	8001cbc <TIMER_IF_DelayMs+0x10>
 8001cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce4 <TIMER_IF_DelayMs+0x38>)
 8001cba:	6899      	ldr	r1, [r3, #8]
 8001cbc:	4b09      	ldr	r3, [pc, #36]	@ (8001ce4 <TIMER_IF_DelayMs+0x38>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	428b      	cmp	r3, r1
 8001cc2:	d1f9      	bne.n	8001cb8 <TIMER_IF_DelayMs+0xc>
 8001cc4:	e009      	b.n	8001cda <TIMER_IF_DelayMs+0x2e>
 8001cc6:	4b07      	ldr	r3, [pc, #28]	@ (8001ce4 <TIMER_IF_DelayMs+0x38>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	4a06      	ldr	r2, [pc, #24]	@ (8001ce4 <TIMER_IF_DelayMs+0x38>)
 8001ccc:	6892      	ldr	r2, [r2, #8]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d1f9      	bne.n	8001cc6 <TIMER_IF_DelayMs+0x1a>
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001cd2:	1acb      	subs	r3, r1, r3
 8001cd4:	4298      	cmp	r0, r3
 8001cd6:	d903      	bls.n	8001ce0 <TIMER_IF_DelayMs+0x34>
    __NOP();
 8001cd8:	bf00      	nop
 8001cda:	4b02      	ldr	r3, [pc, #8]	@ (8001ce4 <TIMER_IF_DelayMs+0x38>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001cde:	e7f4      	b.n	8001cca <TIMER_IF_DelayMs+0x1e>
}
 8001ce0:	bd08      	pop	{r3, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40002800 	.word	0x40002800

08001ce8 <HAL_RTC_AlarmAEventCallback>:
{
 8001ce8:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8001cea:	f010 f8e1 	bl	8011eb0 <UTIL_TIMER_IRQ_Handler>
}
 8001cee:	bd08      	pop	{r3, pc}

08001cf0 <HAL_RTCEx_SSRUEventCallback>:
{
 8001cf0:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8001cf2:	f7ff ffa7 	bl	8001c44 <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8001cf6:	3001      	adds	r0, #1
 8001cf8:	f7ff ff3a 	bl	8001b70 <TIMER_IF_BkUp_Write_MSBticks>
}
 8001cfc:	bd08      	pop	{r3, pc}
	...

08001d00 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d00:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d02:	4817      	ldr	r0, [pc, #92]	@ (8001d60 <MX_USART2_UART_Init+0x60>)
 8001d04:	4b17      	ldr	r3, [pc, #92]	@ (8001d64 <MX_USART2_UART_Init+0x64>)
 8001d06:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8001d08:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001d0c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d12:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d14:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d16:	220c      	movs	r2, #12
 8001d18:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d1a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d1c:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d1e:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d20:	6243      	str	r3, [r0, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d22:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d24:	f004 ff58 	bl	8006bd8 <HAL_UART_Init>
 8001d28:	b970      	cbnz	r0, 8001d48 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	480c      	ldr	r0, [pc, #48]	@ (8001d60 <MX_USART2_UART_Init+0x60>)
 8001d2e:	f005 f908 	bl	8006f42 <HAL_UARTEx_SetTxFifoThreshold>
 8001d32:	b960      	cbnz	r0, 8001d4e <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d34:	2100      	movs	r1, #0
 8001d36:	480a      	ldr	r0, [pc, #40]	@ (8001d60 <MX_USART2_UART_Init+0x60>)
 8001d38:	f005 f928 	bl	8006f8c <HAL_UARTEx_SetRxFifoThreshold>
 8001d3c:	b950      	cbnz	r0, 8001d54 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8001d3e:	4808      	ldr	r0, [pc, #32]	@ (8001d60 <MX_USART2_UART_Init+0x60>)
 8001d40:	f005 f8db 	bl	8006efa <HAL_UARTEx_EnableFifoMode>
 8001d44:	b948      	cbnz	r0, 8001d5a <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d46:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001d48:	f7ff fbfc 	bl	8001544 <Error_Handler>
 8001d4c:	e7ed      	b.n	8001d2a <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 8001d4e:	f7ff fbf9 	bl	8001544 <Error_Handler>
 8001d52:	e7ef      	b.n	8001d34 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8001d54:	f7ff fbf6 	bl	8001544 <Error_Handler>
 8001d58:	e7f1      	b.n	8001d3e <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8001d5a:	f7ff fbf3 	bl	8001544 <Error_Handler>
}
 8001d5e:	e7f2      	b.n	8001d46 <MX_USART2_UART_Init+0x46>
 8001d60:	2000023c 	.word	0x2000023c
 8001d64:	40004400 	.word	0x40004400

08001d68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d68:	b530      	push	{r4, r5, lr}
 8001d6a:	b097      	sub	sp, #92	@ 0x5c
 8001d6c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6e:	2100      	movs	r1, #0
 8001d70:	9111      	str	r1, [sp, #68]	@ 0x44
 8001d72:	9112      	str	r1, [sp, #72]	@ 0x48
 8001d74:	9113      	str	r1, [sp, #76]	@ 0x4c
 8001d76:	9114      	str	r1, [sp, #80]	@ 0x50
 8001d78:	9115      	str	r1, [sp, #84]	@ 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d7a:	2238      	movs	r2, #56	@ 0x38
 8001d7c:	a803      	add	r0, sp, #12
 8001d7e:	f010 fa3f 	bl	8012200 <memset>
  if(uartHandle->Instance==USART2)
 8001d82:	6822      	ldr	r2, [r4, #0]
 8001d84:	4b2d      	ldr	r3, [pc, #180]	@ (8001e3c <HAL_UART_MspInit+0xd4>)
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d001      	beq.n	8001d8e <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d8a:	b017      	add	sp, #92	@ 0x5c
 8001d8c:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001d92:	4b2b      	ldr	r3, [pc, #172]	@ (8001e40 <HAL_UART_MspInit+0xd8>)
 8001d94:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d96:	a803      	add	r0, sp, #12
 8001d98:	f002 ffc6 	bl	8004d28 <HAL_RCCEx_PeriphCLKConfig>
 8001d9c:	2800      	cmp	r0, #0
 8001d9e:	d144      	bne.n	8001e2a <HAL_UART_MspInit+0xc2>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001da0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001da4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001da6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001daa:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001dac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001dae:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8001db2:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001db4:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001db6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001db8:	f042 0201 	orr.w	r2, r2, #1
 8001dbc:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001dbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001dc6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8001dc8:	230c      	movs	r3, #12
 8001dca:	9311      	str	r3, [sp, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	9312      	str	r3, [sp, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd0:	2500      	movs	r5, #0
 8001dd2:	9513      	str	r5, [sp, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	9314      	str	r3, [sp, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dd8:	2307      	movs	r3, #7
 8001dda:	9315      	str	r3, [sp, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ddc:	a911      	add	r1, sp, #68	@ 0x44
 8001dde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001de2:	f002 f805 	bl	8003df0 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 8001de6:	4817      	ldr	r0, [pc, #92]	@ (8001e44 <HAL_UART_MspInit+0xdc>)
 8001de8:	4b17      	ldr	r3, [pc, #92]	@ (8001e48 <HAL_UART_MspInit+0xe0>)
 8001dea:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001dec:	2314      	movs	r3, #20
 8001dee:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001df0:	2310      	movs	r3, #16
 8001df2:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001df4:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001df6:	2380      	movs	r3, #128	@ 0x80
 8001df8:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dfa:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dfc:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001dfe:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e00:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001e02:	f001 fc89 	bl	8003718 <HAL_DMA_Init>
 8001e06:	b998      	cbnz	r0, 8001e30 <HAL_UART_MspInit+0xc8>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001e08:	2110      	movs	r1, #16
 8001e0a:	480e      	ldr	r0, [pc, #56]	@ (8001e44 <HAL_UART_MspInit+0xdc>)
 8001e0c:	f001 fe84 	bl	8003b18 <HAL_DMA_ConfigChannelAttributes>
 8001e10:	b988      	cbnz	r0, 8001e36 <HAL_UART_MspInit+0xce>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001e12:	4b0c      	ldr	r3, [pc, #48]	@ (8001e44 <HAL_UART_MspInit+0xdc>)
 8001e14:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8001e16:	629c      	str	r4, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	2102      	movs	r1, #2
 8001e1c:	2025      	movs	r0, #37	@ 0x25
 8001e1e:	f001 fbf3 	bl	8003608 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e22:	2025      	movs	r0, #37	@ 0x25
 8001e24:	f001 fc00 	bl	8003628 <HAL_NVIC_EnableIRQ>
}
 8001e28:	e7af      	b.n	8001d8a <HAL_UART_MspInit+0x22>
      Error_Handler();
 8001e2a:	f7ff fb8b 	bl	8001544 <Error_Handler>
 8001e2e:	e7b7      	b.n	8001da0 <HAL_UART_MspInit+0x38>
      Error_Handler();
 8001e30:	f7ff fb88 	bl	8001544 <Error_Handler>
 8001e34:	e7e8      	b.n	8001e08 <HAL_UART_MspInit+0xa0>
      Error_Handler();
 8001e36:	f7ff fb85 	bl	8001544 <Error_Handler>
 8001e3a:	e7ea      	b.n	8001e12 <HAL_UART_MspInit+0xaa>
 8001e3c:	40004400 	.word	0x40004400
 8001e40:	000c0004 	.word	0x000c0004
 8001e44:	200001dc 	.word	0x200001dc
 8001e48:	40020058 	.word	0x40020058

08001e4c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART2)
 8001e4c:	6802      	ldr	r2, [r0, #0]
 8001e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e80 <HAL_UART_MspDeInit+0x34>)
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d000      	beq.n	8001e56 <HAL_UART_MspDeInit+0xa>
 8001e54:	4770      	bx	lr
{
 8001e56:	b510      	push	{r4, lr}
 8001e58:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001e5a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e5e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8001e60:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001e64:	6593      	str	r3, [r2, #88]	@ 0x58

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 8001e66:	210c      	movs	r1, #12
 8001e68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e6c:	f002 f892 	bl	8003f94 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001e70:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8001e72:	f001 fcc1 	bl	80037f8 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001e76:	2025      	movs	r0, #37	@ 0x25
 8001e78:	f001 fbda 	bl	8003630 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8001e7c:	bd10      	pop	{r4, pc}
 8001e7e:	bf00      	nop
 8001e80:	40004400 	.word	0x40004400

08001e84 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8001e84:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8001e86:	4b07      	ldr	r3, [pc, #28]	@ (8001ea4 <vcom_Init+0x20>)
 8001e88:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8001e8a:	f7ff f92b 	bl	80010e4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001e8e:	f7ff ff37 	bl	8001d00 <MX_USART2_UART_Init>
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001e92:	4a05      	ldr	r2, [pc, #20]	@ (8001ea8 <vcom_Init+0x24>)
 8001e94:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8001e98:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001e9c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	bd08      	pop	{r3, pc}
 8001ea4:	200002d4 	.word	0x200002d4
 8001ea8:	58000800 	.word	0x58000800

08001eac <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8001eac:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8001eae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001eb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001eb4:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001eb8:	639a      	str	r2, [r3, #56]	@ 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8001eba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ebc:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8001ec0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8001ec2:	4804      	ldr	r0, [pc, #16]	@ (8001ed4 <vcom_DeInit+0x28>)
 8001ec4:	f7ff ffc2 	bl	8001e4c <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8001ec8:	200f      	movs	r0, #15
 8001eca:	f001 fbb1 	bl	8003630 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8001ece:	2000      	movs	r0, #0
 8001ed0:	bd08      	pop	{r3, pc}
 8001ed2:	bf00      	nop
 8001ed4:	2000023c 	.word	0x2000023c

08001ed8 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8001ed8:	b508      	push	{r3, lr}
 8001eda:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8001edc:	4601      	mov	r1, r0
 8001ede:	4802      	ldr	r0, [pc, #8]	@ (8001ee8 <vcom_Trace_DMA+0x10>)
 8001ee0:	f003 fe76 	bl	8005bd0 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8001ee4:	2000      	movs	r0, #0
 8001ee6:	bd08      	pop	{r3, pc}
 8001ee8:	2000023c 	.word	0x2000023c

08001eec <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8001eec:	b510      	push	{r4, lr}
 8001eee:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8001ef0:	4b12      	ldr	r3, [pc, #72]	@ (8001f3c <vcom_ReceiveInit+0x50>)
 8001ef2:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8001ef4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001ef8:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8001efa:	ab02      	add	r3, sp, #8
 8001efc:	e913 0006 	ldmdb	r3, {r1, r2}
 8001f00:	480f      	ldr	r0, [pc, #60]	@ (8001f40 <vcom_ReceiveInit+0x54>)
 8001f02:	f004 ffa2 	bl	8006e4a <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 8001f06:	4b0e      	ldr	r3, [pc, #56]	@ (8001f40 <vcom_ReceiveInit+0x54>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	69da      	ldr	r2, [r3, #28]
 8001f0c:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8001f10:	d1f9      	bne.n	8001f06 <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8001f12:	69da      	ldr	r2, [r3, #28]
 8001f14:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 8001f18:	d0fb      	beq.n	8001f12 <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8001f20:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 8001f22:	4c07      	ldr	r4, [pc, #28]	@ (8001f40 <vcom_ReceiveInit+0x54>)
 8001f24:	4620      	mov	r0, r4
 8001f26:	f004 ffd1 	bl	8006ecc <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	4905      	ldr	r1, [pc, #20]	@ (8001f44 <vcom_ReceiveInit+0x58>)
 8001f2e:	4620      	mov	r0, r4
 8001f30:	f004 ff24 	bl	8006d7c <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8001f34:	2000      	movs	r0, #0
 8001f36:	b002      	add	sp, #8
 8001f38:	bd10      	pop	{r4, pc}
 8001f3a:	bf00      	nop
 8001f3c:	200002d0 	.word	0x200002d0
 8001f40:	2000023c 	.word	0x2000023c
 8001f44:	200002d8 	.word	0x200002d8

08001f48 <vcom_Resume>:

void vcom_Resume(void)
{
 8001f48:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f4a:	4807      	ldr	r0, [pc, #28]	@ (8001f68 <vcom_Resume+0x20>)
 8001f4c:	f004 fe44 	bl	8006bd8 <HAL_UART_Init>
 8001f50:	b920      	cbnz	r0, 8001f5c <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001f52:	4806      	ldr	r0, [pc, #24]	@ (8001f6c <vcom_Resume+0x24>)
 8001f54:	f001 fbe0 	bl	8003718 <HAL_DMA_Init>
 8001f58:	b918      	cbnz	r0, 8001f62 <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8001f5a:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001f5c:	f7ff faf2 	bl	8001544 <Error_Handler>
 8001f60:	e7f7      	b.n	8001f52 <vcom_Resume+0xa>
    Error_Handler();
 8001f62:	f7ff faef 	bl	8001544 <Error_Handler>
}
 8001f66:	e7f8      	b.n	8001f5a <vcom_Resume+0x12>
 8001f68:	2000023c 	.word	0x2000023c
 8001f6c:	200001dc 	.word	0x200001dc

08001f70 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f70:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 8001f72:	6802      	ldr	r2, [r0, #0]
 8001f74:	4b04      	ldr	r3, [pc, #16]	@ (8001f88 <HAL_UART_TxCpltCallback+0x18>)
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d000      	beq.n	8001f7c <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8001f7a:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 8001f7c:	4b03      	ldr	r3, [pc, #12]	@ (8001f8c <HAL_UART_TxCpltCallback+0x1c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2000      	movs	r0, #0
 8001f82:	4798      	blx	r3
}
 8001f84:	e7f9      	b.n	8001f7a <HAL_UART_TxCpltCallback+0xa>
 8001f86:	bf00      	nop
 8001f88:	40004400 	.word	0x40004400
 8001f8c:	200002d4 	.word	0x200002d4

08001f90 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 8001f90:	6802      	ldr	r2, [r0, #0]
 8001f92:	4b0a      	ldr	r3, [pc, #40]	@ (8001fbc <HAL_UART_RxCpltCallback+0x2c>)
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d000      	beq.n	8001f9a <HAL_UART_RxCpltCallback+0xa>
 8001f98:	4770      	bx	lr
{
 8001f9a:	b510      	push	{r4, lr}
 8001f9c:	4604      	mov	r4, r0
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8001f9e:	4b08      	ldr	r3, [pc, #32]	@ (8001fc0 <HAL_UART_RxCpltCallback+0x30>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	b12b      	cbz	r3, 8001fb0 <HAL_UART_RxCpltCallback+0x20>
 8001fa4:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90
 8001fa8:	b912      	cbnz	r2, 8001fb0 <HAL_UART_RxCpltCallback+0x20>
    {
      RxCpltCallback(&charRx, 1, 0);
 8001faa:	2101      	movs	r1, #1
 8001fac:	4805      	ldr	r0, [pc, #20]	@ (8001fc4 <HAL_UART_RxCpltCallback+0x34>)
 8001fae:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	4904      	ldr	r1, [pc, #16]	@ (8001fc4 <HAL_UART_RxCpltCallback+0x34>)
 8001fb4:	4620      	mov	r0, r4
 8001fb6:	f004 fee1 	bl	8006d7c <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8001fba:	bd10      	pop	{r4, pc}
 8001fbc:	40004400 	.word	0x40004400
 8001fc0:	200002d0 	.word	0x200002d0
 8001fc4:	200002d8 	.word	0x200002d8

08001fc8 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8001fc8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8001fca:	f7ff fc33 	bl	8001834 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8001fce:	f000 fb91 	bl	80026f4 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8001fd2:	bd08      	pop	{r3, pc}

08001fd4 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8001fd4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8001fda:	f00f fcbb 	bl	8011954 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8001fde:	bd08      	pop	{r3, pc}

08001fe0 <__NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001fe0:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001fe4:	4905      	ldr	r1, [pc, #20]	@ (8001ffc <__NVIC_SystemReset+0x1c>)
 8001fe6:	68ca      	ldr	r2, [r1, #12]
 8001fe8:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001fec:	4b04      	ldr	r3, [pc, #16]	@ (8002000 <__NVIC_SystemReset+0x20>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	60cb      	str	r3, [r1, #12]
 8001ff2:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001ff6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8001ff8:	e7fd      	b.n	8001ff6 <__NVIC_SystemReset+0x16>
 8001ffa:	bf00      	nop
 8001ffc:	e000ed00 	.word	0xe000ed00
 8002000:	05fa0004 	.word	0x05fa0004

08002004 <OnSysTimeUpdate>:
static void OnSysTimeUpdate(void)
{
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 8002004:	4770      	bx	lr
	...

08002008 <OnTxFrameCtrlChanged>:
static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 8002008:	4b01      	ldr	r3, [pc, #4]	@ (8002010 <OnTxFrameCtrlChanged+0x8>)
 800200a:	70d8      	strb	r0, [r3, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	2000000c 	.word	0x2000000c

08002014 <OnPingSlotPeriodicityChanged>:
static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 8002014:	4b01      	ldr	r3, [pc, #4]	@ (800201c <OnPingSlotPeriodicityChanged+0x8>)
 8002016:	7418      	strb	r0, [r3, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	2000000c 	.word	0x2000000c

08002020 <OnBeaconStatusChange>:
  if (params != NULL)
 8002020:	2800      	cmp	r0, #0
 8002022:	d03f      	beq.n	80020a4 <OnBeaconStatusChange+0x84>
{
 8002024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002028:	b08c      	sub	sp, #48	@ 0x30
 800202a:	4603      	mov	r3, r0
    switch (params->State)
 800202c:	7842      	ldrb	r2, [r0, #1]
 800202e:	2a02      	cmp	r2, #2
 8002030:	d00a      	beq.n	8002048 <OnBeaconStatusChange+0x28>
 8002032:	2a03      	cmp	r2, #3
 8002034:	d02f      	beq.n	8002096 <OnBeaconStatusChange+0x76>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 8002036:	4b1c      	ldr	r3, [pc, #112]	@ (80020a8 <OnBeaconStatusChange+0x88>)
 8002038:	2200      	movs	r2, #0
 800203a:	4611      	mov	r1, r2
 800203c:	2002      	movs	r0, #2
 800203e:	f00f fb2b 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
}
 8002042:	b00c      	add	sp, #48	@ 0x30
 8002044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        APP_LOG(TS_OFF, VLEVEL_M,
 8002048:	7c02      	ldrb	r2, [r0, #16]
 800204a:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
 800204e:	f990 0014 	ldrsb.w	r0, [r0, #20]
 8002052:	7d9c      	ldrb	r4, [r3, #22]
 8002054:	7ddd      	ldrb	r5, [r3, #23]
 8002056:	7e1e      	ldrb	r6, [r3, #24]
 8002058:	7e5f      	ldrb	r7, [r3, #25]
 800205a:	f893 c01a 	ldrb.w	ip, [r3, #26]
 800205e:	f893 e01b 	ldrb.w	lr, [r3, #27]
 8002062:	f893 801c 	ldrb.w	r8, [r3, #28]
 8002066:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 800206a:	f8cd e028 	str.w	lr, [sp, #40]	@ 0x28
 800206e:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 8002072:	9708      	str	r7, [sp, #32]
 8002074:	9607      	str	r6, [sp, #28]
 8002076:	9506      	str	r5, [sp, #24]
 8002078:	9405      	str	r4, [sp, #20]
 800207a:	685c      	ldr	r4, [r3, #4]
 800207c:	9404      	str	r4, [sp, #16]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	9303      	str	r3, [sp, #12]
 8002082:	9002      	str	r0, [sp, #8]
 8002084:	9101      	str	r1, [sp, #4]
 8002086:	9200      	str	r2, [sp, #0]
 8002088:	4b08      	ldr	r3, [pc, #32]	@ (80020ac <OnBeaconStatusChange+0x8c>)
 800208a:	2200      	movs	r2, #0
 800208c:	4611      	mov	r1, r2
 800208e:	2002      	movs	r0, #2
 8002090:	f00f fb02 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8002094:	e7d5      	b.n	8002042 <OnBeaconStatusChange+0x22>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 8002096:	4b06      	ldr	r3, [pc, #24]	@ (80020b0 <OnBeaconStatusChange+0x90>)
 8002098:	2200      	movs	r2, #0
 800209a:	4611      	mov	r1, r2
 800209c:	2002      	movs	r0, #2
 800209e:	f00f fafb 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
}
 80020a2:	e7ce      	b.n	8002042 <OnBeaconStatusChange+0x22>
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	08012438 	.word	0x08012438
 80020ac:	08012450 	.word	0x08012450
 80020b0:	080124c4 	.word	0x080124c4

080020b4 <OnClassChange>:
{
 80020b4:	b500      	push	{lr}
 80020b6:	b083      	sub	sp, #12
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 80020b8:	4b05      	ldr	r3, [pc, #20]	@ (80020d0 <OnClassChange+0x1c>)
 80020ba:	5c1b      	ldrb	r3, [r3, r0]
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	4b05      	ldr	r3, [pc, #20]	@ (80020d4 <OnClassChange+0x20>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	4611      	mov	r1, r2
 80020c4:	2002      	movs	r0, #2
 80020c6:	f00f fae7 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
}
 80020ca:	b003      	add	sp, #12
 80020cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80020d0:	08012500 	.word	0x08012500
 80020d4:	080124e4 	.word	0x080124e4

080020d8 <OnNvmDataChange>:

  /* USER CODE END StoreContext_Last */
}

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 80020d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 80020da:	2801      	cmp	r0, #1
 80020dc:	d006      	beq.n	80020ec <OnNvmDataChange+0x14>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 80020de:	4b07      	ldr	r3, [pc, #28]	@ (80020fc <OnNvmDataChange+0x24>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	4611      	mov	r1, r2
 80020e4:	2002      	movs	r0, #2
 80020e6:	f00f fad7 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 80020ea:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 80020ec:	4b04      	ldr	r3, [pc, #16]	@ (8002100 <OnNvmDataChange+0x28>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	4611      	mov	r1, r2
 80020f2:	2002      	movs	r0, #2
 80020f4:	f00f fad0 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
 80020f8:	e7f7      	b.n	80020ea <OnNvmDataChange+0x12>
 80020fa:	bf00      	nop
 80020fc:	08012518 	.word	0x08012518
 8002100:	08012504 	.word	0x08012504

08002104 <OnTxTimerEvent>:
{
 8002104:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8002106:	2100      	movs	r1, #0
 8002108:	2002      	movs	r0, #2
 800210a:	f00f fbef 	bl	80118ec <UTIL_SEQ_SetTask>
  UTIL_TIMER_Start(&TxTimer);
 800210e:	4802      	ldr	r0, [pc, #8]	@ (8002118 <OnTxTimerEvent+0x14>)
 8002110:	f00f fe6e 	bl	8011df0 <UTIL_TIMER_Start>
}
 8002114:	bd08      	pop	{r3, pc}
 8002116:	bf00      	nop
 8002118:	20000434 	.word	0x20000434

0800211c <OnMacProcessNotify>:
{
 800211c:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800211e:	2100      	movs	r1, #0
 8002120:	2001      	movs	r0, #1
 8002122:	f00f fbe3 	bl	80118ec <UTIL_SEQ_SetTask>
}
 8002126:	bd08      	pop	{r3, pc}

08002128 <OnSystemReset>:
{
 8002128:	b508      	push	{r3, lr}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800212a:	f005 fc0d 	bl	8007948 <LmHandlerHalt>
 800212e:	b100      	cbz	r0, 8002132 <OnSystemReset+0xa>
}
 8002130:	bd08      	pop	{r3, pc}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002132:	f005 f8c7 	bl	80072c4 <LmHandlerJoinStatus>
 8002136:	2801      	cmp	r0, #1
 8002138:	d1fa      	bne.n	8002130 <OnSystemReset+0x8>
    NVIC_SystemReset();
 800213a:	f7ff ff51 	bl	8001fe0 <__NVIC_SystemReset>
	...

08002140 <OnTxPeriodicityChanged>:
{
 8002140:	b510      	push	{r4, lr}
  TxPeriodicity = periodicity;
 8002142:	4b09      	ldr	r3, [pc, #36]	@ (8002168 <OnTxPeriodicityChanged+0x28>)
 8002144:	6018      	str	r0, [r3, #0]
  if (TxPeriodicity == 0)
 8002146:	b910      	cbnz	r0, 800214e <OnTxPeriodicityChanged+0xe>
    TxPeriodicity = APP_TX_DUTYCYCLE;
 8002148:	f242 7210 	movw	r2, #10000	@ 0x2710
 800214c:	601a      	str	r2, [r3, #0]
  UTIL_TIMER_Stop(&TxTimer);
 800214e:	4c07      	ldr	r4, [pc, #28]	@ (800216c <OnTxPeriodicityChanged+0x2c>)
 8002150:	4620      	mov	r0, r4
 8002152:	f00f fdf3 	bl	8011d3c <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 8002156:	4b04      	ldr	r3, [pc, #16]	@ (8002168 <OnTxPeriodicityChanged+0x28>)
 8002158:	6819      	ldr	r1, [r3, #0]
 800215a:	4620      	mov	r0, r4
 800215c:	f00f fe8e 	bl	8011e7c <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 8002160:	4620      	mov	r0, r4
 8002162:	f00f fe45 	bl	8011df0 <UTIL_TIMER_Start>
}
 8002166:	bd10      	pop	{r4, pc}
 8002168:	20000008 	.word	0x20000008
 800216c:	20000434 	.word	0x20000434

08002170 <OnTxData>:
  if ((params != NULL))
 8002170:	2800      	cmp	r0, #0
 8002172:	d042      	beq.n	80021fa <OnTxData+0x8a>
{
 8002174:	b510      	push	{r4, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	4604      	mov	r4, r0
    if (params->IsMcpsConfirm != 0)
 800217a:	7803      	ldrb	r3, [r0, #0]
 800217c:	b90b      	cbnz	r3, 8002182 <OnTxData+0x12>
}
 800217e:	b004      	add	sp, #16
 8002180:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 8002182:	2201      	movs	r2, #1
 8002184:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002188:	481c      	ldr	r0, [pc, #112]	@ (80021fc <OnTxData+0x8c>)
 800218a:	f001 ff81 	bl	8004090 <HAL_GPIO_WritePin>
      UTIL_TIMER_Start(&TxLedTimer);
 800218e:	481c      	ldr	r0, [pc, #112]	@ (8002200 <OnTxData+0x90>)
 8002190:	f00f fe2e 	bl	8011df0 <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 8002194:	4b1b      	ldr	r3, [pc, #108]	@ (8002204 <OnTxData+0x94>)
 8002196:	2200      	movs	r2, #0
 8002198:	4611      	mov	r1, r2
 800219a:	2002      	movs	r0, #2
 800219c:	f00f fa7c 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 80021a0:	7c23      	ldrb	r3, [r4, #16]
 80021a2:	f994 200a 	ldrsb.w	r2, [r4, #10]
 80021a6:	f994 1018 	ldrsb.w	r1, [r4, #24]
 80021aa:	9103      	str	r1, [sp, #12]
 80021ac:	9202      	str	r2, [sp, #8]
 80021ae:	9301      	str	r3, [sp, #4]
 80021b0:	68e3      	ldr	r3, [r4, #12]
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	4b14      	ldr	r3, [pc, #80]	@ (8002208 <OnTxData+0x98>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	4611      	mov	r1, r2
 80021ba:	2003      	movs	r0, #3
 80021bc:	f00f fa6c 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 80021c0:	4b12      	ldr	r3, [pc, #72]	@ (800220c <OnTxData+0x9c>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	4611      	mov	r1, r2
 80021c6:	2003      	movs	r0, #3
 80021c8:	f00f fa66 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 80021cc:	7a23      	ldrb	r3, [r4, #8]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d10c      	bne.n	80021ec <OnTxData+0x7c>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 80021d2:	7a63      	ldrb	r3, [r4, #9]
 80021d4:	b143      	cbz	r3, 80021e8 <OnTxData+0x78>
 80021d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002210 <OnTxData+0xa0>)
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	4b0e      	ldr	r3, [pc, #56]	@ (8002214 <OnTxData+0xa4>)
 80021dc:	2200      	movs	r2, #0
 80021de:	4611      	mov	r1, r2
 80021e0:	2003      	movs	r0, #3
 80021e2:	f00f fa59 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
 80021e6:	e7ca      	b.n	800217e <OnTxData+0xe>
 80021e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002218 <OnTxData+0xa8>)
 80021ea:	e7f5      	b.n	80021d8 <OnTxData+0x68>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 80021ec:	4b0b      	ldr	r3, [pc, #44]	@ (800221c <OnTxData+0xac>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	4611      	mov	r1, r2
 80021f2:	2003      	movs	r0, #3
 80021f4:	f00f fa50 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
}
 80021f8:	e7c1      	b.n	800217e <OnTxData+0xe>
 80021fa:	4770      	bx	lr
 80021fc:	48000400 	.word	0x48000400
 8002200:	2000030c 	.word	0x2000030c
 8002204:	08012538 	.word	0x08012538
 8002208:	0801256c 	.word	0x0801256c
 800220c:	080125a0 	.word	0x080125a0
 8002210:	0801252c 	.word	0x0801252c
 8002214:	080125b0 	.word	0x080125b0
 8002218:	08012530 	.word	0x08012530
 800221c:	080125c4 	.word	0x080125c4

08002220 <OnJoinRequest>:
  if (joinParams != NULL)
 8002220:	2800      	cmp	r0, #0
 8002222:	d039      	beq.n	8002298 <OnJoinRequest+0x78>
{
 8002224:	b510      	push	{r4, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	4604      	mov	r4, r0
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800222a:	f990 3006 	ldrsb.w	r3, [r0, #6]
 800222e:	b9fb      	cbnz	r3, 8002270 <OnJoinRequest+0x50>
      UTIL_TIMER_Stop(&JoinLedTimer);
 8002230:	481a      	ldr	r0, [pc, #104]	@ (800229c <OnJoinRequest+0x7c>)
 8002232:	f00f fd83 	bl	8011d3c <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002236:	2200      	movs	r2, #0
 8002238:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800223c:	4818      	ldr	r0, [pc, #96]	@ (80022a0 <OnJoinRequest+0x80>)
 800223e:	f001 ff27 	bl	8004090 <HAL_GPIO_WritePin>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 8002242:	4b18      	ldr	r3, [pc, #96]	@ (80022a4 <OnJoinRequest+0x84>)
 8002244:	2200      	movs	r2, #0
 8002246:	4611      	mov	r1, r2
 8002248:	2002      	movs	r0, #2
 800224a:	f00f fa25 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800224e:	79e3      	ldrb	r3, [r4, #7]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d006      	beq.n	8002262 <OnJoinRequest+0x42>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8002254:	4b14      	ldr	r3, [pc, #80]	@ (80022a8 <OnJoinRequest+0x88>)
 8002256:	2200      	movs	r2, #0
 8002258:	4611      	mov	r1, r2
 800225a:	2002      	movs	r0, #2
 800225c:	f00f fa1c 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
 8002260:	e00c      	b.n	800227c <OnJoinRequest+0x5c>
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 8002262:	4b12      	ldr	r3, [pc, #72]	@ (80022ac <OnJoinRequest+0x8c>)
 8002264:	2200      	movs	r2, #0
 8002266:	4611      	mov	r1, r2
 8002268:	2002      	movs	r0, #2
 800226a:	f00f fa15 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
 800226e:	e005      	b.n	800227c <OnJoinRequest+0x5c>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8002270:	4b0f      	ldr	r3, [pc, #60]	@ (80022b0 <OnJoinRequest+0x90>)
 8002272:	2200      	movs	r2, #0
 8002274:	4611      	mov	r1, r2
 8002276:	2002      	movs	r0, #2
 8002278:	f00f fa0e 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:JOIN | DR:%d | PWR:%d\r\n", joinParams->Datarate, joinParams->TxPower);
 800227c:	f994 3004 	ldrsb.w	r3, [r4, #4]
 8002280:	f994 2005 	ldrsb.w	r2, [r4, #5]
 8002284:	9201      	str	r2, [sp, #4]
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	4b0a      	ldr	r3, [pc, #40]	@ (80022b4 <OnJoinRequest+0x94>)
 800228a:	2200      	movs	r2, #0
 800228c:	4611      	mov	r1, r2
 800228e:	2003      	movs	r0, #3
 8002290:	f00f fa02 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
}
 8002294:	b002      	add	sp, #8
 8002296:	bd10      	pop	{r4, pc}
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	200002dc 	.word	0x200002dc
 80022a0:	48000400 	.word	0x48000400
 80022a4:	080125d4 	.word	0x080125d4
 80022a8:	0801260c 	.word	0x0801260c
 80022ac:	080125ec 	.word	0x080125ec
 80022b0:	0801262c 	.word	0x0801262c
 80022b4:	08012648 	.word	0x08012648

080022b8 <OnStopJoinTimerEvent>:
{
 80022b8:	b510      	push	{r4, lr}
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 80022ba:	4b0e      	ldr	r3, [pc, #56]	@ (80022f4 <OnStopJoinTimerEvent+0x3c>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d013      	beq.n	80022ea <OnStopJoinTimerEvent+0x32>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 80022c2:	4c0d      	ldr	r4, [pc, #52]	@ (80022f8 <OnStopJoinTimerEvent+0x40>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022ca:	4620      	mov	r0, r4
 80022cc:	f001 fee0 	bl	8004090 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 80022d0:	2200      	movs	r2, #0
 80022d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80022d6:	4620      	mov	r0, r4
 80022d8:	f001 feda 	bl	8004090 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 80022dc:	2200      	movs	r2, #0
 80022de:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80022e2:	4620      	mov	r0, r4
 80022e4:	f001 fed4 	bl	8004090 <HAL_GPIO_WritePin>
}
 80022e8:	bd10      	pop	{r4, pc}
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 80022ea:	2100      	movs	r1, #0
 80022ec:	2008      	movs	r0, #8
 80022ee:	f00f fafd 	bl	80118ec <UTIL_SEQ_SetTask>
 80022f2:	e7e6      	b.n	80022c2 <OnStopJoinTimerEvent+0xa>
 80022f4:	20000070 	.word	0x20000070
 80022f8:	48000400 	.word	0x48000400

080022fc <OnRxTimerLedEvent>:
{
 80022fc:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 80022fe:	2200      	movs	r2, #0
 8002300:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002304:	4801      	ldr	r0, [pc, #4]	@ (800230c <OnRxTimerLedEvent+0x10>)
 8002306:	f001 fec3 	bl	8004090 <HAL_GPIO_WritePin>
}
 800230a:	bd08      	pop	{r3, pc}
 800230c:	48000400 	.word	0x48000400

08002310 <OnTxTimerLedEvent>:
{
 8002310:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 8002312:	2200      	movs	r2, #0
 8002314:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002318:	4801      	ldr	r0, [pc, #4]	@ (8002320 <OnTxTimerLedEvent+0x10>)
 800231a:	f001 feb9 	bl	8004090 <HAL_GPIO_WritePin>
}
 800231e:	bd08      	pop	{r3, pc}
 8002320:	48000400 	.word	0x48000400

08002324 <OnRxData>:
  if (params != NULL)
 8002324:	2900      	cmp	r1, #0
 8002326:	d06e      	beq.n	8002406 <OnRxData+0xe2>
{
 8002328:	b570      	push	{r4, r5, r6, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	4604      	mov	r4, r0
 800232e:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 8002330:	2201      	movs	r2, #1
 8002332:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002336:	4834      	ldr	r0, [pc, #208]	@ (8002408 <OnRxData+0xe4>)
 8002338:	f001 feaa 	bl	8004090 <HAL_GPIO_WritePin>
    UTIL_TIMER_Start(&RxLedTimer);
 800233c:	4833      	ldr	r0, [pc, #204]	@ (800240c <OnRxData+0xe8>)
 800233e:	f00f fd57 	bl	8011df0 <UTIL_TIMER_Start>
    if (params->IsMcpsIndication)
 8002342:	782e      	ldrb	r6, [r5, #0]
 8002344:	2e00      	cmp	r6, #0
 8002346:	d042      	beq.n	80023ce <OnRxData+0xaa>
      if (appData != NULL)
 8002348:	2c00      	cmp	r4, #0
 800234a:	d03f      	beq.n	80023cc <OnRxData+0xa8>
        RxPort = appData->Port;
 800234c:	7826      	ldrb	r6, [r4, #0]
        if (appData->Buffer != NULL)
 800234e:	6863      	ldr	r3, [r4, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d03c      	beq.n	80023ce <OnRxData+0xaa>
          switch (appData->Port)
 8002354:	2e02      	cmp	r6, #2
 8002356:	d016      	beq.n	8002386 <OnRxData+0x62>
 8002358:	2e03      	cmp	r6, #3
 800235a:	d138      	bne.n	80023ce <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 800235c:	7862      	ldrb	r2, [r4, #1]
 800235e:	2a01      	cmp	r2, #1
 8002360:	d135      	bne.n	80023ce <OnRxData+0xaa>
                switch (appData->Buffer[0])
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d006      	beq.n	8002376 <OnRxData+0x52>
 8002368:	2b02      	cmp	r3, #2
 800236a:	d008      	beq.n	800237e <OnRxData+0x5a>
 800236c:	bb7b      	cbnz	r3, 80023ce <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_A);
 800236e:	2000      	movs	r0, #0
 8002370:	f005 f87a 	bl	8007468 <LmHandlerRequestClass>
                    break;
 8002374:	e02b      	b.n	80023ce <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_B);
 8002376:	2001      	movs	r0, #1
 8002378:	f005 f876 	bl	8007468 <LmHandlerRequestClass>
                    break;
 800237c:	e027      	b.n	80023ce <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_C);
 800237e:	2002      	movs	r0, #2
 8002380:	f005 f872 	bl	8007468 <LmHandlerRequestClass>
                    break;
 8002384:	e023      	b.n	80023ce <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 8002386:	7862      	ldrb	r2, [r4, #1]
 8002388:	2a01      	cmp	r2, #1
 800238a:	d120      	bne.n	80023ce <OnRxData+0xaa>
                AppLedStateOn = appData->Buffer[0] & 0x01;
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	4a1f      	ldr	r2, [pc, #124]	@ (8002410 <OnRxData+0xec>)
 8002394:	7013      	strb	r3, [r2, #0]
                if (AppLedStateOn == RESET)
 8002396:	b963      	cbnz	r3, 80023b2 <OnRxData+0x8e>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 8002398:	4b1e      	ldr	r3, [pc, #120]	@ (8002414 <OnRxData+0xf0>)
 800239a:	2200      	movs	r2, #0
 800239c:	4611      	mov	r1, r2
 800239e:	2003      	movs	r0, #3
 80023a0:	f00f f97a 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 80023a4:	2200      	movs	r2, #0
 80023a6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80023aa:	4817      	ldr	r0, [pc, #92]	@ (8002408 <OnRxData+0xe4>)
 80023ac:	f001 fe70 	bl	8004090 <HAL_GPIO_WritePin>
 80023b0:	e00d      	b.n	80023ce <OnRxData+0xaa>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 80023b2:	4b19      	ldr	r3, [pc, #100]	@ (8002418 <OnRxData+0xf4>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	4611      	mov	r1, r2
 80023b8:	2003      	movs	r0, #3
 80023ba:	f00f f96d 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 80023be:	2201      	movs	r2, #1
 80023c0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80023c4:	4810      	ldr	r0, [pc, #64]	@ (8002408 <OnRxData+0xe4>)
 80023c6:	f001 fe63 	bl	8004090 <HAL_GPIO_WritePin>
 80023ca:	e000      	b.n	80023ce <OnRxData+0xaa>
  uint8_t RxPort = 0;
 80023cc:	2600      	movs	r6, #0
    if (params->RxSlot < RX_SLOT_NONE)
 80023ce:	7c2b      	ldrb	r3, [r5, #16]
 80023d0:	2b05      	cmp	r3, #5
 80023d2:	d901      	bls.n	80023d8 <OnRxData+0xb4>
}
 80023d4:	b006      	add	sp, #24
 80023d6:	bd70      	pop	{r4, r5, r6, pc}
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 80023d8:	f995 2008 	ldrsb.w	r2, [r5, #8]
 80023dc:	f995 1009 	ldrsb.w	r1, [r5, #9]
 80023e0:	f995 000a 	ldrsb.w	r0, [r5, #10]
 80023e4:	9005      	str	r0, [sp, #20]
 80023e6:	9104      	str	r1, [sp, #16]
 80023e8:	490c      	ldr	r1, [pc, #48]	@ (800241c <OnRxData+0xf8>)
 80023ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80023ee:	9303      	str	r3, [sp, #12]
 80023f0:	9202      	str	r2, [sp, #8]
 80023f2:	9601      	str	r6, [sp, #4]
 80023f4:	68eb      	ldr	r3, [r5, #12]
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	4b09      	ldr	r3, [pc, #36]	@ (8002420 <OnRxData+0xfc>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	4611      	mov	r1, r2
 80023fe:	2003      	movs	r0, #3
 8002400:	f00f f94a 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
}
 8002404:	e7e6      	b.n	80023d4 <OnRxData+0xb0>
 8002406:	4770      	bx	lr
 8002408:	48000400 	.word	0x48000400
 800240c:	200002f4 	.word	0x200002f4
 8002410:	20000324 	.word	0x20000324
 8002414:	08012674 	.word	0x08012674
 8002418:	08012680 	.word	0x08012680
 800241c:	08012c24 	.word	0x08012c24
 8002420:	0801268c 	.word	0x0801268c

08002424 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8002424:	b538      	push	{r3, r4, r5, lr}
 8002426:	4604      	mov	r4, r0
 8002428:	460d      	mov	r5, r1
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800242a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800242e:	4805      	ldr	r0, [pc, #20]	@ (8002444 <OnStoreContextRequest+0x20>)
 8002430:	f7ff f812 	bl	8001458 <FLASH_IF_Erase>
 8002434:	b100      	cbz	r0, 8002438 <OnStoreContextRequest+0x14>
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 8002436:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 8002438:	462a      	mov	r2, r5
 800243a:	4621      	mov	r1, r4
 800243c:	4801      	ldr	r0, [pc, #4]	@ (8002444 <OnStoreContextRequest+0x20>)
 800243e:	f7fe ffd3 	bl	80013e8 <FLASH_IF_Write>
}
 8002442:	e7f8      	b.n	8002436 <OnStoreContextRequest+0x12>
 8002444:	0803f000 	.word	0x0803f000

08002448 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8002448:	b508      	push	{r3, lr}
 800244a:	460a      	mov	r2, r1
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800244c:	4901      	ldr	r1, [pc, #4]	@ (8002454 <OnRestoreContextRequest+0xc>)
 800244e:	f7fe ffe7 	bl	8001420 <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 8002452:	bd08      	pop	{r3, pc}
 8002454:	0803f000 	.word	0x0803f000

08002458 <StopJoin>:
{
 8002458:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 800245a:	4c1e      	ldr	r4, [pc, #120]	@ (80024d4 <StopJoin+0x7c>)
 800245c:	2201      	movs	r2, #1
 800245e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002462:	4620      	mov	r0, r4
 8002464:	f001 fe14 	bl	8004090 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 8002468:	2201      	movs	r2, #1
 800246a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800246e:	4620      	mov	r0, r4
 8002470:	f001 fe0e 	bl	8004090 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 8002474:	2201      	movs	r2, #1
 8002476:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800247a:	4620      	mov	r0, r4
 800247c:	f001 fe08 	bl	8004090 <HAL_GPIO_WritePin>
  UTIL_TIMER_Stop(&TxTimer);
 8002480:	4815      	ldr	r0, [pc, #84]	@ (80024d8 <StopJoin+0x80>)
 8002482:	f00f fc5b 	bl	8011d3c <UTIL_TIMER_Stop>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 8002486:	f005 fa57 	bl	8007938 <LmHandlerStop>
 800248a:	b148      	cbz	r0, 80024a0 <StopJoin+0x48>
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800248c:	4b13      	ldr	r3, [pc, #76]	@ (80024dc <StopJoin+0x84>)
 800248e:	2200      	movs	r2, #0
 8002490:	4611      	mov	r1, r2
 8002492:	2002      	movs	r0, #2
 8002494:	f00f f900 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Start(&StopJoinTimer);
 8002498:	4811      	ldr	r0, [pc, #68]	@ (80024e0 <StopJoin+0x88>)
 800249a:	f00f fca9 	bl	8011df0 <UTIL_TIMER_Start>
}
 800249e:	bd38      	pop	{r3, r4, r5, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 80024a0:	4b10      	ldr	r3, [pc, #64]	@ (80024e4 <StopJoin+0x8c>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	4611      	mov	r1, r2
 80024a6:	2002      	movs	r0, #2
 80024a8:	f00f f8f6 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_ABP;
 80024ac:	4c0e      	ldr	r4, [pc, #56]	@ (80024e8 <StopJoin+0x90>)
 80024ae:	2501      	movs	r5, #1
 80024b0:	7025      	strb	r5, [r4, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 80024b2:	4b0e      	ldr	r3, [pc, #56]	@ (80024ec <StopJoin+0x94>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	4611      	mov	r1, r2
 80024b8:	2002      	movs	r0, #2
 80024ba:	f00f f8ed 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
    LmHandlerConfigure(&LmHandlerParams);
 80024be:	480c      	ldr	r0, [pc, #48]	@ (80024f0 <StopJoin+0x98>)
 80024c0:	f005 f8b2 	bl	8007628 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 80024c4:	4629      	mov	r1, r5
 80024c6:	7820      	ldrb	r0, [r4, #0]
 80024c8:	f004 fe6a 	bl	80071a0 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 80024cc:	4802      	ldr	r0, [pc, #8]	@ (80024d8 <StopJoin+0x80>)
 80024ce:	f00f fc8f 	bl	8011df0 <UTIL_TIMER_Start>
 80024d2:	e7e1      	b.n	8002498 <StopJoin+0x40>
 80024d4:	48000400 	.word	0x48000400
 80024d8:	20000434 	.word	0x20000434
 80024dc:	080126d4 	.word	0x080126d4
 80024e0:	2000041c 	.word	0x2000041c
 80024e4:	080126f4 	.word	0x080126f4
 80024e8:	20000070 	.word	0x20000070
 80024ec:	08012708 	.word	0x08012708
 80024f0:	2000000c 	.word	0x2000000c

080024f4 <StoreContext>:
{
 80024f4:	b508      	push	{r3, lr}
  status = LmHandlerNvmDataStore();
 80024f6:	f005 fab1 	bl	8007a5c <LmHandlerNvmDataStore>
  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 80024fa:	f110 0f08 	cmn.w	r0, #8
 80024fe:	d003      	beq.n	8002508 <StoreContext+0x14>
  else if (status == LORAMAC_HANDLER_ERROR)
 8002500:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002504:	d007      	beq.n	8002516 <StoreContext+0x22>
}
 8002506:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 8002508:	4b06      	ldr	r3, [pc, #24]	@ (8002524 <StoreContext+0x30>)
 800250a:	2200      	movs	r2, #0
 800250c:	4611      	mov	r1, r2
 800250e:	2002      	movs	r0, #2
 8002510:	f00f f8c2 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
 8002514:	e7f7      	b.n	8002506 <StoreContext+0x12>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 8002516:	4b04      	ldr	r3, [pc, #16]	@ (8002528 <StoreContext+0x34>)
 8002518:	2200      	movs	r2, #0
 800251a:	4611      	mov	r1, r2
 800251c:	2002      	movs	r0, #2
 800251e:	f00f f8bb 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
}
 8002522:	e7f0      	b.n	8002506 <StoreContext+0x12>
 8002524:	08012728 	.word	0x08012728
 8002528:	08012740 	.word	0x08012740

0800252c <SendTxData>:
{
 800252c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800252e:	b089      	sub	sp, #36	@ 0x24
  uint8_t batteryLevel = GetBatteryLevel();
 8002530:	f7ff f9b0 	bl	8001894 <GetBatteryLevel>
 8002534:	4604      	mov	r4, r0
  if (LmHandlerIsBusy() == false)
 8002536:	f004 fed7 	bl	80072e8 <LmHandlerIsBusy>
 800253a:	b190      	cbz	r0, 8002562 <SendTxData+0x36>
  UTIL_TIMER_Time_t nextTxIn = 0;
 800253c:	2500      	movs	r5, #0
    UTIL_TIMER_Stop(&TxTimer);
 800253e:	4c5a      	ldr	r4, [pc, #360]	@ (80026a8 <SendTxData+0x17c>)
 8002540:	4620      	mov	r0, r4
 8002542:	f00f fbfb 	bl	8011d3c <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 8002546:	4b59      	ldr	r3, [pc, #356]	@ (80026ac <SendTxData+0x180>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4629      	mov	r1, r5
 800254c:	429d      	cmp	r5, r3
 800254e:	bf38      	it	cc
 8002550:	4619      	movcc	r1, r3
 8002552:	4620      	mov	r0, r4
 8002554:	f00f fc92 	bl	8011e7c <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 8002558:	4620      	mov	r0, r4
 800255a:	f00f fc49 	bl	8011df0 <UTIL_TIMER_Start>
}
 800255e:	b009      	add	sp, #36	@ 0x24
 8002560:	bdf0      	pop	{r4, r5, r6, r7, pc}
    EnvSensors_Read(&sensor_data);
 8002562:	a802      	add	r0, sp, #8
 8002564:	f7ff fa74 	bl	8001a50 <EnvSensors_Read>
    APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 8002568:	9400      	str	r4, [sp, #0]
 800256a:	4b51      	ldr	r3, [pc, #324]	@ (80026b0 <SendTxData+0x184>)
 800256c:	2201      	movs	r2, #1
 800256e:	2100      	movs	r1, #0
 8002570:	2002      	movs	r0, #2
 8002572:	f00f f891 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 8002576:	9803      	ldr	r0, [sp, #12]
 8002578:	f7fe fad0 	bl	8000b1c <__aeabi_f2iz>
 800257c:	b200      	sxth	r0, r0
 800257e:	9000      	str	r0, [sp, #0]
 8002580:	4b4c      	ldr	r3, [pc, #304]	@ (80026b4 <SendTxData+0x188>)
 8002582:	2201      	movs	r2, #1
 8002584:	2100      	movs	r1, #0
 8002586:	2002      	movs	r0, #2
 8002588:	f00f f886 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
    AppData.Port = LORAWAN_USER_APP_PORT;
 800258c:	4c4a      	ldr	r4, [pc, #296]	@ (80026b8 <SendTxData+0x18c>)
 800258e:	2302      	movs	r3, #2
 8002590:	7023      	strb	r3, [r4, #0]
    humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 8002592:	494a      	ldr	r1, [pc, #296]	@ (80026bc <SendTxData+0x190>)
 8002594:	9804      	ldr	r0, [sp, #16]
 8002596:	f7fe f971 	bl	800087c <__aeabi_fmul>
 800259a:	f7fe fae5 	bl	8000b68 <__aeabi_f2uiz>
 800259e:	b285      	uxth	r5, r0
    temperature = (int16_t)(sensor_data.temperature);
 80025a0:	9803      	ldr	r0, [sp, #12]
 80025a2:	f7fe fabb 	bl	8000b1c <__aeabi_f2iz>
 80025a6:	b206      	sxth	r6, r0
    pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 80025a8:	4945      	ldr	r1, [pc, #276]	@ (80026c0 <SendTxData+0x194>)
 80025aa:	9802      	ldr	r0, [sp, #8]
 80025ac:	f7fe f966 	bl	800087c <__aeabi_fmul>
 80025b0:	4942      	ldr	r1, [pc, #264]	@ (80026bc <SendTxData+0x190>)
 80025b2:	f7fe fa17 	bl	80009e4 <__aeabi_fdiv>
 80025b6:	f7fe fad7 	bl	8000b68 <__aeabi_f2uiz>
    AppData.Buffer[i++] = AppLedStateOn;
 80025ba:	6863      	ldr	r3, [r4, #4]
 80025bc:	4a41      	ldr	r2, [pc, #260]	@ (80026c4 <SendTxData+0x198>)
 80025be:	7812      	ldrb	r2, [r2, #0]
 80025c0:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 80025c2:	6863      	ldr	r3, [r4, #4]
 80025c4:	f3c0 2207 	ubfx	r2, r0, #8, #8
 80025c8:	705a      	strb	r2, [r3, #1]
    AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 80025ca:	6863      	ldr	r3, [r4, #4]
 80025cc:	7098      	strb	r0, [r3, #2]
    AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 80025ce:	6863      	ldr	r3, [r4, #4]
 80025d0:	70de      	strb	r6, [r3, #3]
    AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 80025d2:	6863      	ldr	r3, [r4, #4]
 80025d4:	0a2a      	lsrs	r2, r5, #8
 80025d6:	711a      	strb	r2, [r3, #4]
    AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 80025d8:	6863      	ldr	r3, [r4, #4]
 80025da:	715d      	strb	r5, [r3, #5]
    if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 80025dc:	4b3a      	ldr	r3, [pc, #232]	@ (80026c8 <SendTxData+0x19c>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b08      	cmp	r3, #8
 80025e2:	d002      	beq.n	80025ea <SendTxData+0xbe>
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d000      	beq.n	80025ea <SendTxData+0xbe>
        || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 80025e8:	b9d3      	cbnz	r3, 8002620 <SendTxData+0xf4>
      AppData.Buffer[i++] = 0;
 80025ea:	4a33      	ldr	r2, [pc, #204]	@ (80026b8 <SendTxData+0x18c>)
 80025ec:	6851      	ldr	r1, [r2, #4]
 80025ee:	2300      	movs	r3, #0
 80025f0:	718b      	strb	r3, [r1, #6]
      AppData.Buffer[i++] = 0;
 80025f2:	6851      	ldr	r1, [r2, #4]
 80025f4:	71cb      	strb	r3, [r1, #7]
      AppData.Buffer[i++] = 0;
 80025f6:	6852      	ldr	r2, [r2, #4]
 80025f8:	7213      	strb	r3, [r2, #8]
      AppData.Buffer[i++] = 0;
 80025fa:	7253      	strb	r3, [r2, #9]
 80025fc:	220a      	movs	r2, #10
    AppData.BufferSize = i;
 80025fe:	4b2e      	ldr	r3, [pc, #184]	@ (80026b8 <SendTxData+0x18c>)
 8002600:	705a      	strb	r2, [r3, #1]
    if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002602:	4b32      	ldr	r3, [pc, #200]	@ (80026cc <SendTxData+0x1a0>)
 8002604:	7a5b      	ldrb	r3, [r3, #9]
 8002606:	bb3b      	cbnz	r3, 8002658 <SendTxData+0x12c>
    status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 8002608:	2200      	movs	r2, #0
 800260a:	4b2f      	ldr	r3, [pc, #188]	@ (80026c8 <SendTxData+0x19c>)
 800260c:	78d9      	ldrb	r1, [r3, #3]
 800260e:	482a      	ldr	r0, [pc, #168]	@ (80026b8 <SendTxData+0x18c>)
 8002610:	f004 fe80 	bl	8007314 <LmHandlerSend>
    if (LORAMAC_HANDLER_SUCCESS == status)
 8002614:	b370      	cbz	r0, 8002674 <SendTxData+0x148>
    else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 8002616:	f110 0f06 	cmn.w	r0, #6
 800261a:	d033      	beq.n	8002684 <SendTxData+0x158>
  UTIL_TIMER_Time_t nextTxIn = 0;
 800261c:	2500      	movs	r5, #0
 800261e:	e78e      	b.n	800253e <SendTxData+0x12>
      latitude = sensor_data.latitude;
 8002620:	9d05      	ldr	r5, [sp, #20]
      longitude = sensor_data.longitude;
 8002622:	9c06      	ldr	r4, [sp, #24]
      AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 8002624:	4e24      	ldr	r6, [pc, #144]	@ (80026b8 <SendTxData+0x18c>)
 8002626:	6877      	ldr	r7, [r6, #4]
 8002628:	f7ff f934 	bl	8001894 <GetBatteryLevel>
 800262c:	71b8      	strb	r0, [r7, #6]
      AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 800262e:	6873      	ldr	r3, [r6, #4]
 8002630:	f3c5 4207 	ubfx	r2, r5, #16, #8
 8002634:	71da      	strb	r2, [r3, #7]
      AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 8002636:	6873      	ldr	r3, [r6, #4]
 8002638:	f3c5 2207 	ubfx	r2, r5, #8, #8
 800263c:	721a      	strb	r2, [r3, #8]
      AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800263e:	725d      	strb	r5, [r3, #9]
      AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 8002640:	f3c4 4207 	ubfx	r2, r4, #16, #8
 8002644:	729a      	strb	r2, [r3, #10]
      AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 8002646:	f3c4 2207 	ubfx	r2, r4, #8, #8
 800264a:	72da      	strb	r2, [r3, #11]
      AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 800264c:	731c      	strb	r4, [r3, #12]
      AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800264e:	2200      	movs	r2, #0
 8002650:	735a      	strb	r2, [r3, #13]
      AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 8002652:	739a      	strb	r2, [r3, #14]
 8002654:	220f      	movs	r2, #15
 8002656:	e7d2      	b.n	80025fe <SendTxData+0xd2>
    if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002658:	f004 fe34 	bl	80072c4 <LmHandlerJoinStatus>
 800265c:	2801      	cmp	r0, #1
 800265e:	d1d3      	bne.n	8002608 <SendTxData+0xdc>
      UTIL_TIMER_Stop(&JoinLedTimer);
 8002660:	481a      	ldr	r0, [pc, #104]	@ (80026cc <SendTxData+0x1a0>)
 8002662:	f00f fb6b 	bl	8011d3c <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002666:	2200      	movs	r2, #0
 8002668:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800266c:	4818      	ldr	r0, [pc, #96]	@ (80026d0 <SendTxData+0x1a4>)
 800266e:	f001 fd0f 	bl	8004090 <HAL_GPIO_WritePin>
 8002672:	e7c9      	b.n	8002608 <SendTxData+0xdc>
      APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8002674:	4b17      	ldr	r3, [pc, #92]	@ (80026d4 <SendTxData+0x1a8>)
 8002676:	2201      	movs	r2, #1
 8002678:	2100      	movs	r1, #0
 800267a:	4610      	mov	r0, r2
 800267c:	f00f f80c 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Time_t nextTxIn = 0;
 8002680:	2500      	movs	r5, #0
 8002682:	e75c      	b.n	800253e <SendTxData+0x12>
      nextTxIn = LmHandlerGetDutyCycleWaitTime();
 8002684:	f004 fe18 	bl	80072b8 <LmHandlerGetDutyCycleWaitTime>
      if (nextTxIn > 0)
 8002688:	4605      	mov	r5, r0
 800268a:	2800      	cmp	r0, #0
 800268c:	f43f af57 	beq.w	800253e <SendTxData+0x12>
        APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 8002690:	4b11      	ldr	r3, [pc, #68]	@ (80026d8 <SendTxData+0x1ac>)
 8002692:	fba3 2300 	umull	r2, r3, r3, r0
 8002696:	099b      	lsrs	r3, r3, #6
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	4b10      	ldr	r3, [pc, #64]	@ (80026dc <SendTxData+0x1b0>)
 800269c:	2201      	movs	r2, #1
 800269e:	2100      	movs	r1, #0
 80026a0:	4610      	mov	r0, r2
 80026a2:	f00e fff9 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
 80026a6:	e74a      	b.n	800253e <SendTxData+0x12>
 80026a8:	20000434 	.word	0x20000434
 80026ac:	20000008 	.word	0x20000008
 80026b0:	08012758 	.word	0x08012758
 80026b4:	08012764 	.word	0x08012764
 80026b8:	20000000 	.word	0x20000000
 80026bc:	41200000 	.word	0x41200000
 80026c0:	42c80000 	.word	0x42c80000
 80026c4:	20000324 	.word	0x20000324
 80026c8:	2000000c 	.word	0x2000000c
 80026cc:	200002dc 	.word	0x200002dc
 80026d0:	48000400 	.word	0x48000400
 80026d4:	08012770 	.word	0x08012770
 80026d8:	10624dd3 	.word	0x10624dd3
 80026dc:	08012780 	.word	0x08012780

080026e0 <OnJoinTimerLedEvent>:
{
 80026e0:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 80026e2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80026e6:	4802      	ldr	r0, [pc, #8]	@ (80026f0 <OnJoinTimerLedEvent+0x10>)
 80026e8:	f001 fcd7 	bl	800409a <HAL_GPIO_TogglePin>
}
 80026ec:	bd08      	pop	{r3, pc}
 80026ee:	bf00      	nop
 80026f0:	48000400 	.word	0x48000400

080026f4 <LoRaWAN_Init>:
{
 80026f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026f6:	b087      	sub	sp, #28
  uint32_t feature_version = 0UL;
 80026f8:	2400      	movs	r4, #0
 80026fa:	9405      	str	r4, [sp, #20]
  MX_USART2_UART_Init();
 80026fc:	f7ff fb00 	bl	8001d00 <MX_USART2_UART_Init>
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 8002700:	2501      	movs	r5, #1
 8002702:	9502      	str	r5, [sp, #8]
 8002704:	2703      	movs	r7, #3
 8002706:	9701      	str	r7, [sp, #4]
 8002708:	9500      	str	r5, [sp, #0]
 800270a:	4b4f      	ldr	r3, [pc, #316]	@ (8002848 <LoRaWAN_Init+0x154>)
 800270c:	4622      	mov	r2, r4
 800270e:	4621      	mov	r1, r4
 8002710:	2002      	movs	r0, #2
 8002712:	f00e ffc1 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 8002716:	9402      	str	r4, [sp, #8]
 8002718:	2305      	movs	r3, #5
 800271a:	9301      	str	r3, [sp, #4]
 800271c:	2602      	movs	r6, #2
 800271e:	9600      	str	r6, [sp, #0]
 8002720:	4b4a      	ldr	r3, [pc, #296]	@ (800284c <LoRaWAN_Init+0x158>)
 8002722:	4622      	mov	r2, r4
 8002724:	4621      	mov	r1, r4
 8002726:	4630      	mov	r0, r6
 8002728:	f00e ffb6 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800272c:	9402      	str	r4, [sp, #8]
 800272e:	9701      	str	r7, [sp, #4]
 8002730:	9500      	str	r5, [sp, #0]
 8002732:	4b47      	ldr	r3, [pc, #284]	@ (8002850 <LoRaWAN_Init+0x15c>)
 8002734:	4622      	mov	r2, r4
 8002736:	4621      	mov	r1, r4
 8002738:	4630      	mov	r0, r6
 800273a:	f00e ffad 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800273e:	a905      	add	r1, sp, #20
 8002740:	4620      	mov	r0, r4
 8002742:	f005 f8e3 	bl	800790c <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 8002746:	9b05      	ldr	r3, [sp, #20]
 8002748:	0e1a      	lsrs	r2, r3, #24
 800274a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800274e:	9102      	str	r1, [sp, #8]
 8002750:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002754:	9301      	str	r3, [sp, #4]
 8002756:	9200      	str	r2, [sp, #0]
 8002758:	4b3e      	ldr	r3, [pc, #248]	@ (8002854 <LoRaWAN_Init+0x160>)
 800275a:	4622      	mov	r2, r4
 800275c:	4621      	mov	r1, r4
 800275e:	4630      	mov	r0, r6
 8002760:	f00e ff9a 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 8002764:	a905      	add	r1, sp, #20
 8002766:	4628      	mov	r0, r5
 8002768:	f005 f8d0 	bl	800790c <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800276c:	9b05      	ldr	r3, [sp, #20]
 800276e:	0e1a      	lsrs	r2, r3, #24
 8002770:	b2d9      	uxtb	r1, r3
 8002772:	9103      	str	r1, [sp, #12]
 8002774:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002778:	9102      	str	r1, [sp, #8]
 800277a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800277e:	9301      	str	r3, [sp, #4]
 8002780:	9200      	str	r2, [sp, #0]
 8002782:	4b35      	ldr	r3, [pc, #212]	@ (8002858 <LoRaWAN_Init+0x164>)
 8002784:	4622      	mov	r2, r4
 8002786:	4621      	mov	r1, r4
 8002788:	4630      	mov	r0, r6
 800278a:	f00e ff85 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800278e:	9400      	str	r4, [sp, #0]
 8002790:	4b32      	ldr	r3, [pc, #200]	@ (800285c <LoRaWAN_Init+0x168>)
 8002792:	4622      	mov	r2, r4
 8002794:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002798:	4831      	ldr	r0, [pc, #196]	@ (8002860 <LoRaWAN_Init+0x16c>)
 800279a:	f00f fa71 	bl	8011c80 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800279e:	9400      	str	r4, [sp, #0]
 80027a0:	4b30      	ldr	r3, [pc, #192]	@ (8002864 <LoRaWAN_Init+0x170>)
 80027a2:	4622      	mov	r2, r4
 80027a4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80027a8:	482f      	ldr	r0, [pc, #188]	@ (8002868 <LoRaWAN_Init+0x174>)
 80027aa:	f00f fa69 	bl	8011c80 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 80027ae:	9400      	str	r4, [sp, #0]
 80027b0:	4b2e      	ldr	r3, [pc, #184]	@ (800286c <LoRaWAN_Init+0x178>)
 80027b2:	462a      	mov	r2, r5
 80027b4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80027b8:	482d      	ldr	r0, [pc, #180]	@ (8002870 <LoRaWAN_Init+0x17c>)
 80027ba:	f00f fa61 	bl	8011c80 <UTIL_TIMER_Create>
  if (FLASH_IF_Init(NULL) != FLASH_IF_OK)
 80027be:	4620      	mov	r0, r4
 80027c0:	f7fe fe0c 	bl	80013dc <FLASH_IF_Init>
 80027c4:	2800      	cmp	r0, #0
 80027c6:	d13b      	bne.n	8002840 <LoRaWAN_Init+0x14c>
  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 80027c8:	2400      	movs	r4, #0
 80027ca:	9400      	str	r4, [sp, #0]
 80027cc:	4b29      	ldr	r3, [pc, #164]	@ (8002874 <LoRaWAN_Init+0x180>)
 80027ce:	4622      	mov	r2, r4
 80027d0:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80027d4:	4828      	ldr	r0, [pc, #160]	@ (8002878 <LoRaWAN_Init+0x184>)
 80027d6:	f00f fa53 	bl	8011c80 <UTIL_TIMER_Create>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 80027da:	4a28      	ldr	r2, [pc, #160]	@ (800287c <LoRaWAN_Init+0x188>)
 80027dc:	4621      	mov	r1, r4
 80027de:	2001      	movs	r0, #1
 80027e0:	f00f f94e 	bl	8011a80 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 80027e4:	4a26      	ldr	r2, [pc, #152]	@ (8002880 <LoRaWAN_Init+0x18c>)
 80027e6:	4621      	mov	r1, r4
 80027e8:	2002      	movs	r0, #2
 80027ea:	f00f f949 	bl	8011a80 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 80027ee:	4a25      	ldr	r2, [pc, #148]	@ (8002884 <LoRaWAN_Init+0x190>)
 80027f0:	4621      	mov	r1, r4
 80027f2:	2004      	movs	r0, #4
 80027f4:	f00f f944 	bl	8011a80 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 80027f8:	4a23      	ldr	r2, [pc, #140]	@ (8002888 <LoRaWAN_Init+0x194>)
 80027fa:	4621      	mov	r1, r4
 80027fc:	2008      	movs	r0, #8
 80027fe:	f00f f93f 	bl	8011a80 <UTIL_SEQ_RegTask>
  LoraInfo_Init();
 8002802:	f000 f883 	bl	800290c <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 8002806:	4921      	ldr	r1, [pc, #132]	@ (800288c <LoRaWAN_Init+0x198>)
 8002808:	4821      	ldr	r0, [pc, #132]	@ (8002890 <LoRaWAN_Init+0x19c>)
 800280a:	f005 f833 	bl	8007874 <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 800280e:	4821      	ldr	r0, [pc, #132]	@ (8002894 <LoRaWAN_Init+0x1a0>)
 8002810:	f004 ff0a 	bl	8007628 <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 8002814:	4816      	ldr	r0, [pc, #88]	@ (8002870 <LoRaWAN_Init+0x17c>)
 8002816:	f00f faeb 	bl	8011df0 <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType, ForceRejoin);
 800281a:	4621      	mov	r1, r4
 800281c:	4b1e      	ldr	r3, [pc, #120]	@ (8002898 <LoRaWAN_Init+0x1a4>)
 800281e:	7818      	ldrb	r0, [r3, #0]
 8002820:	f004 fcbe 	bl	80071a0 <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8002824:	4d1d      	ldr	r5, [pc, #116]	@ (800289c <LoRaWAN_Init+0x1a8>)
 8002826:	9400      	str	r4, [sp, #0]
 8002828:	4b1d      	ldr	r3, [pc, #116]	@ (80028a0 <LoRaWAN_Init+0x1ac>)
 800282a:	4622      	mov	r2, r4
 800282c:	491d      	ldr	r1, [pc, #116]	@ (80028a4 <LoRaWAN_Init+0x1b0>)
 800282e:	6809      	ldr	r1, [r1, #0]
 8002830:	4628      	mov	r0, r5
 8002832:	f00f fa25 	bl	8011c80 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 8002836:	4628      	mov	r0, r5
 8002838:	f00f fada 	bl	8011df0 <UTIL_TIMER_Start>
}
 800283c:	b007      	add	sp, #28
 800283e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8002840:	f7fe fe80 	bl	8001544 <Error_Handler>
 8002844:	e7c0      	b.n	80027c8 <LoRaWAN_Init+0xd4>
 8002846:	bf00      	nop
 8002848:	080127a0 	.word	0x080127a0
 800284c:	080127c4 	.word	0x080127c4
 8002850:	080127e8 	.word	0x080127e8
 8002854:	0801280c 	.word	0x0801280c
 8002858:	08012830 	.word	0x08012830
 800285c:	08002311 	.word	0x08002311
 8002860:	2000030c 	.word	0x2000030c
 8002864:	080022fd 	.word	0x080022fd
 8002868:	200002f4 	.word	0x200002f4
 800286c:	080026e1 	.word	0x080026e1
 8002870:	200002dc 	.word	0x200002dc
 8002874:	080022b9 	.word	0x080022b9
 8002878:	2000041c 	.word	0x2000041c
 800287c:	08007421 	.word	0x08007421
 8002880:	0800252d 	.word	0x0800252d
 8002884:	080024f5 	.word	0x080024f5
 8002888:	08002459 	.word	0x08002459
 800288c:	01030100 	.word	0x01030100
 8002890:	20000024 	.word	0x20000024
 8002894:	2000000c 	.word	0x2000000c
 8002898:	20000070 	.word	0x20000070
 800289c:	20000434 	.word	0x20000434
 80028a0:	08002105 	.word	0x08002105
 80028a4:	20000008 	.word	0x20000008

080028a8 <HAL_GPIO_EXTI_Callback>:
  switch (GPIO_Pin)
 80028a8:	2802      	cmp	r0, #2
 80028aa:	d000      	beq.n	80028ae <HAL_GPIO_EXTI_Callback+0x6>
 80028ac:	4770      	bx	lr
{
 80028ae:	b510      	push	{r4, lr}
    	HAL_UART_Receive(&huart2, RX_DATA_BUFF, 60, 20);
 80028b0:	4c11      	ldr	r4, [pc, #68]	@ (80028f8 <HAL_GPIO_EXTI_Callback+0x50>)
 80028b2:	2314      	movs	r3, #20
 80028b4:	223c      	movs	r2, #60	@ 0x3c
 80028b6:	4621      	mov	r1, r4
 80028b8:	4810      	ldr	r0, [pc, #64]	@ (80028fc <HAL_GPIO_EXTI_Callback+0x54>)
 80028ba:	f004 f8ca 	bl	8006a52 <HAL_UART_Receive>
    	if (strstr((char*) RX_DATA_BUFF, "AT")) {
 80028be:	4910      	ldr	r1, [pc, #64]	@ (8002900 <HAL_GPIO_EXTI_Callback+0x58>)
 80028c0:	4620      	mov	r0, r4
 80028c2:	f00f fca5 	bl	8012210 <strstr>
 80028c6:	b158      	cbz	r0, 80028e0 <HAL_GPIO_EXTI_Callback+0x38>
    		APP_LOG(TS_OFF, VLEVEL_M, "OK\n");
 80028c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002904 <HAL_GPIO_EXTI_Callback+0x5c>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	4611      	mov	r1, r2
 80028ce:	2002      	movs	r0, #2
 80028d0:	f00e fee2 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
    		memset(RX_DATA_BUFF, 0, sizeof(RX_DATA_BUFF));
 80028d4:	223c      	movs	r2, #60	@ 0x3c
 80028d6:	2100      	movs	r1, #0
 80028d8:	4620      	mov	r0, r4
 80028da:	f00f fc91 	bl	8012200 <memset>
}
 80028de:	bd10      	pop	{r4, pc}
			APP_LOG(TS_OFF, VLEVEL_M, "ERROR\n");
 80028e0:	4b09      	ldr	r3, [pc, #36]	@ (8002908 <HAL_GPIO_EXTI_Callback+0x60>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	4611      	mov	r1, r2
 80028e6:	2002      	movs	r0, #2
 80028e8:	f00e fed6 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
			memset(RX_DATA_BUFF, 0, sizeof(RX_DATA_BUFF));
 80028ec:	223c      	movs	r2, #60	@ 0x3c
 80028ee:	2100      	movs	r1, #0
 80028f0:	4801      	ldr	r0, [pc, #4]	@ (80028f8 <HAL_GPIO_EXTI_Callback+0x50>)
 80028f2:	f00f fc85 	bl	8012200 <memset>
}
 80028f6:	e7f2      	b.n	80028de <HAL_GPIO_EXTI_Callback+0x36>
 80028f8:	2000044c 	.word	0x2000044c
 80028fc:	2000023c 	.word	0x2000023c
 8002900:	08012854 	.word	0x08012854
 8002904:	08012858 	.word	0x08012858
 8002908:	0801285c 	.word	0x0801285c

0800290c <LoraInfo_Init>:
/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ContextManagement = 0;
 800290c:	4b06      	ldr	r3, [pc, #24]	@ (8002928 <LoraInfo_Init+0x1c>)
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 8002912:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 8002914:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8002916:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 8002918:	2220      	movs	r2, #32
 800291a:	605a      	str	r2, [r3, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 800291c:	f44f 7290 	mov.w	r2, #288	@ 0x120
 8002920:	605a      	str	r2, [r3, #4]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 8002922:	2201      	movs	r2, #1
 8002924:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8002926:	4770      	bx	lr
 8002928:	20000488 	.word	0x20000488

0800292c <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 800292c:	4800      	ldr	r0, [pc, #0]	@ (8002930 <LoraInfo_GetPtr+0x4>)
 800292e:	4770      	bx	lr
 8002930:	20000488 	.word	0x20000488

08002934 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8002934:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8002936:	f000 f83f 	bl	80029b8 <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800293a:	bd08      	pop	{r3, pc}

0800293c <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800293c:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800293e:	f000 f87d 	bl	8002a3c <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8002942:	bd08      	pop	{r3, pc}

08002944 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8002944:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8002946:	f000 f8c7 	bl	8002ad8 <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800294a:	bd08      	pop	{r3, pc}

0800294c <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800294c:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800294e:	f000 f8c5 	bl	8002adc <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002952:	bd08      	pop	{r3, pc}

08002954 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8002954:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 8002956:	f000 f8c3 	bl	8002ae0 <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800295a:	bd08      	pop	{r3, pc}

0800295c <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800295c:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800295e:	f000 f8c1 	bl	8002ae4 <BSP_RADIO_GetRFOMaxPowerConfig>
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8002962:	bd08      	pop	{r3, pc}

08002964 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002964:	480d      	ldr	r0, [pc, #52]	@ (800299c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002966:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002968:	f000 f8c1 	bl	8002aee <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800296c:	480c      	ldr	r0, [pc, #48]	@ (80029a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800296e:	490d      	ldr	r1, [pc, #52]	@ (80029a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002970:	4a0d      	ldr	r2, [pc, #52]	@ (80029a8 <LoopForever+0xe>)
  movs r3, #0
 8002972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002974:	e002      	b.n	800297c <LoopCopyDataInit>

08002976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800297a:	3304      	adds	r3, #4

0800297c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800297c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800297e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002980:	d3f9      	bcc.n	8002976 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002982:	4a0a      	ldr	r2, [pc, #40]	@ (80029ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8002984:	4c0a      	ldr	r4, [pc, #40]	@ (80029b0 <LoopForever+0x16>)
  movs r3, #0
 8002986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002988:	e001      	b.n	800298e <LoopFillZerobss>

0800298a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800298a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800298c:	3204      	adds	r2, #4

0800298e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800298e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002990:	d3fb      	bcc.n	800298a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002992:	f00f fc53 	bl	801223c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002996:	f7fe fe1e 	bl	80015d6 <main>

0800299a <LoopForever>:

LoopForever:
    b LoopForever
 800299a:	e7fe      	b.n	800299a <LoopForever>
  ldr   r0, =_estack
 800299c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80029a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029a4:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 80029a8:	080132d8 	.word	0x080132d8
  ldr r2, =_sbss
 80029ac:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 80029b0:	20001680 	.word	0x20001680

080029b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029b4:	e7fe      	b.n	80029b4 <ADC_IRQHandler>
	...

080029b8 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 80029b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029bc:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80029be:	2400      	movs	r4, #0
 80029c0:	9401      	str	r4, [sp, #4]
 80029c2:	9402      	str	r4, [sp, #8]
 80029c4:	9403      	str	r4, [sp, #12]
 80029c6:	9404      	str	r4, [sp, #16]
 80029c8:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80029ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80029d0:	f042 0204 	orr.w	r2, r2, #4
 80029d4:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80029d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80029de:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80029e0:	2710      	movs	r7, #16
 80029e2:	9701      	str	r7, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80029e4:	2301      	movs	r3, #1
 80029e6:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e8:	2303      	movs	r3, #3
 80029ea:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80029ec:	4d12      	ldr	r5, [pc, #72]	@ (8002a38 <BSP_RADIO_Init+0x80>)
 80029ee:	a901      	add	r1, sp, #4
 80029f0:	4628      	mov	r0, r5
 80029f2:	f001 f9fd 	bl	8003df0 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80029f6:	f04f 0820 	mov.w	r8, #32
 80029fa:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80029fe:	a901      	add	r1, sp, #4
 8002a00:	4628      	mov	r0, r5
 8002a02:	f001 f9f5 	bl	8003df0 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8002a06:	2608      	movs	r6, #8
 8002a08:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8002a0a:	a901      	add	r1, sp, #4
 8002a0c:	4628      	mov	r0, r5
 8002a0e:	f001 f9ef 	bl	8003df0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002a12:	4622      	mov	r2, r4
 8002a14:	4641      	mov	r1, r8
 8002a16:	4628      	mov	r0, r5
 8002a18:	f001 fb3a 	bl	8004090 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002a1c:	4622      	mov	r2, r4
 8002a1e:	4639      	mov	r1, r7
 8002a20:	4628      	mov	r0, r5
 8002a22:	f001 fb35 	bl	8004090 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8002a26:	4622      	mov	r2, r4
 8002a28:	4631      	mov	r1, r6
 8002a2a:	4628      	mov	r0, r5
 8002a2c:	f001 fb30 	bl	8004090 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8002a30:	4620      	mov	r0, r4
 8002a32:	b006      	add	sp, #24
 8002a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a38:	48000800 	.word	0x48000800

08002a3c <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002a3c:	b510      	push	{r4, lr}
  switch (Config)
 8002a3e:	2803      	cmp	r0, #3
 8002a40:	d813      	bhi.n	8002a6a <BSP_RADIO_ConfigRFSwitch+0x2e>
 8002a42:	e8df f000 	tbb	[pc, r0]
 8002a46:	1402      	.short	0x1402
 8002a48:	3625      	.short	0x3625
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8002a4a:	4c22      	ldr	r4, [pc, #136]	@ (8002ad4 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	2108      	movs	r1, #8
 8002a50:	4620      	mov	r0, r4
 8002a52:	f001 fb1d 	bl	8004090 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002a56:	2200      	movs	r2, #0
 8002a58:	2110      	movs	r1, #16
 8002a5a:	4620      	mov	r0, r4
 8002a5c:	f001 fb18 	bl	8004090 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002a60:	2200      	movs	r2, #0
 8002a62:	2120      	movs	r1, #32
 8002a64:	4620      	mov	r0, r4
 8002a66:	f001 fb13 	bl	8004090 <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002a6e:	4c19      	ldr	r4, [pc, #100]	@ (8002ad4 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002a70:	2201      	movs	r2, #1
 8002a72:	2108      	movs	r1, #8
 8002a74:	4620      	mov	r0, r4
 8002a76:	f001 fb0b 	bl	8004090 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	2110      	movs	r1, #16
 8002a7e:	4620      	mov	r0, r4
 8002a80:	f001 fb06 	bl	8004090 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002a84:	2200      	movs	r2, #0
 8002a86:	2120      	movs	r1, #32
 8002a88:	4620      	mov	r0, r4
 8002a8a:	f001 fb01 	bl	8004090 <HAL_GPIO_WritePin>
      break;
 8002a8e:	e7ec      	b.n	8002a6a <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002a90:	4c10      	ldr	r4, [pc, #64]	@ (8002ad4 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002a92:	2201      	movs	r2, #1
 8002a94:	2108      	movs	r1, #8
 8002a96:	4620      	mov	r0, r4
 8002a98:	f001 fafa 	bl	8004090 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	2110      	movs	r1, #16
 8002aa0:	4620      	mov	r0, r4
 8002aa2:	f001 faf5 	bl	8004090 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	2120      	movs	r1, #32
 8002aaa:	4620      	mov	r0, r4
 8002aac:	f001 faf0 	bl	8004090 <HAL_GPIO_WritePin>
      break;
 8002ab0:	e7db      	b.n	8002a6a <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002ab2:	4c08      	ldr	r4, [pc, #32]	@ (8002ad4 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	2108      	movs	r1, #8
 8002ab8:	4620      	mov	r0, r4
 8002aba:	f001 fae9 	bl	8004090 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002abe:	2200      	movs	r2, #0
 8002ac0:	2110      	movs	r1, #16
 8002ac2:	4620      	mov	r0, r4
 8002ac4:	f001 fae4 	bl	8004090 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002ac8:	2201      	movs	r2, #1
 8002aca:	2120      	movs	r1, #32
 8002acc:	4620      	mov	r0, r4
 8002ace:	f001 fadf 	bl	8004090 <HAL_GPIO_WritePin>
      break;
 8002ad2:	e7ca      	b.n	8002a6a <BSP_RADIO_ConfigRFSwitch+0x2e>
 8002ad4:	48000800 	.word	0x48000800

08002ad8 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_LP_HP;
}
 8002ad8:	2000      	movs	r0, #0
 8002ada:	4770      	bx	lr

08002adc <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 8002adc:	2001      	movs	r0, #1
 8002ade:	4770      	bx	lr

08002ae0 <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 8002ae0:	2001      	movs	r0, #1
 8002ae2:	4770      	bx	lr

08002ae4 <BSP_RADIO_GetRFOMaxPowerConfig>:
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8002ae4:	b908      	cbnz	r0, 8002aea <BSP_RADIO_GetRFOMaxPowerConfig+0x6>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8002ae6:	200f      	movs	r0, #15
 8002ae8:	4770      	bx	lr
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8002aea:	2016      	movs	r0, #22
  }

  return ret;
}
 8002aec:	4770      	bx	lr

08002aee <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002aee:	4770      	bx	lr

08002af0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002af0:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002af2:	2003      	movs	r0, #3
 8002af4:	f000 fd76 	bl	80035e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002af8:	f001 fc70 	bl	80043dc <HAL_RCC_GetHCLKFreq>
 8002afc:	4b06      	ldr	r3, [pc, #24]	@ (8002b18 <HAL_Init+0x28>)
 8002afe:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b00:	200f      	movs	r0, #15
 8002b02:	f7fe ff49 	bl	8001998 <HAL_InitTick>
 8002b06:	b110      	cbz	r0, 8002b0e <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8002b08:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8002b0a:	4620      	mov	r0, r4
 8002b0c:	bd10      	pop	{r4, pc}
 8002b0e:	4604      	mov	r4, r0
    HAL_MspInit();
 8002b10:	f7fe fe0c 	bl	800172c <HAL_MspInit>
 8002b14:	e7f9      	b.n	8002b0a <HAL_Init+0x1a>
 8002b16:	bf00      	nop
 8002b18:	20000074 	.word	0x20000074

08002b1c <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002b1c:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8002b20:	6913      	ldr	r3, [r2, #16]
 8002b22:	f023 0302 	bic.w	r3, r3, #2
 8002b26:	6113      	str	r3, [r2, #16]
}
 8002b28:	4770      	bx	lr

08002b2a <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002b2a:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8002b2e:	6913      	ldr	r3, [r2, #16]
 8002b30:	f043 0302 	orr.w	r3, r3, #2
 8002b34:	6113      	str	r3, [r2, #16]
}
 8002b36:	4770      	bx	lr

08002b38 <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 8002b38:	4b01      	ldr	r3, [pc, #4]	@ (8002b40 <HAL_GetUIDw0+0x8>)
 8002b3a:	f8d3 0590 	ldr.w	r0, [r3, #1424]	@ 0x590
 8002b3e:	4770      	bx	lr
 8002b40:	1fff7000 	.word	0x1fff7000

08002b44 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 8002b44:	4b01      	ldr	r3, [pc, #4]	@ (8002b4c <HAL_GetUIDw1+0x8>)
 8002b46:	f8d3 0594 	ldr.w	r0, [r3, #1428]	@ 0x594
 8002b4a:	4770      	bx	lr
 8002b4c:	1fff7000 	.word	0x1fff7000

08002b50 <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 8002b50:	4b01      	ldr	r3, [pc, #4]	@ (8002b58 <HAL_GetUIDw2+0x8>)
 8002b52:	f8d3 0598 	ldr.w	r0, [r3, #1432]	@ 0x598
 8002b56:	4770      	bx	lr
 8002b58:	1fff7000 	.word	0x1fff7000

08002b5c <HAL_DBGMCU_DisableDBGSleepMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002b5c:	4a02      	ldr	r2, [pc, #8]	@ (8002b68 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 8002b5e:	6853      	ldr	r3, [r2, #4]
 8002b60:	f023 0301 	bic.w	r3, r3, #1
 8002b64:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  LL_DBGMCU_DisableDBGSleepMode();
}
 8002b66:	4770      	bx	lr
 8002b68:	e0042000 	.word	0xe0042000

08002b6c <HAL_DBGMCU_DisableDBGStopMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002b6c:	4a02      	ldr	r2, [pc, #8]	@ (8002b78 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 8002b6e:	6853      	ldr	r3, [r2, #4]
 8002b70:	f023 0302 	bic.w	r3, r3, #2
 8002b74:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  LL_DBGMCU_DisableDBGStopMode();
}
 8002b76:	4770      	bx	lr
 8002b78:	e0042000 	.word	0xe0042000

08002b7c <HAL_DBGMCU_DisableDBGStandbyMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002b7c:	4a02      	ldr	r2, [pc, #8]	@ (8002b88 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 8002b7e:	6853      	ldr	r3, [r2, #4]
 8002b80:	f023 0304 	bic.w	r3, r3, #4
 8002b84:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  LL_DBGMCU_DisableDBGStandbyMode();
}
 8002b86:	4770      	bx	lr
 8002b88:	e0042000 	.word	0xe0042000

08002b8c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b8c:	b530      	push	{r4, r5, lr}
 8002b8e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b94:	2800      	cmp	r0, #0
 8002b96:	f000 8106 	beq.w	8002da6 <HAL_ADC_Init+0x21a>
 8002b9a:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b9c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8002b9e:	b1bb      	cbz	r3, 8002bd0 <HAL_ADC_Init+0x44>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ba0:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ba2:	6893      	ldr	r3, [r2, #8]
 8002ba4:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002ba8:	d11f      	bne.n	8002bea <HAL_ADC_Init+0x5e>
  MODIFY_REG(ADCx->CR,
 8002baa:	6893      	ldr	r3, [r2, #8]
 8002bac:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002bb0:	f023 0317 	bic.w	r3, r3, #23
 8002bb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bb8:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bba:	4b7c      	ldr	r3, [pc, #496]	@ (8002dac <HAL_ADC_Init+0x220>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	099b      	lsrs	r3, r3, #6
 8002bc0:	4a7b      	ldr	r2, [pc, #492]	@ (8002db0 <HAL_ADC_Init+0x224>)
 8002bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc6:	099b      	lsrs	r3, r3, #6
 8002bc8:	3301      	adds	r3, #1
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002bce:	e009      	b.n	8002be4 <HAL_ADC_Init+0x58>
    HAL_ADC_MspInit(hadc);
 8002bd0:	f7fe f9ac 	bl	8000f2c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	65e3      	str	r3, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8002bd8:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8002bdc:	e7e0      	b.n	8002ba0 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 8002bde:	9b01      	ldr	r3, [sp, #4]
 8002be0:	3b01      	subs	r3, #1
 8002be2:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002be4:	9b01      	ldr	r3, [sp, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1f9      	bne.n	8002bde <HAL_ADC_Init+0x52>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bea:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002bec:	6893      	ldr	r3, [r2, #8]
 8002bee:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002bf2:	f040 809a 	bne.w	8002d2a <HAL_ADC_Init+0x19e>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bf6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002bf8:	f043 0310 	orr.w	r3, r3, #16
 8002bfc:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bfe:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002c00:	f043 0301 	orr.w	r3, r3, #1
 8002c04:	65e3      	str	r3, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c06:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c08:	6893      	ldr	r3, [r2, #8]
 8002c0a:	f013 0304 	ands.w	r3, r3, #4
 8002c0e:	d000      	beq.n	8002c12 <HAL_ADC_Init+0x86>
 8002c10:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c12:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8002c14:	f011 0f10 	tst.w	r1, #16
 8002c18:	f040 80be 	bne.w	8002d98 <HAL_ADC_Init+0x20c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f040 80bb 	bne.w	8002d98 <HAL_ADC_Init+0x20c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c22:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002c24:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002c28:	f043 0302 	orr.w	r3, r3, #2
 8002c2c:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c2e:	6893      	ldr	r3, [r2, #8]
 8002c30:	f013 0f01 	tst.w	r3, #1
 8002c34:	d14f      	bne.n	8002cd6 <HAL_ADC_Init+0x14a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002c36:	68a3      	ldr	r3, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002c38:	7e21      	ldrb	r1, [r4, #24]
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002c3a:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002c3e:	7e61      	ldrb	r1, [r4, #25]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002c40:	ea43 33c1 	orr.w	r3, r3, r1, lsl #15
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002c44:	7ea5      	ldrb	r5, [r4, #26]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002c46:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002c4a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8002c4c:	b109      	cbz	r1, 8002c52 <HAL_ADC_Init+0xc6>
 8002c4e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002c52:	430b      	orrs	r3, r1
                   hadc->Init.DataAlign                                           |
 8002c54:	68e1      	ldr	r1, [r4, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002c56:	430b      	orrs	r3, r1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002c58:	6921      	ldr	r1, [r4, #16]
 8002c5a:	2900      	cmp	r1, #0
 8002c5c:	db67      	blt.n	8002d2e <HAL_ADC_Init+0x1a2>
 8002c5e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                           |
 8002c62:	430b      	orrs	r3, r1
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c64:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002c68:	ea43 0341 	orr.w	r3, r3, r1, lsl #1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c6c:	f894 1020 	ldrb.w	r1, [r4, #32]
 8002c70:	2901      	cmp	r1, #1
 8002c72:	d05f      	beq.n	8002d34 <HAL_ADC_Init+0x1a8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c74:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002c76:	b121      	cbz	r1, 8002c82 <HAL_ADC_Init+0xf6>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002c78:	f401 71e0 	and.w	r1, r1, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8002c7c:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002c7e:	4329      	orrs	r1, r5
 8002c80:	430b      	orrs	r3, r1
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002c82:	68d1      	ldr	r1, [r2, #12]
 8002c84:	f421 31fe 	bic.w	r1, r1, #130048	@ 0x1fc00
 8002c88:	f421 71ff 	bic.w	r1, r1, #510	@ 0x1fe
 8002c8c:	4319      	orrs	r1, r3
 8002c8e:	60d1      	str	r1, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002c90:	6863      	ldr	r3, [r4, #4]
 8002c92:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002c96:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002c98:	431a      	orrs	r2, r3
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c9a:	f894 103c 	ldrb.w	r1, [r4, #60]	@ 0x3c
 8002c9e:	2901      	cmp	r1, #1
 8002ca0:	d055      	beq.n	8002d4e <HAL_ADC_Init+0x1c2>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002ca2:	6821      	ldr	r1, [r4, #0]
 8002ca4:	690d      	ldr	r5, [r1, #16]
 8002ca6:	4b43      	ldr	r3, [pc, #268]	@ (8002db4 <HAL_ADC_Init+0x228>)
 8002ca8:	402b      	ands	r3, r5
 8002caa:	4313      	orrs	r3, r2
 8002cac:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002cae:	6863      	ldr	r3, [r4, #4]
 8002cb0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002cb4:	d00f      	beq.n	8002cd6 <HAL_ADC_Init+0x14a>
 8002cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cba:	d00c      	beq.n	8002cd6 <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002cbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002cc0:	d009      	beq.n	8002cd6 <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8002cc2:	493d      	ldr	r1, [pc, #244]	@ (8002db8 <HAL_ADC_Init+0x22c>)
 8002cc4:	f8d1 2708 	ldr.w	r2, [r1, #1800]	@ 0x708
 8002cc8:	f422 1270 	bic.w	r2, r2, #3932160	@ 0x3c0000
 8002ccc:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	f8c1 3708 	str.w	r3, [r1, #1800]	@ 0x708
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002cd6:	6821      	ldr	r1, [r4, #0]
 8002cd8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  MODIFY_REG(ADCx->SMPR,
 8002cda:	694a      	ldr	r2, [r1, #20]
 8002cdc:	f022 0207 	bic.w	r2, r2, #7
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	614b      	str	r3, [r1, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002ce4:	6822      	ldr	r2, [r4, #0]
 8002ce6:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8002ce8:	6953      	ldr	r3, [r2, #20]
 8002cea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cee:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8002cf2:	6153      	str	r3, [r2, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002cf4:	6923      	ldr	r3, [r4, #16]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d133      	bne.n	8002d62 <HAL_ADC_Init+0x1d6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002cfa:	6822      	ldr	r2, [r4, #0]
 8002cfc:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8002cfe:	f063 030f 	orn	r3, r3, #15
 8002d02:	6293      	str	r3, [r2, #40]	@ 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002d04:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	f003 0307 	and.w	r3, r3, #7
      == hadc->Init.SamplingTimeCommon1)
 8002d0c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d039      	beq.n	8002d86 <HAL_ADC_Init+0x1fa>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002d12:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002d14:	f023 0312 	bic.w	r3, r3, #18
 8002d18:	f043 0310 	orr.w	r3, r3, #16
 8002d1c:	65a3      	str	r3, [r4, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d1e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002d20:	f043 0301 	orr.w	r3, r3, #1
 8002d24:	65e3      	str	r3, [r4, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8002d26:	2001      	movs	r0, #1
 8002d28:	e03b      	b.n	8002da2 <HAL_ADC_Init+0x216>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d2a:	2000      	movs	r0, #0
 8002d2c:	e76c      	b.n	8002c08 <HAL_ADC_Init+0x7c>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002d2e:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8002d32:	e796      	b.n	8002c62 <HAL_ADC_Init+0xd6>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d34:	b915      	cbnz	r5, 8002d3c <HAL_ADC_Init+0x1b0>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002d36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d3a:	e79b      	b.n	8002c74 <HAL_ADC_Init+0xe8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d3c:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8002d3e:	f041 0120 	orr.w	r1, r1, #32
 8002d42:	65a1      	str	r1, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d44:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8002d46:	f041 0101 	orr.w	r1, r1, #1
 8002d4a:	65e1      	str	r1, [r4, #92]	@ 0x5c
 8002d4c:	e792      	b.n	8002c74 <HAL_ADC_Init+0xe8>
                     hadc->Init.Oversampling.Ratio         |
 8002d4e:	6c21      	ldr	r1, [r4, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002d50:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.RightBitShift |
 8002d52:	6c61      	ldr	r1, [r4, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002d54:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.TriggeredMode
 8002d56:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002d58:	430b      	orrs	r3, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	f042 0201 	orr.w	r2, r2, #1
 8002d60:	e79f      	b.n	8002ca2 <HAL_ADC_Init+0x116>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d66:	d1cd      	bne.n	8002d04 <HAL_ADC_Init+0x178>
      MODIFY_REG(hadc->Instance->CHSELR,
 8002d68:	6821      	ldr	r1, [r4, #0]
 8002d6a:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8002d6c:	69e3      	ldr	r3, [r4, #28]
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	f003 031c 	and.w	r3, r3, #28
 8002d76:	f06f 020f 	mvn.w	r2, #15
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8002d80:	4313      	orrs	r3, r2
 8002d82:	628b      	str	r3, [r1, #40]	@ 0x28
 8002d84:	e7be      	b.n	8002d04 <HAL_ADC_Init+0x178>
      ADC_CLEAR_ERRORCODE(hadc);
 8002d86:	2300      	movs	r3, #0
 8002d88:	65e3      	str	r3, [r4, #92]	@ 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8002d8a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002d8c:	f023 0303 	bic.w	r3, r3, #3
 8002d90:	f043 0301 	orr.w	r3, r3, #1
 8002d94:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002d96:	e004      	b.n	8002da2 <HAL_ADC_Init+0x216>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d98:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002d9a:	f043 0310 	orr.w	r3, r3, #16
 8002d9e:	65a3      	str	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002da0:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8002da2:	b003      	add	sp, #12
 8002da4:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8002da6:	2001      	movs	r0, #1
 8002da8:	e7fb      	b.n	8002da2 <HAL_ADC_Init+0x216>
 8002daa:	bf00      	nop
 8002dac:	20000074 	.word	0x20000074
 8002db0:	053e2d63 	.word	0x053e2d63
 8002db4:	1ffffc02 	.word	0x1ffffc02
 8002db8:	40012000 	.word	0x40012000

08002dbc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dbe:	4604      	mov	r4, r0
 8002dc0:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002dc2:	6946      	ldr	r6, [r0, #20]
 8002dc4:	2e08      	cmp	r6, #8
 8002dc6:	d005      	beq.n	8002dd4 <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002dc8:	6803      	ldr	r3, [r0, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f013 0f01 	tst.w	r3, #1
 8002dd0:	d11e      	bne.n	8002e10 <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002dd2:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002dd4:	f7fe fde2 	bl	800199c <HAL_GetTick>
 8002dd8:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002dda:	6823      	ldr	r3, [r4, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	4232      	tst	r2, r6
 8002de0:	d11c      	bne.n	8002e1c <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002de2:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002de6:	d0f8      	beq.n	8002dda <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002de8:	f7fe fdd8 	bl	800199c <HAL_GetTick>
 8002dec:	1bc3      	subs	r3, r0, r7
 8002dee:	42ab      	cmp	r3, r5
 8002df0:	d801      	bhi.n	8002df6 <HAL_ADC_PollForConversion+0x3a>
 8002df2:	2d00      	cmp	r5, #0
 8002df4:	d1f1      	bne.n	8002dda <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002df6:	6823      	ldr	r3, [r4, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4233      	tst	r3, r6
 8002dfc:	d1ed      	bne.n	8002dda <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002dfe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002e00:	f043 0304 	orr.w	r3, r3, #4
 8002e04:	65a3      	str	r3, [r4, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8002e06:	2300      	movs	r3, #0
 8002e08:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54

          return HAL_TIMEOUT;
 8002e0c:	2003      	movs	r0, #3
 8002e0e:	e028      	b.n	8002e62 <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e10:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8002e12:	f043 0320 	orr.w	r3, r3, #32
 8002e16:	6583      	str	r3, [r0, #88]	@ 0x58
      return HAL_ERROR;
 8002e18:	2001      	movs	r0, #1
 8002e1a:	e022      	b.n	8002e62 <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e1c:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8002e1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e22:	65a2      	str	r2, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 8002e2a:	d115      	bne.n	8002e58 <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002e2c:	7ea2      	ldrb	r2, [r4, #26]
 8002e2e:	b99a      	cbnz	r2, 8002e58 <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	f012 0f08 	tst.w	r2, #8
 8002e36:	d00f      	beq.n	8002e58 <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e38:	689a      	ldr	r2, [r3, #8]
 8002e3a:	f012 0f04 	tst.w	r2, #4
 8002e3e:	d111      	bne.n	8002e64 <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	f022 020c 	bic.w	r2, r2, #12
 8002e46:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002e48:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002e4a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e4e:	f023 0301 	bic.w	r3, r3, #1
 8002e52:	f043 0301 	orr.w	r3, r3, #1
 8002e56:	65a3      	str	r3, [r4, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002e58:	7e20      	ldrb	r0, [r4, #24]
 8002e5a:	b960      	cbnz	r0, 8002e76 <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002e5c:	6823      	ldr	r3, [r4, #0]
 8002e5e:	220c      	movs	r2, #12
 8002e60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8002e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e64:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002e66:	f043 0320 	orr.w	r3, r3, #32
 8002e6a:	65a3      	str	r3, [r4, #88]	@ 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e6c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002e6e:	f043 0301 	orr.w	r3, r3, #1
 8002e72:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8002e74:	e7f0      	b.n	8002e58 <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 8002e76:	2000      	movs	r0, #0
 8002e78:	e7f3      	b.n	8002e62 <HAL_ADC_PollForConversion+0xa6>

08002e7a <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002e7a:	6803      	ldr	r3, [r0, #0]
 8002e7c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 8002e7e:	4770      	bx	lr

08002e80 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002e80:	b470      	push	{r4, r5, r6}
 8002e82:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002e84:	2200      	movs	r2, #0
 8002e86:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002e88:	6904      	ldr	r4, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002e8a:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
 8002e8e:	2a01      	cmp	r2, #1
 8002e90:	f000 8103 	beq.w	800309a <HAL_ADC_ConfigChannel+0x21a>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2201      	movs	r2, #1
 8002e98:	f880 2054 	strb.w	r2, [r0, #84]	@ 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e9c:	6802      	ldr	r2, [r0, #0]
 8002e9e:	6890      	ldr	r0, [r2, #8]
 8002ea0:	f010 0f04 	tst.w	r0, #4
 8002ea4:	d00a      	beq.n	8002ebc <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ea6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002ea8:	f042 0220 	orr.w	r2, r2, #32
 8002eac:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002eae:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
}
 8002eb6:	b003      	add	sp, #12
 8002eb8:	bc70      	pop	{r4, r5, r6}
 8002eba:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 8002ebc:	6848      	ldr	r0, [r1, #4]
 8002ebe:	2802      	cmp	r0, #2
 8002ec0:	f000 809c 	beq.w	8002ffc <HAL_ADC_ConfigChannel+0x17c>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002ec4:	f1b4 4f00 	cmp.w	r4, #2147483648	@ 0x80000000
 8002ec8:	d027      	beq.n	8002f1a <HAL_ADC_ConfigChannel+0x9a>
 8002eca:	4d75      	ldr	r5, [pc, #468]	@ (80030a0 <HAL_ADC_ConfigChannel+0x220>)
 8002ecc:	42ac      	cmp	r4, r5
 8002ece:	d024      	beq.n	8002f1a <HAL_ADC_ConfigChannel+0x9a>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002ed0:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 8002ed2:	f000 001f 	and.w	r0, r0, #31
 8002ed6:	250f      	movs	r5, #15
 8002ed8:	4085      	lsls	r5, r0
 8002eda:	ea24 0505 	bic.w	r5, r4, r5
 8002ede:	680c      	ldr	r4, [r1, #0]
 8002ee0:	f3c4 0611 	ubfx	r6, r4, #0, #18
 8002ee4:	2e00      	cmp	r6, #0
 8002ee6:	d131      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0xcc>
 8002ee8:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8002eec:	4084      	lsls	r4, r0
 8002eee:	432c      	orrs	r4, r5
 8002ef0:	661c      	str	r4, [r3, #96]	@ 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002ef2:	684c      	ldr	r4, [r1, #4]
 8002ef4:	08a0      	lsrs	r0, r4, #2
 8002ef6:	3001      	adds	r0, #1
 8002ef8:	69dd      	ldr	r5, [r3, #28]
 8002efa:	42a8      	cmp	r0, r5
 8002efc:	d813      	bhi.n	8002f26 <HAL_ADC_ConfigChannel+0xa6>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002efe:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 8002f00:	6a90      	ldr	r0, [r2, #40]	@ 0x28
 8002f02:	f004 041f 	and.w	r4, r4, #31
 8002f06:	260f      	movs	r6, #15
 8002f08:	40a6      	lsls	r6, r4
 8002f0a:	ea20 0006 	bic.w	r0, r0, r6
 8002f0e:	f3c5 6583 	ubfx	r5, r5, #26, #4
 8002f12:	40a5      	lsls	r5, r4
 8002f14:	4328      	orrs	r0, r5
 8002f16:	6290      	str	r0, [r2, #40]	@ 0x28
}
 8002f18:	e005      	b.n	8002f26 <HAL_ADC_ConfigChannel+0xa6>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002f1a:	680c      	ldr	r4, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002f1c:	6a90      	ldr	r0, [r2, #40]	@ 0x28
 8002f1e:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8002f22:	4320      	orrs	r0, r4
 8002f24:	6290      	str	r0, [r2, #40]	@ 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002f26:	681c      	ldr	r4, [r3, #0]
 8002f28:	680d      	ldr	r5, [r1, #0]
 8002f2a:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 8002f2c:	6960      	ldr	r0, [r4, #20]
 8002f2e:	ea20 2005 	bic.w	r0, r0, r5, lsl #8
 8002f32:	ea02 2205 	and.w	r2, r2, r5, lsl #8
 8002f36:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8002f3a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002f3e:	4302      	orrs	r2, r0
 8002f40:	6162      	str	r2, [r4, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002f42:	680a      	ldr	r2, [r1, #0]
 8002f44:	2a00      	cmp	r2, #0
 8002f46:	db09      	blt.n	8002f5c <HAL_ADC_ConfigChannel+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f48:	2000      	movs	r0, #0
 8002f4a:	e7b1      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4c:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f50:	b114      	cbz	r4, 8002f58 <HAL_ADC_ConfigChannel+0xd8>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8002f52:	fab4 f484 	clz	r4, r4
 8002f56:	e7c9      	b.n	8002eec <HAL_ADC_ConfigChannel+0x6c>
    return 32U;
 8002f58:	2420      	movs	r4, #32
 8002f5a:	e7c7      	b.n	8002eec <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002f5c:	4951      	ldr	r1, [pc, #324]	@ (80030a4 <HAL_ADC_ConfigChannel+0x224>)
 8002f5e:	f8d1 0708 	ldr.w	r0, [r1, #1800]	@ 0x708
 8002f62:	f000 71e0 	and.w	r1, r0, #29360128	@ 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002f66:	4c50      	ldr	r4, [pc, #320]	@ (80030a8 <HAL_ADC_ConfigChannel+0x228>)
 8002f68:	42a2      	cmp	r2, r4
 8002f6a:	d007      	beq.n	8002f7c <HAL_ADC_ConfigChannel+0xfc>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002f6c:	4c4f      	ldr	r4, [pc, #316]	@ (80030ac <HAL_ADC_ConfigChannel+0x22c>)
 8002f6e:	42a2      	cmp	r2, r4
 8002f70:	d026      	beq.n	8002fc0 <HAL_ADC_ConfigChannel+0x140>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002f72:	4c4f      	ldr	r4, [pc, #316]	@ (80030b0 <HAL_ADC_ConfigChannel+0x230>)
 8002f74:	42a2      	cmp	r2, r4
 8002f76:	d032      	beq.n	8002fde <HAL_ADC_ConfigChannel+0x15e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f78:	2000      	movs	r0, #0
 8002f7a:	e799      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002f7c:	f410 0f00 	tst.w	r0, #8388608	@ 0x800000
 8002f80:	d1f4      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0xec>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f82:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002f86:	4847      	ldr	r0, [pc, #284]	@ (80030a4 <HAL_ADC_ConfigChannel+0x224>)
 8002f88:	f8d0 2708 	ldr.w	r2, [r0, #1800]	@ 0x708
 8002f8c:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8002f90:	4311      	orrs	r1, r2
 8002f92:	f8c0 1708 	str.w	r1, [r0, #1800]	@ 0x708
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f96:	4a47      	ldr	r2, [pc, #284]	@ (80030b4 <HAL_ADC_ConfigChannel+0x234>)
 8002f98:	6812      	ldr	r2, [r2, #0]
 8002f9a:	0992      	lsrs	r2, r2, #6
 8002f9c:	4946      	ldr	r1, [pc, #280]	@ (80030b8 <HAL_ADC_ConfigChannel+0x238>)
 8002f9e:	fba1 1202 	umull	r1, r2, r1, r2
 8002fa2:	0992      	lsrs	r2, r2, #6
 8002fa4:	3201      	adds	r2, #1
 8002fa6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002faa:	0092      	lsls	r2, r2, #2
 8002fac:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002fae:	e002      	b.n	8002fb6 <HAL_ADC_ConfigChannel+0x136>
            wait_loop_index--;
 8002fb0:	9a01      	ldr	r2, [sp, #4]
 8002fb2:	3a01      	subs	r2, #1
 8002fb4:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002fb6:	9a01      	ldr	r2, [sp, #4]
 8002fb8:	2a00      	cmp	r2, #0
 8002fba:	d1f9      	bne.n	8002fb0 <HAL_ADC_ConfigChannel+0x130>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fbc:	2000      	movs	r0, #0
 8002fbe:	e777      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x30>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002fc0:	f010 7f80 	tst.w	r0, #16777216	@ 0x1000000
 8002fc4:	d1d5      	bne.n	8002f72 <HAL_ADC_ConfigChannel+0xf2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fc6:	f041 7180 	orr.w	r1, r1, #16777216	@ 0x1000000
 8002fca:	4836      	ldr	r0, [pc, #216]	@ (80030a4 <HAL_ADC_ConfigChannel+0x224>)
 8002fcc:	f8d0 2708 	ldr.w	r2, [r0, #1800]	@ 0x708
 8002fd0:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8002fd4:	4311      	orrs	r1, r2
 8002fd6:	f8c0 1708 	str.w	r1, [r0, #1800]	@ 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fda:	2000      	movs	r0, #0
}
 8002fdc:	e768      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002fde:	f410 0f80 	tst.w	r0, #4194304	@ 0x400000
 8002fe2:	d158      	bne.n	8003096 <HAL_ADC_ConfigChannel+0x216>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fe4:	f441 0280 	orr.w	r2, r1, #4194304	@ 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002fe8:	482e      	ldr	r0, [pc, #184]	@ (80030a4 <HAL_ADC_ConfigChannel+0x224>)
 8002fea:	f8d0 1708 	ldr.w	r1, [r0, #1800]	@ 0x708
 8002fee:	f021 71e0 	bic.w	r1, r1, #29360128	@ 0x1c00000
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	f8c0 2708 	str.w	r2, [r0, #1800]	@ 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ff8:	2000      	movs	r0, #0
}
 8002ffa:	e759      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002ffc:	f1b4 4f00 	cmp.w	r4, #2147483648	@ 0x80000000
 8003000:	d002      	beq.n	8003008 <HAL_ADC_ConfigChannel+0x188>
 8003002:	4827      	ldr	r0, [pc, #156]	@ (80030a0 <HAL_ADC_ConfigChannel+0x220>)
 8003004:	4284      	cmp	r4, r0
 8003006:	d106      	bne.n	8003016 <HAL_ADC_ConfigChannel+0x196>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003008:	680c      	ldr	r4, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800300a:	6a90      	ldr	r0, [r2, #40]	@ 0x28
 800300c:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8003010:	ea20 0004 	bic.w	r0, r0, r4
 8003014:	6290      	str	r0, [r2, #40]	@ 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003016:	680a      	ldr	r2, [r1, #0]
 8003018:	2a00      	cmp	r2, #0
 800301a:	db01      	blt.n	8003020 <HAL_ADC_ConfigChannel+0x1a0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800301c:	2000      	movs	r0, #0
 800301e:	e747      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x30>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003020:	4920      	ldr	r1, [pc, #128]	@ (80030a4 <HAL_ADC_ConfigChannel+0x224>)
 8003022:	f8d1 1708 	ldr.w	r1, [r1, #1800]	@ 0x708
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003026:	4820      	ldr	r0, [pc, #128]	@ (80030a8 <HAL_ADC_ConfigChannel+0x228>)
 8003028:	4282      	cmp	r2, r0
 800302a:	d007      	beq.n	800303c <HAL_ADC_ConfigChannel+0x1bc>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800302c:	481f      	ldr	r0, [pc, #124]	@ (80030ac <HAL_ADC_ConfigChannel+0x22c>)
 800302e:	4282      	cmp	r2, r0
 8003030:	d013      	beq.n	800305a <HAL_ADC_ConfigChannel+0x1da>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003032:	481f      	ldr	r0, [pc, #124]	@ (80030b0 <HAL_ADC_ConfigChannel+0x230>)
 8003034:	4282      	cmp	r2, r0
 8003036:	d01f      	beq.n	8003078 <HAL_ADC_ConfigChannel+0x1f8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003038:	2000      	movs	r0, #0
 800303a:	e739      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800303c:	f001 71a0 	and.w	r1, r1, #20971520	@ 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003040:	f100 4010 	add.w	r0, r0, #2415919104	@ 0x90000000
 8003044:	f500 3088 	add.w	r0, r0, #69632	@ 0x11000
 8003048:	f8d0 2708 	ldr.w	r2, [r0, #1800]	@ 0x708
 800304c:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003050:	4311      	orrs	r1, r2
 8003052:	f8c0 1708 	str.w	r1, [r0, #1800]	@ 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003056:	2000      	movs	r0, #0
}
 8003058:	e72a      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800305a:	f401 0240 	and.w	r2, r1, #12582912	@ 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800305e:	f100 4008 	add.w	r0, r0, #2281701376	@ 0x88000000
 8003062:	f500 4060 	add.w	r0, r0, #57344	@ 0xe000
 8003066:	f8d0 1708 	ldr.w	r1, [r0, #1800]	@ 0x708
 800306a:	f021 71e0 	bic.w	r1, r1, #29360128	@ 0x1c00000
 800306e:	430a      	orrs	r2, r1
 8003070:	f8c0 2708 	str.w	r2, [r0, #1800]	@ 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003074:	2000      	movs	r0, #0
}
 8003076:	e71b      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003078:	f001 72c0 	and.w	r2, r1, #25165824	@ 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800307c:	f100 400c 	add.w	r0, r0, #2348810240	@ 0x8c000000
 8003080:	f500 3080 	add.w	r0, r0, #65536	@ 0x10000
 8003084:	f8d0 1708 	ldr.w	r1, [r0, #1800]	@ 0x708
 8003088:	f021 71e0 	bic.w	r1, r1, #29360128	@ 0x1c00000
 800308c:	430a      	orrs	r2, r1
 800308e:	f8c0 2708 	str.w	r2, [r0, #1800]	@ 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003092:	2000      	movs	r0, #0
}
 8003094:	e70c      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x30>
 8003096:	2000      	movs	r0, #0
 8003098:	e70a      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 800309a:	2002      	movs	r0, #2
 800309c:	e70b      	b.n	8002eb6 <HAL_ADC_ConfigChannel+0x36>
 800309e:	bf00      	nop
 80030a0:	80000004 	.word	0x80000004
 80030a4:	40012000 	.word	0x40012000
 80030a8:	b0001000 	.word	0xb0001000
 80030ac:	b8004000 	.word	0xb8004000
 80030b0:	b4002000 	.word	0xb4002000
 80030b4:	20000074 	.word	0x20000074
 80030b8:	053e2d63 	.word	0x053e2d63

080030bc <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80030bc:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80030be:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030c0:	689a      	ldr	r2, [r3, #8]
 80030c2:	f012 0f04 	tst.w	r2, #4
 80030c6:	d02a      	beq.n	800311e <ADC_ConversionStop+0x62>
 80030c8:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	f012 0f02 	tst.w	r2, #2
 80030d0:	d107      	bne.n	80030e2 <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80030d8:	f022 0217 	bic.w	r2, r2, #23
 80030dc:	f042 0210 	orr.w	r2, r2, #16
 80030e0:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80030e2:	f7fe fc5b 	bl	800199c <HAL_GetTick>
 80030e6:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80030e8:	6823      	ldr	r3, [r4, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f013 0f04 	tst.w	r3, #4
 80030f0:	d013      	beq.n	800311a <ADC_ConversionStop+0x5e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80030f2:	f7fe fc53 	bl	800199c <HAL_GetTick>
 80030f6:	1b43      	subs	r3, r0, r5
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d9f5      	bls.n	80030e8 <ADC_ConversionStop+0x2c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80030fc:	6823      	ldr	r3, [r4, #0]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f013 0f04 	tst.w	r3, #4
 8003104:	d0f0      	beq.n	80030e8 <ADC_ConversionStop+0x2c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003106:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003108:	f043 0310 	orr.w	r3, r3, #16
 800310c:	65a3      	str	r3, [r4, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800310e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003110:	f043 0301 	orr.w	r3, r3, #1
 8003114:	65e3      	str	r3, [r4, #92]	@ 0x5c

          return HAL_ERROR;
 8003116:	2001      	movs	r0, #1
 8003118:	e002      	b.n	8003120 <ADC_ConversionStop+0x64>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800311a:	2000      	movs	r0, #0
 800311c:	e000      	b.n	8003120 <ADC_ConversionStop+0x64>
 800311e:	2000      	movs	r0, #0
}
 8003120:	bd38      	pop	{r3, r4, r5, pc}
	...

08003124 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003124:	b530      	push	{r4, r5, lr}
 8003126:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003128:	2300      	movs	r3, #0
 800312a:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800312c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	f012 0f01 	tst.w	r2, #1
 8003134:	d15b      	bne.n	80031ee <ADC_Enable+0xca>
 8003136:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003138:	6899      	ldr	r1, [r3, #8]
 800313a:	4a2e      	ldr	r2, [pc, #184]	@ (80031f4 <ADC_Enable+0xd0>)
 800313c:	4211      	tst	r1, r2
 800313e:	d117      	bne.n	8003170 <ADC_Enable+0x4c>
  MODIFY_REG(ADCx->CR,
 8003140:	689a      	ldr	r2, [r3, #8]
 8003142:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003146:	f022 0217 	bic.w	r2, r2, #23
 800314a:	f042 0201 	orr.w	r2, r2, #1
 800314e:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003150:	4b29      	ldr	r3, [pc, #164]	@ (80031f8 <ADC_Enable+0xd4>)
 8003152:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8003156:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800315a:	d019      	beq.n	8003190 <ADC_Enable+0x6c>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800315c:	4b27      	ldr	r3, [pc, #156]	@ (80031fc <ADC_Enable+0xd8>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	099b      	lsrs	r3, r3, #6
 8003162:	4a27      	ldr	r2, [pc, #156]	@ (8003200 <ADC_Enable+0xdc>)
 8003164:	fba2 2303 	umull	r2, r3, r2, r3
 8003168:	099b      	lsrs	r3, r3, #6
 800316a:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 800316c:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800316e:	e00c      	b.n	800318a <ADC_Enable+0x66>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003170:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8003172:	f043 0310 	orr.w	r3, r3, #16
 8003176:	6583      	str	r3, [r0, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003178:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800317a:	f043 0301 	orr.w	r3, r3, #1
 800317e:	65c3      	str	r3, [r0, #92]	@ 0x5c
      return HAL_ERROR;
 8003180:	2001      	movs	r0, #1
 8003182:	e035      	b.n	80031f0 <ADC_Enable+0xcc>
      {
        wait_loop_index--;
 8003184:	9b01      	ldr	r3, [sp, #4]
 8003186:	3b01      	subs	r3, #1
 8003188:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800318a:	9b01      	ldr	r3, [sp, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1f9      	bne.n	8003184 <ADC_Enable+0x60>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003190:	7e63      	ldrb	r3, [r4, #25]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d101      	bne.n	800319a <ADC_Enable+0x76>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003196:	2000      	movs	r0, #0
 8003198:	e02a      	b.n	80031f0 <ADC_Enable+0xcc>
      tickstart = HAL_GetTick();
 800319a:	f7fe fbff 	bl	800199c <HAL_GetTick>
 800319e:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031a0:	6823      	ldr	r3, [r4, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	f012 0f01 	tst.w	r2, #1
 80031a8:	d11f      	bne.n	80031ea <ADC_Enable+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	f012 0f01 	tst.w	r2, #1
 80031b0:	d107      	bne.n	80031c2 <ADC_Enable+0x9e>
  MODIFY_REG(ADCx->CR,
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80031b8:	f022 0217 	bic.w	r2, r2, #23
 80031bc:	f042 0201 	orr.w	r2, r2, #1
 80031c0:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031c2:	f7fe fbeb 	bl	800199c <HAL_GetTick>
 80031c6:	1b40      	subs	r0, r0, r5
 80031c8:	2802      	cmp	r0, #2
 80031ca:	d9e9      	bls.n	80031a0 <ADC_Enable+0x7c>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031cc:	6823      	ldr	r3, [r4, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f013 0f01 	tst.w	r3, #1
 80031d4:	d1e4      	bne.n	80031a0 <ADC_Enable+0x7c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031d6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80031d8:	f043 0310 	orr.w	r3, r3, #16
 80031dc:	65a3      	str	r3, [r4, #88]	@ 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031de:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	65e3      	str	r3, [r4, #92]	@ 0x5c
            return HAL_ERROR;
 80031e6:	2001      	movs	r0, #1
 80031e8:	e002      	b.n	80031f0 <ADC_Enable+0xcc>
  return HAL_OK;
 80031ea:	2000      	movs	r0, #0
 80031ec:	e000      	b.n	80031f0 <ADC_Enable+0xcc>
 80031ee:	2000      	movs	r0, #0
}
 80031f0:	b003      	add	sp, #12
 80031f2:	bd30      	pop	{r4, r5, pc}
 80031f4:	80000017 	.word	0x80000017
 80031f8:	40012000 	.word	0x40012000
 80031fc:	20000074 	.word	0x20000074
 8003200:	053e2d63 	.word	0x053e2d63

08003204 <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003204:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f013 0f04 	tst.w	r3, #4
 800320c:	d128      	bne.n	8003260 <HAL_ADC_Start+0x5c>
{
 800320e:	b510      	push	{r4, lr}
 8003210:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 8003212:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 8003216:	2b01      	cmp	r3, #1
 8003218:	d024      	beq.n	8003264 <HAL_ADC_Start+0x60>
 800321a:	2301      	movs	r3, #1
 800321c:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
    tmp_hal_status = ADC_Enable(hadc);
 8003220:	f7ff ff80 	bl	8003124 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003224:	b9c0      	cbnz	r0, 8003258 <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 8003226:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003228:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800322c:	f023 0301 	bic.w	r3, r3, #1
 8003230:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003234:	65a3      	str	r3, [r4, #88]	@ 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8003236:	2300      	movs	r3, #0
 8003238:	65e3      	str	r3, [r4, #92]	@ 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800323a:	6822      	ldr	r2, [r4, #0]
 800323c:	211c      	movs	r1, #28
 800323e:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8003240:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003244:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003246:	6893      	ldr	r3, [r2, #8]
 8003248:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800324c:	f023 0317 	bic.w	r3, r3, #23
 8003250:	f043 0304 	orr.w	r3, r3, #4
 8003254:	6093      	str	r3, [r2, #8]
}
 8003256:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 8003258:	2300      	movs	r3, #0
 800325a:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800325e:	e7fa      	b.n	8003256 <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 8003260:	2002      	movs	r0, #2
}
 8003262:	4770      	bx	lr
    __HAL_LOCK(hadc);
 8003264:	2002      	movs	r0, #2
 8003266:	e7f6      	b.n	8003256 <HAL_ADC_Start+0x52>

08003268 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003268:	b538      	push	{r3, r4, r5, lr}
 800326a:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800326c:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800326e:	6893      	ldr	r3, [r2, #8]
 8003270:	f013 0302 	ands.w	r3, r3, #2
 8003274:	d000      	beq.n	8003278 <ADC_Disable+0x10>
 8003276:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003278:	6891      	ldr	r1, [r2, #8]
 800327a:	f011 0f01 	tst.w	r1, #1
 800327e:	d039      	beq.n	80032f4 <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 8003280:	2b00      	cmp	r3, #0
 8003282:	d139      	bne.n	80032f8 <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003284:	6893      	ldr	r3, [r2, #8]
 8003286:	f003 0305 	and.w	r3, r3, #5
 800328a:	2b01      	cmp	r3, #1
 800328c:	d009      	beq.n	80032a2 <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800328e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003290:	f043 0310 	orr.w	r3, r3, #16
 8003294:	65a3      	str	r3, [r4, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003296:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003298:	f043 0301 	orr.w	r3, r3, #1
 800329c:	65e3      	str	r3, [r4, #92]	@ 0x5c

      return HAL_ERROR;
 800329e:	2001      	movs	r0, #1
 80032a0:	e029      	b.n	80032f6 <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 80032a2:	6893      	ldr	r3, [r2, #8]
 80032a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80032a8:	f023 0317 	bic.w	r3, r3, #23
 80032ac:	f043 0302 	orr.w	r3, r3, #2
 80032b0:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80032b2:	6823      	ldr	r3, [r4, #0]
 80032b4:	2203      	movs	r2, #3
 80032b6:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80032b8:	f7fe fb70 	bl	800199c <HAL_GetTick>
 80032bc:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032be:	6823      	ldr	r3, [r4, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f013 0f01 	tst.w	r3, #1
 80032c6:	d013      	beq.n	80032f0 <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80032c8:	f7fe fb68 	bl	800199c <HAL_GetTick>
 80032cc:	1b40      	subs	r0, r0, r5
 80032ce:	2802      	cmp	r0, #2
 80032d0:	d9f5      	bls.n	80032be <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032d2:	6823      	ldr	r3, [r4, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f013 0f01 	tst.w	r3, #1
 80032da:	d0f0      	beq.n	80032be <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80032de:	f043 0310 	orr.w	r3, r3, #16
 80032e2:	65a3      	str	r3, [r4, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032e4:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80032e6:	f043 0301 	orr.w	r3, r3, #1
 80032ea:	65e3      	str	r3, [r4, #92]	@ 0x5c

          return HAL_ERROR;
 80032ec:	2001      	movs	r0, #1
 80032ee:	e002      	b.n	80032f6 <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032f0:	2000      	movs	r0, #0
 80032f2:	e000      	b.n	80032f6 <ADC_Disable+0x8e>
 80032f4:	2000      	movs	r0, #0
}
 80032f6:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 80032f8:	2000      	movs	r0, #0
 80032fa:	e7fc      	b.n	80032f6 <ADC_Disable+0x8e>

080032fc <HAL_ADC_DeInit>:
{
 80032fc:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 80032fe:	2800      	cmp	r0, #0
 8003300:	d056      	beq.n	80033b0 <HAL_ADC_DeInit+0xb4>
 8003302:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003304:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8003306:	f043 0302 	orr.w	r3, r3, #2
 800330a:	6583      	str	r3, [r0, #88]	@ 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 800330c:	f7ff fed6 	bl	80030bc <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8003310:	4606      	mov	r6, r0
 8003312:	2800      	cmp	r0, #0
 8003314:	d03d      	beq.n	8003392 <HAL_ADC_DeInit+0x96>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8003316:	6822      	ldr	r2, [r4, #0]
 8003318:	6853      	ldr	r3, [r2, #4]
 800331a:	f423 7367 	bic.w	r3, r3, #924	@ 0x39c
 800331e:	f023 0303 	bic.w	r3, r3, #3
 8003322:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003324:	6823      	ldr	r3, [r4, #0]
 8003326:	f240 329f 	movw	r2, #927	@ 0x39f
 800332a:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 800332c:	6822      	ldr	r2, [r4, #0]
 800332e:	68d1      	ldr	r1, [r2, #12]
 8003330:	4b20      	ldr	r3, [pc, #128]	@ (80033b4 <HAL_ADC_DeInit+0xb8>)
 8003332:	400b      	ands	r3, r1
 8003334:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003336:	6822      	ldr	r2, [r4, #0]
 8003338:	6913      	ldr	r3, [r2, #16]
 800333a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800333e:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003340:	6822      	ldr	r2, [r4, #0]
 8003342:	6953      	ldr	r3, [r2, #20]
 8003344:	f023 0307 	bic.w	r3, r3, #7
 8003348:	6153      	str	r3, [r2, #20]
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 800334a:	6822      	ldr	r2, [r4, #0]
 800334c:	6a13      	ldr	r3, [r2, #32]
 800334e:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8003352:	6213      	str	r3, [r2, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 8003354:	6822      	ldr	r2, [r4, #0]
 8003356:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8003358:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 800335c:	6253      	str	r3, [r2, #36]	@ 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 800335e:	6822      	ldr	r2, [r4, #0]
 8003360:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8003362:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8003366:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003368:	6823      	ldr	r3, [r4, #0]
 800336a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800336c:	2500      	movs	r5, #0
 800336e:	629d      	str	r5, [r3, #40]	@ 0x28
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8003370:	4a11      	ldr	r2, [pc, #68]	@ (80033b8 <HAL_ADC_DeInit+0xbc>)
 8003372:	f8d2 3708 	ldr.w	r3, [r2, #1800]	@ 0x708
 8003376:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 800337a:	f8c2 3708 	str.w	r3, [r2, #1800]	@ 0x708
  HAL_ADC_MspDeInit(hadc);
 800337e:	4620      	mov	r0, r4
 8003380:	f7fd fdea 	bl	8000f58 <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003384:	6625      	str	r5, [r4, #96]	@ 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 8003386:	65e5      	str	r5, [r4, #92]	@ 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 8003388:	65a5      	str	r5, [r4, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 800338a:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
}
 800338e:	4630      	mov	r0, r6
 8003390:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8003392:	4620      	mov	r0, r4
 8003394:	f7ff ff68 	bl	8003268 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003398:	4606      	mov	r6, r0
 800339a:	b908      	cbnz	r0, 80033a0 <HAL_ADC_DeInit+0xa4>
      hadc->State = HAL_ADC_STATE_READY;
 800339c:	2301      	movs	r3, #1
 800339e:	65a3      	str	r3, [r4, #88]	@ 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80033a0:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80033a2:	6893      	ldr	r3, [r2, #8]
 80033a4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80033a8:	f023 0317 	bic.w	r3, r3, #23
 80033ac:	6093      	str	r3, [r2, #8]
}
 80033ae:	e7b2      	b.n	8003316 <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 80033b0:	2601      	movs	r6, #1
 80033b2:	e7ec      	b.n	800338e <HAL_ADC_DeInit+0x92>
 80033b4:	833e0200 	.word	0x833e0200
 80033b8:	40012000 	.word	0x40012000

080033bc <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 80033bc:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d019      	beq.n	80033f8 <HAL_ADC_Stop+0x3c>
{
 80033c4:	b510      	push	{r4, lr}
 80033c6:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80033c8:	2301      	movs	r3, #1
 80033ca:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 80033ce:	f7ff fe75 	bl	80030bc <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80033d2:	b118      	cbz	r0, 80033dc <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 80033d4:	2300      	movs	r3, #0
 80033d6:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
}
 80033da:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 80033dc:	4620      	mov	r0, r4
 80033de:	f7ff ff43 	bl	8003268 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80033e2:	2800      	cmp	r0, #0
 80033e4:	d1f6      	bne.n	80033d4 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 80033e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80033e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033ec:	f023 0301 	bic.w	r3, r3, #1
 80033f0:	f043 0301 	orr.w	r3, r3, #1
 80033f4:	65a3      	str	r3, [r4, #88]	@ 0x58
 80033f6:	e7ed      	b.n	80033d4 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 80033f8:	2002      	movs	r0, #2
}
 80033fa:	4770      	bx	lr

080033fc <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80033fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033fe:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003400:	2300      	movs	r3, #0
 8003402:	9301      	str	r3, [sp, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003404:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 8003408:	2b01      	cmp	r3, #1
 800340a:	f000 8094 	beq.w	8003536 <HAL_ADCEx_Calibration_Start+0x13a>
 800340e:	4604      	mov	r4, r0
 8003410:	2301      	movs	r3, #1
 8003412:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003416:	f7ff ff27 	bl	8003268 <ADC_Disable>
 800341a:	4605      	mov	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800341c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	f012 0201 	ands.w	r2, r2, #1
 8003424:	d009      	beq.n	800343a <HAL_ADCEx_Calibration_Start+0x3e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003426:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003428:	f043 0310 	orr.w	r3, r3, #16
 800342c:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800342e:	2300      	movs	r3, #0
 8003430:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54

  return tmp_hal_status;
}
 8003434:	4628      	mov	r0, r5
 8003436:	b003      	add	sp, #12
 8003438:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 800343a:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800343c:	f421 7181 	bic.w	r1, r1, #258	@ 0x102
 8003440:	f041 0102 	orr.w	r1, r1, #2
 8003444:	65a1      	str	r1, [r4, #88]	@ 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003446:	68de      	ldr	r6, [r3, #12]
 8003448:	f426 46ff 	bic.w	r6, r6, #32640	@ 0x7f80
 800344c:	f026 067c 	bic.w	r6, r6, #124	@ 0x7c
 8003450:	0436      	lsls	r6, r6, #16
 8003452:	0c36      	lsrs	r6, r6, #16
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003454:	68d9      	ldr	r1, [r3, #12]
 8003456:	f421 4100 	bic.w	r1, r1, #32768	@ 0x8000
 800345a:	f021 0103 	bic.w	r1, r1, #3
 800345e:	60d9      	str	r1, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 8003460:	4610      	mov	r0, r2
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003462:	e005      	b.n	8003470 <HAL_ADCEx_Calibration_Start+0x74>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003464:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003468:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 800346c:	4418      	add	r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800346e:	3201      	adds	r2, #1
 8003470:	2a07      	cmp	r2, #7
 8003472:	d81e      	bhi.n	80034b2 <HAL_ADCEx_Calibration_Start+0xb6>
      LL_ADC_StartCalibration(hadc->Instance);
 8003474:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003476:	688b      	ldr	r3, [r1, #8]
 8003478:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800347c:	f023 0317 	bic.w	r3, r3, #23
 8003480:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003484:	608b      	str	r3, [r1, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003486:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003488:	6899      	ldr	r1, [r3, #8]
 800348a:	2900      	cmp	r1, #0
 800348c:	daea      	bge.n	8003464 <HAL_ADCEx_Calibration_Start+0x68>
        wait_loop_index++;
 800348e:	9b01      	ldr	r3, [sp, #4]
 8003490:	3301      	adds	r3, #1
 8003492:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003494:	9b01      	ldr	r3, [sp, #4]
 8003496:	f5b3 3f2e 	cmp.w	r3, #178176	@ 0x2b800
 800349a:	d3f4      	bcc.n	8003486 <HAL_ADCEx_Calibration_Start+0x8a>
          ADC_STATE_CLR_SET(hadc->State,
 800349c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800349e:	f023 0312 	bic.w	r3, r3, #18
 80034a2:	f043 0310 	orr.w	r3, r3, #16
 80034a6:	65a3      	str	r3, [r4, #88]	@ 0x58
          __HAL_UNLOCK(hadc);
 80034a8:	2300      	movs	r3, #0
 80034aa:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
          return HAL_ERROR;
 80034ae:	2501      	movs	r5, #1
 80034b0:	e7c0      	b.n	8003434 <HAL_ADCEx_Calibration_Start+0x38>
    calibration_factor_accumulated /= calibration_index;
 80034b2:	fbb0 f0f2 	udiv	r0, r0, r2
    LL_ADC_Enable(hadc->Instance);
 80034b6:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80034b8:	6893      	ldr	r3, [r2, #8]
 80034ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80034be:	f023 0317 	bic.w	r3, r3, #23
 80034c2:	f043 0301 	orr.w	r3, r3, #1
 80034c6:	6093      	str	r3, [r2, #8]
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80034c8:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CALFACT,
 80034ca:	f8d2 30b4 	ldr.w	r3, [r2, #180]	@ 0xb4
 80034ce:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80034d2:	4318      	orrs	r0, r3
 80034d4:	f8c2 00b4 	str.w	r0, [r2, #180]	@ 0xb4
    LL_ADC_Disable(hadc->Instance);
 80034d8:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80034da:	6893      	ldr	r3, [r2, #8]
 80034dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80034e0:	f023 0317 	bic.w	r3, r3, #23
 80034e4:	f043 0302 	orr.w	r3, r3, #2
 80034e8:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80034ea:	f7fe fa57 	bl	800199c <HAL_GetTick>
 80034ee:	4607      	mov	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80034f0:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	f012 0f01 	tst.w	r2, #1
 80034f8:	d109      	bne.n	800350e <HAL_ADCEx_Calibration_Start+0x112>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	4332      	orrs	r2, r6
 80034fe:	60da      	str	r2, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8003500:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003502:	f023 0303 	bic.w	r3, r3, #3
 8003506:	f043 0301 	orr.w	r3, r3, #1
 800350a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800350c:	e78f      	b.n	800342e <HAL_ADCEx_Calibration_Start+0x32>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800350e:	f7fe fa45 	bl	800199c <HAL_GetTick>
 8003512:	1bc3      	subs	r3, r0, r7
 8003514:	2b02      	cmp	r3, #2
 8003516:	d9eb      	bls.n	80034f0 <HAL_ADCEx_Calibration_Start+0xf4>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003518:	6823      	ldr	r3, [r4, #0]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f013 0f01 	tst.w	r3, #1
 8003520:	d0e6      	beq.n	80034f0 <HAL_ADCEx_Calibration_Start+0xf4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003522:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003524:	f043 0310 	orr.w	r3, r3, #16
 8003528:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800352a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800352c:	f043 0301 	orr.w	r3, r3, #1
 8003530:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 8003532:	2501      	movs	r5, #1
 8003534:	e77e      	b.n	8003434 <HAL_ADCEx_Calibration_Start+0x38>
  __HAL_LOCK(hadc);
 8003536:	2502      	movs	r5, #2
 8003538:	e77c      	b.n	8003434 <HAL_ADCEx_Calibration_Start+0x38>
	...

0800353c <__NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800353c:	2800      	cmp	r0, #0
 800353e:	db07      	blt.n	8003550 <__NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003540:	f000 021f 	and.w	r2, r0, #31
 8003544:	0940      	lsrs	r0, r0, #5
 8003546:	2301      	movs	r3, #1
 8003548:	4093      	lsls	r3, r2
 800354a:	4a02      	ldr	r2, [pc, #8]	@ (8003554 <__NVIC_EnableIRQ+0x18>)
 800354c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	e000e100 	.word	0xe000e100

08003558 <__NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003558:	2800      	cmp	r0, #0
 800355a:	db0c      	blt.n	8003576 <__NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800355c:	f000 021f 	and.w	r2, r0, #31
 8003560:	0940      	lsrs	r0, r0, #5
 8003562:	2301      	movs	r3, #1
 8003564:	4093      	lsls	r3, r2
 8003566:	3020      	adds	r0, #32
 8003568:	4a03      	ldr	r2, [pc, #12]	@ (8003578 <__NVIC_DisableIRQ+0x20>)
 800356a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800356e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003572:	f3bf 8f6f 	isb	sy
}
 8003576:	4770      	bx	lr
 8003578:	e000e100 	.word	0xe000e100

0800357c <__NVIC_SetPriority>:
  if ((int32_t)(IRQn) >= 0)
 800357c:	2800      	cmp	r0, #0
 800357e:	db08      	blt.n	8003592 <__NVIC_SetPriority+0x16>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003580:	0109      	lsls	r1, r1, #4
 8003582:	b2c9      	uxtb	r1, r1
 8003584:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8003588:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800358c:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8003590:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003592:	f000 000f 	and.w	r0, r0, #15
 8003596:	0109      	lsls	r1, r1, #4
 8003598:	b2c9      	uxtb	r1, r1
 800359a:	4b01      	ldr	r3, [pc, #4]	@ (80035a0 <__NVIC_SetPriority+0x24>)
 800359c:	5419      	strb	r1, [r3, r0]
}
 800359e:	4770      	bx	lr
 80035a0:	e000ed14 	.word	0xe000ed14

080035a4 <NVIC_EncodePriority>:
{
 80035a4:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035a6:	f000 0007 	and.w	r0, r0, #7
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035aa:	f1c0 0c07 	rsb	ip, r0, #7
 80035ae:	f1bc 0f04 	cmp.w	ip, #4
 80035b2:	bf28      	it	cs
 80035b4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035b8:	1d03      	adds	r3, r0, #4
 80035ba:	2b06      	cmp	r3, #6
 80035bc:	d90f      	bls.n	80035de <NVIC_EncodePriority+0x3a>
 80035be:	1ec3      	subs	r3, r0, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035c0:	f04f 3eff 	mov.w	lr, #4294967295
 80035c4:	fa0e f00c 	lsl.w	r0, lr, ip
 80035c8:	ea21 0100 	bic.w	r1, r1, r0
 80035cc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035ce:	fa0e fe03 	lsl.w	lr, lr, r3
 80035d2:	ea22 020e 	bic.w	r2, r2, lr
}
 80035d6:	ea41 0002 	orr.w	r0, r1, r2
 80035da:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035de:	2300      	movs	r3, #0
 80035e0:	e7ee      	b.n	80035c0 <NVIC_EncodePriority+0x1c>
	...

080035e4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035e4:	4a07      	ldr	r2, [pc, #28]	@ (8003604 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80035e6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035e8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80035ec:	041b      	lsls	r3, r3, #16
 80035ee:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035f0:	0200      	lsls	r0, r0, #8
 80035f2:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035f6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80035f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80035fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8003600:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003602:	4770      	bx	lr
 8003604:	e000ed00 	.word	0xe000ed00

08003608 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003608:	b510      	push	{r4, lr}
 800360a:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800360c:	4b05      	ldr	r3, [pc, #20]	@ (8003624 <HAL_NVIC_SetPriority+0x1c>)
 800360e:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003610:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8003614:	f7ff ffc6 	bl	80035a4 <NVIC_EncodePriority>
 8003618:	4601      	mov	r1, r0
 800361a:	4620      	mov	r0, r4
 800361c:	f7ff ffae 	bl	800357c <__NVIC_SetPriority>
}
 8003620:	bd10      	pop	{r4, pc}
 8003622:	bf00      	nop
 8003624:	e000ed00 	.word	0xe000ed00

08003628 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003628:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800362a:	f7ff ff87 	bl	800353c <__NVIC_EnableIRQ>
}
 800362e:	bd08      	pop	{r3, pc}

08003630 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003630:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003632:	f7ff ff91 	bl	8003558 <__NVIC_DisableIRQ>
}
 8003636:	bd08      	pop	{r3, pc}

08003638 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003638:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800363a:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 800363c:	f8d0 c050 	ldr.w	ip, [r0, #80]	@ 0x50
 8003640:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8003644:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8003646:	b124      	cbz	r4, 8003652 <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003648:	6d84      	ldr	r4, [r0, #88]	@ 0x58
 800364a:	f8d0 c05c 	ldr.w	ip, [r0, #92]	@ 0x5c
 800364e:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003652:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8003654:	f004 0c1c 	and.w	ip, r4, #28
 8003658:	2401      	movs	r4, #1
 800365a:	fa04 f40c 	lsl.w	r4, r4, ip
 800365e:	f8d0 c040 	ldr.w	ip, [r0, #64]	@ 0x40
 8003662:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003666:	6804      	ldr	r4, [r0, #0]
 8003668:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800366a:	6883      	ldr	r3, [r0, #8]
 800366c:	2b10      	cmp	r3, #16
 800366e:	d005      	beq.n	800367c <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003670:	6803      	ldr	r3, [r0, #0]
 8003672:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003674:	6803      	ldr	r3, [r0, #0]
 8003676:	60da      	str	r2, [r3, #12]
  }
}
 8003678:	bc10      	pop	{r4}
 800367a:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 800367c:	6803      	ldr	r3, [r0, #0]
 800367e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003680:	6803      	ldr	r3, [r0, #0]
 8003682:	60d9      	str	r1, [r3, #12]
 8003684:	e7f8      	b.n	8003678 <DMA_SetConfig+0x40>
	...

08003688 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003688:	6803      	ldr	r3, [r0, #0]
 800368a:	4a14      	ldr	r2, [pc, #80]	@ (80036dc <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d816      	bhi.n	80036be <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003690:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8003692:	f022 0203 	bic.w	r2, r2, #3
 8003696:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800369a:	f502 3202 	add.w	r2, r2, #133120	@ 0x20800
 800369e:	6482      	str	r2, [r0, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	3b08      	subs	r3, #8
 80036a4:	4a0e      	ldr	r2, [pc, #56]	@ (80036e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 80036a6:	fba2 2303 	umull	r2, r3, r2, r3
 80036aa:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80036ac:	4a0d      	ldr	r2, [pc, #52]	@ (80036e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 80036ae:	64c2      	str	r2, [r0, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80036b0:	f003 031f 	and.w	r3, r3, #31
 80036b4:	2201      	movs	r2, #1
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	6503      	str	r3, [r0, #80]	@ 0x50
}
 80036bc:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80036be:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 80036c0:	f022 0103 	bic.w	r1, r2, #3
 80036c4:	4a08      	ldr	r2, [pc, #32]	@ (80036e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 80036c6:	440a      	add	r2, r1
 80036c8:	6482      	str	r2, [r0, #72]	@ 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	3b08      	subs	r3, #8
 80036ce:	4a04      	ldr	r2, [pc, #16]	@ (80036e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 80036d0:	fba2 2303 	umull	r2, r3, r2, r3
 80036d4:	091b      	lsrs	r3, r3, #4
 80036d6:	3307      	adds	r3, #7
 80036d8:	e7e8      	b.n	80036ac <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 80036da:	bf00      	nop
 80036dc:	40020407 	.word	0x40020407
 80036e0:	cccccccd 	.word	0xcccccccd
 80036e4:	40020880 	.word	0x40020880
 80036e8:	4002081c 	.word	0x4002081c

080036ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80036ec:	6843      	ldr	r3, [r0, #4]
 80036ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80036f2:	4a07      	ldr	r2, [pc, #28]	@ (8003710 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 80036f4:	441a      	add	r2, r3
 80036f6:	0092      	lsls	r2, r2, #2
 80036f8:	6542      	str	r2, [r0, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80036fa:	4a06      	ldr	r2, [pc, #24]	@ (8003714 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 80036fc:	6582      	str	r2, [r0, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80036fe:	3b01      	subs	r3, #1
 8003700:	f003 0303 	and.w	r3, r3, #3
 8003704:	2201      	movs	r2, #1
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	65c3      	str	r3, [r0, #92]	@ 0x5c
}
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	1000823f 	.word	0x1000823f
 8003714:	40020940 	.word	0x40020940

08003718 <HAL_DMA_Init>:
  if (hdma == NULL)
 8003718:	2800      	cmp	r0, #0
 800371a:	d05e      	beq.n	80037da <HAL_DMA_Init+0xc2>
{
 800371c:	b510      	push	{r4, lr}
 800371e:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003720:	6803      	ldr	r3, [r0, #0]
 8003722:	4a2f      	ldr	r2, [pc, #188]	@ (80037e0 <HAL_DMA_Init+0xc8>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d840      	bhi.n	80037aa <HAL_DMA_Init+0x92>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003728:	4a2e      	ldr	r2, [pc, #184]	@ (80037e4 <HAL_DMA_Init+0xcc>)
 800372a:	441a      	add	r2, r3
 800372c:	492e      	ldr	r1, [pc, #184]	@ (80037e8 <HAL_DMA_Init+0xd0>)
 800372e:	fba1 1202 	umull	r1, r2, r1, r2
 8003732:	0912      	lsrs	r2, r2, #4
 8003734:	0092      	lsls	r2, r2, #2
 8003736:	6442      	str	r2, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003738:	4a2c      	ldr	r2, [pc, #176]	@ (80037ec <HAL_DMA_Init+0xd4>)
 800373a:	6402      	str	r2, [r0, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800373c:	2202      	movs	r2, #2
 800373e:	f884 2025 	strb.w	r2, [r4, #37]	@ 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	f36f 120e 	bfc	r2, #4, #11
 8003748:	601a      	str	r2, [r3, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800374a:	6821      	ldr	r1, [r4, #0]
 800374c:	680a      	ldr	r2, [r1, #0]
 800374e:	68a3      	ldr	r3, [r4, #8]
 8003750:	68e0      	ldr	r0, [r4, #12]
 8003752:	4303      	orrs	r3, r0
 8003754:	6920      	ldr	r0, [r4, #16]
 8003756:	4303      	orrs	r3, r0
 8003758:	6960      	ldr	r0, [r4, #20]
 800375a:	4303      	orrs	r3, r0
 800375c:	69a0      	ldr	r0, [r4, #24]
 800375e:	4303      	orrs	r3, r0
 8003760:	69e0      	ldr	r0, [r4, #28]
 8003762:	4303      	orrs	r3, r0
 8003764:	6a20      	ldr	r0, [r4, #32]
 8003766:	4303      	orrs	r3, r0
 8003768:	4313      	orrs	r3, r2
 800376a:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800376c:	4620      	mov	r0, r4
 800376e:	f7ff ff8b 	bl	8003688 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003772:	68a3      	ldr	r3, [r4, #8]
 8003774:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003778:	d022      	beq.n	80037c0 <HAL_DMA_Init+0xa8>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800377a:	6863      	ldr	r3, [r4, #4]
 800377c:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800377e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003782:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003784:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8003786:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8003788:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800378a:	6863      	ldr	r3, [r4, #4]
 800378c:	3b01      	subs	r3, #1
 800378e:	2b03      	cmp	r3, #3
 8003790:	d919      	bls.n	80037c6 <HAL_DMA_Init+0xae>
    hdma->DMAmuxRequestGen = NULL;
 8003792:	2300      	movs	r3, #0
 8003794:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8003796:	65a3      	str	r3, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003798:	65e3      	str	r3, [r4, #92]	@ 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800379a:	2000      	movs	r0, #0
 800379c:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 800379e:	2301      	movs	r3, #1
 80037a0:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
  __HAL_UNLOCK(hdma);
 80037a4:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
}
 80037a8:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80037aa:	4a11      	ldr	r2, [pc, #68]	@ (80037f0 <HAL_DMA_Init+0xd8>)
 80037ac:	441a      	add	r2, r3
 80037ae:	490e      	ldr	r1, [pc, #56]	@ (80037e8 <HAL_DMA_Init+0xd0>)
 80037b0:	fba1 1202 	umull	r1, r2, r1, r2
 80037b4:	0912      	lsrs	r2, r2, #4
 80037b6:	0092      	lsls	r2, r2, #2
 80037b8:	6442      	str	r2, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80037ba:	4a0e      	ldr	r2, [pc, #56]	@ (80037f4 <HAL_DMA_Init+0xdc>)
 80037bc:	6402      	str	r2, [r0, #64]	@ 0x40
 80037be:	e7bd      	b.n	800373c <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80037c0:	2300      	movs	r3, #0
 80037c2:	6063      	str	r3, [r4, #4]
 80037c4:	e7d9      	b.n	800377a <HAL_DMA_Init+0x62>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80037c6:	4620      	mov	r0, r4
 80037c8:	f7ff ff90 	bl	80036ec <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80037cc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80037ce:	2200      	movs	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80037d4:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80037d6:	605a      	str	r2, [r3, #4]
 80037d8:	e7df      	b.n	800379a <HAL_DMA_Init+0x82>
    return HAL_ERROR;
 80037da:	2001      	movs	r0, #1
}
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	40020407 	.word	0x40020407
 80037e4:	bffdfff8 	.word	0xbffdfff8
 80037e8:	cccccccd 	.word	0xcccccccd
 80037ec:	40020000 	.word	0x40020000
 80037f0:	bffdfbf8 	.word	0xbffdfbf8
 80037f4:	40020400 	.word	0x40020400

080037f8 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 80037f8:	2800      	cmp	r0, #0
 80037fa:	d04b      	beq.n	8003894 <HAL_DMA_DeInit+0x9c>
{
 80037fc:	b538      	push	{r3, r4, r5, lr}
 80037fe:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8003800:	6802      	ldr	r2, [r0, #0]
 8003802:	6813      	ldr	r3, [r2, #0]
 8003804:	f023 0301 	bic.w	r3, r3, #1
 8003808:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800380a:	6802      	ldr	r2, [r0, #0]
 800380c:	4b22      	ldr	r3, [pc, #136]	@ (8003898 <HAL_DMA_DeInit+0xa0>)
 800380e:	429a      	cmp	r2, r3
 8003810:	d82c      	bhi.n	800386c <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003812:	4b22      	ldr	r3, [pc, #136]	@ (800389c <HAL_DMA_DeInit+0xa4>)
 8003814:	4413      	add	r3, r2
 8003816:	4922      	ldr	r1, [pc, #136]	@ (80038a0 <HAL_DMA_DeInit+0xa8>)
 8003818:	fba1 1303 	umull	r1, r3, r1, r3
 800381c:	091b      	lsrs	r3, r3, #4
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003822:	4b20      	ldr	r3, [pc, #128]	@ (80038a4 <HAL_DMA_DeInit+0xac>)
 8003824:	6403      	str	r3, [r0, #64]	@ 0x40
  hdma->Instance->CCR = 0U;
 8003826:	2500      	movs	r5, #0
 8003828:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800382a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800382c:	f003 021c 	and.w	r2, r3, #28
 8003830:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8003832:	2301      	movs	r3, #1
 8003834:	4093      	lsls	r3, r2
 8003836:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003838:	4620      	mov	r0, r4
 800383a:	f7ff ff25 	bl	8003688 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 800383e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8003840:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003842:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8003844:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8003846:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003848:	6863      	ldr	r3, [r4, #4]
 800384a:	3b01      	subs	r3, #1
 800384c:	2b03      	cmp	r3, #3
 800384e:	d918      	bls.n	8003882 <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = NULL;
 8003850:	2000      	movs	r0, #0
 8003852:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8003854:	65a0      	str	r0, [r4, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003856:	65e0      	str	r0, [r4, #92]	@ 0x5c
  hdma->XferCpltCallback = NULL;
 8003858:	62e0      	str	r0, [r4, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800385a:	6320      	str	r0, [r4, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 800385c:	6360      	str	r0, [r4, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 800385e:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003860:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 8003862:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
  __HAL_UNLOCK(hdma);
 8003866:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
}
 800386a:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800386c:	4b0e      	ldr	r3, [pc, #56]	@ (80038a8 <HAL_DMA_DeInit+0xb0>)
 800386e:	4413      	add	r3, r2
 8003870:	490b      	ldr	r1, [pc, #44]	@ (80038a0 <HAL_DMA_DeInit+0xa8>)
 8003872:	fba1 1303 	umull	r1, r3, r1, r3
 8003876:	091b      	lsrs	r3, r3, #4
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800387c:	4b0b      	ldr	r3, [pc, #44]	@ (80038ac <HAL_DMA_DeInit+0xb4>)
 800387e:	6403      	str	r3, [r0, #64]	@ 0x40
 8003880:	e7d1      	b.n	8003826 <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003882:	4620      	mov	r0, r4
 8003884:	f7ff ff32 	bl	80036ec <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003888:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800388a:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800388c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800388e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8003890:	605a      	str	r2, [r3, #4]
 8003892:	e7dd      	b.n	8003850 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 8003894:	2001      	movs	r0, #1
}
 8003896:	4770      	bx	lr
 8003898:	40020407 	.word	0x40020407
 800389c:	bffdfff8 	.word	0xbffdfff8
 80038a0:	cccccccd 	.word	0xcccccccd
 80038a4:	40020000 	.word	0x40020000
 80038a8:	bffdfbf8 	.word	0xbffdfbf8
 80038ac:	40020400 	.word	0x40020400

080038b0 <HAL_DMA_Start_IT>:
{
 80038b0:	b538      	push	{r3, r4, r5, lr}
 80038b2:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80038b4:	f890 0024 	ldrb.w	r0, [r0, #36]	@ 0x24
 80038b8:	2801      	cmp	r0, #1
 80038ba:	d043      	beq.n	8003944 <HAL_DMA_Start_IT+0x94>
 80038bc:	2001      	movs	r0, #1
 80038be:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 80038c2:	f894 0025 	ldrb.w	r0, [r4, #37]	@ 0x25
 80038c6:	b2c0      	uxtb	r0, r0
 80038c8:	2801      	cmp	r0, #1
 80038ca:	d006      	beq.n	80038da <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80038cc:	2380      	movs	r3, #128	@ 0x80
 80038ce:	63e3      	str	r3, [r4, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 80038d0:	2300      	movs	r3, #0
 80038d2:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    status = HAL_ERROR;
 80038d6:	2001      	movs	r0, #1
}
 80038d8:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80038da:	2002      	movs	r0, #2
 80038dc:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038e0:	2000      	movs	r0, #0
 80038e2:	63e0      	str	r0, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 80038e4:	6825      	ldr	r5, [r4, #0]
 80038e6:	6828      	ldr	r0, [r5, #0]
 80038e8:	f020 0001 	bic.w	r0, r0, #1
 80038ec:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038ee:	4620      	mov	r0, r4
 80038f0:	f7ff fea2 	bl	8003638 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 80038f4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80038f6:	b1d3      	cbz	r3, 800392e <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038f8:	6822      	ldr	r2, [r4, #0]
 80038fa:	6813      	ldr	r3, [r2, #0]
 80038fc:	f043 030e 	orr.w	r3, r3, #14
 8003900:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003902:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 800390a:	d003      	beq.n	8003914 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003912:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != NULL)
 8003914:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003916:	b11b      	cbz	r3, 8003920 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800391e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8003920:	6822      	ldr	r2, [r4, #0]
 8003922:	6813      	ldr	r3, [r2, #0]
 8003924:	f043 0301 	orr.w	r3, r3, #1
 8003928:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800392a:	2000      	movs	r0, #0
 800392c:	e7d4      	b.n	80038d8 <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800392e:	6822      	ldr	r2, [r4, #0]
 8003930:	6813      	ldr	r3, [r2, #0]
 8003932:	f023 0304 	bic.w	r3, r3, #4
 8003936:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003938:	6822      	ldr	r2, [r4, #0]
 800393a:	6813      	ldr	r3, [r2, #0]
 800393c:	f043 030a 	orr.w	r3, r3, #10
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	e7de      	b.n	8003902 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8003944:	2002      	movs	r0, #2
 8003946:	e7c7      	b.n	80038d8 <HAL_DMA_Start_IT+0x28>

08003948 <HAL_DMA_Abort>:
  if (NULL == hdma)
 8003948:	4603      	mov	r3, r0
 800394a:	2800      	cmp	r0, #0
 800394c:	d034      	beq.n	80039b8 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800394e:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8003952:	b2d2      	uxtb	r2, r2
 8003954:	2a02      	cmp	r2, #2
 8003956:	d006      	beq.n	8003966 <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003958:	2204      	movs	r2, #4
 800395a:	63c2      	str	r2, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 800395c:	2200      	movs	r2, #0
 800395e:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    return HAL_ERROR;
 8003962:	2001      	movs	r0, #1
 8003964:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003966:	6801      	ldr	r1, [r0, #0]
 8003968:	680a      	ldr	r2, [r1, #0]
 800396a:	f022 020e 	bic.w	r2, r2, #14
 800396e:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003970:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8003972:	680a      	ldr	r2, [r1, #0]
 8003974:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003978:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 800397a:	6801      	ldr	r1, [r0, #0]
 800397c:	680a      	ldr	r2, [r1, #0]
 800397e:	f022 0201 	bic.w	r2, r2, #1
 8003982:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003984:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8003986:	f002 011c 	and.w	r1, r2, #28
 800398a:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 800398c:	2201      	movs	r2, #1
 800398e:	408a      	lsls	r2, r1
 8003990:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003992:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003994:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003996:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 8003998:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800399a:	b132      	cbz	r2, 80039aa <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800399c:	6811      	ldr	r1, [r2, #0]
 800399e:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 80039a2:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039a4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80039a6:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80039a8:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 80039b0:	2000      	movs	r0, #0
 80039b2:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  return HAL_OK;
 80039b6:	4770      	bx	lr
    return HAL_ERROR;
 80039b8:	2001      	movs	r0, #1
}
 80039ba:	4770      	bx	lr

080039bc <HAL_DMA_Abort_IT>:
{
 80039bc:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80039be:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d003      	beq.n	80039d0 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039c8:	2304      	movs	r3, #4
 80039ca:	63c3      	str	r3, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 80039cc:	2001      	movs	r0, #1
}
 80039ce:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039d0:	6802      	ldr	r2, [r0, #0]
 80039d2:	6813      	ldr	r3, [r2, #0]
 80039d4:	f023 030e 	bic.w	r3, r3, #14
 80039d8:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80039da:	6802      	ldr	r2, [r0, #0]
 80039dc:	6813      	ldr	r3, [r2, #0]
 80039de:	f023 0301 	bic.w	r3, r3, #1
 80039e2:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80039e4:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 80039e6:	6813      	ldr	r3, [r2, #0]
 80039e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039ec:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039ee:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80039f0:	f003 021c 	and.w	r2, r3, #28
 80039f4:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80039f6:	2301      	movs	r3, #1
 80039f8:	4093      	lsls	r3, r2
 80039fa:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039fc:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80039fe:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8003a00:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 8003a02:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8003a04:	b133      	cbz	r3, 8003a14 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a0c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a0e:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8003a10:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8003a12:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003a14:	2301      	movs	r3, #1
 8003a16:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferAbortCallback != NULL)
 8003a20:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8003a22:	b113      	cbz	r3, 8003a2a <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8003a24:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8003a26:	2000      	movs	r0, #0
 8003a28:	e7d1      	b.n	80039ce <HAL_DMA_Abort_IT+0x12>
 8003a2a:	2000      	movs	r0, #0
 8003a2c:	e7cf      	b.n	80039ce <HAL_DMA_Abort_IT+0x12>
	...

08003a30 <HAL_DMA_IRQHandler>:
{
 8003a30:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a32:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003a34:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003a36:	6804      	ldr	r4, [r0, #0]
 8003a38:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003a3a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8003a3c:	f003 031c 	and.w	r3, r3, #28
 8003a40:	2204      	movs	r2, #4
 8003a42:	409a      	lsls	r2, r3
 8003a44:	420a      	tst	r2, r1
 8003a46:	d015      	beq.n	8003a74 <HAL_DMA_IRQHandler+0x44>
 8003a48:	f015 0f04 	tst.w	r5, #4
 8003a4c:	d012      	beq.n	8003a74 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a4e:	6823      	ldr	r3, [r4, #0]
 8003a50:	f013 0f20 	tst.w	r3, #32
 8003a54:	d103      	bne.n	8003a5e <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a56:	6823      	ldr	r3, [r4, #0]
 8003a58:	f023 0304 	bic.w	r3, r3, #4
 8003a5c:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003a5e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8003a60:	f003 021c 	and.w	r2, r3, #28
 8003a64:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8003a66:	2304      	movs	r3, #4
 8003a68:	4093      	lsls	r3, r2
 8003a6a:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8003a6c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8003a6e:	b103      	cbz	r3, 8003a72 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8003a70:	4798      	blx	r3
}
 8003a72:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003a74:	2202      	movs	r2, #2
 8003a76:	409a      	lsls	r2, r3
 8003a78:	420a      	tst	r2, r1
 8003a7a:	d028      	beq.n	8003ace <HAL_DMA_IRQHandler+0x9e>
 8003a7c:	f015 0f02 	tst.w	r5, #2
 8003a80:	d025      	beq.n	8003ace <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a82:	6823      	ldr	r3, [r4, #0]
 8003a84:	f013 0f20 	tst.w	r3, #32
 8003a88:	d106      	bne.n	8003a98 <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a8a:	6823      	ldr	r3, [r4, #0]
 8003a8c:	f023 030a 	bic.w	r3, r3, #10
 8003a90:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8003a92:	2301      	movs	r3, #1
 8003a94:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003a98:	6802      	ldr	r2, [r0, #0]
 8003a9a:	4b1c      	ldr	r3, [pc, #112]	@ (8003b0c <HAL_DMA_IRQHandler+0xdc>)
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d90e      	bls.n	8003abe <HAL_DMA_IRQHandler+0x8e>
 8003aa0:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8003aa2:	f003 021c 	and.w	r2, r3, #28
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	4093      	lsls	r3, r2
 8003aaa:	4a19      	ldr	r2, [pc, #100]	@ (8003b10 <HAL_DMA_IRQHandler+0xe0>)
 8003aac:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 8003aae:	2300      	movs	r3, #0
 8003ab0:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
      if (hdma->XferCpltCallback != NULL)
 8003ab4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d0db      	beq.n	8003a72 <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 8003aba:	4798      	blx	r3
 8003abc:	e7d9      	b.n	8003a72 <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003abe:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8003ac0:	f003 021c 	and.w	r2, r3, #28
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	4093      	lsls	r3, r2
 8003ac8:	4a12      	ldr	r2, [pc, #72]	@ (8003b14 <HAL_DMA_IRQHandler+0xe4>)
 8003aca:	6053      	str	r3, [r2, #4]
 8003acc:	e7ef      	b.n	8003aae <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003ace:	2208      	movs	r2, #8
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	420b      	tst	r3, r1
 8003ad6:	d0cc      	beq.n	8003a72 <HAL_DMA_IRQHandler+0x42>
 8003ad8:	f015 0f08 	tst.w	r5, #8
 8003adc:	d0c9      	beq.n	8003a72 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ade:	6823      	ldr	r3, [r4, #0]
 8003ae0:	f023 030e 	bic.w	r3, r3, #14
 8003ae4:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ae6:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8003ae8:	f003 031c 	and.w	r3, r3, #28
 8003aec:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8003aee:	2201      	movs	r2, #1
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003af6:	63c2      	str	r2, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003af8:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8003afc:	2300      	movs	r3, #0
 8003afe:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferErrorCallback != NULL)
 8003b02:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d0b4      	beq.n	8003a72 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8003b08:	4798      	blx	r3
  return;
 8003b0a:	e7b2      	b.n	8003a72 <HAL_DMA_IRQHandler+0x42>
 8003b0c:	40020080 	.word	0x40020080
 8003b10:	40020400 	.word	0x40020400
 8003b14:	40020000 	.word	0x40020000

08003b18 <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 8003b18:	b178      	cbz	r0, 8003b3a <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 8003b1a:	6803      	ldr	r3, [r0, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8003b1e:	f011 0f10 	tst.w	r1, #16
 8003b22:	d004      	beq.n	8003b2e <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8003b24:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8003b28:	d004      	beq.n	8003b34 <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 8003b2a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 8003b2e:	601a      	str	r2, [r3, #0]
  return status;
 8003b30:	2000      	movs	r0, #0
 8003b32:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8003b34:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8003b38:	e7f9      	b.n	8003b2e <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 8003b3a:	2001      	movs	r0, #1
}
 8003b3c:	4770      	bx	lr
	...

08003b40 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003b40:	b410      	push	{r4}
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003b42:	4c05      	ldr	r4, [pc, #20]	@ (8003b58 <FLASH_Program_DoubleWord+0x18>)
 8003b44:	6961      	ldr	r1, [r4, #20]
 8003b46:	f041 0101 	orr.w	r1, r1, #1
 8003b4a:	6161      	str	r1, [r4, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8003b4c:	6002      	str	r2, [r0, #0]
 8003b4e:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8003b52:	6043      	str	r3, [r0, #4]
}
 8003b54:	bc10      	pop	{r4}
 8003b56:	4770      	bx	lr
 8003b58:	58004000 	.word	0x58004000

08003b5c <FLASH_Program_Fast>:

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8003b5c:	4a0c      	ldr	r2, [pc, #48]	@ (8003b90 <FLASH_Program_Fast+0x34>)
 8003b5e:	6953      	ldr	r3, [r2, #20]
 8003b60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b64:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b66:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003b6a:	b672      	cpsid	i
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8003b6c:	2340      	movs	r3, #64	@ 0x40
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8003b6e:	f851 2b04 	ldr.w	r2, [r1], #4
 8003b72:	f840 2b04 	str.w	r2, [r0], #4
    dest_addr++;
    src_addr++;
    row_index--;
 8003b76:	3b01      	subs	r3, #1
  }
  while (row_index != 0U);
 8003b78:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 8003b7c:	d1f7      	bne.n	8003b6e <FLASH_Program_Fast+0x12>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8003b7e:	4b04      	ldr	r3, [pc, #16]	@ (8003b90 <FLASH_Program_Fast+0x34>)
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8003b86:	d1fa      	bne.n	8003b7e <FLASH_Program_Fast+0x22>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b88:	f38c 8810 	msr	PRIMASK, ip
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	58004000 	.word	0x58004000

08003b94 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003b94:	4b09      	ldr	r3, [pc, #36]	@ (8003bbc <HAL_FLASH_Unlock+0x28>)
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	db01      	blt.n	8003ba0 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8003b9c:	2000      	movs	r0, #0
 8003b9e:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003ba0:	4b06      	ldr	r3, [pc, #24]	@ (8003bbc <HAL_FLASH_Unlock+0x28>)
 8003ba2:	4a07      	ldr	r2, [pc, #28]	@ (8003bc0 <HAL_FLASH_Unlock+0x2c>)
 8003ba4:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003ba6:	f102 3288 	add.w	r2, r2, #2290649224	@ 0x88888888
 8003baa:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	db01      	blt.n	8003bb6 <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8003bb2:	2000      	movs	r0, #0
 8003bb4:	4770      	bx	lr
      status = HAL_ERROR;
 8003bb6:	2001      	movs	r0, #1
}
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	58004000 	.word	0x58004000
 8003bc0:	45670123 	.word	0x45670123

08003bc4 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003bc4:	4b05      	ldr	r3, [pc, #20]	@ (8003bdc <HAL_FLASH_Lock+0x18>)
 8003bc6:	695a      	ldr	r2, [r3, #20]
 8003bc8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003bcc:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	db01      	blt.n	8003bd8 <HAL_FLASH_Lock+0x14>
    status = HAL_ERROR;
 8003bd4:	2001      	movs	r0, #1
}
 8003bd6:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8003bd8:	2000      	movs	r0, #0
 8003bda:	4770      	bx	lr
 8003bdc:	58004000 	.word	0x58004000

08003be0 <FLASH_WaitForLastOperation>:
{
 8003be0:	b538      	push	{r3, r4, r5, lr}
 8003be2:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8003be4:	f7fd feda 	bl	800199c <HAL_GetTick>
 8003be8:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003bea:	4b1b      	ldr	r3, [pc, #108]	@ (8003c58 <FLASH_WaitForLastOperation+0x78>)
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8003bf2:	d006      	beq.n	8003c02 <FLASH_WaitForLastOperation+0x22>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8003bf4:	f7fd fed2 	bl	800199c <HAL_GetTick>
 8003bf8:	1b00      	subs	r0, r0, r4
 8003bfa:	42a8      	cmp	r0, r5
 8003bfc:	d3f5      	bcc.n	8003bea <FLASH_WaitForLastOperation+0xa>
      return HAL_TIMEOUT;
 8003bfe:	2003      	movs	r0, #3
}
 8003c00:	bd38      	pop	{r3, r4, r5, pc}
  error = FLASH->SR;
 8003c02:	4b15      	ldr	r3, [pc, #84]	@ (8003c58 <FLASH_WaitForLastOperation+0x78>)
 8003c04:	691b      	ldr	r3, [r3, #16]
  if ((error & FLASH_FLAG_EOP) != 0U)
 8003c06:	f013 0f01 	tst.w	r3, #1
 8003c0a:	d115      	bne.n	8003c38 <FLASH_WaitForLastOperation+0x58>
  error &= FLASH_FLAG_SR_ERRORS;
 8003c0c:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8003c10:	f023 0305 	bic.w	r3, r3, #5
 8003c14:	041b      	lsls	r3, r3, #16
 8003c16:	0c1b      	lsrs	r3, r3, #16
  __HAL_FLASH_CLEAR_FLAG(error);
 8003c18:	b10b      	cbz	r3, 8003c1e <FLASH_WaitForLastOperation+0x3e>
 8003c1a:	4a0f      	ldr	r2, [pc, #60]	@ (8003c58 <FLASH_WaitForLastOperation+0x78>)
 8003c1c:	6113      	str	r3, [r2, #16]
  if (error != 0U)
 8003c1e:	b9ab      	cbnz	r3, 8003c4c <FLASH_WaitForLastOperation+0x6c>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8003c20:	4b0d      	ldr	r3, [pc, #52]	@ (8003c58 <FLASH_WaitForLastOperation+0x78>)
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8003c28:	d014      	beq.n	8003c54 <FLASH_WaitForLastOperation+0x74>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8003c2a:	f7fd feb7 	bl	800199c <HAL_GetTick>
 8003c2e:	1b00      	subs	r0, r0, r4
 8003c30:	42a8      	cmp	r0, r5
 8003c32:	d3f5      	bcc.n	8003c20 <FLASH_WaitForLastOperation+0x40>
      return HAL_TIMEOUT;
 8003c34:	2003      	movs	r0, #3
 8003c36:	e7e3      	b.n	8003c00 <FLASH_WaitForLastOperation+0x20>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003c38:	4a07      	ldr	r2, [pc, #28]	@ (8003c58 <FLASH_WaitForLastOperation+0x78>)
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	6111      	str	r1, [r2, #16]
  error &= FLASH_FLAG_SR_ERRORS;
 8003c3e:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8003c42:	f023 0305 	bic.w	r3, r3, #5
 8003c46:	041b      	lsls	r3, r3, #16
 8003c48:	0c1b      	lsrs	r3, r3, #16
  __HAL_FLASH_CLEAR_FLAG(error);
 8003c4a:	e7e5      	b.n	8003c18 <FLASH_WaitForLastOperation+0x38>
    pFlash.ErrorCode = error;
 8003c4c:	4a03      	ldr	r2, [pc, #12]	@ (8003c5c <FLASH_WaitForLastOperation+0x7c>)
 8003c4e:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 8003c50:	2001      	movs	r0, #1
 8003c52:	e7d5      	b.n	8003c00 <FLASH_WaitForLastOperation+0x20>
  return HAL_OK;
 8003c54:	2000      	movs	r0, #0
 8003c56:	e7d3      	b.n	8003c00 <FLASH_WaitForLastOperation+0x20>
 8003c58:	58004000 	.word	0x58004000
 8003c5c:	20000498 	.word	0x20000498

08003c60 <HAL_FLASH_Program>:
{
 8003c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c62:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 8003c64:	4b15      	ldr	r3, [pc, #84]	@ (8003cbc <HAL_FLASH_Program+0x5c>)
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d025      	beq.n	8003cb8 <HAL_FLASH_Program+0x58>
 8003c6c:	4604      	mov	r4, r0
 8003c6e:	460d      	mov	r5, r1
 8003c70:	4616      	mov	r6, r2
 8003c72:	4b12      	ldr	r3, [pc, #72]	@ (8003cbc <HAL_FLASH_Program+0x5c>)
 8003c74:	2201      	movs	r2, #1
 8003c76:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c78:	2200      	movs	r2, #0
 8003c7a:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003c7c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003c80:	f7ff ffae 	bl	8003be0 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8003c84:	b970      	cbnz	r0, 8003ca4 <HAL_FLASH_Program+0x44>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003c86:	2c01      	cmp	r4, #1
 8003c88:	d010      	beq.n	8003cac <HAL_FLASH_Program+0x4c>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003c8a:	4631      	mov	r1, r6
 8003c8c:	4628      	mov	r0, r5
 8003c8e:	f7ff ff65 	bl	8003b5c <FLASH_Program_Fast>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003c92:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003c96:	f7ff ffa3 	bl	8003be0 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8003c9a:	4a09      	ldr	r2, [pc, #36]	@ (8003cc0 <HAL_FLASH_Program+0x60>)
 8003c9c:	6953      	ldr	r3, [r2, #20]
 8003c9e:	ea23 0304 	bic.w	r3, r3, r4
 8003ca2:	6153      	str	r3, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 8003ca4:	4b05      	ldr	r3, [pc, #20]	@ (8003cbc <HAL_FLASH_Program+0x5c>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	701a      	strb	r2, [r3, #0]
}
 8003caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_DoubleWord(Address, Data);
 8003cac:	4632      	mov	r2, r6
 8003cae:	463b      	mov	r3, r7
 8003cb0:	4628      	mov	r0, r5
 8003cb2:	f7ff ff45 	bl	8003b40 <FLASH_Program_DoubleWord>
 8003cb6:	e7ec      	b.n	8003c92 <HAL_FLASH_Program+0x32>
  __HAL_LOCK(&pFlash);
 8003cb8:	2002      	movs	r0, #2
 8003cba:	e7f6      	b.n	8003caa <HAL_FLASH_Program+0x4a>
 8003cbc:	20000498 	.word	0x20000498
 8003cc0:	58004000 	.word	0x58004000

08003cc4 <FLASH_MassErase>:
{
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8003cc4:	4a03      	ldr	r2, [pc, #12]	@ (8003cd4 <FLASH_MassErase+0x10>)
 8003cc6:	6953      	ldr	r3, [r2, #20]
 8003cc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ccc:	f043 0304 	orr.w	r3, r3, #4
 8003cd0:	6153      	str	r3, [r2, #20]
#endif
}
 8003cd2:	4770      	bx	lr
 8003cd4:	58004000 	.word	0x58004000

08003cd8 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8003cd8:	4b18      	ldr	r3, [pc, #96]	@ (8003d3c <FLASH_FlushCaches+0x64>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d006      	beq.n	8003cf2 <FLASH_FlushCaches+0x1a>
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8003ce4:	4b15      	ldr	r3, [pc, #84]	@ (8003d3c <FLASH_FlushCaches+0x64>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d012      	beq.n	8003d16 <FLASH_FlushCaches+0x3e>
    __HAL_FLASH_DATA_CACHE_RESET();
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }
#endif
}
 8003cf0:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003cf2:	4b12      	ldr	r3, [pc, #72]	@ (8003d3c <FLASH_FlushCaches+0x64>)
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003cfa:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d0a:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	e7e6      	b.n	8003ce4 <FLASH_FlushCaches+0xc>
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003d16:	4b09      	ldr	r3, [pc, #36]	@ (8003d3c <FLASH_FlushCaches+0x64>)
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d1e:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_RESET();
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003d26:	601a      	str	r2, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003d2e:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d36:	601a      	str	r2, [r3, #0]
}
 8003d38:	e7da      	b.n	8003cf0 <FLASH_FlushCaches+0x18>
 8003d3a:	bf00      	nop
 8003d3c:	58004000 	.word	0x58004000

08003d40 <FLASH_AcknowledgePageErase>:
static void FLASH_AcknowledgePageErase(void)
{
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8003d40:	4a03      	ldr	r2, [pc, #12]	@ (8003d50 <FLASH_AcknowledgePageErase+0x10>)
 8003d42:	6953      	ldr	r3, [r2, #20]
 8003d44:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 8003d48:	f023 0302 	bic.w	r3, r3, #2
 8003d4c:	6153      	str	r3, [r2, #20]
#endif
}
 8003d4e:	4770      	bx	lr
 8003d50:	58004000 	.word	0x58004000

08003d54 <FLASH_PageErase>:
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8003d54:	4a05      	ldr	r2, [pc, #20]	@ (8003d6c <FLASH_PageErase+0x18>)
 8003d56:	6953      	ldr	r3, [r2, #20]
 8003d58:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 8003d5c:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 8003d60:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 8003d64:	f040 0002 	orr.w	r0, r0, #2
 8003d68:	6150      	str	r0, [r2, #20]
}
 8003d6a:	4770      	bx	lr
 8003d6c:	58004000 	.word	0x58004000

08003d70 <HAL_FLASHEx_Erase>:
{
 8003d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8003d72:	4b1e      	ldr	r3, [pc, #120]	@ (8003dec <HAL_FLASHEx_Erase+0x7c>)
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d035      	beq.n	8003de6 <HAL_FLASHEx_Erase+0x76>
 8003d7a:	4605      	mov	r5, r0
 8003d7c:	460f      	mov	r7, r1
 8003d7e:	4b1b      	ldr	r3, [pc, #108]	@ (8003dec <HAL_FLASHEx_Erase+0x7c>)
 8003d80:	2201      	movs	r2, #1
 8003d82:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003d84:	2200      	movs	r2, #0
 8003d86:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003d88:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003d8c:	f7ff ff28 	bl	8003be0 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8003d90:	4606      	mov	r6, r0
 8003d92:	bb18      	cbnz	r0, 8003ddc <HAL_FLASHEx_Erase+0x6c>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003d94:	682b      	ldr	r3, [r5, #0]
 8003d96:	2b04      	cmp	r3, #4
 8003d98:	d013      	beq.n	8003dc2 <HAL_FLASHEx_Erase+0x52>
      *PageError = 0xFFFFFFFFU;
 8003d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d9e:	603b      	str	r3, [r7, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8003da0:	686c      	ldr	r4, [r5, #4]
 8003da2:	686b      	ldr	r3, [r5, #4]
 8003da4:	68aa      	ldr	r2, [r5, #8]
 8003da6:	4413      	add	r3, r2
 8003da8:	42a3      	cmp	r3, r4
 8003daa:	d913      	bls.n	8003dd4 <HAL_FLASHEx_Erase+0x64>
        FLASH_PageErase(index);
 8003dac:	4620      	mov	r0, r4
 8003dae:	f7ff ffd1 	bl	8003d54 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003db2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003db6:	f7ff ff13 	bl	8003be0 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 8003dba:	4606      	mov	r6, r0
 8003dbc:	b948      	cbnz	r0, 8003dd2 <HAL_FLASHEx_Erase+0x62>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8003dbe:	3401      	adds	r4, #1
 8003dc0:	e7ef      	b.n	8003da2 <HAL_FLASHEx_Erase+0x32>
      FLASH_MassErase();
 8003dc2:	f7ff ff7f 	bl	8003cc4 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003dc6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003dca:	f7ff ff09 	bl	8003be0 <FLASH_WaitForLastOperation>
 8003dce:	4606      	mov	r6, r0
 8003dd0:	e002      	b.n	8003dd8 <HAL_FLASHEx_Erase+0x68>
          *PageError = index;
 8003dd2:	603c      	str	r4, [r7, #0]
      FLASH_AcknowledgePageErase();
 8003dd4:	f7ff ffb4 	bl	8003d40 <FLASH_AcknowledgePageErase>
    FLASH_FlushCaches();
 8003dd8:	f7ff ff7e 	bl	8003cd8 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8003ddc:	4b03      	ldr	r3, [pc, #12]	@ (8003dec <HAL_FLASHEx_Erase+0x7c>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	701a      	strb	r2, [r3, #0]
}
 8003de2:	4630      	mov	r0, r6
 8003de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8003de6:	2602      	movs	r6, #2
 8003de8:	e7fb      	b.n	8003de2 <HAL_FLASHEx_Erase+0x72>
 8003dea:	bf00      	nop
 8003dec:	20000498 	.word	0x20000498

08003df0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003df0:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 8003df2:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003df4:	e069      	b.n	8003eca <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003df6:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003df8:	005e      	lsls	r6, r3, #1
 8003dfa:	2403      	movs	r4, #3
 8003dfc:	40b4      	lsls	r4, r6
 8003dfe:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e02:	68cc      	ldr	r4, [r1, #12]
 8003e04:	40b4      	lsls	r4, r6
 8003e06:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8003e08:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e0a:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e0c:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e10:	684c      	ldr	r4, [r1, #4]
 8003e12:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8003e16:	409c      	lsls	r4, r3
 8003e18:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8003e1a:	6044      	str	r4, [r0, #4]
 8003e1c:	e066      	b.n	8003eec <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e1e:	08dd      	lsrs	r5, r3, #3
 8003e20:	3508      	adds	r5, #8
 8003e22:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e26:	f003 0c07 	and.w	ip, r3, #7
 8003e2a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003e2e:	f04f 0e0f 	mov.w	lr, #15
 8003e32:	fa0e fe0c 	lsl.w	lr, lr, ip
 8003e36:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e3a:	690c      	ldr	r4, [r1, #16]
 8003e3c:	fa04 f40c 	lsl.w	r4, r4, ip
 8003e40:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8003e44:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8003e48:	e067      	b.n	8003f1a <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003e4a:	2402      	movs	r4, #2
 8003e4c:	e000      	b.n	8003e50 <HAL_GPIO_Init+0x60>
 8003e4e:	2400      	movs	r4, #0
 8003e50:	fa04 f40e 	lsl.w	r4, r4, lr
 8003e54:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e56:	f10c 0c02 	add.w	ip, ip, #2
 8003e5a:	4d4b      	ldr	r5, [pc, #300]	@ (8003f88 <HAL_GPIO_Init+0x198>)
 8003e5c:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e60:	4c4a      	ldr	r4, [pc, #296]	@ (8003f8c <HAL_GPIO_Init+0x19c>)
 8003e62:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8003e64:	43d4      	mvns	r4, r2
 8003e66:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e6a:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8003e6e:	f41c 1f80 	tst.w	ip, #1048576	@ 0x100000
 8003e72:	d001      	beq.n	8003e78 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8003e74:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8003e78:	4d44      	ldr	r5, [pc, #272]	@ (8003f8c <HAL_GPIO_Init+0x19c>)
 8003e7a:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8003e7c:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8003e7e:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e82:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8003e86:	f41c 1f00 	tst.w	ip, #2097152	@ 0x200000
 8003e8a:	d001      	beq.n	8003e90 <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 8003e8c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8003e90:	4d3e      	ldr	r5, [pc, #248]	@ (8003f8c <HAL_GPIO_Init+0x19c>)
 8003e92:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8003e94:	f8d5 5080 	ldr.w	r5, [r5, #128]	@ 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003e98:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e9c:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8003ea0:	f41c 3f80 	tst.w	ip, #65536	@ 0x10000
 8003ea4:	d001      	beq.n	8003eaa <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 8003ea6:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8003eaa:	4d38      	ldr	r5, [pc, #224]	@ (8003f8c <HAL_GPIO_Init+0x19c>)
 8003eac:	f8c5 6080 	str.w	r6, [r5, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8003eb0:	f8d5 5084 	ldr.w	r5, [r5, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003eb4:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003eb6:	684e      	ldr	r6, [r1, #4]
 8003eb8:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8003ebc:	d001      	beq.n	8003ec2 <HAL_GPIO_Init+0xd2>
        {
          temp |= iocurrent;
 8003ebe:	ea42 0405 	orr.w	r4, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8003ec2:	4a32      	ldr	r2, [pc, #200]	@ (8003f8c <HAL_GPIO_Init+0x19c>)
 8003ec4:	f8c2 4084 	str.w	r4, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8003ec8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003eca:	680a      	ldr	r2, [r1, #0]
 8003ecc:	fa32 f403 	lsrs.w	r4, r2, r3
 8003ed0:	d058      	beq.n	8003f84 <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ed2:	f04f 0c01 	mov.w	ip, #1
 8003ed6:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8003eda:	ea1c 0202 	ands.w	r2, ip, r2
 8003ede:	d0f3      	beq.n	8003ec8 <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ee0:	684c      	ldr	r4, [r1, #4]
 8003ee2:	f004 0403 	and.w	r4, r4, #3
 8003ee6:	3c01      	subs	r4, #1
 8003ee8:	2c01      	cmp	r4, #1
 8003eea:	d984      	bls.n	8003df6 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003eec:	684c      	ldr	r4, [r1, #4]
 8003eee:	f004 0403 	and.w	r4, r4, #3
 8003ef2:	2c03      	cmp	r4, #3
 8003ef4:	d00c      	beq.n	8003f10 <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 8003ef6:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ef8:	005d      	lsls	r5, r3, #1
 8003efa:	f04f 0c03 	mov.w	ip, #3
 8003efe:	fa0c fc05 	lsl.w	ip, ip, r5
 8003f02:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f06:	688c      	ldr	r4, [r1, #8]
 8003f08:	40ac      	lsls	r4, r5
 8003f0a:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8003f0e:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f10:	684c      	ldr	r4, [r1, #4]
 8003f12:	f004 0403 	and.w	r4, r4, #3
 8003f16:	2c02      	cmp	r4, #2
 8003f18:	d081      	beq.n	8003e1e <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 8003f1a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f1c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8003f20:	f04f 0c03 	mov.w	ip, #3
 8003f24:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003f28:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f2c:	684c      	ldr	r4, [r1, #4]
 8003f2e:	f004 0403 	and.w	r4, r4, #3
 8003f32:	fa04 f40e 	lsl.w	r4, r4, lr
 8003f36:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8003f3a:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f3c:	684c      	ldr	r4, [r1, #4]
 8003f3e:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
 8003f42:	d0c1      	beq.n	8003ec8 <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 8003f44:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8003f48:	f10c 0502 	add.w	r5, ip, #2
 8003f4c:	4c0e      	ldr	r4, [pc, #56]	@ (8003f88 <HAL_GPIO_Init+0x198>)
 8003f4e:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8003f52:	f003 0e03 	and.w	lr, r3, #3
 8003f56:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8003f5a:	2407      	movs	r4, #7
 8003f5c:	fa04 f40e 	lsl.w	r4, r4, lr
 8003f60:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f64:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 8003f68:	f43f af71 	beq.w	8003e4e <HAL_GPIO_Init+0x5e>
 8003f6c:	4c08      	ldr	r4, [pc, #32]	@ (8003f90 <HAL_GPIO_Init+0x1a0>)
 8003f6e:	42a0      	cmp	r0, r4
 8003f70:	d006      	beq.n	8003f80 <HAL_GPIO_Init+0x190>
 8003f72:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003f76:	42a0      	cmp	r0, r4
 8003f78:	f43f af67 	beq.w	8003e4a <HAL_GPIO_Init+0x5a>
 8003f7c:	2407      	movs	r4, #7
 8003f7e:	e767      	b.n	8003e50 <HAL_GPIO_Init+0x60>
 8003f80:	2401      	movs	r4, #1
 8003f82:	e765      	b.n	8003e50 <HAL_GPIO_Init+0x60>
  }
}
 8003f84:	bd70      	pop	{r4, r5, r6, pc}
 8003f86:	bf00      	nop
 8003f88:	40010000 	.word	0x40010000
 8003f8c:	58000800 	.word	0x58000800
 8003f90:	48000400 	.word	0x48000400

08003f94 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8003f94:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003f96:	fa31 f203 	lsrs.w	r2, r1, r3
 8003f9a:	d071      	beq.n	8004080 <HAL_GPIO_DeInit+0xec>
{
 8003f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f9e:	e02e      	b.n	8003ffe <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003fa0:	2502      	movs	r5, #2
 8003fa2:	e000      	b.n	8003fa6 <HAL_GPIO_DeInit+0x12>
 8003fa4:	2500      	movs	r5, #0
 8003fa6:	fa05 f50c 	lsl.w	r5, r5, ip
 8003faa:	42a5      	cmp	r5, r4
 8003fac:	d049      	beq.n	8004042 <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003fae:	6804      	ldr	r4, [r0, #0]
 8003fb0:	005d      	lsls	r5, r3, #1
 8003fb2:	f04f 0c03 	mov.w	ip, #3
 8003fb6:	fa0c fc05 	lsl.w	ip, ip, r5
 8003fba:	ea44 040c 	orr.w	r4, r4, ip
 8003fbe:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8003fc0:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8003fc4:	f10e 0e08 	add.w	lr, lr, #8
 8003fc8:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8003fcc:	f003 0607 	and.w	r6, r3, #7
 8003fd0:	00b6      	lsls	r6, r6, #2
 8003fd2:	250f      	movs	r5, #15
 8003fd4:	40b5      	lsls	r5, r6
 8003fd6:	ea24 0405 	bic.w	r4, r4, r5
 8003fda:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003fde:	6884      	ldr	r4, [r0, #8]
 8003fe0:	ea24 040c 	bic.w	r4, r4, ip
 8003fe4:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fe6:	6844      	ldr	r4, [r0, #4]
 8003fe8:	ea24 0202 	bic.w	r2, r4, r2
 8003fec:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003fee:	68c2      	ldr	r2, [r0, #12]
 8003ff0:	ea22 020c 	bic.w	r2, r2, ip
 8003ff4:	60c2      	str	r2, [r0, #12]
    }

    position++;
 8003ff6:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8003ff8:	fa31 f203 	lsrs.w	r2, r1, r3
 8003ffc:	d03f      	beq.n	800407e <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003ffe:	2201      	movs	r2, #1
 8004000:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8004002:	ea12 0701 	ands.w	r7, r2, r1
 8004006:	d0f6      	beq.n	8003ff6 <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8004008:	089e      	lsrs	r6, r3, #2
 800400a:	1cb5      	adds	r5, r6, #2
 800400c:	4c1d      	ldr	r4, [pc, #116]	@ (8004084 <HAL_GPIO_DeInit+0xf0>)
 800400e:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8004012:	f003 0c03 	and.w	ip, r3, #3
 8004016:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800401a:	f04f 0e07 	mov.w	lr, #7
 800401e:	fa0e fe0c 	lsl.w	lr, lr, ip
 8004022:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004026:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 800402a:	d0bb      	beq.n	8003fa4 <HAL_GPIO_DeInit+0x10>
 800402c:	4d16      	ldr	r5, [pc, #88]	@ (8004088 <HAL_GPIO_DeInit+0xf4>)
 800402e:	42a8      	cmp	r0, r5
 8004030:	d005      	beq.n	800403e <HAL_GPIO_DeInit+0xaa>
 8004032:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004036:	42a8      	cmp	r0, r5
 8004038:	d0b2      	beq.n	8003fa0 <HAL_GPIO_DeInit+0xc>
 800403a:	2507      	movs	r5, #7
 800403c:	e7b3      	b.n	8003fa6 <HAL_GPIO_DeInit+0x12>
 800403e:	2501      	movs	r5, #1
 8004040:	e7b1      	b.n	8003fa6 <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 8004042:	4c12      	ldr	r4, [pc, #72]	@ (800408c <HAL_GPIO_DeInit+0xf8>)
 8004044:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
 8004048:	ea25 0507 	bic.w	r5, r5, r7
 800404c:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004050:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
 8004054:	ea25 0507 	bic.w	r5, r5, r7
 8004058:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 800405c:	6825      	ldr	r5, [r4, #0]
 800405e:	ea25 0507 	bic.w	r5, r5, r7
 8004062:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004064:	6865      	ldr	r5, [r4, #4]
 8004066:	ea25 0507 	bic.w	r5, r5, r7
 800406a:	6065      	str	r5, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800406c:	4d05      	ldr	r5, [pc, #20]	@ (8004084 <HAL_GPIO_DeInit+0xf0>)
 800406e:	3602      	adds	r6, #2
 8004070:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 8004074:	ea24 040e 	bic.w	r4, r4, lr
 8004078:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 800407c:	e797      	b.n	8003fae <HAL_GPIO_DeInit+0x1a>
  }
}
 800407e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	40010000 	.word	0x40010000
 8004088:	48000400 	.word	0x48000400
 800408c:	58000800 	.word	0x58000800

08004090 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004090:	b10a      	cbz	r2, 8004096 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004092:	6181      	str	r1, [r0, #24]
 8004094:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004096:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8004098:	4770      	bx	lr

0800409a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800409a:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800409c:	ea01 0203 	and.w	r2, r1, r3
 80040a0:	ea21 0103 	bic.w	r1, r1, r3
 80040a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80040a8:	6181      	str	r1, [r0, #24]
}
 80040aa:	4770      	bx	lr

080040ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80040ac:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80040ae:	4b05      	ldr	r3, [pc, #20]	@ (80040c4 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	4203      	tst	r3, r0
 80040b4:	d100      	bne.n	80040b8 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80040b6:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040b8:	4b02      	ldr	r3, [pc, #8]	@ (80040c4 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80040ba:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040bc:	f7fe fbf4 	bl	80028a8 <HAL_GPIO_EXTI_Callback>
}
 80040c0:	e7f9      	b.n	80040b6 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80040c2:	bf00      	nop
 80040c4:	58000800 	.word	0x58000800

080040c8 <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040c8:	4a02      	ldr	r2, [pc, #8]	@ (80040d4 <HAL_PWR_EnableBkUpAccess+0xc>)
 80040ca:	6813      	ldr	r3, [r2, #0]
 80040cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040d0:	6013      	str	r3, [r2, #0]
}
 80040d2:	4770      	bx	lr
 80040d4:	58000400 	.word	0x58000400

080040d8 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80040d8:	b510      	push	{r4, lr}
 80040da:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80040dc:	b9a0      	cbnz	r0, 8004108 <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80040de:	4b0f      	ldr	r3, [pc, #60]	@ (800411c <HAL_PWR_EnterSLEEPMode+0x44>)
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	f413 7f00 	tst.w	r3, #512	@ 0x200
 80040e6:	d10a      	bne.n	80040fe <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80040e8:	4a0d      	ldr	r2, [pc, #52]	@ (8004120 <HAL_PWR_EnterSLEEPMode+0x48>)
 80040ea:	6913      	ldr	r3, [r2, #16]
 80040ec:	f023 0304 	bic.w	r3, r3, #4
 80040f0:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80040f2:	2c01      	cmp	r4, #1
 80040f4:	d010      	beq.n	8004118 <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80040f6:	bf40      	sev
    __WFE();
 80040f8:	bf20      	wfe
    __WFE();
 80040fa:	bf20      	wfe
  }
}
 80040fc:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80040fe:	f000 f821 	bl	8004144 <HAL_PWREx_DisableLowPowerRunMode>
 8004102:	2800      	cmp	r0, #0
 8004104:	d0f0      	beq.n	80040e8 <HAL_PWR_EnterSLEEPMode+0x10>
 8004106:	e7f9      	b.n	80040fc <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8004108:	4b04      	ldr	r3, [pc, #16]	@ (800411c <HAL_PWR_EnterSLEEPMode+0x44>)
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8004110:	d1ea      	bne.n	80040e8 <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 8004112:	f000 f80f 	bl	8004134 <HAL_PWREx_EnableLowPowerRunMode>
 8004116:	e7e7      	b.n	80040e8 <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 8004118:	bf30      	wfi
 800411a:	e7ef      	b.n	80040fc <HAL_PWR_EnterSLEEPMode+0x24>
 800411c:	58000400 	.word	0x58000400
 8004120:	e000ed00 	.word	0xe000ed00

08004124 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8004124:	4b02      	ldr	r3, [pc, #8]	@ (8004130 <HAL_PWREx_GetVoltageRange+0xc>)
 8004126:	6818      	ldr	r0, [r3, #0]
}
 8004128:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	58000400 	.word	0x58000400

08004134 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8004134:	4a02      	ldr	r2, [pc, #8]	@ (8004140 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 8004136:	6813      	ldr	r3, [r2, #0]
 8004138:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800413c:	6013      	str	r3, [r2, #0]
}
 800413e:	4770      	bx	lr
 8004140:	58000400 	.word	0x58000400

08004144 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8004144:	4a0f      	ldr	r2, [pc, #60]	@ (8004184 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8004146:	6813      	ldr	r3, [r2, #0]
 8004148:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800414c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800414e:	4b0e      	ldr	r3, [pc, #56]	@ (8004188 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2232      	movs	r2, #50	@ 0x32
 8004154:	fb02 f303 	mul.w	r3, r2, r3
 8004158:	4a0c      	ldr	r2, [pc, #48]	@ (800418c <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 800415a:	fba2 2303 	umull	r2, r3, r2, r3
 800415e:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004160:	e000      	b.n	8004164 <HAL_PWREx_DisableLowPowerRunMode+0x20>
  {
    wait_loop_index--;
 8004162:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004164:	4a07      	ldr	r2, [pc, #28]	@ (8004184 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8004166:	6952      	ldr	r2, [r2, #20]
 8004168:	f412 7f00 	tst.w	r2, #512	@ 0x200
 800416c:	d001      	beq.n	8004172 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1f7      	bne.n	8004162 <HAL_PWREx_DisableLowPowerRunMode+0x1e>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8004172:	4b04      	ldr	r3, [pc, #16]	@ (8004184 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800417a:	d101      	bne.n	8004180 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 800417c:	2000      	movs	r0, #0
 800417e:	4770      	bx	lr
    return HAL_TIMEOUT;
 8004180:	2003      	movs	r0, #3
}
 8004182:	4770      	bx	lr
 8004184:	58000400 	.word	0x58000400
 8004188:	20000074 	.word	0x20000074
 800418c:	431bde83 	.word	0x431bde83

08004190 <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8004190:	4a0c      	ldr	r2, [pc, #48]	@ (80041c4 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 8004192:	6813      	ldr	r3, [r2, #0]
 8004194:	f023 0307 	bic.w	r3, r3, #7
 8004198:	f043 0302 	orr.w	r3, r3, #2
 800419c:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800419e:	4a0a      	ldr	r2, [pc, #40]	@ (80041c8 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 80041a0:	6913      	ldr	r3, [r2, #16]
 80041a2:	f043 0304 	orr.w	r3, r3, #4
 80041a6:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80041a8:	2801      	cmp	r0, #1
 80041aa:	d008      	beq.n	80041be <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80041ac:	bf40      	sev
    __WFE();
 80041ae:	bf20      	wfe
    __WFE();
 80041b0:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80041b2:	4a05      	ldr	r2, [pc, #20]	@ (80041c8 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 80041b4:	6913      	ldr	r3, [r2, #16]
 80041b6:	f023 0304 	bic.w	r3, r3, #4
 80041ba:	6113      	str	r3, [r2, #16]
}
 80041bc:	4770      	bx	lr
    __WFI();
 80041be:	bf30      	wfi
 80041c0:	e7f7      	b.n	80041b2 <HAL_PWREx_EnterSTOP2Mode+0x22>
 80041c2:	bf00      	nop
 80041c4:	58000400 	.word	0x58000400
 80041c8:	e000ed00 	.word	0xe000ed00

080041cc <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80041cc:	b530      	push	{r4, r5, lr}
 80041ce:	b089      	sub	sp, #36	@ 0x24
 80041d0:	4604      	mov	r4, r0
 80041d2:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80041d4:	4b2a      	ldr	r3, [pc, #168]	@ (8004280 <RCC_SetFlashLatency+0xb4>)
 80041d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80041da:	9006      	str	r0, [sp, #24]
 80041dc:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80041e0:	f103 0208 	add.w	r2, r3, #8
 80041e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80041e8:	9004      	str	r0, [sp, #16]
 80041ea:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80041ee:	ad01      	add	r5, sp, #4
 80041f0:	3310      	adds	r3, #16
 80041f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80041f6:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041fa:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 80041fe:	d007      	beq.n	8004210 <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004200:	2300      	movs	r3, #0
 8004202:	e014      	b.n	800422e <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 8004204:	aa08      	add	r2, sp, #32
 8004206:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800420a:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 800420e:	e01e      	b.n	800424e <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004210:	2300      	movs	r3, #0
 8004212:	2b02      	cmp	r3, #2
 8004214:	d808      	bhi.n	8004228 <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004216:	aa08      	add	r2, sp, #32
 8004218:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800421c:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8004220:	42a2      	cmp	r2, r4
 8004222:	d2ef      	bcs.n	8004204 <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004224:	3301      	adds	r3, #1
 8004226:	e7f4      	b.n	8004212 <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004228:	2500      	movs	r5, #0
 800422a:	e010      	b.n	800424e <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800422c:	3301      	adds	r3, #1
 800422e:	2b02      	cmp	r3, #2
 8004230:	d80c      	bhi.n	800424c <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004232:	aa08      	add	r2, sp, #32
 8004234:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8004238:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 800423c:	42a2      	cmp	r2, r4
 800423e:	d3f5      	bcc.n	800422c <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004240:	aa08      	add	r2, sp, #32
 8004242:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004246:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 800424a:	e000      	b.n	800424e <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800424c:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800424e:	4a0d      	ldr	r2, [pc, #52]	@ (8004284 <RCC_SetFlashLatency+0xb8>)
 8004250:	6813      	ldr	r3, [r2, #0]
 8004252:	f023 0307 	bic.w	r3, r3, #7
 8004256:	432b      	orrs	r3, r5
 8004258:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800425a:	f7fd fb9f 	bl	800199c <HAL_GetTick>
 800425e:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004260:	4b08      	ldr	r3, [pc, #32]	@ (8004284 <RCC_SetFlashLatency+0xb8>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0307 	and.w	r3, r3, #7
 8004268:	42ab      	cmp	r3, r5
 800426a:	d006      	beq.n	800427a <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800426c:	f7fd fb96 	bl	800199c <HAL_GetTick>
 8004270:	1b00      	subs	r0, r0, r4
 8004272:	2802      	cmp	r0, #2
 8004274:	d9f4      	bls.n	8004260 <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 8004276:	2003      	movs	r0, #3
 8004278:	e000      	b.n	800427c <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 800427a:	2000      	movs	r0, #0
}
 800427c:	b009      	add	sp, #36	@ 0x24
 800427e:	bd30      	pop	{r4, r5, pc}
 8004280:	080123a0 	.word	0x080123a0
 8004284:	58004000 	.word	0x58004000

08004288 <RCC_SetFlashLatencyFromMSIRange>:
{
 8004288:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800428a:	f3c0 1003 	ubfx	r0, r0, #4, #4
 800428e:	4b0c      	ldr	r3, [pc, #48]	@ (80042c0 <RCC_SetFlashLatencyFromMSIRange+0x38>)
 8004290:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004294:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004298:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800429c:	f003 030f 	and.w	r3, r3, #15
 80042a0:	4a08      	ldr	r2, [pc, #32]	@ (80042c4 <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 80042a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042a6:	fbb4 f4f3 	udiv	r4, r4, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80042aa:	f7ff ff3b 	bl	8004124 <HAL_PWREx_GetVoltageRange>
 80042ae:	4601      	mov	r1, r0
 80042b0:	4b05      	ldr	r3, [pc, #20]	@ (80042c8 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 80042b2:	fba3 3404 	umull	r3, r4, r3, r4
 80042b6:	0ca0      	lsrs	r0, r4, #18
 80042b8:	f7ff ff88 	bl	80041cc <RCC_SetFlashLatency>
}
 80042bc:	bd10      	pop	{r4, pc}
 80042be:	bf00      	nop
 80042c0:	08012c3c 	.word	0x08012c3c
 80042c4:	08012c9c 	.word	0x08012c9c
 80042c8:	431bde83 	.word	0x431bde83

080042cc <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80042cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042d0:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80042d8:	f011 010c 	ands.w	r1, r1, #12
 80042dc:	d00a      	beq.n	80042f4 <HAL_RCC_GetSysClockFreq+0x28>
 80042de:	290c      	cmp	r1, #12
 80042e0:	d006      	beq.n	80042f0 <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042e2:	2904      	cmp	r1, #4
 80042e4:	d047      	beq.n	8004376 <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042e6:	2908      	cmp	r1, #8
 80042e8:	d03b      	beq.n	8004362 <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 80042ea:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 80042ec:	4610      	mov	r0, r2
 80042ee:	e026      	b.n	800433e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d1f6      	bne.n	80042e2 <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80042f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f013 0308 	ands.w	r3, r3, #8
 80042fe:	d00d      	beq.n	800431c <HAL_RCC_GetSysClockFreq+0x50>
 8004300:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f013 0308 	ands.w	r3, r3, #8
 800430a:	d124      	bne.n	8004356 <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800430c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004310:	f8d2 2094 	ldr.w	r2, [r2, #148]	@ 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004314:	4a2e      	ldr	r2, [pc, #184]	@ (80043d0 <HAL_RCC_GetSysClockFreq+0x104>)
 8004316:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800431a:	e00e      	b.n	800433a <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800431c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004320:	6812      	ldr	r2, [r2, #0]
 8004322:	f012 0f08 	tst.w	r2, #8
 8004326:	d112      	bne.n	800434e <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004328:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800432c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004330:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8004334:	4a26      	ldr	r2, [pc, #152]	@ (80043d0 <HAL_RCC_GetSysClockFreq+0x104>)
 8004336:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800433a:	b1d1      	cbz	r1, 8004372 <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 800433c:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800433e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004348:	2b0c      	cmp	r3, #12
 800434a:	d01a      	beq.n	8004382 <HAL_RCC_GetSysClockFreq+0xb6>
}
 800434c:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800434e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004352:	6812      	ldr	r2, [r2, #0]
 8004354:	e7ee      	b.n	8004334 <HAL_RCC_GetSysClockFreq+0x68>
 8004356:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800435a:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800435c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004360:	e7d8      	b.n	8004314 <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004362:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	f412 1280 	ands.w	r2, r2, #1048576	@ 0x100000
 800436c:	d106      	bne.n	800437c <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 800436e:	4819      	ldr	r0, [pc, #100]	@ (80043d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004370:	e7e5      	b.n	800433e <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 8004372:	4610      	mov	r0, r2
 8004374:	e7e3      	b.n	800433e <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8004376:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 8004378:	4817      	ldr	r0, [pc, #92]	@ (80043d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800437a:	e7e0      	b.n	800433e <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 800437c:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 800437e:	4816      	ldr	r0, [pc, #88]	@ (80043d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004380:	e7dd      	b.n	800433e <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004382:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800438c:	2b02      	cmp	r3, #2
 800438e:	d009      	beq.n	80043a4 <HAL_RCC_GetSysClockFreq+0xd8>
 8004390:	2b03      	cmp	r3, #3
 8004392:	d108      	bne.n	80043a6 <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004394:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800439e:	d115      	bne.n	80043cc <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80043a0:	4a0c      	ldr	r2, [pc, #48]	@ (80043d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80043a2:	e000      	b.n	80043a6 <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 80043a4:	4a0c      	ldr	r2, [pc, #48]	@ (80043d8 <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80043a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80043aa:	68cb      	ldr	r3, [r1, #12]
 80043ac:	f3c3 2306 	ubfx	r3, r3, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80043b0:	fb03 f202 	mul.w	r2, r3, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80043b4:	68cb      	ldr	r3, [r1, #12]
 80043b6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80043ba:	3301      	adds	r3, #1
 80043bc:	fbb2 f2f3 	udiv	r2, r2, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80043c0:	68c8      	ldr	r0, [r1, #12]
 80043c2:	0f40      	lsrs	r0, r0, #29
 80043c4:	3001      	adds	r0, #1
 80043c6:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 80043ca:	e7bf      	b.n	800434c <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 80043cc:	4a02      	ldr	r2, [pc, #8]	@ (80043d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80043ce:	e7ea      	b.n	80043a6 <HAL_RCC_GetSysClockFreq+0xda>
 80043d0:	08012c3c 	.word	0x08012c3c
 80043d4:	01e84800 	.word	0x01e84800
 80043d8:	00f42400 	.word	0x00f42400

080043dc <HAL_RCC_GetHCLKFreq>:
{
 80043dc:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80043de:	f7ff ff75 	bl	80042cc <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80043e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80043ec:	4a02      	ldr	r2, [pc, #8]	@ (80043f8 <HAL_RCC_GetHCLKFreq+0x1c>)
 80043ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80043f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80043f6:	bd08      	pop	{r3, pc}
 80043f8:	08012c9c 	.word	0x08012c9c

080043fc <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80043fc:	2800      	cmp	r0, #0
 80043fe:	f000 8311 	beq.w	8004a24 <HAL_RCC_OscConfig+0x628>
{
 8004402:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004404:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004406:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800440a:	689d      	ldr	r5, [r3, #8]
 800440c:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004410:	68de      	ldr	r6, [r3, #12]
 8004412:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004416:	6803      	ldr	r3, [r0, #0]
 8004418:	f013 0f20 	tst.w	r3, #32
 800441c:	d02a      	beq.n	8004474 <HAL_RCC_OscConfig+0x78>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800441e:	2d00      	cmp	r5, #0
 8004420:	d065      	beq.n	80044ee <HAL_RCC_OscConfig+0xf2>
 8004422:	2d0c      	cmp	r5, #12
 8004424:	d061      	beq.n	80044ea <HAL_RCC_OscConfig+0xee>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004426:	6a23      	ldr	r3, [r4, #32]
 8004428:	2b00      	cmp	r3, #0
 800442a:	f000 80bf 	beq.w	80045ac <HAL_RCC_OscConfig+0x1b0>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800442e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004432:	6813      	ldr	r3, [r2, #0]
 8004434:	f043 0301 	orr.w	r3, r3, #1
 8004438:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800443a:	f7fd faaf 	bl	800199c <HAL_GetTick>
 800443e:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004440:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f013 0f02 	tst.w	r3, #2
 800444a:	f000 80a7 	beq.w	800459c <HAL_RCC_OscConfig+0x1a0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800444e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	f042 0208 	orr.w	r2, r2, #8
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004460:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8004462:	430a      	orrs	r2, r1
 8004464:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004466:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004468:	685a      	ldr	r2, [r3, #4]
 800446a:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800446e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004472:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004474:	6823      	ldr	r3, [r4, #0]
 8004476:	f013 0f01 	tst.w	r3, #1
 800447a:	f000 80b5 	beq.w	80045e8 <HAL_RCC_OscConfig+0x1ec>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800447e:	2d08      	cmp	r5, #8
 8004480:	f000 80ae 	beq.w	80045e0 <HAL_RCC_OscConfig+0x1e4>
 8004484:	2d0c      	cmp	r5, #12
 8004486:	f000 80a8 	beq.w	80045da <HAL_RCC_OscConfig+0x1de>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800448a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800448e:	6813      	ldr	r3, [r2, #0]
 8004490:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004494:	68a1      	ldr	r1, [r4, #8]
 8004496:	430b      	orrs	r3, r1
 8004498:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800449a:	6863      	ldr	r3, [r4, #4]
 800449c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044a0:	f000 80c4 	beq.w	800462c <HAL_RCC_OscConfig+0x230>
 80044a4:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 80044a8:	f000 80c5 	beq.w	8004636 <HAL_RCC_OscConfig+0x23a>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80044ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80044b6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 80044be:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044c0:	6863      	ldr	r3, [r4, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f000 80c2 	beq.w	800464c <HAL_RCC_OscConfig+0x250>
        tickstart = HAL_GetTick();
 80044c8:	f7fd fa68 	bl	800199c <HAL_GetTick>
 80044cc:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80044ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80044d8:	f040 8086 	bne.w	80045e8 <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044dc:	f7fd fa5e 	bl	800199c <HAL_GetTick>
 80044e0:	1bc0      	subs	r0, r0, r7
 80044e2:	2864      	cmp	r0, #100	@ 0x64
 80044e4:	d9f3      	bls.n	80044ce <HAL_RCC_OscConfig+0xd2>
            return HAL_TIMEOUT;
 80044e6:	2003      	movs	r0, #3
 80044e8:	e2a9      	b.n	8004a3e <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80044ea:	2e01      	cmp	r6, #1
 80044ec:	d19b      	bne.n	8004426 <HAL_RCC_OscConfig+0x2a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80044ee:	6a23      	ldr	r3, [r4, #32]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 8299 	beq.w	8004a28 <HAL_RCC_OscConfig+0x62c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80044f6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80044f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f013 0f08 	tst.w	r3, #8
 8004502:	d029      	beq.n	8004558 <HAL_RCC_OscConfig+0x15c>
 8004504:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800450e:	4298      	cmp	r0, r3
 8004510:	d92a      	bls.n	8004568 <HAL_RCC_OscConfig+0x16c>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004512:	f7ff feb9 	bl	8004288 <RCC_SetFlashLatencyFromMSIRange>
 8004516:	2800      	cmp	r0, #0
 8004518:	f040 8288 	bne.w	8004a2c <HAL_RCC_OscConfig+0x630>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800451c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	f042 0208 	orr.w	r2, r2, #8
 8004526:	601a      	str	r2, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800452e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8004530:	430a      	orrs	r2, r1
 8004532:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004534:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800453c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004540:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004542:	f7ff ff4b 	bl	80043dc <HAL_RCC_GetHCLKFreq>
 8004546:	4bba      	ldr	r3, [pc, #744]	@ (8004830 <HAL_RCC_OscConfig+0x434>)
 8004548:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 800454a:	4bba      	ldr	r3, [pc, #744]	@ (8004834 <HAL_RCC_OscConfig+0x438>)
 800454c:	6818      	ldr	r0, [r3, #0]
 800454e:	f7fd fa23 	bl	8001998 <HAL_InitTick>
        if (status != HAL_OK)
 8004552:	2800      	cmp	r0, #0
 8004554:	d08e      	beq.n	8004474 <HAL_RCC_OscConfig+0x78>
 8004556:	e272      	b.n	8004a3e <HAL_RCC_OscConfig+0x642>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004558:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800455c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004560:	091b      	lsrs	r3, r3, #4
 8004562:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004566:	e7d2      	b.n	800450e <HAL_RCC_OscConfig+0x112>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004568:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	f042 0208 	orr.w	r2, r2, #8
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800457a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800457c:	430a      	orrs	r2, r1
 800457e:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004580:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8004588:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800458c:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800458e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8004590:	f7ff fe7a 	bl	8004288 <RCC_SetFlashLatencyFromMSIRange>
 8004594:	2800      	cmp	r0, #0
 8004596:	d0d4      	beq.n	8004542 <HAL_RCC_OscConfig+0x146>
            return HAL_ERROR;
 8004598:	2001      	movs	r0, #1
 800459a:	e250      	b.n	8004a3e <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800459c:	f7fd f9fe 	bl	800199c <HAL_GetTick>
 80045a0:	1bc0      	subs	r0, r0, r7
 80045a2:	2802      	cmp	r0, #2
 80045a4:	f67f af4c 	bls.w	8004440 <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 80045a8:	2003      	movs	r0, #3
 80045aa:	e248      	b.n	8004a3e <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80045ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80045b0:	6813      	ldr	r3, [r2, #0]
 80045b2:	f023 0301 	bic.w	r3, r3, #1
 80045b6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80045b8:	f7fd f9f0 	bl	800199c <HAL_GetTick>
 80045bc:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80045be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f013 0f02 	tst.w	r3, #2
 80045c8:	f43f af54 	beq.w	8004474 <HAL_RCC_OscConfig+0x78>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045cc:	f7fd f9e6 	bl	800199c <HAL_GetTick>
 80045d0:	1bc0      	subs	r0, r0, r7
 80045d2:	2802      	cmp	r0, #2
 80045d4:	d9f3      	bls.n	80045be <HAL_RCC_OscConfig+0x1c2>
            return HAL_TIMEOUT;
 80045d6:	2003      	movs	r0, #3
 80045d8:	e231      	b.n	8004a3e <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80045da:	2e03      	cmp	r6, #3
 80045dc:	f47f af55 	bne.w	800448a <HAL_RCC_OscConfig+0x8e>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80045e0:	6863      	ldr	r3, [r4, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f000 8224 	beq.w	8004a30 <HAL_RCC_OscConfig+0x634>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045e8:	6823      	ldr	r3, [r4, #0]
 80045ea:	f013 0f02 	tst.w	r3, #2
 80045ee:	d056      	beq.n	800469e <HAL_RCC_OscConfig+0x2a2>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80045f0:	2d04      	cmp	r5, #4
 80045f2:	d03d      	beq.n	8004670 <HAL_RCC_OscConfig+0x274>
 80045f4:	2d0c      	cmp	r5, #12
 80045f6:	d039      	beq.n	800466c <HAL_RCC_OscConfig+0x270>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045f8:	6923      	ldr	r3, [r4, #16]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f000 808a 	beq.w	8004714 <HAL_RCC_OscConfig+0x318>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004600:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004604:	6813      	ldr	r3, [r2, #0]
 8004606:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800460a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800460c:	f7fd f9c6 	bl	800199c <HAL_GetTick>
 8004610:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004612:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800461c:	d136      	bne.n	800468c <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800461e:	f7fd f9bd 	bl	800199c <HAL_GetTick>
 8004622:	1b80      	subs	r0, r0, r6
 8004624:	2802      	cmp	r0, #2
 8004626:	d9f4      	bls.n	8004612 <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 8004628:	2003      	movs	r0, #3
 800462a:	e208      	b.n	8004a3e <HAL_RCC_OscConfig+0x642>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800462c:	6813      	ldr	r3, [r2, #0]
 800462e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004632:	6013      	str	r3, [r2, #0]
}
 8004634:	e744      	b.n	80044c0 <HAL_RCC_OscConfig+0xc4>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004636:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8004640:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004648:	601a      	str	r2, [r3, #0]
}
 800464a:	e739      	b.n	80044c0 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 800464c:	f7fd f9a6 	bl	800199c <HAL_GetTick>
 8004650:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004652:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800465c:	d0c4      	beq.n	80045e8 <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800465e:	f7fd f99d 	bl	800199c <HAL_GetTick>
 8004662:	1bc0      	subs	r0, r0, r7
 8004664:	2864      	cmp	r0, #100	@ 0x64
 8004666:	d9f4      	bls.n	8004652 <HAL_RCC_OscConfig+0x256>
            return HAL_TIMEOUT;
 8004668:	2003      	movs	r0, #3
 800466a:	e1e8      	b.n	8004a3e <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800466c:	2e02      	cmp	r6, #2
 800466e:	d1c3      	bne.n	80045f8 <HAL_RCC_OscConfig+0x1fc>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004670:	6923      	ldr	r3, [r4, #16]
 8004672:	2b00      	cmp	r3, #0
 8004674:	f000 81de 	beq.w	8004a34 <HAL_RCC_OscConfig+0x638>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004678:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800467a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800467e:	6853      	ldr	r3, [r2, #4]
 8004680:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004684:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004688:	6053      	str	r3, [r2, #4]
}
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0x2a2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800468c:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800468e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004692:	6853      	ldr	r3, [r2, #4]
 8004694:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004698:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800469c:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800469e:	6823      	ldr	r3, [r4, #0]
 80046a0:	f013 0f08 	tst.w	r3, #8
 80046a4:	d07e      	beq.n	80047a4 <HAL_RCC_OscConfig+0x3a8>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046a6:	69a3      	ldr	r3, [r4, #24]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d062      	beq.n	8004772 <HAL_RCC_OscConfig+0x376>
      uint32_t csr_temp = RCC->CSR;
 80046ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80046b4:	69e1      	ldr	r1, [r4, #28]
 80046b6:	f003 0210 	and.w	r2, r3, #16
 80046ba:	4291      	cmp	r1, r2
 80046bc:	d011      	beq.n	80046e2 <HAL_RCC_OscConfig+0x2e6>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80046be:	f003 0203 	and.w	r2, r3, #3
 80046c2:	2a02      	cmp	r2, #2
 80046c4:	f000 81b8 	beq.w	8004a38 <HAL_RCC_OscConfig+0x63c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80046c8:	f013 0f01 	tst.w	r3, #1
 80046cc:	d138      	bne.n	8004740 <HAL_RCC_OscConfig+0x344>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80046ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80046d2:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 80046d6:	f023 0310 	bic.w	r3, r3, #16
 80046da:	69e1      	ldr	r1, [r4, #28]
 80046dc:	430b      	orrs	r3, r1
 80046de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80046e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80046e6:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 80046ea:	f043 0301 	orr.w	r3, r3, #1
 80046ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 80046f2:	f7fd f953 	bl	800199c <HAL_GetTick>
 80046f6:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80046f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004700:	f013 0f02 	tst.w	r3, #2
 8004704:	d14e      	bne.n	80047a4 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004706:	f7fd f949 	bl	800199c <HAL_GetTick>
 800470a:	1b80      	subs	r0, r0, r6
 800470c:	2811      	cmp	r0, #17
 800470e:	d9f3      	bls.n	80046f8 <HAL_RCC_OscConfig+0x2fc>
          return HAL_TIMEOUT;
 8004710:	2003      	movs	r0, #3
 8004712:	e194      	b.n	8004a3e <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004714:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004718:	6813      	ldr	r3, [r2, #0]
 800471a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800471e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004720:	f7fd f93c 	bl	800199c <HAL_GetTick>
 8004724:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004726:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8004730:	d0b5      	beq.n	800469e <HAL_RCC_OscConfig+0x2a2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004732:	f7fd f933 	bl	800199c <HAL_GetTick>
 8004736:	1b80      	subs	r0, r0, r6
 8004738:	2802      	cmp	r0, #2
 800473a:	d9f4      	bls.n	8004726 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 800473c:	2003      	movs	r0, #3
 800473e:	e17e      	b.n	8004a3e <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004740:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004744:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8004748:	f023 0301 	bic.w	r3, r3, #1
 800474c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
          tickstart = HAL_GetTick();
 8004750:	f7fd f924 	bl	800199c <HAL_GetTick>
 8004754:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004756:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800475a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800475e:	f013 0f02 	tst.w	r3, #2
 8004762:	d0b4      	beq.n	80046ce <HAL_RCC_OscConfig+0x2d2>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004764:	f7fd f91a 	bl	800199c <HAL_GetTick>
 8004768:	1b80      	subs	r0, r0, r6
 800476a:	2811      	cmp	r0, #17
 800476c:	d9f3      	bls.n	8004756 <HAL_RCC_OscConfig+0x35a>
              return HAL_TIMEOUT;
 800476e:	2003      	movs	r0, #3
 8004770:	e165      	b.n	8004a3e <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004772:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004776:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 800477a:	f023 0301 	bic.w	r3, r3, #1
 800477e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8004782:	f7fd f90b 	bl	800199c <HAL_GetTick>
 8004786:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004788:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800478c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004790:	f013 0f02 	tst.w	r3, #2
 8004794:	d006      	beq.n	80047a4 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004796:	f7fd f901 	bl	800199c <HAL_GetTick>
 800479a:	1b80      	subs	r0, r0, r6
 800479c:	2811      	cmp	r0, #17
 800479e:	d9f3      	bls.n	8004788 <HAL_RCC_OscConfig+0x38c>
          return HAL_TIMEOUT;
 80047a0:	2003      	movs	r0, #3
 80047a2:	e14c      	b.n	8004a3e <HAL_RCC_OscConfig+0x642>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047a4:	6823      	ldr	r3, [r4, #0]
 80047a6:	f013 0f04 	tst.w	r3, #4
 80047aa:	f000 80b8 	beq.w	800491e <HAL_RCC_OscConfig+0x522>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80047ae:	4b22      	ldr	r3, [pc, #136]	@ (8004838 <HAL_RCC_OscConfig+0x43c>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80047b6:	d110      	bne.n	80047da <HAL_RCC_OscConfig+0x3de>
      HAL_PWR_EnableBkUpAccess();
 80047b8:	f7ff fc86 	bl	80040c8 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 80047bc:	f7fd f8ee 	bl	800199c <HAL_GetTick>
 80047c0:	4606      	mov	r6, r0
 80047c2:	4b1d      	ldr	r3, [pc, #116]	@ (8004838 <HAL_RCC_OscConfig+0x43c>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80047ca:	d106      	bne.n	80047da <HAL_RCC_OscConfig+0x3de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047cc:	f7fd f8e6 	bl	800199c <HAL_GetTick>
 80047d0:	1b80      	subs	r0, r0, r6
 80047d2:	2802      	cmp	r0, #2
 80047d4:	d9f5      	bls.n	80047c2 <HAL_RCC_OscConfig+0x3c6>
          return HAL_TIMEOUT;
 80047d6:	2003      	movs	r0, #3
 80047d8:	e131      	b.n	8004a3e <HAL_RCC_OscConfig+0x642>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047da:	68e3      	ldr	r3, [r4, #12]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d068      	beq.n	80048b2 <HAL_RCC_OscConfig+0x4b6>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80047e0:	2b85      	cmp	r3, #133	@ 0x85
 80047e2:	d001      	beq.n	80047e8 <HAL_RCC_OscConfig+0x3ec>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80047e4:	2b05      	cmp	r3, #5
 80047e6:	d107      	bne.n	80047f8 <HAL_RCC_OscConfig+0x3fc>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80047e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80047ec:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80047f0:	f043 0304 	orr.w	r3, r3, #4
 80047f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 80047f8:	f7fd f8d0 	bl	800199c <HAL_GetTick>
 80047fc:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80047fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004802:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004806:	f043 0301 	orr.w	r3, r3, #1
 800480a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800480e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004816:	f013 0f02 	tst.w	r3, #2
 800481a:	d10f      	bne.n	800483c <HAL_RCC_OscConfig+0x440>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800481c:	f7fd f8be 	bl	800199c <HAL_GetTick>
 8004820:	1b80      	subs	r0, r0, r6
 8004822:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004826:	4298      	cmp	r0, r3
 8004828:	d9f1      	bls.n	800480e <HAL_RCC_OscConfig+0x412>
          return HAL_TIMEOUT;
 800482a:	2003      	movs	r0, #3
 800482c:	e107      	b.n	8004a3e <HAL_RCC_OscConfig+0x642>
 800482e:	bf00      	nop
 8004830:	20000074 	.word	0x20000074
 8004834:	20000078 	.word	0x20000078
 8004838:	58000400 	.word	0x58000400
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800483c:	68e3      	ldr	r3, [r4, #12]
 800483e:	2b81      	cmp	r3, #129	@ 0x81
 8004840:	d001      	beq.n	8004846 <HAL_RCC_OscConfig+0x44a>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8004842:	2b85      	cmp	r3, #133	@ 0x85
 8004844:	d11a      	bne.n	800487c <HAL_RCC_OscConfig+0x480>
        tickstart = HAL_GetTick();
 8004846:	f7fd f8a9 	bl	800199c <HAL_GetTick>
 800484a:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800484c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004850:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004854:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004858:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800485c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004860:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004864:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8004868:	d159      	bne.n	800491e <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800486a:	f7fd f897 	bl	800199c <HAL_GetTick>
 800486e:	1b80      	subs	r0, r0, r6
 8004870:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004874:	4298      	cmp	r0, r3
 8004876:	d9f1      	bls.n	800485c <HAL_RCC_OscConfig+0x460>
            return HAL_TIMEOUT;
 8004878:	2003      	movs	r0, #3
 800487a:	e0e0      	b.n	8004a3e <HAL_RCC_OscConfig+0x642>
        tickstart = HAL_GetTick();
 800487c:	f7fd f88e 	bl	800199c <HAL_GetTick>
 8004880:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004882:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004886:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800488a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800488e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004892:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800489a:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800489e:	d03e      	beq.n	800491e <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048a0:	f7fd f87c 	bl	800199c <HAL_GetTick>
 80048a4:	1b80      	subs	r0, r0, r6
 80048a6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80048aa:	4298      	cmp	r0, r3
 80048ac:	d9f1      	bls.n	8004892 <HAL_RCC_OscConfig+0x496>
            return HAL_TIMEOUT;
 80048ae:	2003      	movs	r0, #3
 80048b0:	e0c5      	b.n	8004a3e <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 80048b2:	f7fd f873 	bl	800199c <HAL_GetTick>
 80048b6:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80048b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80048bc:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80048c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80048c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048d0:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 80048d4:	d008      	beq.n	80048e8 <HAL_RCC_OscConfig+0x4ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048d6:	f7fd f861 	bl	800199c <HAL_GetTick>
 80048da:	1b80      	subs	r0, r0, r6
 80048dc:	f241 3388 	movw	r3, #5000	@ 0x1388
 80048e0:	4298      	cmp	r0, r3
 80048e2:	d9f1      	bls.n	80048c8 <HAL_RCC_OscConfig+0x4cc>
          return HAL_TIMEOUT;
 80048e4:	2003      	movs	r0, #3
 80048e6:	e0aa      	b.n	8004a3e <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 80048e8:	f7fd f858 	bl	800199c <HAL_GetTick>
 80048ec:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80048ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80048f2:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80048f6:	f023 0301 	bic.w	r3, r3, #1
 80048fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80048fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004902:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004906:	f013 0f02 	tst.w	r3, #2
 800490a:	d008      	beq.n	800491e <HAL_RCC_OscConfig+0x522>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800490c:	f7fd f846 	bl	800199c <HAL_GetTick>
 8004910:	1b80      	subs	r0, r0, r6
 8004912:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004916:	4298      	cmp	r0, r3
 8004918:	d9f1      	bls.n	80048fe <HAL_RCC_OscConfig+0x502>
          return HAL_TIMEOUT;
 800491a:	2003      	movs	r0, #3
 800491c:	e08f      	b.n	8004a3e <HAL_RCC_OscConfig+0x642>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800491e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004920:	2b00      	cmp	r3, #0
 8004922:	f000 808b 	beq.w	8004a3c <HAL_RCC_OscConfig+0x640>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004926:	2d0c      	cmp	r5, #12
 8004928:	d060      	beq.n	80049ec <HAL_RCC_OscConfig+0x5f0>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800492a:	2b02      	cmp	r3, #2
 800492c:	d016      	beq.n	800495c <HAL_RCC_OscConfig+0x560>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800492e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004932:	6813      	ldr	r3, [r2, #0]
 8004934:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004938:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800493a:	f7fd f82f 	bl	800199c <HAL_GetTick>
 800493e:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004940:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800494a:	d148      	bne.n	80049de <HAL_RCC_OscConfig+0x5e2>
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800494c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004950:	68d1      	ldr	r1, [r2, #12]
 8004952:	4b41      	ldr	r3, [pc, #260]	@ (8004a58 <HAL_RCC_OscConfig+0x65c>)
 8004954:	400b      	ands	r3, r1
 8004956:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8004958:	2000      	movs	r0, #0
 800495a:	e070      	b.n	8004a3e <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800495c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004960:	6813      	ldr	r3, [r2, #0]
 8004962:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004966:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004968:	f7fd f818 	bl	800199c <HAL_GetTick>
 800496c:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800496e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8004978:	d12a      	bne.n	80049d0 <HAL_RCC_OscConfig+0x5d4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800497a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800497e:	68d3      	ldr	r3, [r2, #12]
 8004980:	4936      	ldr	r1, [pc, #216]	@ (8004a5c <HAL_RCC_OscConfig+0x660>)
 8004982:	4019      	ands	r1, r3
 8004984:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004986:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8004988:	4303      	orrs	r3, r0
 800498a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800498c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004990:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004992:	4303      	orrs	r3, r0
 8004994:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8004996:	4303      	orrs	r3, r0
 8004998:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800499a:	4303      	orrs	r3, r0
 800499c:	4319      	orrs	r1, r3
 800499e:	60d1      	str	r1, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80049a0:	6813      	ldr	r3, [r2, #0]
 80049a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049a6:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049a8:	68d3      	ldr	r3, [r2, #12]
 80049aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049ae:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 80049b0:	f7fc fff4 	bl	800199c <HAL_GetTick>
 80049b4:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80049b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80049c0:	d13e      	bne.n	8004a40 <HAL_RCC_OscConfig+0x644>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049c2:	f7fc ffeb 	bl	800199c <HAL_GetTick>
 80049c6:	1b00      	subs	r0, r0, r4
 80049c8:	280a      	cmp	r0, #10
 80049ca:	d9f4      	bls.n	80049b6 <HAL_RCC_OscConfig+0x5ba>
            return HAL_TIMEOUT;
 80049cc:	2003      	movs	r0, #3
 80049ce:	e036      	b.n	8004a3e <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049d0:	f7fc ffe4 	bl	800199c <HAL_GetTick>
 80049d4:	1b40      	subs	r0, r0, r5
 80049d6:	280a      	cmp	r0, #10
 80049d8:	d9c9      	bls.n	800496e <HAL_RCC_OscConfig+0x572>
            return HAL_TIMEOUT;
 80049da:	2003      	movs	r0, #3
 80049dc:	e02f      	b.n	8004a3e <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049de:	f7fc ffdd 	bl	800199c <HAL_GetTick>
 80049e2:	1b00      	subs	r0, r0, r4
 80049e4:	280a      	cmp	r0, #10
 80049e6:	d9ab      	bls.n	8004940 <HAL_RCC_OscConfig+0x544>
            return HAL_TIMEOUT;
 80049e8:	2003      	movs	r0, #3
 80049ea:	e028      	b.n	8004a3e <HAL_RCC_OscConfig+0x642>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d029      	beq.n	8004a44 <HAL_RCC_OscConfig+0x648>
        pll_config = RCC->PLLCFGR;
 80049f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049f4:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80049f6:	f003 0103 	and.w	r1, r3, #3
 80049fa:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80049fc:	4291      	cmp	r1, r2
 80049fe:	d123      	bne.n	8004a48 <HAL_RCC_OscConfig+0x64c>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8004a00:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004a04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a06:	428a      	cmp	r2, r1
 8004a08:	d120      	bne.n	8004a4c <HAL_RCC_OscConfig+0x650>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8004a0a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004a0e:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004a10:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8004a14:	d11c      	bne.n	8004a50 <HAL_RCC_OscConfig+0x654>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8004a16:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8004a1a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d119      	bne.n	8004a54 <HAL_RCC_OscConfig+0x658>
  return HAL_OK;
 8004a20:	2000      	movs	r0, #0
 8004a22:	e00c      	b.n	8004a3e <HAL_RCC_OscConfig+0x642>
    return HAL_ERROR;
 8004a24:	2001      	movs	r0, #1
}
 8004a26:	4770      	bx	lr
        return HAL_ERROR;
 8004a28:	2001      	movs	r0, #1
 8004a2a:	e008      	b.n	8004a3e <HAL_RCC_OscConfig+0x642>
            return HAL_ERROR;
 8004a2c:	2001      	movs	r0, #1
 8004a2e:	e006      	b.n	8004a3e <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8004a30:	2001      	movs	r0, #1
 8004a32:	e004      	b.n	8004a3e <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8004a34:	2001      	movs	r0, #1
 8004a36:	e002      	b.n	8004a3e <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 8004a38:	2001      	movs	r0, #1
 8004a3a:	e000      	b.n	8004a3e <HAL_RCC_OscConfig+0x642>
  return HAL_OK;
 8004a3c:	2000      	movs	r0, #0
}
 8004a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8004a40:	2000      	movs	r0, #0
 8004a42:	e7fc      	b.n	8004a3e <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8004a44:	2001      	movs	r0, #1
 8004a46:	e7fa      	b.n	8004a3e <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 8004a48:	2001      	movs	r0, #1
 8004a4a:	e7f8      	b.n	8004a3e <HAL_RCC_OscConfig+0x642>
 8004a4c:	2001      	movs	r0, #1
 8004a4e:	e7f6      	b.n	8004a3e <HAL_RCC_OscConfig+0x642>
 8004a50:	2001      	movs	r0, #1
 8004a52:	e7f4      	b.n	8004a3e <HAL_RCC_OscConfig+0x642>
 8004a54:	2001      	movs	r0, #1
 8004a56:	e7f2      	b.n	8004a3e <HAL_RCC_OscConfig+0x642>
 8004a58:	eefefffc 	.word	0xeefefffc
 8004a5c:	11c1808c 	.word	0x11c1808c

08004a60 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004a60:	2800      	cmp	r0, #0
 8004a62:	f000 8127 	beq.w	8004cb4 <HAL_RCC_ClockConfig+0x254>
{
 8004a66:	b570      	push	{r4, r5, r6, lr}
 8004a68:	460c      	mov	r4, r1
 8004a6a:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a6c:	4b93      	ldr	r3, [pc, #588]	@ (8004cbc <HAL_RCC_ClockConfig+0x25c>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0307 	and.w	r3, r3, #7
 8004a74:	428b      	cmp	r3, r1
 8004a76:	d32d      	bcc.n	8004ad4 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a78:	682b      	ldr	r3, [r5, #0]
 8004a7a:	f013 0f02 	tst.w	r3, #2
 8004a7e:	d13f      	bne.n	8004b00 <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004a80:	682b      	ldr	r3, [r5, #0]
 8004a82:	f013 0f20 	tst.w	r3, #32
 8004a86:	d153      	bne.n	8004b30 <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8004a88:	682b      	ldr	r3, [r5, #0]
 8004a8a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004a8e:	d16a      	bne.n	8004b66 <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a90:	682b      	ldr	r3, [r5, #0]
 8004a92:	f013 0f04 	tst.w	r3, #4
 8004a96:	f040 8083 	bne.w	8004ba0 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a9a:	682b      	ldr	r3, [r5, #0]
 8004a9c:	f013 0f08 	tst.w	r3, #8
 8004aa0:	f040 8097 	bne.w	8004bd2 <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aa4:	682b      	ldr	r3, [r5, #0]
 8004aa6:	f013 0f01 	tst.w	r3, #1
 8004aaa:	f000 80de 	beq.w	8004c6a <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aae:	686b      	ldr	r3, [r5, #4]
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	f000 80a8 	beq.w	8004c06 <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ab6:	2b03      	cmp	r3, #3
 8004ab8:	f000 80ad 	beq.w	8004c16 <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f040 80b2 	bne.w	8004c26 <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004ac2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ac6:	6812      	ldr	r2, [r2, #0]
 8004ac8:	f012 0f02 	tst.w	r2, #2
 8004acc:	f040 80b1 	bne.w	8004c32 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8004ad0:	2001      	movs	r0, #1
 8004ad2:	e0ee      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ad4:	4a79      	ldr	r2, [pc, #484]	@ (8004cbc <HAL_RCC_ClockConfig+0x25c>)
 8004ad6:	6813      	ldr	r3, [r2, #0]
 8004ad8:	f023 0307 	bic.w	r3, r3, #7
 8004adc:	430b      	orrs	r3, r1
 8004ade:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004ae0:	f7fc ff5c 	bl	800199c <HAL_GetTick>
 8004ae4:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ae6:	4b75      	ldr	r3, [pc, #468]	@ (8004cbc <HAL_RCC_ClockConfig+0x25c>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0307 	and.w	r3, r3, #7
 8004aee:	42a3      	cmp	r3, r4
 8004af0:	d0c2      	beq.n	8004a78 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004af2:	f7fc ff53 	bl	800199c <HAL_GetTick>
 8004af6:	1b80      	subs	r0, r0, r6
 8004af8:	2802      	cmp	r0, #2
 8004afa:	d9f4      	bls.n	8004ae6 <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 8004afc:	2003      	movs	r0, #3
 8004afe:	e0d8      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004b00:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004b02:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004b06:	688a      	ldr	r2, [r1, #8]
 8004b08:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004b10:	f7fc ff44 	bl	800199c <HAL_GetTick>
 8004b14:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004b16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8004b20:	d1ae      	bne.n	8004a80 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b22:	f7fc ff3b 	bl	800199c <HAL_GetTick>
 8004b26:	1b80      	subs	r0, r0, r6
 8004b28:	2802      	cmp	r0, #2
 8004b2a:	d9f4      	bls.n	8004b16 <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 8004b2c:	2003      	movs	r0, #3
 8004b2e:	e0c0      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004b30:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004b32:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004b36:	f8d1 2108 	ldr.w	r2, [r1, #264]	@ 0x108
 8004b3a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
    tickstart = HAL_GetTick();
 8004b44:	f7fc ff2a 	bl	800199c <HAL_GetTick>
 8004b48:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004b4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b4e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004b52:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8004b56:	d197      	bne.n	8004a88 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b58:	f7fc ff20 	bl	800199c <HAL_GetTick>
 8004b5c:	1b80      	subs	r0, r0, r6
 8004b5e:	2802      	cmp	r0, #2
 8004b60:	d9f3      	bls.n	8004b4a <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 8004b62:	2003      	movs	r0, #3
 8004b64:	e0a5      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8004b66:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004b68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b6c:	f8d2 3108 	ldr.w	r3, [r2, #264]	@ 0x108
 8004b70:	f023 030f 	bic.w	r3, r3, #15
 8004b74:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 8004b78:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
    tickstart = HAL_GetTick();
 8004b7c:	f7fc ff0e 	bl	800199c <HAL_GetTick>
 8004b80:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004b82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b86:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004b8a:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8004b8e:	f47f af7f 	bne.w	8004a90 <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b92:	f7fc ff03 	bl	800199c <HAL_GetTick>
 8004b96:	1b80      	subs	r0, r0, r6
 8004b98:	2802      	cmp	r0, #2
 8004b9a:	d9f2      	bls.n	8004b82 <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 8004b9c:	2003      	movs	r0, #3
 8004b9e:	e088      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004ba0:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004ba2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004ba6:	688a      	ldr	r2, [r1, #8]
 8004ba8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004bac:	4313      	orrs	r3, r2
 8004bae:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004bb0:	f7fc fef4 	bl	800199c <HAL_GetTick>
 8004bb4:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004bb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8004bc0:	f47f af6b 	bne.w	8004a9a <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004bc4:	f7fc feea 	bl	800199c <HAL_GetTick>
 8004bc8:	1b80      	subs	r0, r0, r6
 8004bca:	2802      	cmp	r0, #2
 8004bcc:	d9f3      	bls.n	8004bb6 <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 8004bce:	2003      	movs	r0, #3
 8004bd0:	e06f      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004bd2:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004bd4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004bd8:	6893      	ldr	r3, [r2, #8]
 8004bda:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8004bde:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004be2:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8004be4:	f7fc feda 	bl	800199c <HAL_GetTick>
 8004be8:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004bea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8004bf4:	f47f af56 	bne.w	8004aa4 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004bf8:	f7fc fed0 	bl	800199c <HAL_GetTick>
 8004bfc:	1b80      	subs	r0, r0, r6
 8004bfe:	2802      	cmp	r0, #2
 8004c00:	d9f3      	bls.n	8004bea <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 8004c02:	2003      	movs	r0, #3
 8004c04:	e055      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004c06:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c0a:	6812      	ldr	r2, [r2, #0]
 8004c0c:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8004c10:	d10f      	bne.n	8004c32 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8004c12:	2001      	movs	r0, #1
 8004c14:	e04d      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004c16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c1a:	6812      	ldr	r2, [r2, #0]
 8004c1c:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8004c20:	d107      	bne.n	8004c32 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8004c22:	2001      	movs	r0, #1
 8004c24:	e045      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004c26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c2a:	6812      	ldr	r2, [r2, #0]
 8004c2c:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8004c30:	d042      	beq.n	8004cb8 <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004c32:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004c36:	688a      	ldr	r2, [r1, #8]
 8004c38:	f022 0203 	bic.w	r2, r2, #3
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004c40:	f7fc feac 	bl	800199c <HAL_GetTick>
 8004c44:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004c46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c50:	686a      	ldr	r2, [r5, #4]
 8004c52:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004c56:	d008      	beq.n	8004c6a <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c58:	f7fc fea0 	bl	800199c <HAL_GetTick>
 8004c5c:	1b80      	subs	r0, r0, r6
 8004c5e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004c62:	4298      	cmp	r0, r3
 8004c64:	d9ef      	bls.n	8004c46 <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 8004c66:	2003      	movs	r0, #3
 8004c68:	e023      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c6a:	4b14      	ldr	r3, [pc, #80]	@ (8004cbc <HAL_RCC_ClockConfig+0x25c>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0307 	and.w	r3, r3, #7
 8004c72:	42a3      	cmp	r3, r4
 8004c74:	d915      	bls.n	8004ca2 <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c76:	4a11      	ldr	r2, [pc, #68]	@ (8004cbc <HAL_RCC_ClockConfig+0x25c>)
 8004c78:	6813      	ldr	r3, [r2, #0]
 8004c7a:	f023 0307 	bic.w	r3, r3, #7
 8004c7e:	4323      	orrs	r3, r4
 8004c80:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004c82:	f7fc fe8b 	bl	800199c <HAL_GetTick>
 8004c86:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c88:	4b0c      	ldr	r3, [pc, #48]	@ (8004cbc <HAL_RCC_ClockConfig+0x25c>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	42a3      	cmp	r3, r4
 8004c92:	d006      	beq.n	8004ca2 <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004c94:	f7fc fe82 	bl	800199c <HAL_GetTick>
 8004c98:	1b40      	subs	r0, r0, r5
 8004c9a:	2802      	cmp	r0, #2
 8004c9c:	d9f4      	bls.n	8004c88 <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 8004c9e:	2003      	movs	r0, #3
 8004ca0:	e007      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004ca2:	f7ff fb9b 	bl	80043dc <HAL_RCC_GetHCLKFreq>
 8004ca6:	4b06      	ldr	r3, [pc, #24]	@ (8004cc0 <HAL_RCC_ClockConfig+0x260>)
 8004ca8:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8004caa:	4b06      	ldr	r3, [pc, #24]	@ (8004cc4 <HAL_RCC_ClockConfig+0x264>)
 8004cac:	6818      	ldr	r0, [r3, #0]
 8004cae:	f7fc fe73 	bl	8001998 <HAL_InitTick>
}
 8004cb2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004cb4:	2001      	movs	r0, #1
}
 8004cb6:	4770      	bx	lr
        return HAL_ERROR;
 8004cb8:	2001      	movs	r0, #1
 8004cba:	e7fa      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x252>
 8004cbc:	58004000 	.word	0x58004000
 8004cc0:	20000074 	.word	0x20000074
 8004cc4:	20000078 	.word	0x20000078

08004cc8 <HAL_RCC_GetPCLK1Freq>:
{
 8004cc8:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004cca:	f7ff fb87 	bl	80043dc <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004cce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004cd8:	4a02      	ldr	r2, [pc, #8]	@ (8004ce4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8004cde:	40d8      	lsrs	r0, r3
 8004ce0:	bd08      	pop	{r3, pc}
 8004ce2:	bf00      	nop
 8004ce4:	08012c7c 	.word	0x08012c7c

08004ce8 <HAL_RCC_GetPCLK2Freq>:
{
 8004ce8:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004cea:	f7ff fb77 	bl	80043dc <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004cee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004cf8:	4a02      	ldr	r2, [pc, #8]	@ (8004d04 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8004cfe:	40d8      	lsrs	r0, r3
 8004d00:	bd08      	pop	{r3, pc}
 8004d02:	bf00      	nop
 8004d04:	08012c7c 	.word	0x08012c7c

08004d08 <LL_RCC_SetI2CClockSource>:
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004d08:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d0c:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8004d10:	0902      	lsrs	r2, r0, #4
 8004d12:	f402 227f 	and.w	r2, r2, #1044480	@ 0xff000
 8004d16:	ea23 0302 	bic.w	r3, r3, r2
 8004d1a:	0100      	lsls	r0, r0, #4
 8004d1c:	f400 207f 	and.w	r0, r0, #1044480	@ 0xff000
 8004d20:	4303      	orrs	r3, r0
 8004d22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004d26:	4770      	bx	lr

08004d28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d28:	b570      	push	{r4, r5, r6, lr}
 8004d2a:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d2c:	6803      	ldr	r3, [r0, #0]
 8004d2e:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8004d32:	f040 80aa 	bne.w	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x162>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004d36:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d38:	6823      	ldr	r3, [r4, #0]
 8004d3a:	f013 0f01 	tst.w	r3, #1
 8004d3e:	d00a      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d40:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8004d42:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d46:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8004d4a:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8004d4e:	b292      	uxth	r2, r2
 8004d50:	4313      	orrs	r3, r2
 8004d52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d56:	6823      	ldr	r3, [r4, #0]
 8004d58:	f013 0f02 	tst.w	r3, #2
 8004d5c:	d00a      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d5e:	68a2      	ldr	r2, [r4, #8]
 8004d60:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d64:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8004d68:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8004d6c:	b292      	uxth	r2, r2
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d74:	6823      	ldr	r3, [r4, #0]
 8004d76:	f013 0f20 	tst.w	r3, #32
 8004d7a:	d009      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d7c:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004d7e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d82:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004d86:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d90:	6823      	ldr	r3, [r4, #0]
 8004d92:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8004d96:	d00c      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d98:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004d9a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d9e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004da2:	0c08      	lsrs	r0, r1, #16
 8004da4:	0400      	lsls	r0, r0, #16
 8004da6:	ea23 0300 	bic.w	r3, r3, r0
 8004daa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004dae:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004db2:	6823      	ldr	r3, [r4, #0]
 8004db4:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8004db8:	d00c      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004dba:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004dbc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004dc0:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004dc4:	0c08      	lsrs	r0, r1, #16
 8004dc6:	0400      	lsls	r0, r0, #16
 8004dc8:	ea23 0300 	bic.w	r3, r3, r0
 8004dcc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004dd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004dd4:	6823      	ldr	r3, [r4, #0]
 8004dd6:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8004dda:	d00c      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004ddc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8004dde:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004de2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004de6:	0c08      	lsrs	r0, r1, #16
 8004de8:	0400      	lsls	r0, r0, #16
 8004dea:	ea23 0300 	bic.w	r3, r3, r0
 8004dee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004df2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004df6:	6823      	ldr	r3, [r4, #0]
 8004df8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004dfc:	f040 809b 	bne.w	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e00:	6823      	ldr	r3, [r4, #0]
 8004e02:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004e06:	f040 809a 	bne.w	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x216>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e0a:	6823      	ldr	r3, [r4, #0]
 8004e0c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004e10:	f040 8099 	bne.w	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8004e14:	6823      	ldr	r3, [r4, #0]
 8004e16:	f013 0f10 	tst.w	r3, #16
 8004e1a:	d00e      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004e1c:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8004e1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e22:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004e26:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004e30:	68e3      	ldr	r3, [r4, #12]
 8004e32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e36:	f000 808a 	beq.w	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x226>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e3a:	6823      	ldr	r3, [r4, #0]
 8004e3c:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8004e40:	d00f      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e42:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004e44:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e48:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004e4c:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8004e50:	4313      	orrs	r3, r2
 8004e52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e56:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004e58:	b91b      	cbnz	r3, 8004e62 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004e5a:	68cb      	ldr	r3, [r1, #12]
 8004e5c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e60:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e62:	6823      	ldr	r3, [r4, #0]
 8004e64:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8004e68:	d00d      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e6a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004e6c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e70:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004e74:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004e7e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004e80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e84:	d068      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x230>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 8004e86:	4628      	mov	r0, r5
 8004e88:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 8004e8a:	f7ff f91d 	bl	80040c8 <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 8004e8e:	f7fc fd85 	bl	800199c <HAL_GetTick>
 8004e92:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004e94:	4b33      	ldr	r3, [pc, #204]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004e9c:	d106      	bne.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x184>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e9e:	f7fc fd7d 	bl	800199c <HAL_GetTick>
 8004ea2:	1b40      	subs	r0, r0, r5
 8004ea4:	2802      	cmp	r0, #2
 8004ea6:	d9f5      	bls.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x16c>
        ret = HAL_TIMEOUT;
 8004ea8:	2503      	movs	r5, #3
 8004eaa:	e000      	b.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x186>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8004eac:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 8004eae:	2d00      	cmp	r5, #0
 8004eb0:	f47f af42 	bne.w	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004eb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ebc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8004ec0:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d016      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ec6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004eca:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 8004ece:	f421 7040 	bic.w	r0, r1, #768	@ 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004ed2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004ed6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004eda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004ede:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004ee2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004ee6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        RCC->BDCR = tmpregister;
 8004eea:	f8c3 0090 	str.w	r0, [r3, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8004eee:	f011 0f02 	tst.w	r1, #2
 8004ef2:	d10d      	bne.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
      if (ret == HAL_OK)
 8004ef4:	2d00      	cmp	r5, #0
 8004ef6:	f47f af1f 	bne.w	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004efa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004efc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004f00:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004f04:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8004f0e:	e713      	b.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x10>
        tickstart = HAL_GetTick();
 8004f10:	f7fc fd44 	bl	800199c <HAL_GetTick>
 8004f14:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004f16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f1e:	f013 0f02 	tst.w	r3, #2
 8004f22:	d1e7      	bne.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f24:	f7fc fd3a 	bl	800199c <HAL_GetTick>
 8004f28:	1b83      	subs	r3, r0, r6
 8004f2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d9f1      	bls.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
            ret = HAL_TIMEOUT;
 8004f32:	2503      	movs	r5, #3
 8004f34:	e7de      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f36:	6960      	ldr	r0, [r4, #20]
 8004f38:	f7ff fee6 	bl	8004d08 <LL_RCC_SetI2CClockSource>
 8004f3c:	e760      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f3e:	69a0      	ldr	r0, [r4, #24]
 8004f40:	f7ff fee2 	bl	8004d08 <LL_RCC_SetI2CClockSource>
 8004f44:	e761      	b.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f46:	69e0      	ldr	r0, [r4, #28]
 8004f48:	f7ff fede 	bl	8004d08 <LL_RCC_SetI2CClockSource>
 8004f4c:	e762      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8004f4e:	68cb      	ldr	r3, [r1, #12]
 8004f50:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f54:	60cb      	str	r3, [r1, #12]
 8004f56:	e770      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004f58:	68cb      	ldr	r3, [r1, #12]
 8004f5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f5e:	60cb      	str	r3, [r1, #12]
 8004f60:	e791      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004f62:	bf00      	nop
 8004f64:	58000400 	.word	0x58000400

08004f68 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8004f68:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004f6a:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 8004f6e:	2a01      	cmp	r2, #1
 8004f70:	d035      	beq.n	8004fde <HAL_RTC_DeactivateAlarm+0x76>
 8004f72:	2201      	movs	r2, #1
 8004f74:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f78:	2202      	movs	r2, #2
 8004f7a:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f7e:	4a19      	ldr	r2, [pc, #100]	@ (8004fe4 <HAL_RTC_DeactivateAlarm+0x7c>)
 8004f80:	20ca      	movs	r0, #202	@ 0xca
 8004f82:	6250      	str	r0, [r2, #36]	@ 0x24
 8004f84:	2053      	movs	r0, #83	@ 0x53
 8004f86:	6250      	str	r0, [r2, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8004f88:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8004f8c:	d018      	beq.n	8004fc0 <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004f8e:	4a15      	ldr	r2, [pc, #84]	@ (8004fe4 <HAL_RTC_DeactivateAlarm+0x7c>)
 8004f90:	6991      	ldr	r1, [r2, #24]
 8004f92:	f421 5108 	bic.w	r1, r1, #8704	@ 0x2200
 8004f96:	6191      	str	r1, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8004f98:	6cd1      	ldr	r1, [r2, #76]	@ 0x4c
 8004f9a:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8004f9e:	64d1      	str	r1, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8004fa0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004fa2:	f021 0102 	bic.w	r1, r1, #2
 8004fa6:	6319      	str	r1, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004fa8:	2102      	movs	r1, #2
 8004faa:	65d1      	str	r1, [r2, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fac:	4a0d      	ldr	r2, [pc, #52]	@ (8004fe4 <HAL_RTC_DeactivateAlarm+0x7c>)
 8004fae:	21ff      	movs	r1, #255	@ 0xff
 8004fb0:	6251      	str	r1, [r2, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004fb8:	2000      	movs	r0, #0
 8004fba:	f883 002c 	strb.w	r0, [r3, #44]	@ 0x2c

  return HAL_OK;
 8004fbe:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004fc0:	6991      	ldr	r1, [r2, #24]
 8004fc2:	f421 5188 	bic.w	r1, r1, #4352	@ 0x1100
 8004fc6:	6191      	str	r1, [r2, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8004fc8:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004fca:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8004fce:	6451      	str	r1, [r2, #68]	@ 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8004fd0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004fd2:	f021 0101 	bic.w	r1, r1, #1
 8004fd6:	6319      	str	r1, [r3, #48]	@ 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004fd8:	2101      	movs	r1, #1
 8004fda:	65d1      	str	r1, [r2, #92]	@ 0x5c
 8004fdc:	e7e6      	b.n	8004fac <HAL_RTC_DeactivateAlarm+0x44>
  __HAL_LOCK(hrtc);
 8004fde:	2002      	movs	r0, #2
}
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	40002800 	.word	0x40002800

08004fe8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004fe8:	b538      	push	{r3, r4, r5, lr}
 8004fea:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8004fec:	4b0d      	ldr	r3, [pc, #52]	@ (8005024 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8004fee:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
 8004ff0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004ff2:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8004ff4:	f015 0f01 	tst.w	r5, #1
 8004ff8:	d106      	bne.n	8005008 <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8004ffa:	f015 0f02 	tst.w	r5, #2
 8004ffe:	d109      	bne.n	8005014 <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005000:	2301      	movs	r3, #1
 8005002:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 8005006:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005008:	4b06      	ldr	r3, [pc, #24]	@ (8005024 <HAL_RTC_AlarmIRQHandler+0x3c>)
 800500a:	2201      	movs	r2, #1
 800500c:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 800500e:	f7fc fe6b 	bl	8001ce8 <HAL_RTC_AlarmAEventCallback>
 8005012:	e7f2      	b.n	8004ffa <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8005014:	4b03      	ldr	r3, [pc, #12]	@ (8005024 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8005016:	2202      	movs	r2, #2
 8005018:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800501a:	4620      	mov	r0, r4
 800501c:	f000 f9ee 	bl	80053fc <HAL_RTCEx_AlarmBEventCallback>
 8005020:	e7ee      	b.n	8005000 <HAL_RTC_AlarmIRQHandler+0x18>
 8005022:	bf00      	nop
 8005024:	40002800 	.word	0x40002800

08005028 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005028:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800502a:	4a0b      	ldr	r2, [pc, #44]	@ (8005058 <HAL_RTC_WaitForSynchro+0x30>)
 800502c:	68d3      	ldr	r3, [r2, #12]
 800502e:	f023 0320 	bic.w	r3, r3, #32
 8005032:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8005034:	f7fc fcb2 	bl	800199c <HAL_GetTick>
 8005038:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800503a:	4b07      	ldr	r3, [pc, #28]	@ (8005058 <HAL_RTC_WaitForSynchro+0x30>)
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	f013 0f20 	tst.w	r3, #32
 8005042:	d107      	bne.n	8005054 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005044:	f7fc fcaa 	bl	800199c <HAL_GetTick>
 8005048:	1b00      	subs	r0, r0, r4
 800504a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800504e:	d9f4      	bls.n	800503a <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 8005050:	2003      	movs	r0, #3
 8005052:	e000      	b.n	8005056 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8005054:	2000      	movs	r0, #0
}
 8005056:	bd10      	pop	{r4, pc}
 8005058:	40002800 	.word	0x40002800

0800505c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800505c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800505e:	4b11      	ldr	r3, [pc, #68]	@ (80050a4 <RTC_EnterInitMode+0x48>)
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005066:	d002      	beq.n	800506e <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8005068:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 800506a:	4620      	mov	r0, r4
 800506c:	bd70      	pop	{r4, r5, r6, pc}
 800506e:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005070:	4a0c      	ldr	r2, [pc, #48]	@ (80050a4 <RTC_EnterInitMode+0x48>)
 8005072:	68d3      	ldr	r3, [r2, #12]
 8005074:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005078:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 800507a:	f7fc fc8f 	bl	800199c <HAL_GetTick>
 800507e:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 8005080:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005082:	4b08      	ldr	r3, [pc, #32]	@ (80050a4 <RTC_EnterInitMode+0x48>)
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800508a:	d1ee      	bne.n	800506a <RTC_EnterInitMode+0xe>
 800508c:	2c03      	cmp	r4, #3
 800508e:	d0ec      	beq.n	800506a <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005090:	f7fc fc84 	bl	800199c <HAL_GetTick>
 8005094:	1b43      	subs	r3, r0, r5
 8005096:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800509a:	d9f2      	bls.n	8005082 <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800509c:	2403      	movs	r4, #3
 800509e:	f886 402d 	strb.w	r4, [r6, #45]	@ 0x2d
 80050a2:	e7ee      	b.n	8005082 <RTC_EnterInitMode+0x26>
 80050a4:	40002800 	.word	0x40002800

080050a8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80050a8:	b510      	push	{r4, lr}
 80050aa:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80050ac:	4b10      	ldr	r3, [pc, #64]	@ (80050f0 <RTC_ExitInitMode+0x48>)
 80050ae:	68da      	ldr	r2, [r3, #12]
 80050b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80050b4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	f013 0f20 	tst.w	r3, #32
 80050bc:	d106      	bne.n	80050cc <RTC_ExitInitMode+0x24>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80050be:	f7ff ffb3 	bl	8005028 <HAL_RTC_WaitForSynchro>
 80050c2:	b198      	cbz	r0, 80050ec <RTC_ExitInitMode+0x44>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80050c4:	2003      	movs	r0, #3
 80050c6:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 80050ca:	e00f      	b.n	80050ec <RTC_ExitInitMode+0x44>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80050cc:	4a08      	ldr	r2, [pc, #32]	@ (80050f0 <RTC_ExitInitMode+0x48>)
 80050ce:	6993      	ldr	r3, [r2, #24]
 80050d0:	f023 0320 	bic.w	r3, r3, #32
 80050d4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80050d6:	f7ff ffa7 	bl	8005028 <HAL_RTC_WaitForSynchro>
 80050da:	b110      	cbz	r0, 80050e2 <RTC_ExitInitMode+0x3a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80050dc:	2003      	movs	r0, #3
 80050de:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80050e2:	4a03      	ldr	r2, [pc, #12]	@ (80050f0 <RTC_ExitInitMode+0x48>)
 80050e4:	6993      	ldr	r3, [r2, #24]
 80050e6:	f043 0320 	orr.w	r3, r3, #32
 80050ea:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 80050ec:	bd10      	pop	{r4, pc}
 80050ee:	bf00      	nop
 80050f0:	40002800 	.word	0x40002800

080050f4 <HAL_RTC_Init>:
  if (hrtc != NULL)
 80050f4:	2800      	cmp	r0, #0
 80050f6:	d055      	beq.n	80051a4 <HAL_RTC_Init+0xb0>
{
 80050f8:	b510      	push	{r4, lr}
 80050fa:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80050fc:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8005100:	b163      	cbz	r3, 800511c <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005102:	2302      	movs	r3, #2
 8005104:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005108:	4b27      	ldr	r3, [pc, #156]	@ (80051a8 <HAL_RTC_Init+0xb4>)
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	f013 0f10 	tst.w	r3, #16
 8005110:	d009      	beq.n	8005126 <HAL_RTC_Init+0x32>
      hrtc->State = HAL_RTC_STATE_READY;
 8005112:	2301      	movs	r3, #1
 8005114:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8005118:	2000      	movs	r0, #0
}
 800511a:	bd10      	pop	{r4, pc}
      hrtc->Lock = HAL_UNLOCKED;
 800511c:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
      HAL_RTC_MspInit(hrtc);
 8005120:	f7fc faa4 	bl	800166c <HAL_RTC_MspInit>
 8005124:	e7ed      	b.n	8005102 <HAL_RTC_Init+0xe>
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005126:	4b20      	ldr	r3, [pc, #128]	@ (80051a8 <HAL_RTC_Init+0xb4>)
 8005128:	22ca      	movs	r2, #202	@ 0xca
 800512a:	625a      	str	r2, [r3, #36]	@ 0x24
 800512c:	2253      	movs	r2, #83	@ 0x53
 800512e:	625a      	str	r2, [r3, #36]	@ 0x24
      status = RTC_EnterInitMode(hrtc);
 8005130:	4620      	mov	r0, r4
 8005132:	f7ff ff93 	bl	800505c <RTC_EnterInitMode>
      if (status == HAL_OK)
 8005136:	b118      	cbz	r0, 8005140 <HAL_RTC_Init+0x4c>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005138:	4b1b      	ldr	r3, [pc, #108]	@ (80051a8 <HAL_RTC_Init+0xb4>)
 800513a:	22ff      	movs	r2, #255	@ 0xff
 800513c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 800513e:	e7ec      	b.n	800511a <HAL_RTC_Init+0x26>
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8005140:	4b19      	ldr	r3, [pc, #100]	@ (80051a8 <HAL_RTC_Init+0xb4>)
 8005142:	699a      	ldr	r2, [r3, #24]
 8005144:	f022 628e 	bic.w	r2, r2, #74448896	@ 0x4700000
 8005148:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800514c:	619a      	str	r2, [r3, #24]
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800514e:	6999      	ldr	r1, [r3, #24]
 8005150:	6862      	ldr	r2, [r4, #4]
 8005152:	6920      	ldr	r0, [r4, #16]
 8005154:	4302      	orrs	r2, r0
 8005156:	69a0      	ldr	r0, [r4, #24]
 8005158:	4302      	orrs	r2, r0
 800515a:	430a      	orrs	r2, r1
 800515c:	619a      	str	r2, [r3, #24]
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800515e:	68e2      	ldr	r2, [r4, #12]
 8005160:	68a1      	ldr	r1, [r4, #8]
 8005162:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005166:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8005168:	68da      	ldr	r2, [r3, #12]
 800516a:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 800516e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005170:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8005172:	4301      	orrs	r1, r0
 8005174:	430a      	orrs	r2, r1
 8005176:	60da      	str	r2, [r3, #12]
        status = RTC_ExitInitMode(hrtc);
 8005178:	4620      	mov	r0, r4
 800517a:	f7ff ff95 	bl	80050a8 <RTC_ExitInitMode>
        if (status == HAL_OK)
 800517e:	b118      	cbz	r0, 8005188 <HAL_RTC_Init+0x94>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005180:	4b09      	ldr	r3, [pc, #36]	@ (80051a8 <HAL_RTC_Init+0xb4>)
 8005182:	22ff      	movs	r2, #255	@ 0xff
 8005184:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 8005186:	e7c8      	b.n	800511a <HAL_RTC_Init+0x26>
          MODIFY_REG(RTC->CR, \
 8005188:	4907      	ldr	r1, [pc, #28]	@ (80051a8 <HAL_RTC_Init+0xb4>)
 800518a:	698b      	ldr	r3, [r1, #24]
 800518c:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8005190:	6a22      	ldr	r2, [r4, #32]
 8005192:	69e0      	ldr	r0, [r4, #28]
 8005194:	4302      	orrs	r2, r0
 8005196:	6960      	ldr	r0, [r4, #20]
 8005198:	4302      	orrs	r2, r0
 800519a:	4313      	orrs	r3, r2
 800519c:	618b      	str	r3, [r1, #24]
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800519e:	23ff      	movs	r3, #255	@ 0xff
 80051a0:	624b      	str	r3, [r1, #36]	@ 0x24
    if (status == HAL_OK)
 80051a2:	e7b6      	b.n	8005112 <HAL_RTC_Init+0x1e>
  HAL_StatusTypeDef status = HAL_ERROR;
 80051a4:	2001      	movs	r0, #1
}
 80051a6:	4770      	bx	lr
 80051a8:	40002800 	.word	0x40002800

080051ac <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80051ac:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 80051ae:	e002      	b.n	80051b6 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 80051b0:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 80051b2:	380a      	subs	r0, #10
 80051b4:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 80051b6:	2809      	cmp	r0, #9
 80051b8:	d8fa      	bhi.n	80051b0 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80051ba:	011b      	lsls	r3, r3, #4
 80051bc:	b2db      	uxtb	r3, r3
}
 80051be:	4318      	orrs	r0, r3
 80051c0:	4770      	bx	lr
	...

080051c4 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 80051c4:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	f000 80b0 	beq.w	800532e <HAL_RTC_SetAlarm_IT+0x16a>
{
 80051ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051d2:	4605      	mov	r5, r0
 80051d4:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 80051d6:	2301      	movs	r3, #1
 80051d8:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80051dc:	2302      	movs	r3, #2
 80051de:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80051e2:	4b54      	ldr	r3, [pc, #336]	@ (8005334 <HAL_RTC_SetAlarm_IT+0x170>)
 80051e4:	68de      	ldr	r6, [r3, #12]
 80051e6:	f406 7640 	and.w	r6, r6, #768	@ 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 80051ea:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 80051ee:	d043      	beq.n	8005278 <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 80051f0:	bb12      	cbnz	r2, 8005238 <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80051f8:	d101      	bne.n	80051fe <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80051fa:	2300      	movs	r3, #0
 80051fc:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80051fe:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005202:	7820      	ldrb	r0, [r4, #0]
 8005204:	f7ff ffd2 	bl	80051ac <RTC_ByteToBcd2>
 8005208:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800520a:	7860      	ldrb	r0, [r4, #1]
 800520c:	f7ff ffce 	bl	80051ac <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005210:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005214:	78a0      	ldrb	r0, [r4, #2]
 8005216:	f7ff ffc9 	bl	80051ac <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800521a:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800521c:	78e3      	ldrb	r3, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800521e:	ea47 5783 	orr.w	r7, r7, r3, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005222:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 8005226:	f7ff ffc1 	bl	80051ac <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800522a:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800522e:	6a23      	ldr	r3, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005230:	4318      	orrs	r0, r3
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005232:	ea48 0000 	orr.w	r0, r8, r0
 8005236:	e020      	b.n	800527a <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8005238:	6948      	ldr	r0, [r1, #20]
 800523a:	f1b0 3f80 	cmp.w	r0, #2155905152	@ 0x80808080
 800523e:	d009      	beq.n	8005254 <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8005240:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8005244:	d006      	beq.n	8005254 <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005246:	4b3b      	ldr	r3, [pc, #236]	@ (8005334 <HAL_RTC_SetAlarm_IT+0x170>)
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800524e:	d101      	bne.n	8005254 <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005250:	2300      	movs	r3, #0
 8005252:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005254:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005256:	7863      	ldrb	r3, [r4, #1]
 8005258:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800525a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800525e:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005260:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005262:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005264:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005268:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800526c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005270:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005272:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005274:	4318      	orrs	r0, r3
 8005276:	e000      	b.n	800527a <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 8005278:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800527a:	4b2e      	ldr	r3, [pc, #184]	@ (8005334 <HAL_RTC_SetAlarm_IT+0x170>)
 800527c:	22ca      	movs	r2, #202	@ 0xca
 800527e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005280:	2253      	movs	r2, #83	@ 0x53
 8005282:	625a      	str	r2, [r3, #36]	@ 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005284:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005286:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800528a:	d02a      	beq.n	80052e2 <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800528c:	4b29      	ldr	r3, [pc, #164]	@ (8005334 <HAL_RTC_SetAlarm_IT+0x170>)
 800528e:	699a      	ldr	r2, [r3, #24]
 8005290:	f422 5208 	bic.w	r2, r2, #8704	@ 0x2200
 8005294:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8005296:	2202      	movs	r2, #2
 8005298:	65da      	str	r2, [r3, #92]	@ 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 800529a:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 800529e:	d040      	beq.n	8005322 <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80052a0:	4b24      	ldr	r3, [pc, #144]	@ (8005334 <HAL_RTC_SetAlarm_IT+0x170>)
 80052a2:	6498      	str	r0, [r3, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80052a4:	69a2      	ldr	r2, [r4, #24]
 80052a6:	64da      	str	r2, [r3, #76]	@ 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80052a8:	6862      	ldr	r2, [r4, #4]
 80052aa:	4b22      	ldr	r3, [pc, #136]	@ (8005334 <HAL_RTC_SetAlarm_IT+0x170>)
 80052ac:	675a      	str	r2, [r3, #116]	@ 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80052ae:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80052b0:	f042 0202 	orr.w	r2, r2, #2
 80052b4:	632a      	str	r2, [r5, #48]	@ 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80052b6:	699a      	ldr	r2, [r3, #24]
 80052b8:	f442 5208 	orr.w	r2, r2, #8704	@ 0x2200
 80052bc:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80052be:	4a1e      	ldr	r2, [pc, #120]	@ (8005338 <HAL_RTC_SetAlarm_IT+0x174>)
 80052c0:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 80052c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052cc:	4b19      	ldr	r3, [pc, #100]	@ (8005334 <HAL_RTC_SetAlarm_IT+0x170>)
 80052ce:	22ff      	movs	r2, #255	@ 0xff
 80052d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80052d2:	2301      	movs	r3, #1
 80052d4:	f885 302d 	strb.w	r3, [r5, #45]	@ 0x2d
  __HAL_UNLOCK(hrtc);
 80052d8:	2000      	movs	r0, #0
 80052da:	f885 002c 	strb.w	r0, [r5, #44]	@ 0x2c
}
 80052de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80052e2:	4b14      	ldr	r3, [pc, #80]	@ (8005334 <HAL_RTC_SetAlarm_IT+0x170>)
 80052e4:	699a      	ldr	r2, [r3, #24]
 80052e6:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 80052ea:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80052ec:	2201      	movs	r2, #1
 80052ee:	65da      	str	r2, [r3, #92]	@ 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 80052f0:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 80052f4:	d00f      	beq.n	8005316 <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80052f6:	4b0f      	ldr	r3, [pc, #60]	@ (8005334 <HAL_RTC_SetAlarm_IT+0x170>)
 80052f8:	6418      	str	r0, [r3, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80052fa:	69a2      	ldr	r2, [r4, #24]
 80052fc:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80052fe:	6862      	ldr	r2, [r4, #4]
 8005300:	4b0c      	ldr	r3, [pc, #48]	@ (8005334 <HAL_RTC_SetAlarm_IT+0x170>)
 8005302:	671a      	str	r2, [r3, #112]	@ 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8005304:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8005306:	f042 0201 	orr.w	r2, r2, #1
 800530a:	632a      	str	r2, [r5, #48]	@ 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800530c:	699a      	ldr	r2, [r3, #24]
 800530e:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 8005312:	619a      	str	r2, [r3, #24]
 8005314:	e7d3      	b.n	80052be <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8005316:	69a3      	ldr	r3, [r4, #24]
 8005318:	69e2      	ldr	r2, [r4, #28]
 800531a:	4313      	orrs	r3, r2
 800531c:	4a05      	ldr	r2, [pc, #20]	@ (8005334 <HAL_RTC_SetAlarm_IT+0x170>)
 800531e:	6453      	str	r3, [r2, #68]	@ 0x44
 8005320:	e7ed      	b.n	80052fe <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8005322:	69a3      	ldr	r3, [r4, #24]
 8005324:	69e2      	ldr	r2, [r4, #28]
 8005326:	4313      	orrs	r3, r2
 8005328:	4a02      	ldr	r2, [pc, #8]	@ (8005334 <HAL_RTC_SetAlarm_IT+0x170>)
 800532a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800532c:	e7bc      	b.n	80052a8 <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 800532e:	2002      	movs	r0, #2
}
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	40002800 	.word	0x40002800
 8005338:	58000800 	.word	0x58000800

0800533c <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800533c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8005340:	2b01      	cmp	r3, #1
 8005342:	d017      	beq.n	8005374 <HAL_RTCEx_EnableBypassShadow+0x38>
 8005344:	2101      	movs	r1, #1
 8005346:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800534a:	2302      	movs	r3, #2
 800534c:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005350:	4b09      	ldr	r3, [pc, #36]	@ (8005378 <HAL_RTCEx_EnableBypassShadow+0x3c>)
 8005352:	22ca      	movs	r2, #202	@ 0xca
 8005354:	625a      	str	r2, [r3, #36]	@ 0x24
 8005356:	2253      	movs	r2, #83	@ 0x53
 8005358:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800535a:	699a      	ldr	r2, [r3, #24]
 800535c:	f042 0220 	orr.w	r2, r2, #32
 8005360:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005362:	22ff      	movs	r2, #255	@ 0xff
 8005364:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005366:	f880 102d 	strb.w	r1, [r0, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800536a:	2300      	movs	r3, #0
 800536c:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c

  return HAL_OK;
 8005370:	4618      	mov	r0, r3
 8005372:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8005374:	2002      	movs	r0, #2
}
 8005376:	4770      	bx	lr
 8005378:	40002800 	.word	0x40002800

0800537c <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800537c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8005380:	2b01      	cmp	r3, #1
 8005382:	d020      	beq.n	80053c6 <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 8005384:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 8005386:	2101      	movs	r1, #1
 8005388:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800538c:	2302      	movs	r3, #2
 800538e:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005392:	4b0e      	ldr	r3, [pc, #56]	@ (80053cc <HAL_RTCEx_SetSSRU_IT+0x50>)
 8005394:	22ca      	movs	r2, #202	@ 0xca
 8005396:	625a      	str	r2, [r3, #36]	@ 0x24
 8005398:	2253      	movs	r2, #83	@ 0x53
 800539a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 800539c:	699a      	ldr	r2, [r3, #24]
 800539e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80053a2:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80053a4:	4c0a      	ldr	r4, [pc, #40]	@ (80053d0 <HAL_RTCEx_SetSSRU_IT+0x54>)
 80053a6:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 80053aa:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80053ae:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053b2:	22ff      	movs	r2, #255	@ 0xff
 80053b4:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80053b6:	f880 102d 	strb.w	r1, [r0, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80053ba:	2300      	movs	r3, #0
 80053bc:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c

  return HAL_OK;
 80053c0:	4618      	mov	r0, r3
}
 80053c2:	bc10      	pop	{r4}
 80053c4:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 80053c6:	2002      	movs	r0, #2
}
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	40002800 	.word	0x40002800
 80053d0:	58000800 	.word	0x58000800

080053d4 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80053d4:	b510      	push	{r4, lr}
 80053d6:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80053d8:	4b07      	ldr	r3, [pc, #28]	@ (80053f8 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 80053da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053dc:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80053e0:	d103      	bne.n	80053ea <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80053e2:	2301      	movs	r3, #1
 80053e4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 80053e8:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 80053ea:	4b03      	ldr	r3, [pc, #12]	@ (80053f8 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 80053ec:	2240      	movs	r2, #64	@ 0x40
 80053ee:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 80053f0:	f7fc fc7e 	bl	8001cf0 <HAL_RTCEx_SSRUEventCallback>
 80053f4:	e7f5      	b.n	80053e2 <HAL_RTCEx_SSRUIRQHandler+0xe>
 80053f6:	bf00      	nop
 80053f8:	40002800 	.word	0x40002800

080053fc <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80053fc:	4770      	bx	lr

080053fe <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 80053fe:	0089      	lsls	r1, r1, #2
 8005400:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8005404:	f501 4131 	add.w	r1, r1, #45312	@ 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005408:	600a      	str	r2, [r1, #0]
}
 800540a:	4770      	bx	lr

0800540c <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 800540c:	0089      	lsls	r1, r1, #2
 800540e:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8005412:	f501 4131 	add.w	r1, r1, #45312	@ 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005416:	6808      	ldr	r0, [r1, #0]
}
 8005418:	4770      	bx	lr
	...

0800541c <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800541c:	4b07      	ldr	r3, [pc, #28]	@ (800543c <SUBGHZSPI_Init+0x20>)
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005424:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8005426:	f440 7041 	orr.w	r0, r0, #772	@ 0x304
 800542a:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800542c:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8005430:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005438:	601a      	str	r2, [r3, #0]
}
 800543a:	4770      	bx	lr
 800543c:	58010000 	.word	0x58010000

08005440 <HAL_SUBGHZ_Init>:
{
 8005440:	b530      	push	{r4, r5, lr}
 8005442:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 8005444:	2800      	cmp	r0, #0
 8005446:	d05d      	beq.n	8005504 <HAL_SUBGHZ_Init+0xc4>
 8005448:	4604      	mov	r4, r0
  subghz_state = hsubghz->State;
 800544a:	7983      	ldrb	r3, [r0, #6]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 800544c:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 8005450:	b10b      	cbz	r3, 8005456 <HAL_SUBGHZ_Init+0x16>
 8005452:	2d03      	cmp	r5, #3
 8005454:	d10b      	bne.n	800546e <HAL_SUBGHZ_Init+0x2e>
    hsubghz->Lock = HAL_UNLOCKED;
 8005456:	2300      	movs	r3, #0
 8005458:	7163      	strb	r3, [r4, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 800545a:	4620      	mov	r0, r4
 800545c:	f7fc f9ac 	bl	80017b8 <HAL_SUBGHZ_MspInit>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 8005460:	4a29      	ldr	r2, [pc, #164]	@ (8005508 <HAL_SUBGHZ_Init+0xc8>)
 8005462:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005466:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800546a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 800546e:	b185      	cbz	r5, 8005492 <HAL_SUBGHZ_Init+0x52>
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8005470:	4b26      	ldr	r3, [pc, #152]	@ (800550c <HAL_SUBGHZ_Init+0xcc>)
 8005472:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005476:	619a      	str	r2, [r3, #24]
    status = HAL_OK;
 8005478:	2500      	movs	r5, #0
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800547a:	6820      	ldr	r0, [r4, #0]
 800547c:	f7ff ffce 	bl	800541c <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005480:	2301      	movs	r3, #1
 8005482:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8005484:	2300      	movs	r3, #0
 8005486:	60a3      	str	r3, [r4, #8]
  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005488:	2301      	movs	r3, #1
 800548a:	71a3      	strb	r3, [r4, #6]
}
 800548c:	4628      	mov	r0, r5
 800548e:	b003      	add	sp, #12
 8005490:	bd30      	pop	{r4, r5, pc}
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005492:	2302      	movs	r3, #2
 8005494:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8005496:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800549a:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 800549e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80054a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80054a6:	4b1a      	ldr	r3, [pc, #104]	@ (8005510 <HAL_SUBGHZ_Init+0xd0>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80054ae:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80054b2:	2264      	movs	r2, #100	@ 0x64
 80054b4:	fb02 f303 	mul.w	r3, r2, r3
 80054b8:	9301      	str	r3, [sp, #4]
 80054ba:	e014      	b.n	80054e6 <HAL_SUBGHZ_Init+0xa6>
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80054bc:	2501      	movs	r5, #1
 80054be:	60a5      	str	r5, [r4, #8]
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80054c0:	4b12      	ldr	r3, [pc, #72]	@ (800550c <HAL_SUBGHZ_Init+0xcc>)
 80054c2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80054c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80054ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80054ce:	689a      	ldr	r2, [r3, #8]
 80054d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054d4:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80054d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80054da:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 80054dc:	2d00      	cmp	r5, #0
 80054de:	d1d3      	bne.n	8005488 <HAL_SUBGHZ_Init+0x48>
 80054e0:	e7cb      	b.n	800547a <HAL_SUBGHZ_Init+0x3a>
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d0ec      	beq.n	80054c0 <HAL_SUBGHZ_Init+0x80>
      if (count == 0U)
 80054e6:	9b01      	ldr	r3, [sp, #4]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d0e7      	beq.n	80054bc <HAL_SUBGHZ_Init+0x7c>
      count--;
 80054ec:	9b01      	ldr	r3, [sp, #4]
 80054ee:	3b01      	subs	r3, #1
 80054f0:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80054f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054fa:	f413 4380 	ands.w	r3, r3, #16384	@ 0x4000
 80054fe:	d0f0      	beq.n	80054e2 <HAL_SUBGHZ_Init+0xa2>
 8005500:	2301      	movs	r3, #1
 8005502:	e7ee      	b.n	80054e2 <HAL_SUBGHZ_Init+0xa2>
    return status;
 8005504:	2501      	movs	r5, #1
 8005506:	e7c1      	b.n	800548c <HAL_SUBGHZ_Init+0x4c>
 8005508:	58000800 	.word	0x58000800
 800550c:	58000400 	.word	0x58000400
 8005510:	20000074 	.word	0x20000074

08005514 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8005514:	b082      	sub	sp, #8
 8005516:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005518:	4b1a      	ldr	r3, [pc, #104]	@ (8005584 <SUBGHZSPI_Transmit+0x70>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005520:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8005524:	2064      	movs	r0, #100	@ 0x64
 8005526:	fb00 f303 	mul.w	r3, r0, r3
 800552a:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800552c:	9b01      	ldr	r3, [sp, #4]
 800552e:	b14b      	cbz	r3, 8005544 <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8005530:	9b01      	ldr	r3, [sp, #4]
 8005532:	3b01      	subs	r3, #1
 8005534:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8005536:	4b14      	ldr	r3, [pc, #80]	@ (8005588 <SUBGHZSPI_Transmit+0x74>)
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f013 0f02 	tst.w	r3, #2
 800553e:	d0f5      	beq.n	800552c <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8005540:	2000      	movs	r0, #0
 8005542:	e001      	b.n	8005548 <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005544:	2001      	movs	r0, #1
 8005546:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 8005548:	4b0f      	ldr	r3, [pc, #60]	@ (8005588 <SUBGHZSPI_Transmit+0x74>)
 800554a:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800554c:	4b0d      	ldr	r3, [pc, #52]	@ (8005584 <SUBGHZSPI_Transmit+0x70>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005554:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8005558:	2164      	movs	r1, #100	@ 0x64
 800555a:	fb01 f303 	mul.w	r3, r1, r3
 800555e:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8005560:	9b01      	ldr	r3, [sp, #4]
 8005562:	b143      	cbz	r3, 8005576 <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8005564:	9b01      	ldr	r3, [sp, #4]
 8005566:	3b01      	subs	r3, #1
 8005568:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800556a:	4b07      	ldr	r3, [pc, #28]	@ (8005588 <SUBGHZSPI_Transmit+0x74>)
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	f013 0f01 	tst.w	r3, #1
 8005572:	d0f5      	beq.n	8005560 <SUBGHZSPI_Transmit+0x4c>
 8005574:	e001      	b.n	800557a <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005576:	2001      	movs	r0, #1
 8005578:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800557a:	4b03      	ldr	r3, [pc, #12]	@ (8005588 <SUBGHZSPI_Transmit+0x74>)
 800557c:	68db      	ldr	r3, [r3, #12]

  return status;
}
 800557e:	b002      	add	sp, #8
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	20000074 	.word	0x20000074
 8005588:	58010000 	.word	0x58010000

0800558c <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 800558c:	b082      	sub	sp, #8
 800558e:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005590:	4b1c      	ldr	r3, [pc, #112]	@ (8005604 <SUBGHZSPI_Receive+0x78>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005598:	f3c3 434c 	ubfx	r3, r3, #17, #13
 800559c:	2064      	movs	r0, #100	@ 0x64
 800559e:	fb00 f303 	mul.w	r3, r0, r3
 80055a2:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80055a4:	9b01      	ldr	r3, [sp, #4]
 80055a6:	b14b      	cbz	r3, 80055bc <SUBGHZSPI_Receive+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80055a8:	9b01      	ldr	r3, [sp, #4]
 80055aa:	3b01      	subs	r3, #1
 80055ac:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80055ae:	4b16      	ldr	r3, [pc, #88]	@ (8005608 <SUBGHZSPI_Receive+0x7c>)
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f013 0f02 	tst.w	r3, #2
 80055b6:	d0f5      	beq.n	80055a4 <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80055b8:	2000      	movs	r0, #0
 80055ba:	e001      	b.n	80055c0 <SUBGHZSPI_Receive+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80055bc:	2001      	movs	r0, #1
 80055be:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 80055c0:	4b11      	ldr	r3, [pc, #68]	@ (8005608 <SUBGHZSPI_Receive+0x7c>)
 80055c2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80055c6:	f883 c00c 	strb.w	ip, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80055ca:	4b0e      	ldr	r3, [pc, #56]	@ (8005604 <SUBGHZSPI_Receive+0x78>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80055d2:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80055d6:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 80055da:	fb0c f303 	mul.w	r3, ip, r3
 80055de:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80055e0:	9b01      	ldr	r3, [sp, #4]
 80055e2:	b143      	cbz	r3, 80055f6 <SUBGHZSPI_Receive+0x6a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80055e4:	9b01      	ldr	r3, [sp, #4]
 80055e6:	3b01      	subs	r3, #1
 80055e8:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80055ea:	4b07      	ldr	r3, [pc, #28]	@ (8005608 <SUBGHZSPI_Receive+0x7c>)
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f013 0f01 	tst.w	r3, #1
 80055f2:	d0f5      	beq.n	80055e0 <SUBGHZSPI_Receive+0x54>
 80055f4:	e001      	b.n	80055fa <SUBGHZSPI_Receive+0x6e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80055f6:	2001      	movs	r0, #1
 80055f8:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80055fa:	4b03      	ldr	r3, [pc, #12]	@ (8005608 <SUBGHZSPI_Receive+0x7c>)
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	700b      	strb	r3, [r1, #0]

  return status;
}
 8005600:	b002      	add	sp, #8
 8005602:	4770      	bx	lr
 8005604:	20000074 	.word	0x20000074
 8005608:	58010000 	.word	0x58010000

0800560c <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 800560c:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800560e:	4b13      	ldr	r3, [pc, #76]	@ (800565c <SUBGHZ_WaitOnBusy+0x50>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005616:	f3c3 434b 	ubfx	r3, r3, #17, #12
 800561a:	2264      	movs	r2, #100	@ 0x64
 800561c:	fb02 f303 	mul.w	r3, r2, r3
 8005620:	9301      	str	r3, [sp, #4]
 8005622:	e006      	b.n	8005632 <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8005624:	2302      	movs	r3, #2
 8005626:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 8005628:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 800562a:	b002      	add	sp, #8
 800562c:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800562e:	4213      	tst	r3, r2
 8005630:	d012      	beq.n	8005658 <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8005632:	4b0b      	ldr	r3, [pc, #44]	@ (8005660 <SUBGHZ_WaitOnBusy+0x54>)
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	f013 0304 	ands.w	r3, r3, #4
 800563a:	d000      	beq.n	800563e <SUBGHZ_WaitOnBusy+0x32>
 800563c:	2301      	movs	r3, #1
    if (count == 0U)
 800563e:	9a01      	ldr	r2, [sp, #4]
 8005640:	2a00      	cmp	r2, #0
 8005642:	d0ef      	beq.n	8005624 <SUBGHZ_WaitOnBusy+0x18>
    count--;
 8005644:	9a01      	ldr	r2, [sp, #4]
 8005646:	3a01      	subs	r2, #1
 8005648:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 800564a:	4a05      	ldr	r2, [pc, #20]	@ (8005660 <SUBGHZ_WaitOnBusy+0x54>)
 800564c:	6952      	ldr	r2, [r2, #20]
 800564e:	f012 0202 	ands.w	r2, r2, #2
 8005652:	d0ec      	beq.n	800562e <SUBGHZ_WaitOnBusy+0x22>
 8005654:	2201      	movs	r2, #1
 8005656:	e7ea      	b.n	800562e <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 8005658:	2000      	movs	r0, #0
 800565a:	e7e6      	b.n	800562a <SUBGHZ_WaitOnBusy+0x1e>
 800565c:	20000074 	.word	0x20000074
 8005660:	58000400 	.word	0x58000400

08005664 <SUBGHZ_CheckDeviceReady>:
{
 8005664:	b500      	push	{lr}
 8005666:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8005668:	7903      	ldrb	r3, [r0, #4]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d004      	beq.n	8005678 <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800566e:	f7ff ffcd 	bl	800560c <SUBGHZ_WaitOnBusy>
}
 8005672:	b003      	add	sp, #12
 8005674:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 8005678:	4b0d      	ldr	r3, [pc, #52]	@ (80056b0 <SUBGHZ_CheckDeviceReady+0x4c>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005680:	f3c3 334f 	ubfx	r3, r3, #13, #16
 8005684:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005686:	4a0b      	ldr	r2, [pc, #44]	@ (80056b4 <SUBGHZ_CheckDeviceReady+0x50>)
 8005688:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800568c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005690:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      count--;
 8005694:	9b01      	ldr	r3, [sp, #4]
 8005696:	3b01      	subs	r3, #1
 8005698:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 800569a:	9b01      	ldr	r3, [sp, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d1f9      	bne.n	8005694 <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80056a0:	4a04      	ldr	r2, [pc, #16]	@ (80056b4 <SUBGHZ_CheckDeviceReady+0x50>)
 80056a2:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80056a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80056ae:	e7de      	b.n	800566e <SUBGHZ_CheckDeviceReady+0xa>
 80056b0:	20000074 	.word	0x20000074
 80056b4:	58000400 	.word	0x58000400

080056b8 <HAL_SUBGHZ_WriteRegisters>:
{
 80056b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056bc:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80056be:	7980      	ldrb	r0, [r0, #6]
 80056c0:	fa5f f880 	uxtb.w	r8, r0
 80056c4:	f1b8 0f01 	cmp.w	r8, #1
 80056c8:	d13e      	bne.n	8005748 <HAL_SUBGHZ_WriteRegisters+0x90>
 80056ca:	460c      	mov	r4, r1
 80056cc:	4617      	mov	r7, r2
 80056ce:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 80056d0:	796b      	ldrb	r3, [r5, #5]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d03b      	beq.n	800574e <HAL_SUBGHZ_WriteRegisters+0x96>
 80056d6:	2301      	movs	r3, #1
 80056d8:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80056da:	2302      	movs	r3, #2
 80056dc:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80056de:	4628      	mov	r0, r5
 80056e0:	f7ff ffc0 	bl	8005664 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80056e4:	4a1b      	ldr	r2, [pc, #108]	@ (8005754 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 80056e6:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80056ea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80056ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80056f2:	210d      	movs	r1, #13
 80056f4:	4628      	mov	r0, r5
 80056f6:	f7ff ff0d 	bl	8005514 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80056fa:	0a21      	lsrs	r1, r4, #8
 80056fc:	4628      	mov	r0, r5
 80056fe:	f7ff ff09 	bl	8005514 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005702:	b2e1      	uxtb	r1, r4
 8005704:	4628      	mov	r0, r5
 8005706:	f7ff ff05 	bl	8005514 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800570a:	2400      	movs	r4, #0
 800570c:	e005      	b.n	800571a <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800570e:	5d39      	ldrb	r1, [r7, r4]
 8005710:	4628      	mov	r0, r5
 8005712:	f7ff feff 	bl	8005514 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005716:	3401      	adds	r4, #1
 8005718:	b2a4      	uxth	r4, r4
 800571a:	42b4      	cmp	r4, r6
 800571c:	d3f7      	bcc.n	800570e <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800571e:	4a0d      	ldr	r2, [pc, #52]	@ (8005754 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8005720:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005724:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005728:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800572c:	4628      	mov	r0, r5
 800572e:	f7ff ff6d 	bl	800560c <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005732:	68ab      	ldr	r3, [r5, #8]
 8005734:	b90b      	cbnz	r3, 800573a <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 8005736:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800573a:	2301      	movs	r3, #1
 800573c:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 800573e:	2300      	movs	r3, #0
 8005740:	716b      	strb	r3, [r5, #5]
}
 8005742:	4640      	mov	r0, r8
 8005744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005748:	f04f 0802 	mov.w	r8, #2
 800574c:	e7f9      	b.n	8005742 <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 800574e:	f04f 0802 	mov.w	r8, #2
 8005752:	e7f6      	b.n	8005742 <HAL_SUBGHZ_WriteRegisters+0x8a>
 8005754:	58000400 	.word	0x58000400

08005758 <HAL_SUBGHZ_ReadRegisters>:
{
 8005758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800575c:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800575e:	7980      	ldrb	r0, [r0, #6]
 8005760:	fa5f f880 	uxtb.w	r8, r0
 8005764:	f1b8 0f01 	cmp.w	r8, #1
 8005768:	d141      	bne.n	80057ee <HAL_SUBGHZ_ReadRegisters+0x96>
 800576a:	460c      	mov	r4, r1
 800576c:	4615      	mov	r5, r2
 800576e:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8005770:	7973      	ldrb	r3, [r6, #5]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d03e      	beq.n	80057f4 <HAL_SUBGHZ_ReadRegisters+0x9c>
 8005776:	2301      	movs	r3, #1
 8005778:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800577a:	4630      	mov	r0, r6
 800577c:	f7ff ff72 	bl	8005664 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005780:	4a1e      	ldr	r2, [pc, #120]	@ (80057fc <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8005782:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005786:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800578a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 800578e:	211d      	movs	r1, #29
 8005790:	4630      	mov	r0, r6
 8005792:	f7ff febf 	bl	8005514 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005796:	0a21      	lsrs	r1, r4, #8
 8005798:	4630      	mov	r0, r6
 800579a:	f7ff febb 	bl	8005514 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800579e:	b2e1      	uxtb	r1, r4
 80057a0:	4630      	mov	r0, r6
 80057a2:	f7ff feb7 	bl	8005514 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80057a6:	2100      	movs	r1, #0
 80057a8:	4630      	mov	r0, r6
 80057aa:	f7ff feb3 	bl	8005514 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80057ae:	2400      	movs	r4, #0
 80057b0:	e006      	b.n	80057c0 <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80057b2:	4629      	mov	r1, r5
 80057b4:	4630      	mov	r0, r6
 80057b6:	f7ff fee9 	bl	800558c <SUBGHZSPI_Receive>
      pData++;
 80057ba:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 80057bc:	3401      	adds	r4, #1
 80057be:	b2a4      	uxth	r4, r4
 80057c0:	42bc      	cmp	r4, r7
 80057c2:	d3f6      	bcc.n	80057b2 <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80057c4:	4a0d      	ldr	r2, [pc, #52]	@ (80057fc <HAL_SUBGHZ_ReadRegisters+0xa4>)
 80057c6:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80057ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80057d2:	4630      	mov	r0, r6
 80057d4:	f7ff ff1a 	bl	800560c <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80057d8:	68b3      	ldr	r3, [r6, #8]
 80057da:	b90b      	cbnz	r3, 80057e0 <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 80057dc:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80057e0:	2301      	movs	r3, #1
 80057e2:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 80057e4:	2300      	movs	r3, #0
 80057e6:	7173      	strb	r3, [r6, #5]
}
 80057e8:	4640      	mov	r0, r8
 80057ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80057ee:	f04f 0802 	mov.w	r8, #2
 80057f2:	e7f9      	b.n	80057e8 <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 80057f4:	f04f 0802 	mov.w	r8, #2
 80057f8:	e7f6      	b.n	80057e8 <HAL_SUBGHZ_ReadRegisters+0x90>
 80057fa:	bf00      	nop
 80057fc:	58000400 	.word	0x58000400

08005800 <HAL_SUBGHZ_ExecSetCmd>:
{
 8005800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005804:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005806:	7980      	ldrb	r0, [r0, #6]
 8005808:	fa5f f980 	uxtb.w	r9, r0
 800580c:	f1b9 0f01 	cmp.w	r9, #1
 8005810:	d143      	bne.n	800589a <HAL_SUBGHZ_ExecSetCmd+0x9a>
 8005812:	4688      	mov	r8, r1
 8005814:	4617      	mov	r7, r2
 8005816:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8005818:	796b      	ldrb	r3, [r5, #5]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d040      	beq.n	80058a0 <HAL_SUBGHZ_ExecSetCmd+0xa0>
 800581e:	2301      	movs	r3, #1
 8005820:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005822:	4628      	mov	r0, r5
 8005824:	f7ff ff1e 	bl	8005664 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8005828:	f1b8 0f84 	cmp.w	r8, #132	@ 0x84
 800582c:	d005      	beq.n	800583a <HAL_SUBGHZ_ExecSetCmd+0x3a>
 800582e:	f1b8 0f94 	cmp.w	r8, #148	@ 0x94
 8005832:	d002      	beq.n	800583a <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8005834:	2300      	movs	r3, #0
 8005836:	712b      	strb	r3, [r5, #4]
 8005838:	e001      	b.n	800583e <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800583a:	2301      	movs	r3, #1
 800583c:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800583e:	4a1a      	ldr	r2, [pc, #104]	@ (80058a8 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8005840:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005844:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005848:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800584c:	4641      	mov	r1, r8
 800584e:	4628      	mov	r0, r5
 8005850:	f7ff fe60 	bl	8005514 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005854:	2400      	movs	r4, #0
 8005856:	e005      	b.n	8005864 <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005858:	5d39      	ldrb	r1, [r7, r4]
 800585a:	4628      	mov	r0, r5
 800585c:	f7ff fe5a 	bl	8005514 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005860:	3401      	adds	r4, #1
 8005862:	b2a4      	uxth	r4, r4
 8005864:	42b4      	cmp	r4, r6
 8005866:	d3f7      	bcc.n	8005858 <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005868:	4a0f      	ldr	r2, [pc, #60]	@ (80058a8 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 800586a:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800586e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005872:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    if (Command != RADIO_SET_SLEEP)
 8005876:	f1b8 0f84 	cmp.w	r8, #132	@ 0x84
 800587a:	d10a      	bne.n	8005892 <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800587c:	68ab      	ldr	r3, [r5, #8]
 800587e:	b90b      	cbnz	r3, 8005884 <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 8005880:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005884:	2301      	movs	r3, #1
 8005886:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8005888:	2300      	movs	r3, #0
 800588a:	716b      	strb	r3, [r5, #5]
}
 800588c:	4648      	mov	r0, r9
 800588e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005892:	4628      	mov	r0, r5
 8005894:	f7ff feba 	bl	800560c <SUBGHZ_WaitOnBusy>
 8005898:	e7f0      	b.n	800587c <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 800589a:	f04f 0902 	mov.w	r9, #2
 800589e:	e7f5      	b.n	800588c <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 80058a0:	f04f 0902 	mov.w	r9, #2
 80058a4:	e7f2      	b.n	800588c <HAL_SUBGHZ_ExecSetCmd+0x8c>
 80058a6:	bf00      	nop
 80058a8:	58000400 	.word	0x58000400

080058ac <HAL_SUBGHZ_ExecGetCmd>:
{
 80058ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058b0:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80058b2:	7980      	ldrb	r0, [r0, #6]
 80058b4:	fa5f f880 	uxtb.w	r8, r0
 80058b8:	f1b8 0f01 	cmp.w	r8, #1
 80058bc:	d139      	bne.n	8005932 <HAL_SUBGHZ_ExecGetCmd+0x86>
 80058be:	460c      	mov	r4, r1
 80058c0:	4615      	mov	r5, r2
 80058c2:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 80058c4:	7973      	ldrb	r3, [r6, #5]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d036      	beq.n	8005938 <HAL_SUBGHZ_ExecGetCmd+0x8c>
 80058ca:	2301      	movs	r3, #1
 80058cc:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80058ce:	4630      	mov	r0, r6
 80058d0:	f7ff fec8 	bl	8005664 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80058d4:	4a1a      	ldr	r2, [pc, #104]	@ (8005940 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 80058d6:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80058da:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80058de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80058e2:	4621      	mov	r1, r4
 80058e4:	4630      	mov	r0, r6
 80058e6:	f7ff fe15 	bl	8005514 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80058ea:	2100      	movs	r1, #0
 80058ec:	4630      	mov	r0, r6
 80058ee:	f7ff fe11 	bl	8005514 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80058f2:	2400      	movs	r4, #0
 80058f4:	e006      	b.n	8005904 <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80058f6:	4629      	mov	r1, r5
 80058f8:	4630      	mov	r0, r6
 80058fa:	f7ff fe47 	bl	800558c <SUBGHZSPI_Receive>
      pData++;
 80058fe:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8005900:	3401      	adds	r4, #1
 8005902:	b2a4      	uxth	r4, r4
 8005904:	42bc      	cmp	r4, r7
 8005906:	d3f6      	bcc.n	80058f6 <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005908:	4a0d      	ldr	r2, [pc, #52]	@ (8005940 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 800590a:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800590e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005912:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005916:	4630      	mov	r0, r6
 8005918:	f7ff fe78 	bl	800560c <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800591c:	68b3      	ldr	r3, [r6, #8]
 800591e:	b90b      	cbnz	r3, 8005924 <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 8005920:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005924:	2301      	movs	r3, #1
 8005926:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8005928:	2300      	movs	r3, #0
 800592a:	7173      	strb	r3, [r6, #5]
}
 800592c:	4640      	mov	r0, r8
 800592e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005932:	f04f 0802 	mov.w	r8, #2
 8005936:	e7f9      	b.n	800592c <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 8005938:	f04f 0802 	mov.w	r8, #2
 800593c:	e7f6      	b.n	800592c <HAL_SUBGHZ_ExecGetCmd+0x80>
 800593e:	bf00      	nop
 8005940:	58000400 	.word	0x58000400

08005944 <HAL_SUBGHZ_IRQHandler>:
{
 8005944:	b570      	push	{r4, r5, r6, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 800594a:	2300      	movs	r3, #0
 800594c:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8005950:	2302      	movs	r3, #2
 8005952:	aa01      	add	r2, sp, #4
 8005954:	2112      	movs	r1, #18
 8005956:	f7ff ffa9 	bl	80058ac <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800595a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  itsource = (itsource << 8U) | tmpisr[1U];
 800595e:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8005962:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8005966:	b226      	sxth	r6, r4
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8005968:	2302      	movs	r3, #2
 800596a:	aa01      	add	r2, sp, #4
 800596c:	4619      	mov	r1, r3
 800596e:	4628      	mov	r0, r5
 8005970:	f7ff ff46 	bl	8005800 <HAL_SUBGHZ_ExecSetCmd>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8005974:	f016 0f01 	tst.w	r6, #1
 8005978:	d123      	bne.n	80059c2 <HAL_SUBGHZ_IRQHandler+0x7e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800597a:	f014 0f02 	tst.w	r4, #2
 800597e:	d124      	bne.n	80059ca <HAL_SUBGHZ_IRQHandler+0x86>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8005980:	f014 0f04 	tst.w	r4, #4
 8005984:	d125      	bne.n	80059d2 <HAL_SUBGHZ_IRQHandler+0x8e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8005986:	f014 0f08 	tst.w	r4, #8
 800598a:	d126      	bne.n	80059da <HAL_SUBGHZ_IRQHandler+0x96>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800598c:	f014 0f10 	tst.w	r4, #16
 8005990:	d127      	bne.n	80059e2 <HAL_SUBGHZ_IRQHandler+0x9e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8005992:	f014 0f20 	tst.w	r4, #32
 8005996:	d128      	bne.n	80059ea <HAL_SUBGHZ_IRQHandler+0xa6>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8005998:	f014 0f40 	tst.w	r4, #64	@ 0x40
 800599c:	d129      	bne.n	80059f2 <HAL_SUBGHZ_IRQHandler+0xae>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800599e:	f014 0f80 	tst.w	r4, #128	@ 0x80
 80059a2:	d006      	beq.n	80059b2 <HAL_SUBGHZ_IRQHandler+0x6e>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80059a4:	f414 7f80 	tst.w	r4, #256	@ 0x100
 80059a8:	d027      	beq.n	80059fa <HAL_SUBGHZ_IRQHandler+0xb6>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80059aa:	2101      	movs	r1, #1
 80059ac:	4628      	mov	r0, r5
 80059ae:	f00b fce3 	bl	8011378 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80059b2:	f414 7f00 	tst.w	r4, #512	@ 0x200
 80059b6:	d125      	bne.n	8005a04 <HAL_SUBGHZ_IRQHandler+0xc0>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 80059b8:	f414 4f80 	tst.w	r4, #16384	@ 0x4000
 80059bc:	d126      	bne.n	8005a0c <HAL_SUBGHZ_IRQHandler+0xc8>
}
 80059be:	b002      	add	sp, #8
 80059c0:	bd70      	pop	{r4, r5, r6, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80059c2:	4628      	mov	r0, r5
 80059c4:	f00b fcc0 	bl	8011348 <HAL_SUBGHZ_TxCpltCallback>
 80059c8:	e7d7      	b.n	800597a <HAL_SUBGHZ_IRQHandler+0x36>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80059ca:	4628      	mov	r0, r5
 80059cc:	f00b fcc4 	bl	8011358 <HAL_SUBGHZ_RxCpltCallback>
 80059d0:	e7d6      	b.n	8005980 <HAL_SUBGHZ_IRQHandler+0x3c>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80059d2:	4628      	mov	r0, r5
 80059d4:	f00b fcf4 	bl	80113c0 <HAL_SUBGHZ_PreambleDetectedCallback>
 80059d8:	e7d5      	b.n	8005986 <HAL_SUBGHZ_IRQHandler+0x42>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80059da:	4628      	mov	r0, r5
 80059dc:	f00b fcf8 	bl	80113d0 <HAL_SUBGHZ_SyncWordValidCallback>
 80059e0:	e7d4      	b.n	800598c <HAL_SUBGHZ_IRQHandler+0x48>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 80059e2:	4628      	mov	r0, r5
 80059e4:	f00b fcfc 	bl	80113e0 <HAL_SUBGHZ_HeaderValidCallback>
 80059e8:	e7d3      	b.n	8005992 <HAL_SUBGHZ_IRQHandler+0x4e>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80059ea:	4628      	mov	r0, r5
 80059ec:	f00b fce0 	bl	80113b0 <HAL_SUBGHZ_HeaderErrorCallback>
 80059f0:	e7d2      	b.n	8005998 <HAL_SUBGHZ_IRQHandler+0x54>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80059f2:	4628      	mov	r0, r5
 80059f4:	f00b fcb8 	bl	8011368 <HAL_SUBGHZ_CRCErrorCallback>
 80059f8:	e7d1      	b.n	800599e <HAL_SUBGHZ_IRQHandler+0x5a>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80059fa:	2100      	movs	r1, #0
 80059fc:	4628      	mov	r0, r5
 80059fe:	f00b fcbb 	bl	8011378 <HAL_SUBGHZ_CADStatusCallback>
 8005a02:	e7d6      	b.n	80059b2 <HAL_SUBGHZ_IRQHandler+0x6e>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8005a04:	4628      	mov	r0, r5
 8005a06:	f00b fcc9 	bl	801139c <HAL_SUBGHZ_RxTxTimeoutCallback>
 8005a0a:	e7d5      	b.n	80059b8 <HAL_SUBGHZ_IRQHandler+0x74>
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8005a0c:	4628      	mov	r0, r5
 8005a0e:	f00b fcef 	bl	80113f0 <HAL_SUBGHZ_LrFhssHopCallback>
}
 8005a12:	e7d4      	b.n	80059be <HAL_SUBGHZ_IRQHandler+0x7a>

08005a14 <HAL_SUBGHZ_WriteBuffer>:
{
 8005a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a18:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005a1a:	7980      	ldrb	r0, [r0, #6]
 8005a1c:	fa5f f880 	uxtb.w	r8, r0
 8005a20:	f1b8 0f01 	cmp.w	r8, #1
 8005a24:	d138      	bne.n	8005a98 <HAL_SUBGHZ_WriteBuffer+0x84>
 8005a26:	460c      	mov	r4, r1
 8005a28:	4617      	mov	r7, r2
 8005a2a:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8005a2c:	796b      	ldrb	r3, [r5, #5]
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d035      	beq.n	8005a9e <HAL_SUBGHZ_WriteBuffer+0x8a>
 8005a32:	2301      	movs	r3, #1
 8005a34:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005a36:	4628      	mov	r0, r5
 8005a38:	f7ff fe14 	bl	8005664 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005a3c:	4a19      	ldr	r2, [pc, #100]	@ (8005aa4 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8005a3e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005a42:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005a46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8005a4a:	210e      	movs	r1, #14
 8005a4c:	4628      	mov	r0, r5
 8005a4e:	f7ff fd61 	bl	8005514 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005a52:	4621      	mov	r1, r4
 8005a54:	4628      	mov	r0, r5
 8005a56:	f7ff fd5d 	bl	8005514 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005a5a:	2400      	movs	r4, #0
 8005a5c:	e005      	b.n	8005a6a <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005a5e:	5d39      	ldrb	r1, [r7, r4]
 8005a60:	4628      	mov	r0, r5
 8005a62:	f7ff fd57 	bl	8005514 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005a66:	3401      	adds	r4, #1
 8005a68:	b2a4      	uxth	r4, r4
 8005a6a:	42b4      	cmp	r4, r6
 8005a6c:	d3f7      	bcc.n	8005a5e <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005a6e:	4a0d      	ldr	r2, [pc, #52]	@ (8005aa4 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8005a70:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005a74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005a7c:	4628      	mov	r0, r5
 8005a7e:	f7ff fdc5 	bl	800560c <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005a82:	68ab      	ldr	r3, [r5, #8]
 8005a84:	b90b      	cbnz	r3, 8005a8a <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 8005a86:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8005a8e:	2300      	movs	r3, #0
 8005a90:	716b      	strb	r3, [r5, #5]
}
 8005a92:	4640      	mov	r0, r8
 8005a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005a98:	f04f 0802 	mov.w	r8, #2
 8005a9c:	e7f9      	b.n	8005a92 <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 8005a9e:	f04f 0802 	mov.w	r8, #2
 8005aa2:	e7f6      	b.n	8005a92 <HAL_SUBGHZ_WriteBuffer+0x7e>
 8005aa4:	58000400 	.word	0x58000400

08005aa8 <HAL_SUBGHZ_ReadBuffer>:
{
 8005aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aac:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005aae:	7980      	ldrb	r0, [r0, #6]
 8005ab0:	fa5f f880 	uxtb.w	r8, r0
 8005ab4:	f1b8 0f01 	cmp.w	r8, #1
 8005ab8:	d13d      	bne.n	8005b36 <HAL_SUBGHZ_ReadBuffer+0x8e>
 8005aba:	460c      	mov	r4, r1
 8005abc:	4615      	mov	r5, r2
 8005abe:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8005ac0:	7973      	ldrb	r3, [r6, #5]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d03a      	beq.n	8005b3c <HAL_SUBGHZ_ReadBuffer+0x94>
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005aca:	4630      	mov	r0, r6
 8005acc:	f7ff fdca 	bl	8005664 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005ad0:	4a1c      	ldr	r2, [pc, #112]	@ (8005b44 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8005ad2:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005ad6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005ada:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8005ade:	211e      	movs	r1, #30
 8005ae0:	4630      	mov	r0, r6
 8005ae2:	f7ff fd17 	bl	8005514 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005ae6:	4621      	mov	r1, r4
 8005ae8:	4630      	mov	r0, r6
 8005aea:	f7ff fd13 	bl	8005514 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005aee:	2100      	movs	r1, #0
 8005af0:	4630      	mov	r0, r6
 8005af2:	f7ff fd0f 	bl	8005514 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005af6:	2400      	movs	r4, #0
 8005af8:	e006      	b.n	8005b08 <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005afa:	4629      	mov	r1, r5
 8005afc:	4630      	mov	r0, r6
 8005afe:	f7ff fd45 	bl	800558c <SUBGHZSPI_Receive>
      pData++;
 8005b02:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8005b04:	3401      	adds	r4, #1
 8005b06:	b2a4      	uxth	r4, r4
 8005b08:	42bc      	cmp	r4, r7
 8005b0a:	d3f6      	bcc.n	8005afa <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8005b44 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8005b0e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005b12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005b1a:	4630      	mov	r0, r6
 8005b1c:	f7ff fd76 	bl	800560c <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005b20:	68b3      	ldr	r3, [r6, #8]
 8005b22:	b90b      	cbnz	r3, 8005b28 <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 8005b24:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	7173      	strb	r3, [r6, #5]
}
 8005b30:	4640      	mov	r0, r8
 8005b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005b36:	f04f 0802 	mov.w	r8, #2
 8005b3a:	e7f9      	b.n	8005b30 <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 8005b3c:	f04f 0802 	mov.w	r8, #2
 8005b40:	e7f6      	b.n	8005b30 <HAL_SUBGHZ_ReadBuffer+0x88>
 8005b42:	bf00      	nop
 8005b44:	58000400 	.word	0x58000400

08005b48 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005b48:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4a:	e852 3f00 	ldrex	r3, [r2]
 8005b4e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b52:	e842 3100 	strex	r1, r3, [r2]
 8005b56:	2900      	cmp	r1, #0
 8005b58:	d1f6      	bne.n	8005b48 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005b5a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5c:	f102 0308 	add.w	r3, r2, #8
 8005b60:	e853 3f00 	ldrex	r3, [r3]
 8005b64:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b68:	3208      	adds	r2, #8
 8005b6a:	e842 3100 	strex	r1, r3, [r2]
 8005b6e:	2900      	cmp	r1, #0
 8005b70:	d1f3      	bne.n	8005b5a <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b72:	2320      	movs	r3, #32
 8005b74:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
}
 8005b78:	4770      	bx	lr

08005b7a <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b7a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7c:	e852 3f00 	ldrex	r3, [r2]
 8005b80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b84:	e842 3100 	strex	r1, r3, [r2]
 8005b88:	2900      	cmp	r1, #0
 8005b8a:	d1f6      	bne.n	8005b7a <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b8c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8e:	f102 0308 	add.w	r3, r2, #8
 8005b92:	e853 3f00 	ldrex	r3, [r3]
 8005b96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b9a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9e:	3208      	adds	r2, #8
 8005ba0:	e842 3100 	strex	r1, r3, [r2]
 8005ba4:	2900      	cmp	r1, #0
 8005ba6:	d1f1      	bne.n	8005b8c <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ba8:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d006      	beq.n	8005bbc <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bae:	2320      	movs	r3, #32
 8005bb0:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005bb8:	6743      	str	r3, [r0, #116]	@ 0x74
}
 8005bba:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bbc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bbe:	e852 3f00 	ldrex	r3, [r2]
 8005bc2:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc6:	e842 3100 	strex	r1, r3, [r2]
 8005bca:	2900      	cmp	r1, #0
 8005bcc:	d1f6      	bne.n	8005bbc <UART_EndRxTransfer+0x42>
 8005bce:	e7ee      	b.n	8005bae <UART_EndRxTransfer+0x34>

08005bd0 <HAL_UART_Transmit_DMA>:
{
 8005bd0:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8005bd2:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 8005bd6:	2a20      	cmp	r2, #32
 8005bd8:	d13d      	bne.n	8005c56 <HAL_UART_Transmit_DMA+0x86>
{
 8005bda:	b510      	push	{r4, lr}
 8005bdc:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8005bde:	2900      	cmp	r1, #0
 8005be0:	d03b      	beq.n	8005c5a <HAL_UART_Transmit_DMA+0x8a>
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d03b      	beq.n	8005c5e <HAL_UART_Transmit_DMA+0x8e>
    huart->pTxBuffPtr  = pData;
 8005be6:	6501      	str	r1, [r0, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8005be8:	f8a0 3054 	strh.w	r3, [r0, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005bec:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bf6:	2221      	movs	r2, #33	@ 0x21
 8005bf8:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
    if (huart->hdmatx != NULL)
 8005bfc:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 8005bfe:	b1ca      	cbz	r2, 8005c34 <HAL_UART_Transmit_DMA+0x64>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005c00:	4918      	ldr	r1, [pc, #96]	@ (8005c64 <HAL_UART_Transmit_DMA+0x94>)
 8005c02:	62d1      	str	r1, [r2, #44]	@ 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005c04:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 8005c06:	4918      	ldr	r1, [pc, #96]	@ (8005c68 <HAL_UART_Transmit_DMA+0x98>)
 8005c08:	6311      	str	r1, [r2, #48]	@ 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005c0a:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 8005c0c:	4917      	ldr	r1, [pc, #92]	@ (8005c6c <HAL_UART_Transmit_DMA+0x9c>)
 8005c0e:	6351      	str	r1, [r2, #52]	@ 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8005c10:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 8005c12:	2100      	movs	r1, #0
 8005c14:	6391      	str	r1, [r2, #56]	@ 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005c16:	6802      	ldr	r2, [r0, #0]
 8005c18:	3228      	adds	r2, #40	@ 0x28
 8005c1a:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8005c1c:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8005c1e:	f7fd fe47 	bl	80038b0 <HAL_DMA_Start_IT>
 8005c22:	b138      	cbz	r0, 8005c34 <HAL_UART_Transmit_DMA+0x64>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005c24:	2310      	movs	r3, #16
 8005c26:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        huart->gState = HAL_UART_STATE_READY;
 8005c2a:	2320      	movs	r3, #32
 8005c2c:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
        return HAL_ERROR;
 8005c30:	2001      	movs	r0, #1
 8005c32:	e00f      	b.n	8005c54 <HAL_UART_Transmit_DMA+0x84>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005c34:	6823      	ldr	r3, [r4, #0]
 8005c36:	2240      	movs	r2, #64	@ 0x40
 8005c38:	621a      	str	r2, [r3, #32]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c3a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3c:	f102 0308 	add.w	r3, r2, #8
 8005c40:	e853 3f00 	ldrex	r3, [r3]
 8005c44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c48:	3208      	adds	r2, #8
 8005c4a:	e842 3100 	strex	r1, r3, [r2]
 8005c4e:	2900      	cmp	r1, #0
 8005c50:	d1f3      	bne.n	8005c3a <HAL_UART_Transmit_DMA+0x6a>
    return HAL_OK;
 8005c52:	2000      	movs	r0, #0
}
 8005c54:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8005c56:	2002      	movs	r0, #2
}
 8005c58:	4770      	bx	lr
      return HAL_ERROR;
 8005c5a:	2001      	movs	r0, #1
 8005c5c:	e7fa      	b.n	8005c54 <HAL_UART_Transmit_DMA+0x84>
 8005c5e:	2001      	movs	r0, #1
 8005c60:	e7f8      	b.n	8005c54 <HAL_UART_Transmit_DMA+0x84>
 8005c62:	bf00      	nop
 8005c64:	08005c71 	.word	0x08005c71
 8005c68:	08005cdf 	.word	0x08005cdf
 8005c6c:	08005ceb 	.word	0x08005ceb

08005c70 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005c70:	b508      	push	{r3, lr}
 8005c72:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c74:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f013 0f20 	tst.w	r3, #32
 8005c7e:	d118      	bne.n	8005cb2 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8005c80:	2300      	movs	r3, #0
 8005c82:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c86:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c88:	f102 0308 	add.w	r3, r2, #8
 8005c8c:	e853 3f00 	ldrex	r3, [r3]
 8005c90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c94:	3208      	adds	r2, #8
 8005c96:	e842 3100 	strex	r1, r3, [r2]
 8005c9a:	2900      	cmp	r1, #0
 8005c9c:	d1f3      	bne.n	8005c86 <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c9e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca0:	e852 3f00 	ldrex	r3, [r2]
 8005ca4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca8:	e842 3100 	strex	r1, r3, [r2]
 8005cac:	2900      	cmp	r1, #0
 8005cae:	d1f6      	bne.n	8005c9e <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005cb0:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8005cb2:	f7fc f95d 	bl	8001f70 <HAL_UART_TxCpltCallback>
}
 8005cb6:	e7fb      	b.n	8005cb0 <UART_DMATransmitCplt+0x40>

08005cb8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005cb8:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005cba:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbc:	e852 3f00 	ldrex	r3, [r2]
 8005cc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc4:	e842 3100 	strex	r1, r3, [r2]
 8005cc8:	2900      	cmp	r1, #0
 8005cca:	d1f6      	bne.n	8005cba <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ccc:	2320      	movs	r3, #32
 8005cce:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	6783      	str	r3, [r0, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cd6:	f7fc f94b 	bl	8001f70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cda:	bd08      	pop	{r3, pc}

08005cdc <HAL_UART_TxHalfCpltCallback>:
}
 8005cdc:	4770      	bx	lr

08005cde <UART_DMATxHalfCplt>:
{
 8005cde:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8005ce0:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8005ce2:	f7ff fffb 	bl	8005cdc <HAL_UART_TxHalfCpltCallback>
}
 8005ce6:	bd08      	pop	{r3, pc}

08005ce8 <HAL_UART_ErrorCallback>:
}
 8005ce8:	4770      	bx	lr

08005cea <UART_DMAError>:
{
 8005cea:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005cec:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005cee:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005cf2:	f8d4 508c 	ldr.w	r5, [r4, #140]	@ 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005cf6:	6823      	ldr	r3, [r4, #0]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005cfe:	d001      	beq.n	8005d04 <UART_DMAError+0x1a>
 8005d00:	2a21      	cmp	r2, #33	@ 0x21
 8005d02:	d010      	beq.n	8005d26 <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005d04:	6823      	ldr	r3, [r4, #0]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005d0c:	d001      	beq.n	8005d12 <UART_DMAError+0x28>
 8005d0e:	2d22      	cmp	r5, #34	@ 0x22
 8005d10:	d010      	beq.n	8005d34 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005d12:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8005d16:	f043 0310 	orr.w	r3, r3, #16
 8005d1a:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
  HAL_UART_ErrorCallback(huart);
 8005d1e:	4620      	mov	r0, r4
 8005d20:	f7ff ffe2 	bl	8005ce8 <HAL_UART_ErrorCallback>
}
 8005d24:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8005d26:	2300      	movs	r3, #0
 8005d28:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	f7ff ff0b 	bl	8005b48 <UART_EndTxTransfer>
 8005d32:	e7e7      	b.n	8005d04 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8005d34:	2300      	movs	r3, #0
 8005d36:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	f7ff ff1d 	bl	8005b7a <UART_EndRxTransfer>
 8005d40:	e7e7      	b.n	8005d12 <UART_DMAError+0x28>

08005d42 <UART_DMAAbortOnError>:
{
 8005d42:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d44:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 8005d46:	2300      	movs	r3, #0
 8005d48:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8005d4c:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
  HAL_UART_ErrorCallback(huart);
 8005d50:	f7ff ffca 	bl	8005ce8 <HAL_UART_ErrorCallback>
}
 8005d54:	bd08      	pop	{r3, pc}

08005d56 <HAL_UARTEx_RxEventCallback>:
}
 8005d56:	4770      	bx	lr

08005d58 <HAL_UART_IRQHandler>:
{
 8005d58:	b570      	push	{r4, r5, r6, lr}
 8005d5a:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005d5c:	6802      	ldr	r2, [r0, #0]
 8005d5e:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d60:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d62:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 8005d64:	f640 0c0f 	movw	ip, #2063	@ 0x80f
 8005d68:	ea13 0f0c 	tst.w	r3, ip
 8005d6c:	d10d      	bne.n	8005d8a <HAL_UART_IRQHandler+0x32>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005d6e:	f013 0f20 	tst.w	r3, #32
 8005d72:	d010      	beq.n	8005d96 <HAL_UART_IRQHandler+0x3e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005d74:	f010 0f20 	tst.w	r0, #32
 8005d78:	d102      	bne.n	8005d80 <HAL_UART_IRQHandler+0x28>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005d7a:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 8005d7e:	d00a      	beq.n	8005d96 <HAL_UART_IRQHandler+0x3e>
      if (huart->RxISR != NULL)
 8005d80:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8005d82:	b393      	cbz	r3, 8005dea <HAL_UART_IRQHandler+0x92>
        huart->RxISR(huart);
 8005d84:	4620      	mov	r0, r4
 8005d86:	4798      	blx	r3
      return;
 8005d88:	e02f      	b.n	8005dea <HAL_UART_IRQHandler+0x92>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005d8a:	4db4      	ldr	r5, [pc, #720]	@ (800605c <HAL_UART_IRQHandler+0x304>)
 8005d8c:	400d      	ands	r5, r1
 8005d8e:	d12d      	bne.n	8005dec <HAL_UART_IRQHandler+0x94>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005d90:	4eb3      	ldr	r6, [pc, #716]	@ (8006060 <HAL_UART_IRQHandler+0x308>)
 8005d92:	4230      	tst	r0, r6
 8005d94:	d12a      	bne.n	8005dec <HAL_UART_IRQHandler+0x94>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d96:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 8005d98:	2d01      	cmp	r5, #1
 8005d9a:	f000 80c0 	beq.w	8005f1e <HAL_UART_IRQHandler+0x1c6>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005d9e:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8005da2:	d003      	beq.n	8005dac <HAL_UART_IRQHandler+0x54>
 8005da4:	f411 0f80 	tst.w	r1, #4194304	@ 0x400000
 8005da8:	f040 815e 	bne.w	8006068 <HAL_UART_IRQHandler+0x310>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005dac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005db0:	d007      	beq.n	8005dc2 <HAL_UART_IRQHandler+0x6a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005db2:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8005db6:	f040 815e 	bne.w	8006076 <HAL_UART_IRQHandler+0x31e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005dba:	f411 0f00 	tst.w	r1, #8388608	@ 0x800000
 8005dbe:	f040 815a 	bne.w	8006076 <HAL_UART_IRQHandler+0x31e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005dc2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005dc6:	d003      	beq.n	8005dd0 <HAL_UART_IRQHandler+0x78>
 8005dc8:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8005dcc:	f040 815a 	bne.w	8006084 <HAL_UART_IRQHandler+0x32c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005dd0:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8005dd4:	d003      	beq.n	8005dde <HAL_UART_IRQHandler+0x86>
 8005dd6:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 8005dda:	f040 8157 	bne.w	800608c <HAL_UART_IRQHandler+0x334>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005dde:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8005de2:	d002      	beq.n	8005dea <HAL_UART_IRQHandler+0x92>
 8005de4:	2800      	cmp	r0, #0
 8005de6:	f2c0 8155 	blt.w	8006094 <HAL_UART_IRQHandler+0x33c>
}
 8005dea:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005dec:	f013 0f01 	tst.w	r3, #1
 8005df0:	d009      	beq.n	8005e06 <HAL_UART_IRQHandler+0xae>
 8005df2:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8005df6:	d006      	beq.n	8005e06 <HAL_UART_IRQHandler+0xae>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005df8:	2601      	movs	r6, #1
 8005dfa:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005dfc:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8005e00:	4332      	orrs	r2, r6
 8005e02:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e06:	f013 0f02 	tst.w	r3, #2
 8005e0a:	d00b      	beq.n	8005e24 <HAL_UART_IRQHandler+0xcc>
 8005e0c:	f011 0f01 	tst.w	r1, #1
 8005e10:	d008      	beq.n	8005e24 <HAL_UART_IRQHandler+0xcc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e12:	6822      	ldr	r2, [r4, #0]
 8005e14:	2602      	movs	r6, #2
 8005e16:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e18:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8005e1c:	f042 0204 	orr.w	r2, r2, #4
 8005e20:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e24:	f013 0f04 	tst.w	r3, #4
 8005e28:	d00b      	beq.n	8005e42 <HAL_UART_IRQHandler+0xea>
 8005e2a:	f011 0f01 	tst.w	r1, #1
 8005e2e:	d008      	beq.n	8005e42 <HAL_UART_IRQHandler+0xea>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e30:	6822      	ldr	r2, [r4, #0]
 8005e32:	2604      	movs	r6, #4
 8005e34:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e36:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8005e3a:	f042 0202 	orr.w	r2, r2, #2
 8005e3e:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005e42:	f013 0f08 	tst.w	r3, #8
 8005e46:	d00b      	beq.n	8005e60 <HAL_UART_IRQHandler+0x108>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005e48:	f010 0f20 	tst.w	r0, #32
 8005e4c:	d100      	bne.n	8005e50 <HAL_UART_IRQHandler+0xf8>
 8005e4e:	b13d      	cbz	r5, 8005e60 <HAL_UART_IRQHandler+0x108>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e50:	6822      	ldr	r2, [r4, #0]
 8005e52:	2508      	movs	r5, #8
 8005e54:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e56:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8005e5a:	432a      	orrs	r2, r5
 8005e5c:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005e60:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8005e64:	d00c      	beq.n	8005e80 <HAL_UART_IRQHandler+0x128>
 8005e66:	f010 6f80 	tst.w	r0, #67108864	@ 0x4000000
 8005e6a:	d009      	beq.n	8005e80 <HAL_UART_IRQHandler+0x128>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e6c:	6822      	ldr	r2, [r4, #0]
 8005e6e:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 8005e72:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005e74:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8005e78:	f042 0220 	orr.w	r2, r2, #32
 8005e7c:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e80:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8005e84:	2a00      	cmp	r2, #0
 8005e86:	d0b0      	beq.n	8005dea <HAL_UART_IRQHandler+0x92>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005e88:	f013 0f20 	tst.w	r3, #32
 8005e8c:	d009      	beq.n	8005ea2 <HAL_UART_IRQHandler+0x14a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005e8e:	f010 0f20 	tst.w	r0, #32
 8005e92:	d102      	bne.n	8005e9a <HAL_UART_IRQHandler+0x142>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005e94:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 8005e98:	d003      	beq.n	8005ea2 <HAL_UART_IRQHandler+0x14a>
        if (huart->RxISR != NULL)
 8005e9a:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8005e9c:	b10b      	cbz	r3, 8005ea2 <HAL_UART_IRQHandler+0x14a>
          huart->RxISR(huart);
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8005ea2:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ea6:	6823      	ldr	r3, [r4, #0]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005eae:	d102      	bne.n	8005eb6 <HAL_UART_IRQHandler+0x15e>
 8005eb0:	f012 0f28 	tst.w	r2, #40	@ 0x28
 8005eb4:	d02c      	beq.n	8005f10 <HAL_UART_IRQHandler+0x1b8>
        UART_EndRxTransfer(huart);
 8005eb6:	4620      	mov	r0, r4
 8005eb8:	f7ff fe5f 	bl	8005b7a <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ebc:	6823      	ldr	r3, [r4, #0]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005ec4:	d020      	beq.n	8005f08 <HAL_UART_IRQHandler+0x1b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ec6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec8:	f102 0308 	add.w	r3, r2, #8
 8005ecc:	e853 3f00 	ldrex	r3, [r3]
 8005ed0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed4:	3208      	adds	r2, #8
 8005ed6:	e842 3100 	strex	r1, r3, [r2]
 8005eda:	2900      	cmp	r1, #0
 8005edc:	d1f3      	bne.n	8005ec6 <HAL_UART_IRQHandler+0x16e>
          if (huart->hdmarx != NULL)
 8005ede:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8005ee2:	b16b      	cbz	r3, 8005f00 <HAL_UART_IRQHandler+0x1a8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ee4:	4a5f      	ldr	r2, [pc, #380]	@ (8006064 <HAL_UART_IRQHandler+0x30c>)
 8005ee6:	639a      	str	r2, [r3, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ee8:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8005eec:	f7fd fd66 	bl	80039bc <HAL_DMA_Abort_IT>
 8005ef0:	2800      	cmp	r0, #0
 8005ef2:	f43f af7a 	beq.w	8005dea <HAL_UART_IRQHandler+0x92>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ef6:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8005efa:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8005efc:	4798      	blx	r3
 8005efe:	e774      	b.n	8005dea <HAL_UART_IRQHandler+0x92>
            HAL_UART_ErrorCallback(huart);
 8005f00:	4620      	mov	r0, r4
 8005f02:	f7ff fef1 	bl	8005ce8 <HAL_UART_ErrorCallback>
 8005f06:	e770      	b.n	8005dea <HAL_UART_IRQHandler+0x92>
          HAL_UART_ErrorCallback(huart);
 8005f08:	4620      	mov	r0, r4
 8005f0a:	f7ff feed 	bl	8005ce8 <HAL_UART_ErrorCallback>
 8005f0e:	e76c      	b.n	8005dea <HAL_UART_IRQHandler+0x92>
        HAL_UART_ErrorCallback(huart);
 8005f10:	4620      	mov	r0, r4
 8005f12:	f7ff fee9 	bl	8005ce8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f16:	2300      	movs	r3, #0
 8005f18:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
    return;
 8005f1c:	e765      	b.n	8005dea <HAL_UART_IRQHandler+0x92>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005f1e:	f013 0f10 	tst.w	r3, #16
 8005f22:	f43f af3c 	beq.w	8005d9e <HAL_UART_IRQHandler+0x46>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005f26:	f010 0f10 	tst.w	r0, #16
 8005f2a:	f43f af38 	beq.w	8005d9e <HAL_UART_IRQHandler+0x46>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f2e:	2310      	movs	r3, #16
 8005f30:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f32:	6823      	ldr	r3, [r4, #0]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005f3a:	d053      	beq.n	8005fe4 <HAL_UART_IRQHandler+0x28c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f3c:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8005f40:	6813      	ldr	r3, [r2, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f43f af4f 	beq.w	8005dea <HAL_UART_IRQHandler+0x92>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f4c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8005f50:	4299      	cmp	r1, r3
 8005f52:	f67f af4a 	bls.w	8005dea <HAL_UART_IRQHandler+0x92>
        huart->RxXferCount = nb_remaining_rx_data;
 8005f56:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005f5a:	6813      	ldr	r3, [r2, #0]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f013 0f20 	tst.w	r3, #32
 8005f62:	d132      	bne.n	8005fca <HAL_UART_IRQHandler+0x272>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f64:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f66:	e852 3f00 	ldrex	r3, [r2]
 8005f6a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6e:	e842 3100 	strex	r1, r3, [r2]
 8005f72:	2900      	cmp	r1, #0
 8005f74:	d1f6      	bne.n	8005f64 <HAL_UART_IRQHandler+0x20c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f76:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f78:	f102 0308 	add.w	r3, r2, #8
 8005f7c:	e853 3f00 	ldrex	r3, [r3]
 8005f80:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f84:	3208      	adds	r2, #8
 8005f86:	e842 3100 	strex	r1, r3, [r2]
 8005f8a:	2900      	cmp	r1, #0
 8005f8c:	d1f3      	bne.n	8005f76 <HAL_UART_IRQHandler+0x21e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f8e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f90:	f102 0308 	add.w	r3, r2, #8
 8005f94:	e853 3f00 	ldrex	r3, [r3]
 8005f98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9c:	3208      	adds	r2, #8
 8005f9e:	e842 3100 	strex	r1, r3, [r2]
 8005fa2:	2900      	cmp	r1, #0
 8005fa4:	d1f3      	bne.n	8005f8e <HAL_UART_IRQHandler+0x236>
          huart->RxState = HAL_UART_STATE_READY;
 8005fa6:	2320      	movs	r3, #32
 8005fa8:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fac:	2300      	movs	r3, #0
 8005fae:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fb0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb2:	e852 3f00 	ldrex	r3, [r2]
 8005fb6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fba:	e842 3100 	strex	r1, r3, [r2]
 8005fbe:	2900      	cmp	r1, #0
 8005fc0:	d1f6      	bne.n	8005fb0 <HAL_UART_IRQHandler+0x258>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005fc2:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8005fc6:	f7fd fcbf 	bl	8003948 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005fca:	2302      	movs	r3, #2
 8005fcc:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005fce:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8005fd2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	1ac9      	subs	r1, r1, r3
 8005fda:	b289      	uxth	r1, r1
 8005fdc:	4620      	mov	r0, r4
 8005fde:	f7ff feba 	bl	8005d56 <HAL_UARTEx_RxEventCallback>
      return;
 8005fe2:	e702      	b.n	8005dea <HAL_UART_IRQHandler+0x92>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005fe4:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8005fe8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	1ac9      	subs	r1, r1, r3
 8005ff0:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8005ff2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f43f aef6 	beq.w	8005dea <HAL_UART_IRQHandler+0x92>
          && (nb_rx_data > 0U))
 8005ffe:	2900      	cmp	r1, #0
 8006000:	f43f aef3 	beq.w	8005dea <HAL_UART_IRQHandler+0x92>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006004:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006006:	e852 3f00 	ldrex	r3, [r2]
 800600a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600e:	e842 3000 	strex	r0, r3, [r2]
 8006012:	2800      	cmp	r0, #0
 8006014:	d1f6      	bne.n	8006004 <HAL_UART_IRQHandler+0x2ac>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006016:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006018:	f102 0308 	add.w	r3, r2, #8
 800601c:	e853 3f00 	ldrex	r3, [r3]
 8006020:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006024:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006028:	3208      	adds	r2, #8
 800602a:	e842 3000 	strex	r0, r3, [r2]
 800602e:	2800      	cmp	r0, #0
 8006030:	d1f1      	bne.n	8006016 <HAL_UART_IRQHandler+0x2be>
        huart->RxState = HAL_UART_STATE_READY;
 8006032:	2320      	movs	r3, #32
 8006034:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006038:	2300      	movs	r3, #0
 800603a:	66e3      	str	r3, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 800603c:	6763      	str	r3, [r4, #116]	@ 0x74
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800603e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006040:	e852 3f00 	ldrex	r3, [r2]
 8006044:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006048:	e842 3000 	strex	r0, r3, [r2]
 800604c:	2800      	cmp	r0, #0
 800604e:	d1f6      	bne.n	800603e <HAL_UART_IRQHandler+0x2e6>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006050:	2302      	movs	r3, #2
 8006052:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006054:	4620      	mov	r0, r4
 8006056:	f7ff fe7e 	bl	8005d56 <HAL_UARTEx_RxEventCallback>
      return;
 800605a:	e6c6      	b.n	8005dea <HAL_UART_IRQHandler+0x92>
 800605c:	10000001 	.word	0x10000001
 8006060:	04000120 	.word	0x04000120
 8006064:	08005d43 	.word	0x08005d43
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006068:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800606c:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800606e:	4620      	mov	r0, r4
 8006070:	f000 fee8 	bl	8006e44 <HAL_UARTEx_WakeupCallback>
    return;
 8006074:	e6b9      	b.n	8005dea <HAL_UART_IRQHandler+0x92>
    if (huart->TxISR != NULL)
 8006076:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8006078:	2b00      	cmp	r3, #0
 800607a:	f43f aeb6 	beq.w	8005dea <HAL_UART_IRQHandler+0x92>
      huart->TxISR(huart);
 800607e:	4620      	mov	r0, r4
 8006080:	4798      	blx	r3
    return;
 8006082:	e6b2      	b.n	8005dea <HAL_UART_IRQHandler+0x92>
    UART_EndTransmit_IT(huart);
 8006084:	4620      	mov	r0, r4
 8006086:	f7ff fe17 	bl	8005cb8 <UART_EndTransmit_IT>
    return;
 800608a:	e6ae      	b.n	8005dea <HAL_UART_IRQHandler+0x92>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800608c:	4620      	mov	r0, r4
 800608e:	f000 fedb 	bl	8006e48 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8006092:	e6aa      	b.n	8005dea <HAL_UART_IRQHandler+0x92>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006094:	4620      	mov	r0, r4
 8006096:	f000 fed6 	bl	8006e46 <HAL_UARTEx_RxFifoFullCallback>
    return;
 800609a:	e6a6      	b.n	8005dea <HAL_UART_IRQHandler+0x92>

0800609c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800609c:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 800609e:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060a2:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 80060a6:	2a22      	cmp	r2, #34	@ 0x22
 80060a8:	d005      	beq.n	80060b6 <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80060aa:	6802      	ldr	r2, [r0, #0]
 80060ac:	6993      	ldr	r3, [r2, #24]
 80060ae:	f043 0308 	orr.w	r3, r3, #8
 80060b2:	6193      	str	r3, [r2, #24]
  }
}
 80060b4:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80060b6:	6802      	ldr	r2, [r0, #0]
 80060b8:	6a51      	ldr	r1, [r2, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 80060be:	400b      	ands	r3, r1
 80060c0:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 80060c2:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80060c4:	3301      	adds	r3, #1
 80060c6:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 80060c8:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	3b01      	subs	r3, #1
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 80060d6:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 80060da:	b29b      	uxth	r3, r3
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1e9      	bne.n	80060b4 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060e0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e2:	e852 3f00 	ldrex	r3, [r2]
 80060e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ea:	e842 3100 	strex	r1, r3, [r2]
 80060ee:	2900      	cmp	r1, #0
 80060f0:	d1f6      	bne.n	80060e0 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060f2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f4:	f102 0308 	add.w	r3, r2, #8
 80060f8:	e853 3f00 	ldrex	r3, [r3]
 80060fc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006100:	3208      	adds	r2, #8
 8006102:	e842 3100 	strex	r1, r3, [r2]
 8006106:	2900      	cmp	r1, #0
 8006108:	d1f3      	bne.n	80060f2 <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 800610a:	2320      	movs	r3, #32
 800610c:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
      huart->RxISR = NULL;
 8006110:	2300      	movs	r3, #0
 8006112:	6743      	str	r3, [r0, #116]	@ 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006114:	6703      	str	r3, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006116:	6803      	ldr	r3, [r0, #0]
 8006118:	4a16      	ldr	r2, [pc, #88]	@ (8006174 <UART_RxISR_8BIT+0xd8>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d00c      	beq.n	8006138 <UART_RxISR_8BIT+0x9c>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8006124:	d008      	beq.n	8006138 <UART_RxISR_8BIT+0x9c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006126:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006128:	e852 3f00 	ldrex	r3, [r2]
 800612c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006130:	e842 3100 	strex	r1, r3, [r2]
 8006134:	2900      	cmp	r1, #0
 8006136:	d1f6      	bne.n	8006126 <UART_RxISR_8BIT+0x8a>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006138:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800613a:	2b01      	cmp	r3, #1
 800613c:	d116      	bne.n	800616c <UART_RxISR_8BIT+0xd0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800613e:	2300      	movs	r3, #0
 8006140:	66c3      	str	r3, [r0, #108]	@ 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006142:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006144:	e852 3f00 	ldrex	r3, [r2]
 8006148:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614c:	e842 3100 	strex	r1, r3, [r2]
 8006150:	2900      	cmp	r1, #0
 8006152:	d1f6      	bne.n	8006142 <UART_RxISR_8BIT+0xa6>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006154:	6803      	ldr	r3, [r0, #0]
 8006156:	69da      	ldr	r2, [r3, #28]
 8006158:	f012 0f10 	tst.w	r2, #16
 800615c:	d001      	beq.n	8006162 <UART_RxISR_8BIT+0xc6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800615e:	2210      	movs	r2, #16
 8006160:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006162:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 8006166:	f7ff fdf6 	bl	8005d56 <HAL_UARTEx_RxEventCallback>
 800616a:	e7a3      	b.n	80060b4 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 800616c:	f7fb ff10 	bl	8001f90 <HAL_UART_RxCpltCallback>
 8006170:	e7a0      	b.n	80060b4 <UART_RxISR_8BIT+0x18>
 8006172:	bf00      	nop
 8006174:	40008000 	.word	0x40008000

08006178 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006178:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800617a:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800617e:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 8006182:	2b22      	cmp	r3, #34	@ 0x22
 8006184:	d005      	beq.n	8006192 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006186:	6802      	ldr	r2, [r0, #0]
 8006188:	6993      	ldr	r3, [r2, #24]
 800618a:	f043 0308 	orr.w	r3, r3, #8
 800618e:	6193      	str	r3, [r2, #24]
  }
}
 8006190:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006192:	6803      	ldr	r3, [r0, #0]
 8006194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006196:	6d81      	ldr	r1, [r0, #88]	@ 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8006198:	4013      	ands	r3, r2
 800619a:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 800619c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800619e:	3302      	adds	r3, #2
 80061a0:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 80061a2:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	3b01      	subs	r3, #1
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 80061b0:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1ea      	bne.n	8006190 <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061ba:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061bc:	e852 3f00 	ldrex	r3, [r2]
 80061c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c4:	e842 3100 	strex	r1, r3, [r2]
 80061c8:	2900      	cmp	r1, #0
 80061ca:	d1f6      	bne.n	80061ba <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061cc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ce:	f102 0308 	add.w	r3, r2, #8
 80061d2:	e853 3f00 	ldrex	r3, [r3]
 80061d6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061da:	3208      	adds	r2, #8
 80061dc:	e842 3100 	strex	r1, r3, [r2]
 80061e0:	2900      	cmp	r1, #0
 80061e2:	d1f3      	bne.n	80061cc <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 80061e4:	2320      	movs	r3, #32
 80061e6:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
      huart->RxISR = NULL;
 80061ea:	2300      	movs	r3, #0
 80061ec:	6743      	str	r3, [r0, #116]	@ 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061ee:	6703      	str	r3, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80061f0:	6803      	ldr	r3, [r0, #0]
 80061f2:	4a16      	ldr	r2, [pc, #88]	@ (800624c <UART_RxISR_16BIT+0xd4>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d00c      	beq.n	8006212 <UART_RxISR_16BIT+0x9a>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 80061fe:	d008      	beq.n	8006212 <UART_RxISR_16BIT+0x9a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006200:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006202:	e852 3f00 	ldrex	r3, [r2]
 8006206:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620a:	e842 3100 	strex	r1, r3, [r2]
 800620e:	2900      	cmp	r1, #0
 8006210:	d1f6      	bne.n	8006200 <UART_RxISR_16BIT+0x88>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006212:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8006214:	2b01      	cmp	r3, #1
 8006216:	d116      	bne.n	8006246 <UART_RxISR_16BIT+0xce>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006218:	2300      	movs	r3, #0
 800621a:	66c3      	str	r3, [r0, #108]	@ 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800621c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621e:	e852 3f00 	ldrex	r3, [r2]
 8006222:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006226:	e842 3100 	strex	r1, r3, [r2]
 800622a:	2900      	cmp	r1, #0
 800622c:	d1f6      	bne.n	800621c <UART_RxISR_16BIT+0xa4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800622e:	6803      	ldr	r3, [r0, #0]
 8006230:	69da      	ldr	r2, [r3, #28]
 8006232:	f012 0f10 	tst.w	r2, #16
 8006236:	d001      	beq.n	800623c <UART_RxISR_16BIT+0xc4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006238:	2210      	movs	r2, #16
 800623a:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800623c:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 8006240:	f7ff fd89 	bl	8005d56 <HAL_UARTEx_RxEventCallback>
 8006244:	e7a4      	b.n	8006190 <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8006246:	f7fb fea3 	bl	8001f90 <HAL_UART_RxCpltCallback>
 800624a:	e7a1      	b.n	8006190 <UART_RxISR_16BIT+0x18>
 800624c:	40008000 	.word	0x40008000

08006250 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 8006254:	f8b0 6060 	ldrh.w	r6, [r0, #96]	@ 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006258:	6803      	ldr	r3, [r0, #0]
 800625a:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800625c:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006260:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006264:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 8006268:	2a22      	cmp	r2, #34	@ 0x22
 800626a:	d005      	beq.n	8006278 <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800626c:	699a      	ldr	r2, [r3, #24]
 800626e:	f042 0208 	orr.w	r2, r2, #8
 8006272:	619a      	str	r2, [r3, #24]
  }
}
 8006274:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006278:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 800627a:	f8b0 7068 	ldrh.w	r7, [r0, #104]	@ 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800627e:	e008      	b.n	8006292 <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006280:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8006284:	2b00      	cmp	r3, #0
 8006286:	d14c      	bne.n	8006322 <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 8006288:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800628c:	b29b      	uxth	r3, r3
 800628e:	2b00      	cmp	r3, #0
 8006290:	d04e      	beq.n	8006330 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006292:	2f00      	cmp	r7, #0
 8006294:	f000 809a 	beq.w	80063cc <UART_RxISR_8BIT_FIFOEN+0x17c>
 8006298:	f015 0f20 	tst.w	r5, #32
 800629c:	f000 8096 	beq.w	80063cc <UART_RxISR_8BIT_FIFOEN+0x17c>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80062a0:	6823      	ldr	r3, [r4, #0]
 80062a2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80062a4:	b2f3      	uxtb	r3, r6
 80062a6:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80062a8:	400b      	ands	r3, r1
 80062aa:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 80062ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80062ae:	3301      	adds	r3, #1
 80062b0:	65a3      	str	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 80062b2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	3b01      	subs	r3, #1
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80062c0:	6823      	ldr	r3, [r4, #0]
 80062c2:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80062c4:	f015 0f07 	tst.w	r5, #7
 80062c8:	d0de      	beq.n	8006288 <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80062ca:	f015 0f01 	tst.w	r5, #1
 80062ce:	d009      	beq.n	80062e4 <UART_RxISR_8BIT_FIFOEN+0x94>
 80062d0:	f419 7f80 	tst.w	r9, #256	@ 0x100
 80062d4:	d006      	beq.n	80062e4 <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80062d6:	2201      	movs	r2, #1
 80062d8:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062da:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80062de:	4313      	orrs	r3, r2
 80062e0:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062e4:	f015 0f02 	tst.w	r5, #2
 80062e8:	d00b      	beq.n	8006302 <UART_RxISR_8BIT_FIFOEN+0xb2>
 80062ea:	f018 0f01 	tst.w	r8, #1
 80062ee:	d008      	beq.n	8006302 <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80062f0:	6823      	ldr	r3, [r4, #0]
 80062f2:	2202      	movs	r2, #2
 80062f4:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062f6:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80062fa:	f043 0304 	orr.w	r3, r3, #4
 80062fe:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006302:	f015 0f04 	tst.w	r5, #4
 8006306:	d0bb      	beq.n	8006280 <UART_RxISR_8BIT_FIFOEN+0x30>
 8006308:	f018 0f01 	tst.w	r8, #1
 800630c:	d0b8      	beq.n	8006280 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800630e:	6823      	ldr	r3, [r4, #0]
 8006310:	2204      	movs	r2, #4
 8006312:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006314:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8006318:	f043 0302 	orr.w	r3, r3, #2
 800631c:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8006320:	e7ae      	b.n	8006280 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8006322:	4620      	mov	r0, r4
 8006324:	f7ff fce0 	bl	8005ce8 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006328:	2300      	movs	r3, #0
 800632a:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 800632e:	e7ab      	b.n	8006288 <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006330:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006332:	e852 3f00 	ldrex	r3, [r2]
 8006336:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633a:	e842 3100 	strex	r1, r3, [r2]
 800633e:	2900      	cmp	r1, #0
 8006340:	d1f6      	bne.n	8006330 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006342:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006344:	f102 0308 	add.w	r3, r2, #8
 8006348:	e853 3f00 	ldrex	r3, [r3]
 800634c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006350:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006354:	3208      	adds	r2, #8
 8006356:	e842 3100 	strex	r1, r3, [r2]
 800635a:	2900      	cmp	r1, #0
 800635c:	d1f1      	bne.n	8006342 <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 800635e:	2320      	movs	r3, #32
 8006360:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        huart->RxISR = NULL;
 8006364:	2300      	movs	r3, #0
 8006366:	6763      	str	r3, [r4, #116]	@ 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006368:	6723      	str	r3, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800636a:	6823      	ldr	r3, [r4, #0]
 800636c:	4a29      	ldr	r2, [pc, #164]	@ (8006414 <UART_RxISR_8BIT_FIFOEN+0x1c4>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d003      	beq.n	800637a <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8006378:	d106      	bne.n	8006388 <UART_RxISR_8BIT_FIFOEN+0x138>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800637a:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800637c:	2b01      	cmp	r3, #1
 800637e:	d00d      	beq.n	800639c <UART_RxISR_8BIT_FIFOEN+0x14c>
          HAL_UART_RxCpltCallback(huart);
 8006380:	4620      	mov	r0, r4
 8006382:	f7fb fe05 	bl	8001f90 <HAL_UART_RxCpltCallback>
 8006386:	e784      	b.n	8006292 <UART_RxISR_8BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006388:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638a:	e852 3f00 	ldrex	r3, [r2]
 800638e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006392:	e842 3100 	strex	r1, r3, [r2]
 8006396:	2900      	cmp	r1, #0
 8006398:	d1f6      	bne.n	8006388 <UART_RxISR_8BIT_FIFOEN+0x138>
 800639a:	e7ee      	b.n	800637a <UART_RxISR_8BIT_FIFOEN+0x12a>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800639c:	2300      	movs	r3, #0
 800639e:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063a0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a2:	e852 3f00 	ldrex	r3, [r2]
 80063a6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063aa:	e842 3100 	strex	r1, r3, [r2]
 80063ae:	2900      	cmp	r1, #0
 80063b0:	d1f6      	bne.n	80063a0 <UART_RxISR_8BIT_FIFOEN+0x150>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80063b2:	6823      	ldr	r3, [r4, #0]
 80063b4:	69da      	ldr	r2, [r3, #28]
 80063b6:	f012 0f10 	tst.w	r2, #16
 80063ba:	d001      	beq.n	80063c0 <UART_RxISR_8BIT_FIFOEN+0x170>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063bc:	2210      	movs	r2, #16
 80063be:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063c0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 80063c4:	4620      	mov	r0, r4
 80063c6:	f7ff fcc6 	bl	8005d56 <HAL_UARTEx_RxEventCallback>
 80063ca:	e762      	b.n	8006292 <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 80063cc:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80063d0:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f43f af4e 	beq.w	8006274 <UART_RxISR_8BIT_FIFOEN+0x24>
 80063d8:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 80063dc:	429a      	cmp	r2, r3
 80063de:	f67f af49 	bls.w	8006274 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80063e2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e4:	f102 0308 	add.w	r3, r2, #8
 80063e8:	e853 3f00 	ldrex	r3, [r3]
 80063ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f0:	3208      	adds	r2, #8
 80063f2:	e842 3100 	strex	r1, r3, [r2]
 80063f6:	2900      	cmp	r1, #0
 80063f8:	d1f3      	bne.n	80063e2 <UART_RxISR_8BIT_FIFOEN+0x192>
      huart->RxISR = UART_RxISR_8BIT;
 80063fa:	4b07      	ldr	r3, [pc, #28]	@ (8006418 <UART_RxISR_8BIT_FIFOEN+0x1c8>)
 80063fc:	6763      	str	r3, [r4, #116]	@ 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80063fe:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006400:	e852 3f00 	ldrex	r3, [r2]
 8006404:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006408:	e842 3100 	strex	r1, r3, [r2]
 800640c:	2900      	cmp	r1, #0
 800640e:	d1f6      	bne.n	80063fe <UART_RxISR_8BIT_FIFOEN+0x1ae>
 8006410:	e730      	b.n	8006274 <UART_RxISR_8BIT_FIFOEN+0x24>
 8006412:	bf00      	nop
 8006414:	40008000 	.word	0x40008000
 8006418:	0800609d 	.word	0x0800609d

0800641c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800641c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006420:	f8b0 6060 	ldrh.w	r6, [r0, #96]	@ 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006424:	6803      	ldr	r3, [r0, #0]
 8006426:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006428:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800642c:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006430:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 8006434:	2a22      	cmp	r2, #34	@ 0x22
 8006436:	d005      	beq.n	8006444 <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006438:	699a      	ldr	r2, [r3, #24]
 800643a:	f042 0208 	orr.w	r2, r2, #8
 800643e:	619a      	str	r2, [r3, #24]
  }
}
 8006440:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006444:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8006446:	f8b0 7068 	ldrh.w	r7, [r0, #104]	@ 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800644a:	e008      	b.n	800645e <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800644c:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8006450:	2b00      	cmp	r3, #0
 8006452:	d14b      	bne.n	80064ec <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 8006454:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8006458:	b29b      	uxth	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	d04d      	beq.n	80064fa <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800645e:	2f00      	cmp	r7, #0
 8006460:	f000 8099 	beq.w	8006596 <UART_RxISR_16BIT_FIFOEN+0x17a>
 8006464:	f015 0f20 	tst.w	r5, #32
 8006468:	f000 8095 	beq.w	8006596 <UART_RxISR_16BIT_FIFOEN+0x17a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800646c:	6823      	ldr	r3, [r4, #0]
 800646e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006470:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 8006472:	4033      	ands	r3, r6
 8006474:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8006476:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006478:	3302      	adds	r3, #2
 800647a:	65a3      	str	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 800647c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8006480:	b29b      	uxth	r3, r3
 8006482:	3b01      	subs	r3, #1
 8006484:	b29b      	uxth	r3, r3
 8006486:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800648a:	6823      	ldr	r3, [r4, #0]
 800648c:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800648e:	f015 0f07 	tst.w	r5, #7
 8006492:	d0df      	beq.n	8006454 <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006494:	f015 0f01 	tst.w	r5, #1
 8006498:	d009      	beq.n	80064ae <UART_RxISR_16BIT_FIFOEN+0x92>
 800649a:	f419 7f80 	tst.w	r9, #256	@ 0x100
 800649e:	d006      	beq.n	80064ae <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80064a0:	2201      	movs	r2, #1
 80064a2:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064a4:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80064a8:	4313      	orrs	r3, r2
 80064aa:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064ae:	f015 0f02 	tst.w	r5, #2
 80064b2:	d00b      	beq.n	80064cc <UART_RxISR_16BIT_FIFOEN+0xb0>
 80064b4:	f018 0f01 	tst.w	r8, #1
 80064b8:	d008      	beq.n	80064cc <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80064ba:	6823      	ldr	r3, [r4, #0]
 80064bc:	2202      	movs	r2, #2
 80064be:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064c0:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80064c4:	f043 0304 	orr.w	r3, r3, #4
 80064c8:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064cc:	f015 0f04 	tst.w	r5, #4
 80064d0:	d0bc      	beq.n	800644c <UART_RxISR_16BIT_FIFOEN+0x30>
 80064d2:	f018 0f01 	tst.w	r8, #1
 80064d6:	d0b9      	beq.n	800644c <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80064d8:	6823      	ldr	r3, [r4, #0]
 80064da:	2204      	movs	r2, #4
 80064dc:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064de:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80064e2:	f043 0302 	orr.w	r3, r3, #2
 80064e6:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 80064ea:	e7af      	b.n	800644c <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 80064ec:	4620      	mov	r0, r4
 80064ee:	f7ff fbfb 	bl	8005ce8 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064f2:	2300      	movs	r3, #0
 80064f4:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 80064f8:	e7ac      	b.n	8006454 <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064fa:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fc:	e852 3f00 	ldrex	r3, [r2]
 8006500:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006504:	e842 3100 	strex	r1, r3, [r2]
 8006508:	2900      	cmp	r1, #0
 800650a:	d1f6      	bne.n	80064fa <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800650c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650e:	f102 0308 	add.w	r3, r2, #8
 8006512:	e853 3f00 	ldrex	r3, [r3]
 8006516:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800651a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651e:	3208      	adds	r2, #8
 8006520:	e842 3100 	strex	r1, r3, [r2]
 8006524:	2900      	cmp	r1, #0
 8006526:	d1f1      	bne.n	800650c <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 8006528:	2320      	movs	r3, #32
 800652a:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        huart->RxISR = NULL;
 800652e:	2300      	movs	r3, #0
 8006530:	6763      	str	r3, [r4, #116]	@ 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006532:	6723      	str	r3, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006534:	6823      	ldr	r3, [r4, #0]
 8006536:	4a29      	ldr	r2, [pc, #164]	@ (80065dc <UART_RxISR_16BIT_FIFOEN+0x1c0>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d003      	beq.n	8006544 <UART_RxISR_16BIT_FIFOEN+0x128>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8006542:	d106      	bne.n	8006552 <UART_RxISR_16BIT_FIFOEN+0x136>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006544:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8006546:	2b01      	cmp	r3, #1
 8006548:	d00d      	beq.n	8006566 <UART_RxISR_16BIT_FIFOEN+0x14a>
          HAL_UART_RxCpltCallback(huart);
 800654a:	4620      	mov	r0, r4
 800654c:	f7fb fd20 	bl	8001f90 <HAL_UART_RxCpltCallback>
 8006550:	e785      	b.n	800645e <UART_RxISR_16BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006552:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006554:	e852 3f00 	ldrex	r3, [r2]
 8006558:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655c:	e842 3100 	strex	r1, r3, [r2]
 8006560:	2900      	cmp	r1, #0
 8006562:	d1f6      	bne.n	8006552 <UART_RxISR_16BIT_FIFOEN+0x136>
 8006564:	e7ee      	b.n	8006544 <UART_RxISR_16BIT_FIFOEN+0x128>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006566:	2300      	movs	r3, #0
 8006568:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800656a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656c:	e852 3f00 	ldrex	r3, [r2]
 8006570:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006574:	e842 3100 	strex	r1, r3, [r2]
 8006578:	2900      	cmp	r1, #0
 800657a:	d1f6      	bne.n	800656a <UART_RxISR_16BIT_FIFOEN+0x14e>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800657c:	6823      	ldr	r3, [r4, #0]
 800657e:	69da      	ldr	r2, [r3, #28]
 8006580:	f012 0f10 	tst.w	r2, #16
 8006584:	d001      	beq.n	800658a <UART_RxISR_16BIT_FIFOEN+0x16e>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006586:	2210      	movs	r2, #16
 8006588:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800658a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 800658e:	4620      	mov	r0, r4
 8006590:	f7ff fbe1 	bl	8005d56 <HAL_UARTEx_RxEventCallback>
 8006594:	e763      	b.n	800645e <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8006596:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800659a:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800659c:	2b00      	cmp	r3, #0
 800659e:	f43f af4f 	beq.w	8006440 <UART_RxISR_16BIT_FIFOEN+0x24>
 80065a2:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 80065a6:	429a      	cmp	r2, r3
 80065a8:	f67f af4a 	bls.w	8006440 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80065ac:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ae:	f102 0308 	add.w	r3, r2, #8
 80065b2:	e853 3f00 	ldrex	r3, [r3]
 80065b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ba:	3208      	adds	r2, #8
 80065bc:	e842 3100 	strex	r1, r3, [r2]
 80065c0:	2900      	cmp	r1, #0
 80065c2:	d1f3      	bne.n	80065ac <UART_RxISR_16BIT_FIFOEN+0x190>
      huart->RxISR = UART_RxISR_16BIT;
 80065c4:	4b06      	ldr	r3, [pc, #24]	@ (80065e0 <UART_RxISR_16BIT_FIFOEN+0x1c4>)
 80065c6:	6763      	str	r3, [r4, #116]	@ 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80065c8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ca:	e852 3f00 	ldrex	r3, [r2]
 80065ce:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d2:	e842 3100 	strex	r1, r3, [r2]
 80065d6:	2900      	cmp	r1, #0
 80065d8:	d1f6      	bne.n	80065c8 <UART_RxISR_16BIT_FIFOEN+0x1ac>
 80065da:	e731      	b.n	8006440 <UART_RxISR_16BIT_FIFOEN+0x24>
 80065dc:	40008000 	.word	0x40008000
 80065e0:	08006179 	.word	0x08006179

080065e4 <UART_SetConfig>:
{
 80065e4:	b570      	push	{r4, r5, r6, lr}
 80065e6:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065e8:	6883      	ldr	r3, [r0, #8]
 80065ea:	6902      	ldr	r2, [r0, #16]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	6942      	ldr	r2, [r0, #20]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	69c2      	ldr	r2, [r0, #28]
 80065f4:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065f6:	6801      	ldr	r1, [r0, #0]
 80065f8:	6808      	ldr	r0, [r1, #0]
 80065fa:	4a9d      	ldr	r2, [pc, #628]	@ (8006870 <UART_SetConfig+0x28c>)
 80065fc:	4002      	ands	r2, r0
 80065fe:	431a      	orrs	r2, r3
 8006600:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006602:	6822      	ldr	r2, [r4, #0]
 8006604:	6853      	ldr	r3, [r2, #4]
 8006606:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800660a:	68e1      	ldr	r1, [r4, #12]
 800660c:	430b      	orrs	r3, r1
 800660e:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006610:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006612:	6822      	ldr	r2, [r4, #0]
 8006614:	4b97      	ldr	r3, [pc, #604]	@ (8006874 <UART_SetConfig+0x290>)
 8006616:	429a      	cmp	r2, r3
 8006618:	d001      	beq.n	800661e <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 800661a:	6a23      	ldr	r3, [r4, #32]
 800661c:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800661e:	6893      	ldr	r3, [r2, #8]
 8006620:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006624:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006628:	430b      	orrs	r3, r1
 800662a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800662c:	6822      	ldr	r2, [r4, #0]
 800662e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8006630:	f023 030f 	bic.w	r3, r3, #15
 8006634:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006636:	430b      	orrs	r3, r1
 8006638:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800663a:	6823      	ldr	r3, [r4, #0]
 800663c:	4a8e      	ldr	r2, [pc, #568]	@ (8006878 <UART_SetConfig+0x294>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d01c      	beq.n	800667c <UART_SetConfig+0x98>
 8006642:	4a8e      	ldr	r2, [pc, #568]	@ (800687c <UART_SetConfig+0x298>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d031      	beq.n	80066ac <UART_SetConfig+0xc8>
 8006648:	4a8a      	ldr	r2, [pc, #552]	@ (8006874 <UART_SetConfig+0x290>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d04b      	beq.n	80066e6 <UART_SetConfig+0x102>
 800664e:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8006650:	4988      	ldr	r1, [pc, #544]	@ (8006874 <UART_SetConfig+0x290>)
 8006652:	428b      	cmp	r3, r1
 8006654:	d068      	beq.n	8006728 <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006656:	69e0      	ldr	r0, [r4, #28]
 8006658:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800665c:	f000 80a5 	beq.w	80067aa <UART_SetConfig+0x1c6>
    switch (clocksource)
 8006660:	2a08      	cmp	r2, #8
 8006662:	f200 811f 	bhi.w	80068a4 <UART_SetConfig+0x2c0>
 8006666:	e8df f012 	tbh	[pc, r2, lsl #1]
 800666a:	00d3      	.short	0x00d3
 800666c:	00d100f5 	.word	0x00d100f5
 8006670:	00f8011d 	.word	0x00f8011d
 8006674:	011d011d 	.word	0x011d011d
 8006678:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800667c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006680:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8006684:	f002 0203 	and.w	r2, r2, #3
 8006688:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 800668c:	f5a2 3240 	sub.w	r2, r2, #196608	@ 0x30000
 8006690:	2a03      	cmp	r2, #3
 8006692:	d809      	bhi.n	80066a8 <UART_SetConfig+0xc4>
 8006694:	e8df f002 	tbb	[pc, r2]
 8006698:	063c0402 	.word	0x063c0402
 800669c:	2201      	movs	r2, #1
 800669e:	e7d7      	b.n	8006650 <UART_SetConfig+0x6c>
 80066a0:	2204      	movs	r2, #4
 80066a2:	e7d5      	b.n	8006650 <UART_SetConfig+0x6c>
 80066a4:	2208      	movs	r2, #8
 80066a6:	e7d3      	b.n	8006650 <UART_SetConfig+0x6c>
 80066a8:	2210      	movs	r2, #16
 80066aa:	e7d1      	b.n	8006650 <UART_SetConfig+0x6c>
 80066ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80066b0:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80066b4:	f002 020c 	and.w	r2, r2, #12
 80066b8:	f442 2240 	orr.w	r2, r2, #786432	@ 0xc0000
 80066bc:	f5a2 2240 	sub.w	r2, r2, #786432	@ 0xc0000
 80066c0:	2a0c      	cmp	r2, #12
 80066c2:	d80e      	bhi.n	80066e2 <UART_SetConfig+0xfe>
 80066c4:	e8df f002 	tbb	[pc, r2]
 80066c8:	0d0d0d07 	.word	0x0d0d0d07
 80066cc:	0d0d0d09 	.word	0x0d0d0d09
 80066d0:	0d0d0d26 	.word	0x0d0d0d26
 80066d4:	0b          	.byte	0x0b
 80066d5:	00          	.byte	0x00
 80066d6:	2200      	movs	r2, #0
 80066d8:	e7ba      	b.n	8006650 <UART_SetConfig+0x6c>
 80066da:	2204      	movs	r2, #4
 80066dc:	e7b8      	b.n	8006650 <UART_SetConfig+0x6c>
 80066de:	2208      	movs	r2, #8
 80066e0:	e7b6      	b.n	8006650 <UART_SetConfig+0x6c>
 80066e2:	2210      	movs	r2, #16
 80066e4:	e7b4      	b.n	8006650 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80066e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80066ea:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80066ee:	f402 6240 	and.w	r2, r2, #3072	@ 0xc00
 80066f2:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 80066f6:	d00f      	beq.n	8006718 <UART_SetConfig+0x134>
 80066f8:	d805      	bhi.n	8006706 <UART_SetConfig+0x122>
 80066fa:	b17a      	cbz	r2, 800671c <UART_SetConfig+0x138>
 80066fc:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8006700:	d10e      	bne.n	8006720 <UART_SetConfig+0x13c>
 8006702:	2204      	movs	r2, #4
 8006704:	e7a4      	b.n	8006650 <UART_SetConfig+0x6c>
 8006706:	f5b2 6f40 	cmp.w	r2, #3072	@ 0xc00
 800670a:	d10b      	bne.n	8006724 <UART_SetConfig+0x140>
 800670c:	2208      	movs	r2, #8
 800670e:	e79f      	b.n	8006650 <UART_SetConfig+0x6c>
 8006710:	2202      	movs	r2, #2
 8006712:	e79d      	b.n	8006650 <UART_SetConfig+0x6c>
 8006714:	2202      	movs	r2, #2
 8006716:	e79b      	b.n	8006650 <UART_SetConfig+0x6c>
 8006718:	2202      	movs	r2, #2
 800671a:	e799      	b.n	8006650 <UART_SetConfig+0x6c>
 800671c:	2200      	movs	r2, #0
 800671e:	e797      	b.n	8006650 <UART_SetConfig+0x6c>
 8006720:	2210      	movs	r2, #16
 8006722:	e795      	b.n	8006650 <UART_SetConfig+0x6c>
 8006724:	2210      	movs	r2, #16
 8006726:	e793      	b.n	8006650 <UART_SetConfig+0x6c>
    switch (clocksource)
 8006728:	2a08      	cmp	r2, #8
 800672a:	f200 809c 	bhi.w	8006866 <UART_SetConfig+0x282>
 800672e:	e8df f002 	tbb	[pc, r2]
 8006732:	9a08      	.short	0x9a08
 8006734:	9a379a3a 	.word	0x9a379a3a
 8006738:	9a9a      	.short	0x9a9a
 800673a:	05          	.byte	0x05
 800673b:	00          	.byte	0x00
 800673c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8006740:	e004      	b.n	800674c <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006742:	f7fe fac1 	bl	8004cc8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006746:	2800      	cmp	r0, #0
 8006748:	f000 808f 	beq.w	800686a <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800674c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800674e:	4b4c      	ldr	r3, [pc, #304]	@ (8006880 <UART_SetConfig+0x29c>)
 8006750:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8006754:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006758:	6865      	ldr	r5, [r4, #4]
 800675a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800675e:	4299      	cmp	r1, r3
 8006760:	f200 8094 	bhi.w	800688c <UART_SetConfig+0x2a8>
 8006764:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8006768:	f200 8092 	bhi.w	8006890 <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800676c:	2600      	movs	r6, #0
 800676e:	4633      	mov	r3, r6
 8006770:	4631      	mov	r1, r6
 8006772:	f7fa fa19 	bl	8000ba8 <__aeabi_uldivmod>
 8006776:	0209      	lsls	r1, r1, #8
 8006778:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800677c:	0200      	lsls	r0, r0, #8
 800677e:	086b      	lsrs	r3, r5, #1
 8006780:	18c0      	adds	r0, r0, r3
 8006782:	462a      	mov	r2, r5
 8006784:	4633      	mov	r3, r6
 8006786:	f141 0100 	adc.w	r1, r1, #0
 800678a:	f7fa fa0d 	bl	8000ba8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800678e:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8006792:	4b3c      	ldr	r3, [pc, #240]	@ (8006884 <UART_SetConfig+0x2a0>)
 8006794:	429a      	cmp	r2, r3
 8006796:	d87d      	bhi.n	8006894 <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 8006798:	6823      	ldr	r3, [r4, #0]
 800679a:	60d8      	str	r0, [r3, #12]
 800679c:	4630      	mov	r0, r6
 800679e:	e050      	b.n	8006842 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 80067a0:	f7fd fd94 	bl	80042cc <HAL_RCC_GetSysClockFreq>
        break;
 80067a4:	e7cf      	b.n	8006746 <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 80067a6:	4838      	ldr	r0, [pc, #224]	@ (8006888 <UART_SetConfig+0x2a4>)
 80067a8:	e7d0      	b.n	800674c <UART_SetConfig+0x168>
    switch (clocksource)
 80067aa:	2a08      	cmp	r2, #8
 80067ac:	d874      	bhi.n	8006898 <UART_SetConfig+0x2b4>
 80067ae:	e8df f002 	tbb	[pc, r2]
 80067b2:	2707      	.short	0x2707
 80067b4:	732a7305 	.word	0x732a7305
 80067b8:	7373      	.short	0x7373
 80067ba:	0b          	.byte	0x0b
 80067bb:	00          	.byte	0x00
 80067bc:	4832      	ldr	r0, [pc, #200]	@ (8006888 <UART_SetConfig+0x2a4>)
 80067be:	e003      	b.n	80067c8 <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 80067c0:	f7fe fa82 	bl	8004cc8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80067c4:	2800      	cmp	r0, #0
 80067c6:	d069      	beq.n	800689c <UART_SetConfig+0x2b8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067c8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80067ca:	4b2d      	ldr	r3, [pc, #180]	@ (8006880 <UART_SetConfig+0x29c>)
 80067cc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80067d0:	fbb0 f0f3 	udiv	r0, r0, r3
 80067d4:	6862      	ldr	r2, [r4, #4]
 80067d6:	0853      	lsrs	r3, r2, #1
 80067d8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80067dc:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067e0:	f1a3 0110 	sub.w	r1, r3, #16
 80067e4:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80067e8:	4291      	cmp	r1, r2
 80067ea:	d859      	bhi.n	80068a0 <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067f2:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80067f6:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 80067f8:	6822      	ldr	r2, [r4, #0]
 80067fa:	60d3      	str	r3, [r2, #12]
 80067fc:	2000      	movs	r0, #0
 80067fe:	e020      	b.n	8006842 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006800:	f7fe fa72 	bl	8004ce8 <HAL_RCC_GetPCLK2Freq>
        break;
 8006804:	e7de      	b.n	80067c4 <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 8006806:	f7fd fd61 	bl	80042cc <HAL_RCC_GetSysClockFreq>
        break;
 800680a:	e7db      	b.n	80067c4 <UART_SetConfig+0x1e0>
    switch (clocksource)
 800680c:	481e      	ldr	r0, [pc, #120]	@ (8006888 <UART_SetConfig+0x2a4>)
 800680e:	e003      	b.n	8006818 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006810:	f7fe fa5a 	bl	8004cc8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006814:	2800      	cmp	r0, #0
 8006816:	d047      	beq.n	80068a8 <UART_SetConfig+0x2c4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006818:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800681a:	4b19      	ldr	r3, [pc, #100]	@ (8006880 <UART_SetConfig+0x29c>)
 800681c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006820:	fbb0 f0f3 	udiv	r0, r0, r3
 8006824:	6863      	ldr	r3, [r4, #4]
 8006826:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800682a:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800682e:	f1a0 0210 	sub.w	r2, r0, #16
 8006832:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 8006836:	429a      	cmp	r2, r3
 8006838:	d838      	bhi.n	80068ac <UART_SetConfig+0x2c8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800683a:	6823      	ldr	r3, [r4, #0]
 800683c:	b280      	uxth	r0, r0
 800683e:	60d8      	str	r0, [r3, #12]
 8006840:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8006842:	2301      	movs	r3, #1
 8006844:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006848:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 800684c:	2300      	movs	r3, #0
 800684e:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8006850:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8006852:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8006854:	f7fe fa48 	bl	8004ce8 <HAL_RCC_GetPCLK2Freq>
        break;
 8006858:	e7dc      	b.n	8006814 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 800685a:	f7fd fd37 	bl	80042cc <HAL_RCC_GetSysClockFreq>
        break;
 800685e:	e7d9      	b.n	8006814 <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 8006860:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8006864:	e7d8      	b.n	8006818 <UART_SetConfig+0x234>
    switch (clocksource)
 8006866:	2001      	movs	r0, #1
 8006868:	e7eb      	b.n	8006842 <UART_SetConfig+0x25e>
 800686a:	2000      	movs	r0, #0
 800686c:	e7e9      	b.n	8006842 <UART_SetConfig+0x25e>
 800686e:	bf00      	nop
 8006870:	cfff69f3 	.word	0xcfff69f3
 8006874:	40008000 	.word	0x40008000
 8006878:	40013800 	.word	0x40013800
 800687c:	40004400 	.word	0x40004400
 8006880:	08012cdc 	.word	0x08012cdc
 8006884:	000ffcff 	.word	0x000ffcff
 8006888:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 800688c:	2001      	movs	r0, #1
 800688e:	e7d8      	b.n	8006842 <UART_SetConfig+0x25e>
 8006890:	2001      	movs	r0, #1
 8006892:	e7d6      	b.n	8006842 <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 8006894:	2001      	movs	r0, #1
 8006896:	e7d4      	b.n	8006842 <UART_SetConfig+0x25e>
    switch (clocksource)
 8006898:	2001      	movs	r0, #1
 800689a:	e7d2      	b.n	8006842 <UART_SetConfig+0x25e>
 800689c:	2000      	movs	r0, #0
 800689e:	e7d0      	b.n	8006842 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 80068a0:	2001      	movs	r0, #1
 80068a2:	e7ce      	b.n	8006842 <UART_SetConfig+0x25e>
    switch (clocksource)
 80068a4:	2001      	movs	r0, #1
 80068a6:	e7cc      	b.n	8006842 <UART_SetConfig+0x25e>
 80068a8:	2000      	movs	r0, #0
 80068aa:	e7ca      	b.n	8006842 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 80068ac:	2001      	movs	r0, #1
 80068ae:	e7c8      	b.n	8006842 <UART_SetConfig+0x25e>

080068b0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068b0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80068b2:	f013 0f01 	tst.w	r3, #1
 80068b6:	d006      	beq.n	80068c6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068b8:	6802      	ldr	r2, [r0, #0]
 80068ba:	6853      	ldr	r3, [r2, #4]
 80068bc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80068c0:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80068c2:	430b      	orrs	r3, r1
 80068c4:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068c6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80068c8:	f013 0f02 	tst.w	r3, #2
 80068cc:	d006      	beq.n	80068dc <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068ce:	6802      	ldr	r2, [r0, #0]
 80068d0:	6853      	ldr	r3, [r2, #4]
 80068d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068d6:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 80068d8:	430b      	orrs	r3, r1
 80068da:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068dc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80068de:	f013 0f04 	tst.w	r3, #4
 80068e2:	d006      	beq.n	80068f2 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068e4:	6802      	ldr	r2, [r0, #0]
 80068e6:	6853      	ldr	r3, [r2, #4]
 80068e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80068ec:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 80068ee:	430b      	orrs	r3, r1
 80068f0:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068f2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80068f4:	f013 0f08 	tst.w	r3, #8
 80068f8:	d006      	beq.n	8006908 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068fa:	6802      	ldr	r2, [r0, #0]
 80068fc:	6853      	ldr	r3, [r2, #4]
 80068fe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006902:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8006904:	430b      	orrs	r3, r1
 8006906:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006908:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800690a:	f013 0f10 	tst.w	r3, #16
 800690e:	d006      	beq.n	800691e <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006910:	6802      	ldr	r2, [r0, #0]
 8006912:	6893      	ldr	r3, [r2, #8]
 8006914:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006918:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 800691a:	430b      	orrs	r3, r1
 800691c:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800691e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8006920:	f013 0f20 	tst.w	r3, #32
 8006924:	d006      	beq.n	8006934 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006926:	6802      	ldr	r2, [r0, #0]
 8006928:	6893      	ldr	r3, [r2, #8]
 800692a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800692e:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8006930:	430b      	orrs	r3, r1
 8006932:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006934:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8006936:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800693a:	d00a      	beq.n	8006952 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800693c:	6802      	ldr	r2, [r0, #0]
 800693e:	6853      	ldr	r3, [r2, #4]
 8006940:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006944:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8006946:	430b      	orrs	r3, r1
 8006948:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800694a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800694c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006950:	d00b      	beq.n	800696a <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006952:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8006954:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006958:	d006      	beq.n	8006968 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800695a:	6802      	ldr	r2, [r0, #0]
 800695c:	6853      	ldr	r3, [r2, #4]
 800695e:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8006962:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8006964:	430b      	orrs	r3, r1
 8006966:	6053      	str	r3, [r2, #4]
}
 8006968:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800696a:	6802      	ldr	r2, [r0, #0]
 800696c:	6853      	ldr	r3, [r2, #4]
 800696e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006972:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8006974:	430b      	orrs	r3, r1
 8006976:	6053      	str	r3, [r2, #4]
 8006978:	e7eb      	b.n	8006952 <UART_AdvFeatureConfig+0xa2>

0800697a <UART_WaitOnFlagUntilTimeout>:
{
 800697a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800697e:	4605      	mov	r5, r0
 8006980:	460f      	mov	r7, r1
 8006982:	4616      	mov	r6, r2
 8006984:	4699      	mov	r9, r3
 8006986:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800698a:	682b      	ldr	r3, [r5, #0]
 800698c:	69dc      	ldr	r4, [r3, #28]
 800698e:	ea37 0404 	bics.w	r4, r7, r4
 8006992:	bf0c      	ite	eq
 8006994:	2401      	moveq	r4, #1
 8006996:	2400      	movne	r4, #0
 8006998:	42b4      	cmp	r4, r6
 800699a:	d157      	bne.n	8006a4c <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 800699c:	f1b8 3fff 	cmp.w	r8, #4294967295
 80069a0:	d0f3      	beq.n	800698a <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069a2:	f7fa fffb 	bl	800199c <HAL_GetTick>
 80069a6:	eba0 0009 	sub.w	r0, r0, r9
 80069aa:	4540      	cmp	r0, r8
 80069ac:	d82f      	bhi.n	8006a0e <UART_WaitOnFlagUntilTimeout+0x94>
 80069ae:	f1b8 0f00 	cmp.w	r8, #0
 80069b2:	d02c      	beq.n	8006a0e <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80069b4:	682b      	ldr	r3, [r5, #0]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	f012 0f04 	tst.w	r2, #4
 80069bc:	d0e5      	beq.n	800698a <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069be:	69da      	ldr	r2, [r3, #28]
 80069c0:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 80069c4:	d0e1      	beq.n	800698a <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80069ca:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80069cc:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ce:	e852 3f00 	ldrex	r3, [r2]
 80069d2:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d6:	e842 3100 	strex	r1, r3, [r2]
 80069da:	2900      	cmp	r1, #0
 80069dc:	d1f6      	bne.n	80069cc <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069de:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e0:	f102 0308 	add.w	r3, r2, #8
 80069e4:	e853 3f00 	ldrex	r3, [r3]
 80069e8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ec:	3208      	adds	r2, #8
 80069ee:	e842 3100 	strex	r1, r3, [r2]
 80069f2:	2900      	cmp	r1, #0
 80069f4:	d1f3      	bne.n	80069de <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 80069f6:	2320      	movs	r3, #32
 80069f8:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80069fc:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a00:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 8006a04:	2300      	movs	r3, #0
 8006a06:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
          return HAL_TIMEOUT;
 8006a0a:	2003      	movs	r0, #3
 8006a0c:	e01f      	b.n	8006a4e <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006a0e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a10:	e852 3f00 	ldrex	r3, [r2]
 8006a14:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a18:	e842 3100 	strex	r1, r3, [r2]
 8006a1c:	2900      	cmp	r1, #0
 8006a1e:	d1f6      	bne.n	8006a0e <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a20:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a22:	f102 0308 	add.w	r3, r2, #8
 8006a26:	e853 3f00 	ldrex	r3, [r3]
 8006a2a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2e:	3208      	adds	r2, #8
 8006a30:	e842 3100 	strex	r1, r3, [r2]
 8006a34:	2900      	cmp	r1, #0
 8006a36:	d1f3      	bne.n	8006a20 <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 8006a38:	2320      	movs	r3, #32
 8006a3a:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8006a3e:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
        __HAL_UNLOCK(huart);
 8006a42:	2300      	movs	r3, #0
 8006a44:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
        return HAL_TIMEOUT;
 8006a48:	2003      	movs	r0, #3
 8006a4a:	e000      	b.n	8006a4e <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 8006a4c:	2000      	movs	r0, #0
}
 8006a4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006a52 <HAL_UART_Receive>:
{
 8006a52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006a56:	b083      	sub	sp, #12
 8006a58:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a5a:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 8006a5e:	2b20      	cmp	r3, #32
 8006a60:	d177      	bne.n	8006b52 <HAL_UART_Receive+0x100>
 8006a62:	4604      	mov	r4, r0
 8006a64:	460d      	mov	r5, r1
 8006a66:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8006a68:	2900      	cmp	r1, #0
 8006a6a:	d076      	beq.n	8006b5a <HAL_UART_Receive+0x108>
 8006a6c:	b90a      	cbnz	r2, 8006a72 <HAL_UART_Receive+0x20>
      return  HAL_ERROR;
 8006a6e:	2001      	movs	r0, #1
 8006a70:	e070      	b.n	8006b54 <HAL_UART_Receive+0x102>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a72:	2300      	movs	r3, #0
 8006a74:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a78:	2222      	movs	r2, #34	@ 0x22
 8006a7a:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a7e:	66c3      	str	r3, [r0, #108]	@ 0x6c
    tickstart = HAL_GetTick();
 8006a80:	f7fa ff8c 	bl	800199c <HAL_GetTick>
 8006a84:	4607      	mov	r7, r0
    huart->RxXferSize  = Size;
 8006a86:	f8a4 805c 	strh.w	r8, [r4, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8006a8a:	f8a4 805e 	strh.w	r8, [r4, #94]	@ 0x5e
    UART_MASK_COMPUTATION(huart);
 8006a8e:	68a3      	ldr	r3, [r4, #8]
 8006a90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a94:	d006      	beq.n	8006aa4 <HAL_UART_Receive+0x52>
 8006a96:	b9a3      	cbnz	r3, 8006ac2 <HAL_UART_Receive+0x70>
 8006a98:	6922      	ldr	r2, [r4, #16]
 8006a9a:	b972      	cbnz	r2, 8006aba <HAL_UART_Receive+0x68>
 8006a9c:	22ff      	movs	r2, #255	@ 0xff
 8006a9e:	f8a4 2060 	strh.w	r2, [r4, #96]	@ 0x60
 8006aa2:	e014      	b.n	8006ace <HAL_UART_Receive+0x7c>
 8006aa4:	6922      	ldr	r2, [r4, #16]
 8006aa6:	b922      	cbnz	r2, 8006ab2 <HAL_UART_Receive+0x60>
 8006aa8:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006aac:	f8a4 2060 	strh.w	r2, [r4, #96]	@ 0x60
 8006ab0:	e00d      	b.n	8006ace <HAL_UART_Receive+0x7c>
 8006ab2:	22ff      	movs	r2, #255	@ 0xff
 8006ab4:	f8a4 2060 	strh.w	r2, [r4, #96]	@ 0x60
 8006ab8:	e009      	b.n	8006ace <HAL_UART_Receive+0x7c>
 8006aba:	227f      	movs	r2, #127	@ 0x7f
 8006abc:	f8a4 2060 	strh.w	r2, [r4, #96]	@ 0x60
 8006ac0:	e005      	b.n	8006ace <HAL_UART_Receive+0x7c>
 8006ac2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ac6:	d00a      	beq.n	8006ade <HAL_UART_Receive+0x8c>
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f8a4 2060 	strh.w	r2, [r4, #96]	@ 0x60
    uhMask = huart->Mask;
 8006ace:	f8b4 8060 	ldrh.w	r8, [r4, #96]	@ 0x60
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ad2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ad6:	d00c      	beq.n	8006af2 <HAL_UART_Receive+0xa0>
      pdata16bits = NULL;
 8006ad8:	f04f 0900 	mov.w	r9, #0
 8006adc:	e01e      	b.n	8006b1c <HAL_UART_Receive+0xca>
    UART_MASK_COMPUTATION(huart);
 8006ade:	6922      	ldr	r2, [r4, #16]
 8006ae0:	b91a      	cbnz	r2, 8006aea <HAL_UART_Receive+0x98>
 8006ae2:	227f      	movs	r2, #127	@ 0x7f
 8006ae4:	f8a4 2060 	strh.w	r2, [r4, #96]	@ 0x60
 8006ae8:	e7f1      	b.n	8006ace <HAL_UART_Receive+0x7c>
 8006aea:	223f      	movs	r2, #63	@ 0x3f
 8006aec:	f8a4 2060 	strh.w	r2, [r4, #96]	@ 0x60
 8006af0:	e7ed      	b.n	8006ace <HAL_UART_Receive+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006af2:	6923      	ldr	r3, [r4, #16]
 8006af4:	b113      	cbz	r3, 8006afc <HAL_UART_Receive+0xaa>
      pdata16bits = NULL;
 8006af6:	f04f 0900 	mov.w	r9, #0
 8006afa:	e00f      	b.n	8006b1c <HAL_UART_Receive+0xca>
      pdata16bits = (uint16_t *) pData;
 8006afc:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 8006afe:	2500      	movs	r5, #0
 8006b00:	e00c      	b.n	8006b1c <HAL_UART_Receive+0xca>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006b02:	6823      	ldr	r3, [r4, #0]
 8006b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b06:	ea08 0303 	and.w	r3, r8, r3
 8006b0a:	f829 3b02 	strh.w	r3, [r9], #2
      huart->RxXferCount--;
 8006b0e:	f8b4 205e 	ldrh.w	r2, [r4, #94]	@ 0x5e
 8006b12:	b292      	uxth	r2, r2
 8006b14:	3a01      	subs	r2, #1
 8006b16:	b292      	uxth	r2, r2
 8006b18:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8006b1c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	b18b      	cbz	r3, 8006b48 <HAL_UART_Receive+0xf6>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006b24:	9600      	str	r6, [sp, #0]
 8006b26:	463b      	mov	r3, r7
 8006b28:	2200      	movs	r2, #0
 8006b2a:	2120      	movs	r1, #32
 8006b2c:	4620      	mov	r0, r4
 8006b2e:	f7ff ff24 	bl	800697a <UART_WaitOnFlagUntilTimeout>
 8006b32:	b9a0      	cbnz	r0, 8006b5e <HAL_UART_Receive+0x10c>
      if (pdata8bits == NULL)
 8006b34:	2d00      	cmp	r5, #0
 8006b36:	d0e4      	beq.n	8006b02 <HAL_UART_Receive+0xb0>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006b38:	6823      	ldr	r3, [r4, #0]
 8006b3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006b3c:	fa5f f388 	uxtb.w	r3, r8
 8006b40:	4013      	ands	r3, r2
 8006b42:	f805 3b01 	strb.w	r3, [r5], #1
        pdata8bits++;
 8006b46:	e7e2      	b.n	8006b0e <HAL_UART_Receive+0xbc>
    huart->RxState = HAL_UART_STATE_READY;
 8006b48:	2320      	movs	r3, #32
 8006b4a:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
    return HAL_OK;
 8006b4e:	2000      	movs	r0, #0
 8006b50:	e000      	b.n	8006b54 <HAL_UART_Receive+0x102>
    return HAL_BUSY;
 8006b52:	2002      	movs	r0, #2
}
 8006b54:	b003      	add	sp, #12
 8006b56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8006b5a:	2001      	movs	r0, #1
 8006b5c:	e7fa      	b.n	8006b54 <HAL_UART_Receive+0x102>
        return HAL_TIMEOUT;
 8006b5e:	2003      	movs	r0, #3
 8006b60:	e7f8      	b.n	8006b54 <HAL_UART_Receive+0x102>

08006b62 <UART_CheckIdleState>:
{
 8006b62:	b530      	push	{r4, r5, lr}
 8006b64:	b083      	sub	sp, #12
 8006b66:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 8006b6e:	f7fa ff15 	bl	800199c <HAL_GetTick>
 8006b72:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b74:	6822      	ldr	r2, [r4, #0]
 8006b76:	6812      	ldr	r2, [r2, #0]
 8006b78:	f012 0f08 	tst.w	r2, #8
 8006b7c:	d110      	bne.n	8006ba0 <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b7e:	6823      	ldr	r3, [r4, #0]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f013 0f04 	tst.w	r3, #4
 8006b86:	d119      	bne.n	8006bbc <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8006b88:	2320      	movs	r3, #32
 8006b8a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006b8e:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b92:	2000      	movs	r0, #0
 8006b94:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b96:	6720      	str	r0, [r4, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 8006b98:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8006b9c:	b003      	add	sp, #12
 8006b9e:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ba0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ba4:	9300      	str	r3, [sp, #0]
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006bae:	4620      	mov	r0, r4
 8006bb0:	f7ff fee3 	bl	800697a <UART_WaitOnFlagUntilTimeout>
 8006bb4:	2800      	cmp	r0, #0
 8006bb6:	d0e2      	beq.n	8006b7e <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8006bb8:	2003      	movs	r0, #3
 8006bba:	e7ef      	b.n	8006b9c <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bbc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006bc0:	9300      	str	r3, [sp, #0]
 8006bc2:	462b      	mov	r3, r5
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006bca:	4620      	mov	r0, r4
 8006bcc:	f7ff fed5 	bl	800697a <UART_WaitOnFlagUntilTimeout>
 8006bd0:	2800      	cmp	r0, #0
 8006bd2:	d0d9      	beq.n	8006b88 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8006bd4:	2003      	movs	r0, #3
 8006bd6:	e7e1      	b.n	8006b9c <UART_CheckIdleState+0x3a>

08006bd8 <HAL_UART_Init>:
  if (huart == NULL)
 8006bd8:	b378      	cbz	r0, 8006c3a <HAL_UART_Init+0x62>
{
 8006bda:	b510      	push	{r4, lr}
 8006bdc:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006bde:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8006be2:	b30b      	cbz	r3, 8006c28 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8006be4:	2324      	movs	r3, #36	@ 0x24
 8006be6:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8006bea:	6822      	ldr	r2, [r4, #0]
 8006bec:	6813      	ldr	r3, [r2, #0]
 8006bee:	f023 0301 	bic.w	r3, r3, #1
 8006bf2:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006bf4:	4620      	mov	r0, r4
 8006bf6:	f7ff fcf5 	bl	80065e4 <UART_SetConfig>
 8006bfa:	2801      	cmp	r0, #1
 8006bfc:	d013      	beq.n	8006c26 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bfe:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006c00:	b9bb      	cbnz	r3, 8006c32 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c02:	6822      	ldr	r2, [r4, #0]
 8006c04:	6853      	ldr	r3, [r2, #4]
 8006c06:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8006c0a:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c0c:	6822      	ldr	r2, [r4, #0]
 8006c0e:	6893      	ldr	r3, [r2, #8]
 8006c10:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8006c14:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8006c16:	6822      	ldr	r2, [r4, #0]
 8006c18:	6813      	ldr	r3, [r2, #0]
 8006c1a:	f043 0301 	orr.w	r3, r3, #1
 8006c1e:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8006c20:	4620      	mov	r0, r4
 8006c22:	f7ff ff9e 	bl	8006b62 <UART_CheckIdleState>
}
 8006c26:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8006c28:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 8006c2c:	f7fb f89c 	bl	8001d68 <HAL_UART_MspInit>
 8006c30:	e7d8      	b.n	8006be4 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8006c32:	4620      	mov	r0, r4
 8006c34:	f7ff fe3c 	bl	80068b0 <UART_AdvFeatureConfig>
 8006c38:	e7e3      	b.n	8006c02 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8006c3a:	2001      	movs	r0, #1
}
 8006c3c:	4770      	bx	lr
	...

08006c40 <UART_Start_Receive_IT>:
{
 8006c40:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 8006c42:	6581      	str	r1, [r0, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8006c44:	f8a0 205c 	strh.w	r2, [r0, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8006c48:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	6743      	str	r3, [r0, #116]	@ 0x74
  UART_MASK_COMPUTATION(huart);
 8006c50:	6883      	ldr	r3, [r0, #8]
 8006c52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c56:	d006      	beq.n	8006c66 <UART_Start_Receive_IT+0x26>
 8006c58:	b9a3      	cbnz	r3, 8006c84 <UART_Start_Receive_IT+0x44>
 8006c5a:	6903      	ldr	r3, [r0, #16]
 8006c5c:	b973      	cbnz	r3, 8006c7c <UART_Start_Receive_IT+0x3c>
 8006c5e:	23ff      	movs	r3, #255	@ 0xff
 8006c60:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8006c64:	e014      	b.n	8006c90 <UART_Start_Receive_IT+0x50>
 8006c66:	6903      	ldr	r3, [r0, #16]
 8006c68:	b923      	cbnz	r3, 8006c74 <UART_Start_Receive_IT+0x34>
 8006c6a:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8006c6e:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8006c72:	e00d      	b.n	8006c90 <UART_Start_Receive_IT+0x50>
 8006c74:	23ff      	movs	r3, #255	@ 0xff
 8006c76:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8006c7a:	e009      	b.n	8006c90 <UART_Start_Receive_IT+0x50>
 8006c7c:	237f      	movs	r3, #127	@ 0x7f
 8006c7e:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8006c82:	e005      	b.n	8006c90 <UART_Start_Receive_IT+0x50>
 8006c84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c88:	d02d      	beq.n	8006ce6 <UART_Start_Receive_IT+0xa6>
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c90:	2300      	movs	r3, #0
 8006c92:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c96:	2322      	movs	r3, #34	@ 0x22
 8006c98:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c9c:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9e:	f101 0308 	add.w	r3, r1, #8
 8006ca2:	e853 3f00 	ldrex	r3, [r3]
 8006ca6:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006caa:	3108      	adds	r1, #8
 8006cac:	e841 3400 	strex	r4, r3, [r1]
 8006cb0:	2c00      	cmp	r4, #0
 8006cb2:	d1f3      	bne.n	8006c9c <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006cb4:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8006cb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006cba:	d01e      	beq.n	8006cfa <UART_Start_Receive_IT+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cbc:	6883      	ldr	r3, [r0, #8]
 8006cbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cc2:	d042      	beq.n	8006d4a <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT;
 8006cc4:	4b29      	ldr	r3, [pc, #164]	@ (8006d6c <UART_Start_Receive_IT+0x12c>)
 8006cc6:	6743      	str	r3, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006cc8:	6903      	ldr	r3, [r0, #16]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d043      	beq.n	8006d56 <UART_Start_Receive_IT+0x116>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006cce:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd0:	e852 3f00 	ldrex	r3, [r2]
 8006cd4:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd8:	e842 3100 	strex	r1, r3, [r2]
 8006cdc:	2900      	cmp	r1, #0
 8006cde:	d1f6      	bne.n	8006cce <UART_Start_Receive_IT+0x8e>
}
 8006ce0:	2000      	movs	r0, #0
 8006ce2:	bc10      	pop	{r4}
 8006ce4:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8006ce6:	6903      	ldr	r3, [r0, #16]
 8006ce8:	b91b      	cbnz	r3, 8006cf2 <UART_Start_Receive_IT+0xb2>
 8006cea:	237f      	movs	r3, #127	@ 0x7f
 8006cec:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8006cf0:	e7ce      	b.n	8006c90 <UART_Start_Receive_IT+0x50>
 8006cf2:	233f      	movs	r3, #63	@ 0x3f
 8006cf4:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8006cf8:	e7ca      	b.n	8006c90 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006cfa:	f8b0 3068 	ldrh.w	r3, [r0, #104]	@ 0x68
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d8dc      	bhi.n	8006cbc <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d02:	6883      	ldr	r3, [r0, #8]
 8006d04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d08:	d019      	beq.n	8006d3e <UART_Start_Receive_IT+0xfe>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006d0a:	4b19      	ldr	r3, [pc, #100]	@ (8006d70 <UART_Start_Receive_IT+0x130>)
 8006d0c:	6743      	str	r3, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006d0e:	6903      	ldr	r3, [r0, #16]
 8006d10:	b143      	cbz	r3, 8006d24 <UART_Start_Receive_IT+0xe4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d12:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d14:	e852 3f00 	ldrex	r3, [r2]
 8006d18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1c:	e842 3100 	strex	r1, r3, [r2]
 8006d20:	2900      	cmp	r1, #0
 8006d22:	d1f6      	bne.n	8006d12 <UART_Start_Receive_IT+0xd2>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006d24:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d26:	f102 0308 	add.w	r3, r2, #8
 8006d2a:	e853 3f00 	ldrex	r3, [r3]
 8006d2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d32:	3208      	adds	r2, #8
 8006d34:	e842 3100 	strex	r1, r3, [r2]
 8006d38:	2900      	cmp	r1, #0
 8006d3a:	d1f3      	bne.n	8006d24 <UART_Start_Receive_IT+0xe4>
 8006d3c:	e7d0      	b.n	8006ce0 <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d3e:	6903      	ldr	r3, [r0, #16]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d1e2      	bne.n	8006d0a <UART_Start_Receive_IT+0xca>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006d44:	4b0b      	ldr	r3, [pc, #44]	@ (8006d74 <UART_Start_Receive_IT+0x134>)
 8006d46:	6743      	str	r3, [r0, #116]	@ 0x74
 8006d48:	e7e1      	b.n	8006d0e <UART_Start_Receive_IT+0xce>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d4a:	6903      	ldr	r3, [r0, #16]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1b9      	bne.n	8006cc4 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 8006d50:	4b09      	ldr	r3, [pc, #36]	@ (8006d78 <UART_Start_Receive_IT+0x138>)
 8006d52:	6743      	str	r3, [r0, #116]	@ 0x74
 8006d54:	e7b8      	b.n	8006cc8 <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006d56:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d58:	e852 3f00 	ldrex	r3, [r2]
 8006d5c:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d60:	e842 3100 	strex	r1, r3, [r2]
 8006d64:	2900      	cmp	r1, #0
 8006d66:	d1f6      	bne.n	8006d56 <UART_Start_Receive_IT+0x116>
 8006d68:	e7ba      	b.n	8006ce0 <UART_Start_Receive_IT+0xa0>
 8006d6a:	bf00      	nop
 8006d6c:	0800609d 	.word	0x0800609d
 8006d70:	08006251 	.word	0x08006251
 8006d74:	0800641d 	.word	0x0800641d
 8006d78:	08006179 	.word	0x08006179

08006d7c <HAL_UART_Receive_IT>:
{
 8006d7c:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d7e:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 8006d82:	2b20      	cmp	r3, #32
 8006d84:	d117      	bne.n	8006db6 <HAL_UART_Receive_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 8006d86:	b1c1      	cbz	r1, 8006dba <HAL_UART_Receive_IT+0x3e>
 8006d88:	b1ca      	cbz	r2, 8006dbe <HAL_UART_Receive_IT+0x42>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	66c3      	str	r3, [r0, #108]	@ 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006d8e:	6803      	ldr	r3, [r0, #0]
 8006d90:	4c0c      	ldr	r4, [pc, #48]	@ (8006dc4 <HAL_UART_Receive_IT+0x48>)
 8006d92:	42a3      	cmp	r3, r4
 8006d94:	d00c      	beq.n	8006db0 <HAL_UART_Receive_IT+0x34>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8006d9c:	d008      	beq.n	8006db0 <HAL_UART_Receive_IT+0x34>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006d9e:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da0:	e854 3f00 	ldrex	r3, [r4]
 8006da4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da8:	e844 3500 	strex	r5, r3, [r4]
 8006dac:	2d00      	cmp	r5, #0
 8006dae:	d1f6      	bne.n	8006d9e <HAL_UART_Receive_IT+0x22>
    return (UART_Start_Receive_IT(huart, pData, Size));
 8006db0:	f7ff ff46 	bl	8006c40 <UART_Start_Receive_IT>
 8006db4:	e000      	b.n	8006db8 <HAL_UART_Receive_IT+0x3c>
    return HAL_BUSY;
 8006db6:	2002      	movs	r0, #2
}
 8006db8:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8006dba:	2001      	movs	r0, #1
 8006dbc:	e7fc      	b.n	8006db8 <HAL_UART_Receive_IT+0x3c>
 8006dbe:	2001      	movs	r0, #1
 8006dc0:	e7fa      	b.n	8006db8 <HAL_UART_Receive_IT+0x3c>
 8006dc2:	bf00      	nop
 8006dc4:	40008000 	.word	0x40008000

08006dc8 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8006dc8:	b082      	sub	sp, #8
 8006dca:	ab02      	add	r3, sp, #8
 8006dcc:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8006dd0:	6802      	ldr	r2, [r0, #0]
 8006dd2:	6853      	ldr	r3, [r2, #4]
 8006dd4:	f023 0310 	bic.w	r3, r3, #16
 8006dd8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8006ddc:	430b      	orrs	r3, r1
 8006dde:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8006de0:	6802      	ldr	r2, [r0, #0]
 8006de2:	6853      	ldr	r3, [r2, #4]
 8006de4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006de8:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8006dec:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006df0:	6053      	str	r3, [r2, #4]
}
 8006df2:	b002      	add	sp, #8
 8006df4:	4770      	bx	lr
	...

08006df8 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006df8:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8006dfa:	b92b      	cbnz	r3, 8006e08 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006e02:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
 8006e06:	4770      	bx	lr
{
 8006e08:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e0a:	6803      	ldr	r3, [r0, #0]
 8006e0c:	689a      	ldr	r2, [r3, #8]
 8006e0e:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e12:	6899      	ldr	r1, [r3, #8]
 8006e14:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e16:	4d09      	ldr	r5, [pc, #36]	@ (8006e3c <UARTEx_SetNbDataToProcess+0x44>)
 8006e18:	5c6b      	ldrb	r3, [r5, r1]
 8006e1a:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e1c:	4c08      	ldr	r4, [pc, #32]	@ (8006e40 <UARTEx_SetNbDataToProcess+0x48>)
 8006e1e:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e20:	fb93 f3f1 	sdiv	r3, r3, r1
 8006e24:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e28:	5cab      	ldrb	r3, [r5, r2]
 8006e2a:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e2c:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e32:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
  }
}
 8006e36:	bc30      	pop	{r4, r5}
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop
 8006e3c:	08012cfc 	.word	0x08012cfc
 8006e40:	08012cf4 	.word	0x08012cf4

08006e44 <HAL_UARTEx_WakeupCallback>:
}
 8006e44:	4770      	bx	lr

08006e46 <HAL_UARTEx_RxFifoFullCallback>:
}
 8006e46:	4770      	bx	lr

08006e48 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8006e48:	4770      	bx	lr

08006e4a <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 8006e4a:	b510      	push	{r4, lr}
 8006e4c:	b084      	sub	sp, #16
 8006e4e:	ab04      	add	r3, sp, #16
 8006e50:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 8006e54:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d035      	beq.n	8006ec8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 8006e5c:	4604      	mov	r4, r0
 8006e5e:	2301      	movs	r3, #1
 8006e60:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8006e64:	2324      	movs	r3, #36	@ 0x24
 8006e66:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8006e6a:	6802      	ldr	r2, [r0, #0]
 8006e6c:	6813      	ldr	r3, [r2, #0]
 8006e6e:	f023 0301 	bic.w	r3, r3, #1
 8006e72:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8006e74:	6801      	ldr	r1, [r0, #0]
 8006e76:	688b      	ldr	r3, [r1, #8]
 8006e78:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006e7c:	9a02      	ldr	r2, [sp, #8]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8006e82:	b1aa      	cbz	r2, 8006eb0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 8006e84:	6822      	ldr	r2, [r4, #0]
 8006e86:	6813      	ldr	r3, [r2, #0]
 8006e88:	f043 0301 	orr.w	r3, r3, #1
 8006e8c:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8006e8e:	f7fa fd85 	bl	800199c <HAL_GetTick>
 8006e92:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e94:	f06f 427e 	mvn.w	r2, #4261412864	@ 0xfe000000
 8006e98:	9200      	str	r2, [sp, #0]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	f7ff fd6a 	bl	800697a <UART_WaitOnFlagUntilTimeout>
 8006ea6:	b948      	cbnz	r0, 8006ebc <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 8006ea8:	2320      	movs	r3, #32
 8006eaa:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
 8006eae:	e006      	b.n	8006ebe <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8006eb0:	ab04      	add	r3, sp, #16
 8006eb2:	e913 0006 	ldmdb	r3, {r1, r2}
 8006eb6:	f7ff ff87 	bl	8006dc8 <UARTEx_Wakeup_AddressConfig>
 8006eba:	e7e3      	b.n	8006e84 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 8006ebc:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8006ec4:	b004      	add	sp, #16
 8006ec6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8006ec8:	2002      	movs	r0, #2
 8006eca:	e7fb      	b.n	8006ec4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

08006ecc <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8006ecc:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d010      	beq.n	8006ef6 <HAL_UARTEx_EnableStopMode+0x2a>
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8006eda:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006edc:	e852 3f00 	ldrex	r3, [r2]
 8006ee0:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee4:	e842 3100 	strex	r1, r3, [r2]
 8006ee8:	2900      	cmp	r1, #0
 8006eea:	d1f6      	bne.n	8006eda <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 8006eec:	2300      	movs	r3, #0
 8006eee:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  return HAL_OK;
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	4770      	bx	lr
  __HAL_LOCK(huart);
 8006ef6:	2002      	movs	r0, #2
}
 8006ef8:	4770      	bx	lr

08006efa <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 8006efa:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d01d      	beq.n	8006f3e <HAL_UARTEx_EnableFifoMode+0x44>
{
 8006f02:	b510      	push	{r4, lr}
 8006f04:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8006f06:	2301      	movs	r3, #1
 8006f08:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8006f0c:	2324      	movs	r3, #36	@ 0x24
 8006f0e:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f12:	6802      	ldr	r2, [r0, #0]
 8006f14:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8006f16:	6811      	ldr	r1, [r2, #0]
 8006f18:	f021 0101 	bic.w	r1, r1, #1
 8006f1c:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006f1e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8006f22:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8006f26:	6642      	str	r2, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f28:	6802      	ldr	r2, [r0, #0]
 8006f2a:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 8006f2c:	f7ff ff64 	bl	8006df8 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8006f30:	2320      	movs	r3, #32
 8006f32:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8006f36:	2000      	movs	r0, #0
 8006f38:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8006f3c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8006f3e:	2002      	movs	r0, #2
}
 8006f40:	4770      	bx	lr

08006f42 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8006f42:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006f44:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d01d      	beq.n	8006f88 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8006f4c:	4604      	mov	r4, r0
 8006f4e:	2301      	movs	r3, #1
 8006f50:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8006f54:	2324      	movs	r3, #36	@ 0x24
 8006f56:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f5a:	6803      	ldr	r3, [r0, #0]
 8006f5c:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	f022 0201 	bic.w	r2, r2, #1
 8006f64:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006f66:	6802      	ldr	r2, [r0, #0]
 8006f68:	6893      	ldr	r3, [r2, #8]
 8006f6a:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8006f6e:	4319      	orrs	r1, r3
 8006f70:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006f72:	f7ff ff41 	bl	8006df8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f76:	6823      	ldr	r3, [r4, #0]
 8006f78:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006f7a:	2320      	movs	r3, #32
 8006f7c:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8006f80:	2000      	movs	r0, #0
 8006f82:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8006f86:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006f88:	2002      	movs	r0, #2
 8006f8a:	e7fc      	b.n	8006f86 <HAL_UARTEx_SetTxFifoThreshold+0x44>

08006f8c <HAL_UARTEx_SetRxFifoThreshold>:
{
 8006f8c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006f8e:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d01d      	beq.n	8006fd2 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8006f96:	4604      	mov	r4, r0
 8006f98:	2301      	movs	r3, #1
 8006f9a:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8006f9e:	2324      	movs	r3, #36	@ 0x24
 8006fa0:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fa4:	6803      	ldr	r3, [r0, #0]
 8006fa6:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	f022 0201 	bic.w	r2, r2, #1
 8006fae:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006fb0:	6802      	ldr	r2, [r0, #0]
 8006fb2:	6893      	ldr	r3, [r2, #8]
 8006fb4:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 8006fb8:	4319      	orrs	r1, r3
 8006fba:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006fbc:	f7ff ff1c 	bl	8006df8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fc0:	6823      	ldr	r3, [r4, #0]
 8006fc2:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006fc4:	2320      	movs	r3, #32
 8006fc6:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8006fca:	2000      	movs	r0, #0
 8006fcc:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8006fd0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006fd2:	2002      	movs	r0, #2
 8006fd4:	e7fc      	b.n	8006fd0 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

08006fd8 <LmHandlerPackageIsInitialized>:
    }
}

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 8006fd8:	2804      	cmp	r0, #4
 8006fda:	d807      	bhi.n	8006fec <LmHandlerPackageIsInitialized+0x14>
{
 8006fdc:	b508      	push	{r3, lr}
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 8006fde:	4b05      	ldr	r3, [pc, #20]	@ (8006ff4 <LmHandlerPackageIsInitialized+0x1c>)
 8006fe0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	b11b      	cbz	r3, 8006ff0 <LmHandlerPackageIsInitialized+0x18>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 8006fe8:	4798      	blx	r3
    }
    else
    {
        return false;
    }
}
 8006fea:	bd08      	pop	{r3, pc}
        return false;
 8006fec:	2000      	movs	r0, #0
}
 8006fee:	4770      	bx	lr
        return false;
 8006ff0:	2000      	movs	r0, #0
 8006ff2:	e7fa      	b.n	8006fea <LmHandlerPackageIsInitialized+0x12>
 8006ff4:	200005f0 	.word	0x200005f0

08006ff8 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 8006ff8:	b570      	push	{r4, r5, r6, lr}
 8006ffa:	4605      	mov	r5, r0
 8006ffc:	460e      	mov	r6, r1
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006ffe:	2400      	movs	r4, #0
 8007000:	e005      	b.n	800700e <LmHandlerPackagesNotify+0x16>
        {
            switch( notifyType )
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 8007002:	699b      	ldr	r3, [r3, #24]
 8007004:	b10b      	cbz	r3, 800700a <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 8007006:	4630      	mov	r0, r6
 8007008:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800700a:	3401      	adds	r4, #1
 800700c:	b264      	sxtb	r4, r4
 800700e:	2c04      	cmp	r4, #4
 8007010:	dc24      	bgt.n	800705c <LmHandlerPackagesNotify+0x64>
        if( LmHandlerPackages[i] != NULL )
 8007012:	4b13      	ldr	r3, [pc, #76]	@ (8007060 <LmHandlerPackagesNotify+0x68>)
 8007014:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d0f6      	beq.n	800700a <LmHandlerPackagesNotify+0x12>
            switch( notifyType )
 800701c:	2d03      	cmp	r5, #3
 800701e:	d8f4      	bhi.n	800700a <LmHandlerPackagesNotify+0x12>
 8007020:	a201      	add	r2, pc, #4	@ (adr r2, 8007028 <LmHandlerPackagesNotify+0x30>)
 8007022:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 8007026:	bf00      	nop
 8007028:	08007003 	.word	0x08007003
 800702c:	08007039 	.word	0x08007039
 8007030:	08007045 	.word	0x08007045
 8007034:	08007051 	.word	0x08007051
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 8007038:	69db      	ldr	r3, [r3, #28]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d0e5      	beq.n	800700a <LmHandlerPackagesNotify+0x12>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800703e:	4630      	mov	r0, r6
 8007040:	4798      	blx	r3
 8007042:	e7e2      	b.n	800700a <LmHandlerPackagesNotify+0x12>
                        }
                        break;
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 8007044:	6a1b      	ldr	r3, [r3, #32]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d0df      	beq.n	800700a <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800704a:	4630      	mov	r0, r6
 800704c:	4798      	blx	r3
 800704e:	e7dc      	b.n	800700a <LmHandlerPackagesNotify+0x12>
                        }
                        break;
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 8007050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007052:	2b00      	cmp	r3, #0
 8007054:	d0d9      	beq.n	800700a <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 8007056:	4630      	mov	r0, r6
 8007058:	4798      	blx	r3
 800705a:	e7d6      	b.n	800700a <LmHandlerPackagesNotify+0x12>
                        break;
                    }
            }
        }
    }
}
 800705c:	bd70      	pop	{r4, r5, r6, pc}
 800705e:	bf00      	nop
 8007060:	200005f0 	.word	0x200005f0

08007064 <MlmeIndication>:
{
 8007064:	b510      	push	{r4, lr}
 8007066:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 0;
 8007068:	4b11      	ldr	r3, [pc, #68]	@ (80070b0 <MlmeIndication+0x4c>)
 800706a:	2200      	movs	r2, #0
 800706c:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800706e:	7842      	ldrb	r2, [r0, #1]
 8007070:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 8007072:	f990 2002 	ldrsb.w	r2, [r0, #2]
 8007076:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8007078:	f9b1 2000 	ldrsh.w	r2, [r1]
 800707c:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800707e:	f991 2002 	ldrsb.w	r2, [r1, #2]
 8007082:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 8007084:	78ca      	ldrb	r2, [r1, #3]
 8007086:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 8007088:	6842      	ldr	r2, [r0, #4]
 800708a:	60da      	str	r2, [r3, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 800708c:	4b09      	ldr	r3, [pc, #36]	@ (80070b4 <MlmeIndication+0x50>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007092:	b13b      	cbz	r3, 80070a4 <MlmeIndication+0x40>
 8007094:	7802      	ldrb	r2, [r0, #0]
 8007096:	2a0a      	cmp	r2, #10
 8007098:	d004      	beq.n	80070a4 <MlmeIndication+0x40>
 800709a:	2a0e      	cmp	r2, #14
 800709c:	d002      	beq.n	80070a4 <MlmeIndication+0x40>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800709e:	4904      	ldr	r1, [pc, #16]	@ (80070b0 <MlmeIndication+0x4c>)
 80070a0:	2000      	movs	r0, #0
 80070a2:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 80070a4:	4621      	mov	r1, r4
 80070a6:	2003      	movs	r0, #3
 80070a8:	f7ff ffa6 	bl	8006ff8 <LmHandlerPackagesNotify>
}
 80070ac:	bd10      	pop	{r4, pc}
 80070ae:	bf00      	nop
 80070b0:	2000007c 	.word	0x2000007c
 80070b4:	200005d4 	.word	0x200005d4

080070b8 <McpsConfirm>:
{
 80070b8:	b510      	push	{r4, lr}
 80070ba:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 1;
 80070bc:	4b0d      	ldr	r3, [pc, #52]	@ (80070f4 <McpsConfirm+0x3c>)
 80070be:	2201      	movs	r2, #1
 80070c0:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 80070c2:	7842      	ldrb	r2, [r0, #1]
 80070c4:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 80070c6:	f990 2002 	ldrsb.w	r2, [r0, #2]
 80070ca:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 80070cc:	68c2      	ldr	r2, [r0, #12]
 80070ce:	60da      	str	r2, [r3, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 80070d0:	f990 2003 	ldrsb.w	r2, [r0, #3]
 80070d4:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 80070d6:	6902      	ldr	r2, [r0, #16]
 80070d8:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 80070da:	7902      	ldrb	r2, [r0, #4]
 80070dc:	725a      	strb	r2, [r3, #9]
    if( LmHandlerCallbacks->OnTxData != NULL )
 80070de:	4b06      	ldr	r3, [pc, #24]	@ (80070f8 <McpsConfirm+0x40>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070e4:	b10b      	cbz	r3, 80070ea <McpsConfirm+0x32>
        LmHandlerCallbacks->OnTxData( &TxParams );
 80070e6:	4803      	ldr	r0, [pc, #12]	@ (80070f4 <McpsConfirm+0x3c>)
 80070e8:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 80070ea:	4621      	mov	r1, r4
 80070ec:	2000      	movs	r0, #0
 80070ee:	f7ff ff83 	bl	8006ff8 <LmHandlerPackagesNotify>
}
 80070f2:	bd10      	pop	{r4, pc}
 80070f4:	20000090 	.word	0x20000090
 80070f8:	200005d4 	.word	0x200005d4

080070fc <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 80070fc:	b510      	push	{r4, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80070fe:	2400      	movs	r4, #0
 8007100:	e001      	b.n	8007106 <LmHandlerPackageIsTxPending+0xa>
 8007102:	3401      	adds	r4, #1
 8007104:	b264      	sxtb	r4, r4
 8007106:	2c04      	cmp	r4, #4
 8007108:	dc0a      	bgt.n	8007120 <LmHandlerPackageIsTxPending+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
#else
        if( LmHandlerPackages[i] != NULL )
 800710a:	4b07      	ldr	r3, [pc, #28]	@ (8007128 <LmHandlerPackageIsTxPending+0x2c>)
 800710c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d0f6      	beq.n	8007102 <LmHandlerPackageIsTxPending+0x6>
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	4798      	blx	r3
 8007118:	4603      	mov	r3, r0
 800711a:	2800      	cmp	r0, #0
 800711c:	d0f1      	beq.n	8007102 <LmHandlerPackageIsTxPending+0x6>
 800711e:	e000      	b.n	8007122 <LmHandlerPackageIsTxPending+0x26>
            {
                return true;
            }
        }
    }
    return false;
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	bd10      	pop	{r4, pc}
 8007126:	bf00      	nop
 8007128:	200005f0 	.word	0x200005f0

0800712c <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800712c:	b538      	push	{r3, r4, r5, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800712e:	2400      	movs	r4, #0
 8007130:	e001      	b.n	8007136 <LmHandlerPackagesProcess+0xa>
 8007132:	3401      	adds	r4, #1
 8007134:	b264      	sxtb	r4, r4
 8007136:	2c04      	cmp	r4, #4
 8007138:	dc12      	bgt.n	8007160 <LmHandlerPackagesProcess+0x34>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800713a:	4b0a      	ldr	r3, [pc, #40]	@ (8007164 <LmHandlerPackagesProcess+0x38>)
 800713c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d0f6      	beq.n	8007132 <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8007144:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 8007146:	2b00      	cmp	r3, #0
 8007148:	d0f3      	beq.n	8007132 <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800714a:	b2e0      	uxtb	r0, r4
 800714c:	f7ff ff44 	bl	8006fd8 <LmHandlerPackageIsInitialized>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8007150:	2800      	cmp	r0, #0
 8007152:	d0ee      	beq.n	8007132 <LmHandlerPackagesProcess+0x6>
        {
            LmHandlerPackages[i]->Process( );
 8007154:	4b03      	ldr	r3, [pc, #12]	@ (8007164 <LmHandlerPackagesProcess+0x38>)
 8007156:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	4798      	blx	r3
 800715e:	e7e8      	b.n	8007132 <LmHandlerPackagesProcess+0x6>
        }
    }
}
 8007160:	bd38      	pop	{r3, r4, r5, pc}
 8007162:	bf00      	nop
 8007164:	200005f0 	.word	0x200005f0

08007168 <LmHandlerOnTxFrameCtrlChanged>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void LmHandlerOnTxFrameCtrlChanged( LmHandlerMsgTypes_t isTxConfirmed )
{
 8007168:	b508      	push	{r3, lr}
    LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800716a:	4b04      	ldr	r3, [pc, #16]	@ (800717c <LmHandlerOnTxFrameCtrlChanged+0x14>)
 800716c:	70d8      	strb	r0, [r3, #3]

    if (LmHandlerCallbacks->OnTxFrameCtrlChanged != NULL)
 800716e:	4b04      	ldr	r3, [pc, #16]	@ (8007180 <LmHandlerOnTxFrameCtrlChanged+0x18>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007174:	b103      	cbz	r3, 8007178 <LmHandlerOnTxFrameCtrlChanged+0x10>
    {
        LmHandlerCallbacks->OnTxFrameCtrlChanged( isTxConfirmed );
 8007176:	4798      	blx	r3
    }
}
 8007178:	bd08      	pop	{r3, pc}
 800717a:	bf00      	nop
 800717c:	200005d8 	.word	0x200005d8
 8007180:	200005d4 	.word	0x200005d4

08007184 <LmHandlerOnPingSlotPeriodicityChanged>:

static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity )
{
 8007184:	b508      	push	{r3, lr}
    LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 8007186:	4b04      	ldr	r3, [pc, #16]	@ (8007198 <LmHandlerOnPingSlotPeriodicityChanged+0x14>)
 8007188:	7418      	strb	r0, [r3, #16]

    if (LmHandlerCallbacks->OnPingSlotPeriodicityChanged != NULL)
 800718a:	4b04      	ldr	r3, [pc, #16]	@ (800719c <LmHandlerOnPingSlotPeriodicityChanged+0x18>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007190:	b103      	cbz	r3, 8007194 <LmHandlerOnPingSlotPeriodicityChanged+0x10>
    {
        LmHandlerCallbacks->OnPingSlotPeriodicityChanged( pingSlotPeriodicity );
 8007192:	4798      	blx	r3
    }
}
 8007194:	bd08      	pop	{r3, pc}
 8007196:	bf00      	nop
 8007198:	200005d8 	.word	0x200005d8
 800719c:	200005d4 	.word	0x200005d4

080071a0 <LmHandlerJoin>:
{
 80071a0:	b530      	push	{r4, r5, lr}
 80071a2:	b091      	sub	sp, #68	@ 0x44
 80071a4:	460c      	mov	r4, r1
    mlmeReq.Type = MLME_JOIN;
 80071a6:	2301      	movs	r3, #1
 80071a8:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 80071ac:	4b33      	ldr	r3, [pc, #204]	@ (800727c <LmHandlerJoin+0xdc>)
 80071ae:	f993 2004 	ldrsb.w	r2, [r3, #4]
 80071b2:	f88d 2031 	strb.w	r2, [sp, #49]	@ 0x31
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 80071b6:	f993 1005 	ldrsb.w	r1, [r3, #5]
 80071ba:	f88d 1032 	strb.w	r1, [sp, #50]	@ 0x32
    if( mode == ACTIVATION_TYPE_OTAA )
 80071be:	2802      	cmp	r0, #2
 80071c0:	d022      	beq.n	8007208 <LmHandlerJoin+0x68>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 80071c2:	2001      	movs	r0, #1
 80071c4:	f88d 0030 	strb.w	r0, [sp, #48]	@ 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 80071c8:	4b2d      	ldr	r3, [pc, #180]	@ (8007280 <LmHandlerJoin+0xe0>)
 80071ca:	71d8      	strb	r0, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 80071cc:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 80071ce:	7159      	strb	r1, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 80071d0:	2100      	movs	r1, #0
 80071d2:	7199      	strb	r1, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 80071d4:	721c      	strb	r4, [r3, #8]
        if( CtxRestoreDone == false )
 80071d6:	4b2b      	ldr	r3, [pc, #172]	@ (8007284 <LmHandlerJoin+0xe4>)
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	b1f3      	cbz	r3, 800721a <LmHandlerJoin+0x7a>
        LoRaMacStart();
 80071dc:	f003 fb0a 	bl	800a7f4 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 80071e0:	2301      	movs	r3, #1
 80071e2:	f88d 3004 	strb.w	r3, [sp, #4]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 80071e6:	f88d 3008 	strb.w	r3, [sp, #8]
        LoRaMacMibSetRequestConfirm( &mibReq );
 80071ea:	a801      	add	r0, sp, #4
 80071ec:	f003 fd3e 	bl	800ac6c <LoRaMacMibSetRequestConfirm>
    if( ( CtxRestoreDone == false ) || ( forceRejoin == true ) )
 80071f0:	4b24      	ldr	r3, [pc, #144]	@ (8007284 <LmHandlerJoin+0xe4>)
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	b103      	cbz	r3, 80071f8 <LmHandlerJoin+0x58>
 80071f6:	b114      	cbz	r4, 80071fe <LmHandlerJoin+0x5e>
        LoRaMacMlmeRequest( &mlmeReq );
 80071f8:	a80b      	add	r0, sp, #44	@ 0x2c
 80071fa:	f004 f807 	bl	800b20c <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 80071fe:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007200:	4b21      	ldr	r3, [pc, #132]	@ (8007288 <LmHandlerJoin+0xe8>)
 8007202:	601a      	str	r2, [r3, #0]
}
 8007204:	b011      	add	sp, #68	@ 0x44
 8007206:	bd30      	pop	{r4, r5, pc}
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8007208:	2202      	movs	r2, #2
 800720a:	f88d 2030 	strb.w	r2, [sp, #48]	@ 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800720e:	4b1c      	ldr	r3, [pc, #112]	@ (8007280 <LmHandlerJoin+0xe0>)
 8007210:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 8007212:	721c      	strb	r4, [r3, #8]
        LoRaMacStart();
 8007214:	f003 faee 	bl	800a7f4 <LoRaMacStart>
 8007218:	e7ea      	b.n	80071f0 <LmHandlerJoin+0x50>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800721a:	231f      	movs	r3, #31
 800721c:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 8007220:	f88d 2008 	strb.w	r2, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8007224:	a801      	add	r0, sp, #4
 8007226:	f003 fd21 	bl	800ac6c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 800722a:	2320      	movs	r3, #32
 800722c:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 8007230:	4d12      	ldr	r5, [pc, #72]	@ (800727c <LmHandlerJoin+0xdc>)
 8007232:	f995 3004 	ldrsb.w	r3, [r5, #4]
 8007236:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800723a:	a801      	add	r0, sp, #4
 800723c:	f003 fd16 	bl	800ac6c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 8007240:	2322      	movs	r3, #34	@ 0x22
 8007242:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 8007246:	f995 3005 	ldrsb.w	r3, [r5, #5]
 800724a:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800724e:	a801      	add	r0, sp, #4
 8007250:	f003 fd0c 	bl	800ac6c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_TX_POWER;
 8007254:	2321      	movs	r3, #33	@ 0x21
 8007256:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800725a:	f995 3005 	ldrsb.w	r3, [r5, #5]
 800725e:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8007262:	a801      	add	r0, sp, #4
 8007264:	f003 fd02 	bl	800ac6c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 8007268:	2329      	movs	r3, #41	@ 0x29
 800726a:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800726e:	4b07      	ldr	r3, [pc, #28]	@ (800728c <LmHandlerJoin+0xec>)
 8007270:	9302      	str	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8007272:	a801      	add	r0, sp, #4
 8007274:	f003 fcfa 	bl	800ac6c <LoRaMacMibSetRequestConfirm>
 8007278:	e7b0      	b.n	80071dc <LmHandlerJoin+0x3c>
 800727a:	bf00      	nop
 800727c:	200005d8 	.word	0x200005d8
 8007280:	200000ac 	.word	0x200000ac
 8007284:	200004b0 	.word	0x200004b0
 8007288:	200005a8 	.word	0x200005a8
 800728c:	01000400 	.word	0x01000400

08007290 <LmHandlerDeviceTimeReq>:
{
 8007290:	b500      	push	{lr}
 8007292:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_DEVICE_TIME;
 8007294:	2309      	movs	r3, #9
 8007296:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 800729a:	a801      	add	r0, sp, #4
 800729c:	f003 ffb6 	bl	800b20c <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 80072a0:	9a05      	ldr	r2, [sp, #20]
 80072a2:	4b04      	ldr	r3, [pc, #16]	@ (80072b4 <LmHandlerDeviceTimeReq+0x24>)
 80072a4:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 80072a6:	b910      	cbnz	r0, 80072ae <LmHandlerDeviceTimeReq+0x1e>
}
 80072a8:	b007      	add	sp, #28
 80072aa:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 80072ae:	f04f 30ff 	mov.w	r0, #4294967295
 80072b2:	e7f9      	b.n	80072a8 <LmHandlerDeviceTimeReq+0x18>
 80072b4:	200005a8 	.word	0x200005a8

080072b8 <LmHandlerGetDutyCycleWaitTime>:
}
 80072b8:	4b01      	ldr	r3, [pc, #4]	@ (80072c0 <LmHandlerGetDutyCycleWaitTime+0x8>)
 80072ba:	6818      	ldr	r0, [r3, #0]
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop
 80072c0:	200005a8 	.word	0x200005a8

080072c4 <LmHandlerJoinStatus>:
{
 80072c4:	b500      	push	{lr}
 80072c6:	b08b      	sub	sp, #44	@ 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 80072c8:	2301      	movs	r3, #1
 80072ca:	f88d 3000 	strb.w	r3, [sp]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 80072ce:	4668      	mov	r0, sp
 80072d0:	f003 fb58 	bl	800a984 <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 80072d4:	b920      	cbnz	r0, 80072e0 <LmHandlerJoinStatus+0x1c>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 80072d6:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80072da:	b110      	cbz	r0, 80072e2 <LmHandlerJoinStatus+0x1e>
            return LORAMAC_HANDLER_SET;
 80072dc:	2001      	movs	r0, #1
 80072de:	e000      	b.n	80072e2 <LmHandlerJoinStatus+0x1e>
        return LORAMAC_HANDLER_RESET;
 80072e0:	2000      	movs	r0, #0
}
 80072e2:	b00b      	add	sp, #44	@ 0x2c
 80072e4:	f85d fb04 	ldr.w	pc, [sp], #4

080072e8 <LmHandlerIsBusy>:
{
 80072e8:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == true )
 80072ea:	f003 f831 	bl	800a350 <LoRaMacIsBusy>
 80072ee:	b100      	cbz	r0, 80072f2 <LmHandlerIsBusy+0xa>
}
 80072f0:	bd08      	pop	{r3, pc}
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 80072f2:	f7ff ffe7 	bl	80072c4 <LmHandlerJoinStatus>
 80072f6:	2801      	cmp	r0, #1
 80072f8:	d006      	beq.n	8007308 <LmHandlerIsBusy+0x20>
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 80072fa:	4b05      	ldr	r3, [pc, #20]	@ (8007310 <LmHandlerIsBusy+0x28>)
 80072fc:	7a19      	ldrb	r1, [r3, #8]
 80072fe:	79d8      	ldrb	r0, [r3, #7]
 8007300:	f7ff ff4e 	bl	80071a0 <LmHandlerJoin>
        return true;
 8007304:	2001      	movs	r0, #1
 8007306:	e7f3      	b.n	80072f0 <LmHandlerIsBusy+0x8>
    if( LmHandlerPackageIsTxPending( ) == true )
 8007308:	f7ff fef8 	bl	80070fc <LmHandlerPackageIsTxPending>
 800730c:	e7f0      	b.n	80072f0 <LmHandlerIsBusy+0x8>
 800730e:	bf00      	nop
 8007310:	200000ac 	.word	0x200000ac

08007314 <LmHandlerSend>:
{
 8007314:	b570      	push	{r4, r5, r6, lr}
 8007316:	b086      	sub	sp, #24
 8007318:	4604      	mov	r4, r0
 800731a:	460d      	mov	r5, r1
 800731c:	4616      	mov	r6, r2
    if( LoRaMacIsBusy() == true )
 800731e:	f003 f817 	bl	800a350 <LoRaMacIsBusy>
 8007322:	2800      	cmp	r0, #0
 8007324:	d168      	bne.n	80073f8 <LmHandlerSend+0xe4>
    if( LoRaMacIsStopped() == true )
 8007326:	f003 f831 	bl	800a38c <LoRaMacIsStopped>
 800732a:	2800      	cmp	r0, #0
 800732c:	d167      	bne.n	80073fe <LmHandlerSend+0xea>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800732e:	f7ff ffc9 	bl	80072c4 <LmHandlerJoinStatus>
 8007332:	2801      	cmp	r0, #1
 8007334:	d137      	bne.n	80073a6 <LmHandlerSend+0x92>
    TxParams.MsgType = isTxConfirmed;
 8007336:	4b35      	ldr	r3, [pc, #212]	@ (800740c <LmHandlerSend+0xf8>)
 8007338:	721d      	strb	r5, [r3, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800733a:	3d00      	subs	r5, #0
 800733c:	bf18      	it	ne
 800733e:	2501      	movne	r5, #1
 8007340:	f88d 5004 	strb.w	r5, [sp, #4]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 8007344:	4b32      	ldr	r3, [pc, #200]	@ (8007410 <LmHandlerSend+0xfc>)
 8007346:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800734a:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800734e:	4669      	mov	r1, sp
 8007350:	7860      	ldrb	r0, [r4, #1]
 8007352:	f003 faad 	bl	800a8b0 <LoRaMacQueryTxPossible>
 8007356:	b370      	cbz	r0, 80073b6 <LmHandlerSend+0xa2>
        mcpsReq.Type = MCPS_UNCONFIRMED;
 8007358:	2300      	movs	r3, #0
 800735a:	f88d 3004 	strb.w	r3, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800735e:	9303      	str	r3, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8007360:	f8ad 3010 	strh.w	r3, [sp, #16]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 8007364:	f06f 0506 	mvn.w	r5, #6
    TxParams.AppData = *appData;
 8007368:	4b28      	ldr	r3, [pc, #160]	@ (800740c <LmHandlerSend+0xf8>)
 800736a:	f103 0c10 	add.w	ip, r3, #16
 800736e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007372:	e88c 0003 	stmia.w	ip, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 8007376:	4a26      	ldr	r2, [pc, #152]	@ (8007410 <LmHandlerSend+0xfc>)
 8007378:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800737c:	729a      	strb	r2, [r3, #10]
    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800737e:	4631      	mov	r1, r6
 8007380:	a801      	add	r0, sp, #4
 8007382:	f004 f847 	bl	800b414 <LoRaMacMcpsRequest>
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 8007386:	9a05      	ldr	r2, [sp, #20]
 8007388:	4b22      	ldr	r3, [pc, #136]	@ (8007414 <LmHandlerSend+0x100>)
 800738a:	601a      	str	r2, [r3, #0]
    switch( status )
 800738c:	2811      	cmp	r0, #17
 800738e:	d830      	bhi.n	80073f2 <LmHandlerSend+0xde>
 8007390:	e8df f000 	tbb	[pc, r0]
 8007394:	2f2f1c21 	.word	0x2f2f1c21
 8007398:	382f2f2f 	.word	0x382f2f2f
 800739c:	2c2f2f2f 	.word	0x2c2f2f2f
 80073a0:	1c1c2f2f 	.word	0x1c1c2f2f
 80073a4:	291c      	.short	0x291c
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 80073a6:	4b1c      	ldr	r3, [pc, #112]	@ (8007418 <LmHandlerSend+0x104>)
 80073a8:	7a19      	ldrb	r1, [r3, #8]
 80073aa:	79d8      	ldrb	r0, [r3, #7]
 80073ac:	f7ff fef8 	bl	80071a0 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80073b0:	f06f 0502 	mvn.w	r5, #2
 80073b4:	e00c      	b.n	80073d0 <LmHandlerSend+0xbc>
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 80073b6:	7823      	ldrb	r3, [r4, #0]
 80073b8:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 80073bc:	7863      	ldrb	r3, [r4, #1]
 80073be:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 80073c2:	6863      	ldr	r3, [r4, #4]
 80073c4:	9303      	str	r3, [sp, #12]
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 80073c6:	f04f 35ff 	mov.w	r5, #4294967295
 80073ca:	e7cd      	b.n	8007368 <LmHandlerSend+0x54>
    switch( status )
 80073cc:	f06f 0501 	mvn.w	r5, #1
}
 80073d0:	4628      	mov	r0, r5
 80073d2:	b006      	add	sp, #24
 80073d4:	bd70      	pop	{r4, r5, r6, pc}
            IsUplinkTxPending = false;
 80073d6:	4b11      	ldr	r3, [pc, #68]	@ (800741c <LmHandlerSend+0x108>)
 80073d8:	2200      	movs	r2, #0
 80073da:	701a      	strb	r2, [r3, #0]
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 80073dc:	f115 0f07 	cmn.w	r5, #7
 80073e0:	d0f6      	beq.n	80073d0 <LmHandlerSend+0xbc>
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 80073e2:	2500      	movs	r5, #0
 80073e4:	e7f4      	b.n	80073d0 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 80073e6:	f06f 0504 	mvn.w	r5, #4
            break;
 80073ea:	e7f1      	b.n	80073d0 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 80073ec:	f06f 0505 	mvn.w	r5, #5
            break;
 80073f0:	e7ee      	b.n	80073d0 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 80073f2:	f04f 35ff 	mov.w	r5, #4294967295
            break;
 80073f6:	e7eb      	b.n	80073d0 <LmHandlerSend+0xbc>
        return LORAMAC_HANDLER_BUSY_ERROR;
 80073f8:	f06f 0501 	mvn.w	r5, #1
 80073fc:	e7e8      	b.n	80073d0 <LmHandlerSend+0xbc>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80073fe:	f06f 0502 	mvn.w	r5, #2
 8007402:	e7e5      	b.n	80073d0 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8007404:	f06f 0502 	mvn.w	r5, #2
 8007408:	e7e2      	b.n	80073d0 <LmHandlerSend+0xbc>
 800740a:	bf00      	nop
 800740c:	20000090 	.word	0x20000090
 8007410:	200005d8 	.word	0x200005d8
 8007414:	200005a8 	.word	0x200005a8
 8007418:	200000ac 	.word	0x200000ac
 800741c:	200005a6 	.word	0x200005a6

08007420 <LmHandlerProcess>:
{
 8007420:	b500      	push	{lr}
 8007422:	b083      	sub	sp, #12
    LoRaMacProcess( );
 8007424:	f002 ffbe 	bl	800a3a4 <LoRaMacProcess>
    LmHandlerPackagesProcess( );
 8007428:	f7ff fe80 	bl	800712c <LmHandlerPackagesProcess>
    if( LmHandlerPackageIsTxPending( ) == true )
 800742c:	f7ff fe66 	bl	80070fc <LmHandlerPackageIsTxPending>
 8007430:	b910      	cbnz	r0, 8007438 <LmHandlerProcess+0x18>
    if( IsUplinkTxPending == true )
 8007432:	4b0b      	ldr	r3, [pc, #44]	@ (8007460 <LmHandlerProcess+0x40>)
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	b913      	cbnz	r3, 800743e <LmHandlerProcess+0x1e>
}
 8007438:	b003      	add	sp, #12
 800743a:	f85d fb04 	ldr.w	pc, [sp], #4
        LmHandlerAppData_t appData =
 800743e:	2200      	movs	r2, #0
 8007440:	f88d 2000 	strb.w	r2, [sp]
 8007444:	f88d 2001 	strb.w	r2, [sp, #1]
 8007448:	9201      	str	r2, [sp, #4]
        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800744a:	4b06      	ldr	r3, [pc, #24]	@ (8007464 <LmHandlerProcess+0x44>)
 800744c:	78d9      	ldrb	r1, [r3, #3]
 800744e:	4668      	mov	r0, sp
 8007450:	f7ff ff60 	bl	8007314 <LmHandlerSend>
 8007454:	2800      	cmp	r0, #0
 8007456:	d1ef      	bne.n	8007438 <LmHandlerProcess+0x18>
            IsUplinkTxPending = false;
 8007458:	4b01      	ldr	r3, [pc, #4]	@ (8007460 <LmHandlerProcess+0x40>)
 800745a:	2200      	movs	r2, #0
 800745c:	701a      	strb	r2, [r3, #0]
 800745e:	e7eb      	b.n	8007438 <LmHandlerProcess+0x18>
 8007460:	200005a6 	.word	0x200005a6
 8007464:	200005d8 	.word	0x200005d8

08007468 <LmHandlerRequestClass>:
{
 8007468:	b510      	push	{r4, lr}
 800746a:	b08a      	sub	sp, #40	@ 0x28
 800746c:	4604      	mov	r4, r0
    if( LoRaMacIsBusy() == true )
 800746e:	f002 ff6f 	bl	800a350 <LoRaMacIsBusy>
 8007472:	bb98      	cbnz	r0, 80074dc <LmHandlerRequestClass+0x74>
    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 8007474:	f7ff ff26 	bl	80072c4 <LmHandlerJoinStatus>
 8007478:	2801      	cmp	r0, #1
 800747a:	d132      	bne.n	80074e2 <LmHandlerRequestClass+0x7a>
    mibReq.Type = MIB_DEVICE_CLASS;
 800747c:	2300      	movs	r3, #0
 800747e:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8007482:	4668      	mov	r0, sp
 8007484:	f003 fa7e 	bl	800a984 <LoRaMacMibGetRequestConfirm>
 8007488:	bb70      	cbnz	r0, 80074e8 <LmHandlerRequestClass+0x80>
    currentClass = mibReq.Param.Class;
 800748a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    if( currentClass != newClass )
 800748e:	42a3      	cmp	r3, r4
 8007490:	d02d      	beq.n	80074ee <LmHandlerRequestClass+0x86>
        switch( newClass )
 8007492:	2c01      	cmp	r4, #1
 8007494:	d02e      	beq.n	80074f4 <LmHandlerRequestClass+0x8c>
 8007496:	2c02      	cmp	r4, #2
 8007498:	d011      	beq.n	80074be <LmHandlerRequestClass+0x56>
 800749a:	bb74      	cbnz	r4, 80074fa <LmHandlerRequestClass+0x92>
                    if( currentClass != CLASS_A )
 800749c:	b90b      	cbnz	r3, 80074a2 <LmHandlerRequestClass+0x3a>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800749e:	2000      	movs	r0, #0
 80074a0:	e026      	b.n	80074f0 <LmHandlerRequestClass+0x88>
                        mibReq.Param.Class = newClass;
 80074a2:	f88d 4004 	strb.w	r4, [sp, #4]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 80074a6:	4668      	mov	r0, sp
 80074a8:	f003 fbe0 	bl	800ac6c <LoRaMacMibSetRequestConfirm>
 80074ac:	bb38      	cbnz	r0, 80074fe <LmHandlerRequestClass+0x96>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 80074ae:	4b1a      	ldr	r3, [pc, #104]	@ (8007518 <LmHandlerRequestClass+0xb0>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074b4:	b333      	cbz	r3, 8007504 <LmHandlerRequestClass+0x9c>
                                LmHandlerCallbacks->OnClassChange( newClass );
 80074b6:	4620      	mov	r0, r4
 80074b8:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80074ba:	2000      	movs	r0, #0
 80074bc:	e018      	b.n	80074f0 <LmHandlerRequestClass+0x88>
                    if( currentClass != CLASS_A )
 80074be:	bb1b      	cbnz	r3, 8007508 <LmHandlerRequestClass+0xa0>
                        mibReq.Param.Class = newClass;
 80074c0:	f88d 4004 	strb.w	r4, [sp, #4]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 80074c4:	4668      	mov	r0, sp
 80074c6:	f003 fbd1 	bl	800ac6c <LoRaMacMibSetRequestConfirm>
 80074ca:	bb00      	cbnz	r0, 800750e <LmHandlerRequestClass+0xa6>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 80074cc:	4b12      	ldr	r3, [pc, #72]	@ (8007518 <LmHandlerRequestClass+0xb0>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074d2:	b1fb      	cbz	r3, 8007514 <LmHandlerRequestClass+0xac>
                                LmHandlerCallbacks->OnClassChange( newClass );
 80074d4:	4620      	mov	r0, r4
 80074d6:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80074d8:	2000      	movs	r0, #0
 80074da:	e009      	b.n	80074f0 <LmHandlerRequestClass+0x88>
        return LORAMAC_HANDLER_BUSY_ERROR;
 80074dc:	f06f 0001 	mvn.w	r0, #1
 80074e0:	e006      	b.n	80074f0 <LmHandlerRequestClass+0x88>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80074e2:	f06f 0002 	mvn.w	r0, #2
 80074e6:	e003      	b.n	80074f0 <LmHandlerRequestClass+0x88>
        return LORAMAC_HANDLER_ERROR;
 80074e8:	f04f 30ff 	mov.w	r0, #4294967295
 80074ec:	e000      	b.n	80074f0 <LmHandlerRequestClass+0x88>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80074ee:	2000      	movs	r0, #0
}
 80074f0:	b00a      	add	sp, #40	@ 0x28
 80074f2:	bd10      	pop	{r4, pc}
                    errorStatus = LORAMAC_HANDLER_ERROR;
 80074f4:	f04f 30ff 	mov.w	r0, #4294967295
 80074f8:	e7fa      	b.n	80074f0 <LmHandlerRequestClass+0x88>
        switch( newClass )
 80074fa:	2000      	movs	r0, #0
 80074fc:	e7f8      	b.n	80074f0 <LmHandlerRequestClass+0x88>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 80074fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007502:	e7f5      	b.n	80074f0 <LmHandlerRequestClass+0x88>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8007504:	2000      	movs	r0, #0
 8007506:	e7f3      	b.n	80074f0 <LmHandlerRequestClass+0x88>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 8007508:	f04f 30ff 	mov.w	r0, #4294967295
 800750c:	e7f0      	b.n	80074f0 <LmHandlerRequestClass+0x88>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800750e:	f04f 30ff 	mov.w	r0, #4294967295
 8007512:	e7ed      	b.n	80074f0 <LmHandlerRequestClass+0x88>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8007514:	2000      	movs	r0, #0
 8007516:	e7eb      	b.n	80074f0 <LmHandlerRequestClass+0x88>
 8007518:	200005d4 	.word	0x200005d4

0800751c <LmHandlerGetCurrentClass>:
    if( deviceClass == NULL )
 800751c:	b170      	cbz	r0, 800753c <LmHandlerGetCurrentClass+0x20>
{
 800751e:	b510      	push	{r4, lr}
 8007520:	b08a      	sub	sp, #40	@ 0x28
 8007522:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 8007524:	2300      	movs	r3, #0
 8007526:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800752a:	4668      	mov	r0, sp
 800752c:	f003 fa2a 	bl	800a984 <LoRaMacMibGetRequestConfirm>
 8007530:	b938      	cbnz	r0, 8007542 <LmHandlerGetCurrentClass+0x26>
    *deviceClass = mibReq.Param.Class;
 8007532:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007536:	7023      	strb	r3, [r4, #0]
}
 8007538:	b00a      	add	sp, #40	@ 0x28
 800753a:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 800753c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007540:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8007542:	f04f 30ff 	mov.w	r0, #4294967295
 8007546:	e7f7      	b.n	8007538 <LmHandlerGetCurrentClass+0x1c>

08007548 <McpsIndication>:
{
 8007548:	b510      	push	{r4, lr}
 800754a:	b084      	sub	sp, #16
    DeviceClass_t deviceClass = CLASS_A;
 800754c:	2300      	movs	r3, #0
 800754e:	f88d 3007 	strb.w	r3, [sp, #7]
    RxParams.IsMcpsIndication = 1;
 8007552:	4a1d      	ldr	r2, [pc, #116]	@ (80075c8 <McpsIndication+0x80>)
 8007554:	2301      	movs	r3, #1
 8007556:	7013      	strb	r3, [r2, #0]
    RxParams.Status = mcpsIndication->Status;
 8007558:	7843      	ldrb	r3, [r0, #1]
 800755a:	7053      	strb	r3, [r2, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800755c:	2b00      	cmp	r3, #0
 800755e:	d131      	bne.n	80075c4 <McpsIndication+0x7c>
 8007560:	4604      	mov	r4, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 8007562:	f990 2004 	ldrsb.w	r2, [r0, #4]
 8007566:	4b18      	ldr	r3, [pc, #96]	@ (80075c8 <McpsIndication+0x80>)
 8007568:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800756a:	f9b1 2000 	ldrsh.w	r2, [r1]
 800756e:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 8007570:	f991 2002 	ldrsb.w	r2, [r1, #2]
 8007574:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 8007576:	78ca      	ldrb	r2, [r1, #3]
 8007578:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800757a:	6902      	ldr	r2, [r0, #16]
 800757c:	60da      	str	r2, [r3, #12]
    appData.Port = mcpsIndication->Port;
 800757e:	78c3      	ldrb	r3, [r0, #3]
 8007580:	f88d 3008 	strb.w	r3, [sp, #8]
    appData.BufferSize = mcpsIndication->BufferSize;
 8007584:	7b03      	ldrb	r3, [r0, #12]
 8007586:	f88d 3009 	strb.w	r3, [sp, #9]
    appData.Buffer = mcpsIndication->Buffer;
 800758a:	6883      	ldr	r3, [r0, #8]
 800758c:	9303      	str	r3, [sp, #12]
    if( LmHandlerCallbacks->OnRxData != NULL )
 800758e:	4b0f      	ldr	r3, [pc, #60]	@ (80075cc <McpsIndication+0x84>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007594:	b113      	cbz	r3, 800759c <McpsIndication+0x54>
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 8007596:	490c      	ldr	r1, [pc, #48]	@ (80075c8 <McpsIndication+0x80>)
 8007598:	a802      	add	r0, sp, #8
 800759a:	4798      	blx	r3
    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800759c:	4b0b      	ldr	r3, [pc, #44]	@ (80075cc <McpsIndication+0x84>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075a2:	b113      	cbz	r3, 80075aa <McpsIndication+0x62>
 80075a4:	7e22      	ldrb	r2, [r4, #24]
 80075a6:	b102      	cbz	r2, 80075aa <McpsIndication+0x62>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 80075a8:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 80075aa:	4621      	mov	r1, r4
 80075ac:	2001      	movs	r0, #1
 80075ae:	f7ff fd23 	bl	8006ff8 <LmHandlerPackagesNotify>
    LmHandlerGetCurrentClass( &deviceClass );
 80075b2:	f10d 0007 	add.w	r0, sp, #7
 80075b6:	f7ff ffb1 	bl	800751c <LmHandlerGetCurrentClass>
    if( mcpsIndication->IsUplinkTxPending != 0 )
 80075ba:	7963      	ldrb	r3, [r4, #5]
 80075bc:	b113      	cbz	r3, 80075c4 <McpsIndication+0x7c>
        IsUplinkTxPending = true;
 80075be:	4b04      	ldr	r3, [pc, #16]	@ (80075d0 <McpsIndication+0x88>)
 80075c0:	2201      	movs	r2, #1
 80075c2:	701a      	strb	r2, [r3, #0]
}
 80075c4:	b004      	add	sp, #16
 80075c6:	bd10      	pop	{r4, pc}
 80075c8:	2000007c 	.word	0x2000007c
 80075cc:	200005d4 	.word	0x200005d4
 80075d0:	200005a6 	.word	0x200005a6

080075d4 <LmHandlerGetTxDatarate>:
    if( txDatarate == NULL )
 80075d4:	b180      	cbz	r0, 80075f8 <LmHandlerGetTxDatarate+0x24>
{
 80075d6:	b510      	push	{r4, lr}
 80075d8:	b08a      	sub	sp, #40	@ 0x28
 80075da:	4604      	mov	r4, r0
    mibGet.Type = MIB_CHANNELS_DATARATE;
 80075dc:	2320      	movs	r3, #32
 80075de:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 80075e2:	4668      	mov	r0, sp
 80075e4:	f003 f9ce 	bl	800a984 <LoRaMacMibGetRequestConfirm>
 80075e8:	b948      	cbnz	r0, 80075fe <LmHandlerGetTxDatarate+0x2a>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 80075ea:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 80075ee:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 80075f0:	4a04      	ldr	r2, [pc, #16]	@ (8007604 <LmHandlerGetTxDatarate+0x30>)
 80075f2:	7113      	strb	r3, [r2, #4]
}
 80075f4:	b00a      	add	sp, #40	@ 0x28
 80075f6:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 80075f8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80075fc:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 80075fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007602:	e7f7      	b.n	80075f4 <LmHandlerGetTxDatarate+0x20>
 8007604:	200005d8 	.word	0x200005d8

08007608 <LmHandlerSetSystemMaxRxError>:
{
 8007608:	b500      	push	{lr}
 800760a:	b08b      	sub	sp, #44	@ 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800760c:	2323      	movs	r3, #35	@ 0x23
 800760e:	f88d 3000 	strb.w	r3, [sp]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 8007612:	9001      	str	r0, [sp, #4]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8007614:	4668      	mov	r0, sp
 8007616:	f003 fb29 	bl	800ac6c <LoRaMacMibSetRequestConfirm>
 800761a:	b910      	cbnz	r0, 8007622 <LmHandlerSetSystemMaxRxError+0x1a>
}
 800761c:	b00b      	add	sp, #44	@ 0x2c
 800761e:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8007622:	f04f 30ff 	mov.w	r0, #4294967295
 8007626:	e7f9      	b.n	800761c <LmHandlerSetSystemMaxRxError+0x14>

08007628 <LmHandlerConfigure>:
{
 8007628:	b570      	push	{r4, r5, r6, lr}
 800762a:	b08e      	sub	sp, #56	@ 0x38
 800762c:	4601      	mov	r1, r0
    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800762e:	4c6d      	ldr	r4, [pc, #436]	@ (80077e4 <LmHandlerConfigure+0x1bc>)
 8007630:	2218      	movs	r2, #24
 8007632:	4620      	mov	r0, r4
 8007634:	f008 f955 	bl	800f8e2 <memcpy1>
    IsUplinkTxPending = false;
 8007638:	4b6b      	ldr	r3, [pc, #428]	@ (80077e8 <LmHandlerConfigure+0x1c0>)
 800763a:	2200      	movs	r2, #0
 800763c:	701a      	strb	r2, [r3, #0]
    loraInfo = LoraInfo_GetPtr();
 800763e:	f7fb f975 	bl	800292c <LoraInfo_GetPtr>
    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 8007642:	7822      	ldrb	r2, [r4, #0]
 8007644:	2301      	movs	r3, #1
 8007646:	4093      	lsls	r3, r2
 8007648:	6841      	ldr	r1, [r0, #4]
 800764a:	420b      	tst	r3, r1
 800764c:	d106      	bne.n	800765c <LmHandlerConfigure+0x34>
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800764e:	4b67      	ldr	r3, [pc, #412]	@ (80077ec <LmHandlerConfigure+0x1c4>)
 8007650:	2201      	movs	r2, #1
 8007652:	2100      	movs	r1, #0
 8007654:	4608      	mov	r0, r1
 8007656:	f00a f81f 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800765a:	e7fe      	b.n	800765a <LmHandlerConfigure+0x32>
    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800765c:	4964      	ldr	r1, [pc, #400]	@ (80077f0 <LmHandlerConfigure+0x1c8>)
 800765e:	4865      	ldr	r0, [pc, #404]	@ (80077f4 <LmHandlerConfigure+0x1cc>)
 8007660:	f002 fee8 	bl	800a434 <LoRaMacInitialization>
 8007664:	2800      	cmp	r0, #0
 8007666:	f040 80b7 	bne.w	80077d8 <LmHandlerConfigure+0x1b0>
    mibReq.Type = MIB_NVM_CTXS;
 800766a:	2327      	movs	r3, #39	@ 0x27
 800766c:	f88d 3010 	strb.w	r3, [sp, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8007670:	a804      	add	r0, sp, #16
 8007672:	f003 fafb 	bl	800ac6c <LoRaMacMibSetRequestConfirm>
 8007676:	2800      	cmp	r0, #0
 8007678:	d17c      	bne.n	8007774 <LmHandlerConfigure+0x14c>
        CtxRestoreDone = true;
 800767a:	4b5f      	ldr	r3, [pc, #380]	@ (80077f8 <LmHandlerConfigure+0x1d0>)
 800767c:	2201      	movs	r2, #1
 800767e:	701a      	strb	r2, [r3, #0]
    if( CtxRestoreDone == true )
 8007680:	4b5d      	ldr	r3, [pc, #372]	@ (80077f8 <LmHandlerConfigure+0x1d0>)
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	f000 809e 	beq.w	80077c6 <LmHandlerConfigure+0x19e>
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800768a:	4b5c      	ldr	r3, [pc, #368]	@ (80077fc <LmHandlerConfigure+0x1d4>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	69db      	ldr	r3, [r3, #28]
 8007690:	b10b      	cbz	r3, 8007696 <LmHandlerConfigure+0x6e>
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 8007692:	2000      	movs	r0, #0
 8007694:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 8007696:	2327      	movs	r3, #39	@ 0x27
 8007698:	f88d 3010 	strb.w	r3, [sp, #16]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800769c:	a804      	add	r0, sp, #16
 800769e:	f003 f971 	bl	800a984 <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 80076a2:	9a05      	ldr	r2, [sp, #20]
        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 80076a4:	f892 1048 	ldrb.w	r1, [r2, #72]	@ 0x48
 80076a8:	4b4e      	ldr	r3, [pc, #312]	@ (80077e4 <LmHandlerConfigure+0x1bc>)
 80076aa:	7019      	strb	r1, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 80076ac:	f892 1118 	ldrb.w	r1, [r2, #280]	@ 0x118
 80076b0:	7059      	strb	r1, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 80076b2:	f892 211a 	ldrb.w	r2, [r2, #282]	@ 0x11a
 80076b6:	709a      	strb	r2, [r3, #2]
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 80076b8:	4b4d      	ldr	r3, [pc, #308]	@ (80077f0 <LmHandlerConfigure+0x1c8>)
 80076ba:	68d9      	ldr	r1, [r3, #12]
 80076bc:	6898      	ldr	r0, [r3, #8]
 80076be:	f008 f823 	bl	800f708 <SecureElementInitMcuID>
 80076c2:	2800      	cmp	r0, #0
 80076c4:	f040 808b 	bne.w	80077de <LmHandlerConfigure+0x1b6>
    mibReq.Type = MIB_DEV_ADDR;
 80076c8:	2306      	movs	r3, #6
 80076ca:	f88d 3010 	strb.w	r3, [sp, #16]
    LoRaMacMibGetRequestConfirm( &mibReq );
 80076ce:	a804      	add	r0, sp, #16
 80076d0:	f003 f958 	bl	800a984 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 80076d4:	4c4a      	ldr	r4, [pc, #296]	@ (8007800 <LmHandlerConfigure+0x1d8>)
 80076d6:	9b05      	ldr	r3, [sp, #20]
 80076d8:	6163      	str	r3, [r4, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 80076da:	a804      	add	r0, sp, #16
 80076dc:	f003 fac6 	bl	800ac6c <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_DEV_EUI;
 80076e0:	2302      	movs	r3, #2
 80076e2:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 80076e6:	9405      	str	r4, [sp, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 80076e8:	a804      	add	r0, sp, #16
 80076ea:	f003 f94b 	bl	800a984 <LoRaMacMibGetRequestConfirm>
    mibReq.Type = MIB_JOIN_EUI;
 80076ee:	2303      	movs	r3, #3
 80076f0:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 80076f4:	3408      	adds	r4, #8
 80076f6:	9405      	str	r4, [sp, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 80076f8:	a804      	add	r0, sp, #16
 80076fa:	f003 f943 	bl	800a984 <LoRaMacMibGetRequestConfirm>
    SecureElementPrintKeys();
 80076fe:	f008 f89d 	bl	800f83c <SecureElementPrintKeys>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 8007702:	260f      	movs	r6, #15
 8007704:	f88d 6010 	strb.w	r6, [sp, #16]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8007708:	2301      	movs	r3, #1
 800770a:	f88d 3014 	strb.w	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800770e:	a804      	add	r0, sp, #16
 8007710:	f003 faac 	bl	800ac6c <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 8007714:	2310      	movs	r3, #16
 8007716:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800771a:	2500      	movs	r5, #0
 800771c:	f88d 5014 	strb.w	r5, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8007720:	eb0d 0003 	add.w	r0, sp, r3
 8007724:	f003 faa2 	bl	800ac6c <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 8007728:	2304      	movs	r3, #4
 800772a:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800772e:	4c2d      	ldr	r4, [pc, #180]	@ (80077e4 <LmHandlerConfigure+0x1bc>)
 8007730:	78a3      	ldrb	r3, [r4, #2]
 8007732:	f88d 3014 	strb.w	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8007736:	a804      	add	r0, sp, #16
 8007738:	f003 fa98 	bl	800ac6c <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800773c:	233a      	movs	r3, #58	@ 0x3a
 800773e:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 8007742:	6963      	ldr	r3, [r4, #20]
 8007744:	9305      	str	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8007746:	a804      	add	r0, sp, #16
 8007748:	f003 fa90 	bl	800ac6c <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800774c:	f88d 6008 	strb.w	r6, [sp, #8]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 8007750:	a902      	add	r1, sp, #8
 8007752:	7820      	ldrb	r0, [r4, #0]
 8007754:	f005 f804 	bl	800c760 <RegionGetPhyParam>
 8007758:	9001      	str	r0, [sp, #4]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800775a:	1b43      	subs	r3, r0, r5
 800775c:	bf18      	it	ne
 800775e:	2301      	movne	r3, #1
 8007760:	71e3      	strb	r3, [r4, #7]
    LmHandlerSetSystemMaxRxError( 20 );
 8007762:	2014      	movs	r0, #20
 8007764:	f7ff ff50 	bl	8007608 <LmHandlerSetSystemMaxRxError>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 8007768:	79e0      	ldrb	r0, [r4, #7]
 800776a:	f003 ff3f 	bl	800b5ec <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 800776e:	4628      	mov	r0, r5
}
 8007770:	b00e      	add	sp, #56	@ 0x38
 8007772:	bd70      	pop	{r4, r5, r6, pc}
        mibReq.Type = MIB_NVM_BKP_CTXS;
 8007774:	2328      	movs	r3, #40	@ 0x28
 8007776:	f88d 3010 	strb.w	r3, [sp, #16]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 800777a:	4b20      	ldr	r3, [pc, #128]	@ (80077fc <LmHandlerConfigure+0x1d4>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	b14b      	cbz	r3, 8007796 <LmHandlerConfigure+0x16e>
            LoRaMacMibGetRequestConfirm( &mibReq );
 8007782:	a804      	add	r0, sp, #16
 8007784:	f003 f8fe 	bl	800a984 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 8007788:	4b1c      	ldr	r3, [pc, #112]	@ (80077fc <LmHandlerConfigure+0x1d4>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	691b      	ldr	r3, [r3, #16]
 800778e:	f240 51cc 	movw	r1, #1484	@ 0x5cc
 8007792:	9805      	ldr	r0, [sp, #20]
 8007794:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 8007796:	2327      	movs	r3, #39	@ 0x27
 8007798:	f88d 3010 	strb.w	r3, [sp, #16]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800779c:	a804      	add	r0, sp, #16
 800779e:	f003 fa65 	bl	800ac6c <LoRaMacMibSetRequestConfirm>
 80077a2:	2800      	cmp	r0, #0
 80077a4:	f47f af6c 	bne.w	8007680 <LmHandlerConfigure+0x58>
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 80077a8:	2301      	movs	r3, #1
 80077aa:	f88d 3010 	strb.w	r3, [sp, #16]
            LoRaMacMibGetRequestConfirm( &mibReq );
 80077ae:	a804      	add	r0, sp, #16
 80077b0:	f003 f8e8 	bl	800a984 <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 80077b4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f43f af61 	beq.w	8007680 <LmHandlerConfigure+0x58>
                CtxRestoreDone = true;
 80077be:	4b0e      	ldr	r3, [pc, #56]	@ (80077f8 <LmHandlerConfigure+0x1d0>)
 80077c0:	2201      	movs	r2, #1
 80077c2:	701a      	strb	r2, [r3, #0]
 80077c4:	e75c      	b.n	8007680 <LmHandlerConfigure+0x58>
        mibReq.Type = MIB_NET_ID;
 80077c6:	2305      	movs	r3, #5
 80077c8:	f88d 3010 	strb.w	r3, [sp, #16]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 80077cc:	2300      	movs	r3, #0
 80077ce:	9305      	str	r3, [sp, #20]
        LoRaMacMibSetRequestConfirm( &mibReq );
 80077d0:	a804      	add	r0, sp, #16
 80077d2:	f003 fa4b 	bl	800ac6c <LoRaMacMibSetRequestConfirm>
 80077d6:	e76f      	b.n	80076b8 <LmHandlerConfigure+0x90>
        return LORAMAC_HANDLER_ERROR;
 80077d8:	f04f 30ff 	mov.w	r0, #4294967295
 80077dc:	e7c8      	b.n	8007770 <LmHandlerConfigure+0x148>
        return LORAMAC_HANDLER_ERROR;
 80077de:	f04f 30ff 	mov.w	r0, #4294967295
 80077e2:	e7c5      	b.n	8007770 <LmHandlerConfigure+0x148>
 80077e4:	200005d8 	.word	0x200005d8
 80077e8:	200005a6 	.word	0x200005a6
 80077ec:	08012884 	.word	0x08012884
 80077f0:	200005ac 	.word	0x200005ac
 80077f4:	200005c4 	.word	0x200005c4
 80077f8:	200004b0 	.word	0x200004b0
 80077fc:	200005d4 	.word	0x200005d4
 8007800:	20000614 	.word	0x20000614

08007804 <LmHandlerPackageRegister>:
{
 8007804:	b530      	push	{r4, r5, lr}
 8007806:	b083      	sub	sp, #12
 8007808:	460d      	mov	r5, r1
    LmhPackage_t *package = NULL;
 800780a:	2300      	movs	r3, #0
 800780c:	9301      	str	r3, [sp, #4]
    switch( id )
 800780e:	4604      	mov	r4, r0
 8007810:	b9d8      	cbnz	r0, 800784a <LmHandlerPackageRegister+0x46>
                package = LmhpCompliancePackageFactory( );
 8007812:	f000 fc1d 	bl	8008050 <LmhpCompliancePackageFactory>
 8007816:	9001      	str	r0, [sp, #4]
    if( package != NULL )
 8007818:	9b01      	ldr	r3, [sp, #4]
 800781a:	b1f3      	cbz	r3, 800785a <LmHandlerPackageRegister+0x56>
        LmHandlerPackages[id] = package;
 800781c:	4a10      	ldr	r2, [pc, #64]	@ (8007860 <LmHandlerPackageRegister+0x5c>)
 800781e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8007822:	4a10      	ldr	r2, [pc, #64]	@ (8007864 <LmHandlerPackageRegister+0x60>)
 8007824:	629a      	str	r2, [r3, #40]	@ 0x28
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 8007826:	4a10      	ldr	r2, [pc, #64]	@ (8007868 <LmHandlerPackageRegister+0x64>)
 8007828:	6812      	ldr	r2, [r2, #0]
 800782a:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 800782c:	6319      	str	r1, [r3, #48]	@ 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800782e:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8007830:	6359      	str	r1, [r3, #52]	@ 0x34
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 8007832:	490e      	ldr	r1, [pc, #56]	@ (800786c <LmHandlerPackageRegister+0x68>)
 8007834:	62d9      	str	r1, [r3, #44]	@ 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 8007836:	6992      	ldr	r2, [r2, #24]
 8007838:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	22f2      	movs	r2, #242	@ 0xf2
 800783e:	490c      	ldr	r1, [pc, #48]	@ (8007870 <LmHandlerPackageRegister+0x6c>)
 8007840:	4628      	mov	r0, r5
 8007842:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 8007844:	2000      	movs	r0, #0
}
 8007846:	b003      	add	sp, #12
 8007848:	bd30      	pop	{r4, r5, pc}
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 800784a:	a901      	add	r1, sp, #4
 800784c:	f000 fc06 	bl	800805c <LmhpPackagesRegister>
 8007850:	2800      	cmp	r0, #0
 8007852:	d0e1      	beq.n	8007818 <LmHandlerPackageRegister+0x14>
                    return LORAMAC_HANDLER_ERROR;
 8007854:	f04f 30ff 	mov.w	r0, #4294967295
 8007858:	e7f5      	b.n	8007846 <LmHandlerPackageRegister+0x42>
        return LORAMAC_HANDLER_ERROR;
 800785a:	f04f 30ff 	mov.w	r0, #4294967295
 800785e:	e7f2      	b.n	8007846 <LmHandlerPackageRegister+0x42>
 8007860:	200005f0 	.word	0x200005f0
 8007864:	080071a1 	.word	0x080071a1
 8007868:	200005d4 	.word	0x200005d4
 800786c:	08007291 	.word	0x08007291
 8007870:	200004b4 	.word	0x200004b4

08007874 <LmHandlerInit>:
{
 8007874:	b500      	push	{lr}
 8007876:	b083      	sub	sp, #12
 8007878:	9101      	str	r1, [sp, #4]
    LmHandlerCallbacks = handlerCallbacks;
 800787a:	4b19      	ldr	r3, [pc, #100]	@ (80078e0 <LmHandlerInit+0x6c>)
 800787c:	6018      	str	r0, [r3, #0]
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800787e:	4b19      	ldr	r3, [pc, #100]	@ (80078e4 <LmHandlerInit+0x70>)
 8007880:	4a19      	ldr	r2, [pc, #100]	@ (80078e8 <LmHandlerInit+0x74>)
 8007882:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 8007884:	4a19      	ldr	r2, [pc, #100]	@ (80078ec <LmHandlerInit+0x78>)
 8007886:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8007888:	4a19      	ldr	r2, [pc, #100]	@ (80078f0 <LmHandlerInit+0x7c>)
 800788a:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800788c:	4a19      	ldr	r2, [pc, #100]	@ (80078f4 <LmHandlerInit+0x80>)
 800788e:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 8007890:	6802      	ldr	r2, [r0, #0]
 8007892:	4b19      	ldr	r3, [pc, #100]	@ (80078f8 <LmHandlerInit+0x84>)
 8007894:	601a      	str	r2, [r3, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 8007896:	6842      	ldr	r2, [r0, #4]
 8007898:	605a      	str	r2, [r3, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800789a:	6882      	ldr	r2, [r0, #8]
 800789c:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800789e:	68c2      	ldr	r2, [r0, #12]
 80078a0:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 80078a2:	4a16      	ldr	r2, [pc, #88]	@ (80078fc <LmHandlerInit+0x88>)
 80078a4:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 80078a6:	6982      	ldr	r2, [r0, #24]
 80078a8:	615a      	str	r2, [r3, #20]
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 80078aa:	4b15      	ldr	r3, [pc, #84]	@ (8007900 <LmHandlerInit+0x8c>)
 80078ac:	6019      	str	r1, [r3, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 80078ae:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80078b0:	605a      	str	r2, [r3, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
 80078b2:	4a14      	ldr	r2, [pc, #80]	@ (8007904 <LmHandlerInit+0x90>)
 80078b4:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
 80078b6:	4a14      	ldr	r2, [pc, #80]	@ (8007908 <LmHandlerInit+0x94>)
 80078b8:	60da      	str	r2, [r3, #12]
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 80078ba:	4619      	mov	r1, r3
 80078bc:	2000      	movs	r0, #0
 80078be:	f7ff ffa1 	bl	8007804 <LmHandlerPackageRegister>
 80078c2:	b930      	cbnz	r0, 80078d2 <LmHandlerInit+0x5e>
    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 80078c4:	a801      	add	r0, sp, #4
 80078c6:	f000 fbc7 	bl	8008058 <LmhpPackagesRegistrationInit>
 80078ca:	b928      	cbnz	r0, 80078d8 <LmHandlerInit+0x64>
}
 80078cc:	b003      	add	sp, #12
 80078ce:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 80078d2:	f04f 30ff 	mov.w	r0, #4294967295
 80078d6:	e7f9      	b.n	80078cc <LmHandlerInit+0x58>
        return LORAMAC_HANDLER_ERROR;
 80078d8:	f04f 30ff 	mov.w	r0, #4294967295
 80078dc:	e7f6      	b.n	80078cc <LmHandlerInit+0x58>
 80078de:	bf00      	nop
 80078e0:	200005d4 	.word	0x200005d4
 80078e4:	200005c4 	.word	0x200005c4
 80078e8:	080070b9 	.word	0x080070b9
 80078ec:	08007549 	.word	0x08007549
 80078f0:	0800798d 	.word	0x0800798d
 80078f4:	08007065 	.word	0x08007065
 80078f8:	200005ac 	.word	0x200005ac
 80078fc:	0800c709 	.word	0x0800c709
 8007900:	20000604 	.word	0x20000604
 8007904:	08007169 	.word	0x08007169
 8007908:	08007185 	.word	0x08007185

0800790c <LmHandlerGetVersion>:
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
    if( featureVersion == NULL )
 800790c:	b161      	cbz	r1, 8007928 <LmHandlerGetVersion+0x1c>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    switch( lmhType )
 800790e:	b118      	cbz	r0, 8007918 <LmHandlerGetVersion+0xc>
 8007910:	2801      	cmp	r0, #1
 8007912:	d005      	beq.n	8007920 <LmHandlerGetVersion+0x14>
 8007914:	2000      	movs	r0, #0
 8007916:	4770      	bx	lr
    {
        case LORAMAC_HANDLER_L2_VERSION:
            *featureVersion = LORAMAC_VERSION;
 8007918:	4a05      	ldr	r2, [pc, #20]	@ (8007930 <LmHandlerGetVersion+0x24>)
 800791a:	600a      	str	r2, [r1, #0]
            break;
        default:
            break;
    }

    return LORAMAC_HANDLER_SUCCESS;
 800791c:	2000      	movs	r0, #0
            break;
 800791e:	4770      	bx	lr
            *featureVersion = REGION_VERSION;
 8007920:	4a04      	ldr	r2, [pc, #16]	@ (8007934 <LmHandlerGetVersion+0x28>)
 8007922:	600a      	str	r2, [r1, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8007924:	2000      	movs	r0, #0
            break;
 8007926:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8007928:	f04f 30ff 	mov.w	r0, #4294967295
}
 800792c:	4770      	bx	lr
 800792e:	bf00      	nop
 8007930:	01000400 	.word	0x01000400
 8007934:	02010001 	.word	0x02010001

08007938 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 8007938:	b508      	push	{r3, lr}
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 800793a:	f003 fe75 	bl	800b628 <LoRaMacDeInitialization>
 800793e:	b900      	cbnz	r0, 8007942 <LmHandlerStop+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 8007940:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 8007942:	f06f 0001 	mvn.w	r0, #1
 8007946:	e7fb      	b.n	8007940 <LmHandlerStop+0x8>

08007948 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 8007948:	b508      	push	{r3, lr}
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 800794a:	f002 ff81 	bl	800a850 <LoRaMacHalt>
 800794e:	b900      	cbnz	r0, 8007952 <LmHandlerHalt+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 8007950:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 8007952:	f06f 0001 	mvn.w	r0, #1
 8007956:	e7fb      	b.n	8007950 <LmHandlerHalt+0x8>

08007958 <LmHandlerGetTxPower>:
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 8007958:	b180      	cbz	r0, 800797c <LmHandlerGetTxPower+0x24>
{
 800795a:	b510      	push	{r4, lr}
 800795c:	b08a      	sub	sp, #40	@ 0x28
 800795e:	4604      	mov	r4, r0
    {
        return LORAMAC_HANDLER_ERROR;
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 8007960:	2321      	movs	r3, #33	@ 0x21
 8007962:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8007966:	4668      	mov	r0, sp
 8007968:	f003 f80c 	bl	800a984 <LoRaMacMibGetRequestConfirm>
 800796c:	b948      	cbnz	r0, 8007982 <LmHandlerGetTxPower+0x2a>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800796e:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 8007972:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxPower = *txPower;
 8007974:	4a04      	ldr	r2, [pc, #16]	@ (8007988 <LmHandlerGetTxPower+0x30>)
 8007976:	7153      	strb	r3, [r2, #5]
    return LORAMAC_HANDLER_SUCCESS;
}
 8007978:	b00a      	add	sp, #40	@ 0x28
 800797a:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 800797c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007980:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8007982:	f04f 30ff 	mov.w	r0, #4294967295
 8007986:	e7f7      	b.n	8007978 <LmHandlerGetTxPower+0x20>
 8007988:	200005d8 	.word	0x200005d8

0800798c <MlmeConfirm>:
{
 800798c:	b510      	push	{r4, lr}
 800798e:	b08a      	sub	sp, #40	@ 0x28
 8007990:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 0;
 8007992:	4b2b      	ldr	r3, [pc, #172]	@ (8007a40 <MlmeConfirm+0xb4>)
 8007994:	2200      	movs	r2, #0
 8007996:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 8007998:	7842      	ldrb	r2, [r0, #1]
 800799a:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800799c:	4b29      	ldr	r3, [pc, #164]	@ (8007a44 <MlmeConfirm+0xb8>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079a2:	b10b      	cbz	r3, 80079a8 <MlmeConfirm+0x1c>
        LmHandlerCallbacks->OnTxData( &TxParams );
 80079a4:	4826      	ldr	r0, [pc, #152]	@ (8007a40 <MlmeConfirm+0xb4>)
 80079a6:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 80079a8:	4621      	mov	r1, r4
 80079aa:	2002      	movs	r0, #2
 80079ac:	f7ff fb24 	bl	8006ff8 <LmHandlerPackagesNotify>
    switch( mlmeConfirm->MlmeRequest )
 80079b0:	7823      	ldrb	r3, [r4, #0]
 80079b2:	2b05      	cmp	r3, #5
 80079b4:	d035      	beq.n	8007a22 <MlmeConfirm+0x96>
 80079b6:	2b0b      	cmp	r3, #11
 80079b8:	d03c      	beq.n	8007a34 <MlmeConfirm+0xa8>
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d138      	bne.n	8007a30 <MlmeConfirm+0xa4>
                mibReq.Type = MIB_DEV_ADDR;
 80079be:	2306      	movs	r3, #6
 80079c0:	f88d 3000 	strb.w	r3, [sp]
                LoRaMacMibGetRequestConfirm( &mibReq );
 80079c4:	4668      	mov	r0, sp
 80079c6:	f002 ffdd 	bl	800a984 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 80079ca:	9901      	ldr	r1, [sp, #4]
 80079cc:	4b1e      	ldr	r3, [pc, #120]	@ (8007a48 <MlmeConfirm+0xbc>)
 80079ce:	79d8      	ldrb	r0, [r3, #7]
 80079d0:	f007 fe78 	bl	800f6c4 <SecureElementSetDevAddr>
 80079d4:	b910      	cbnz	r0, 80079dc <MlmeConfirm+0x50>
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 80079d6:	9a01      	ldr	r2, [sp, #4]
 80079d8:	4b1c      	ldr	r3, [pc, #112]	@ (8007a4c <MlmeConfirm+0xc0>)
 80079da:	615a      	str	r2, [r3, #20]
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 80079dc:	4c1c      	ldr	r4, [pc, #112]	@ (8007a50 <MlmeConfirm+0xc4>)
 80079de:	4620      	mov	r0, r4
 80079e0:	f7ff fdf8 	bl	80075d4 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 80079e4:	1c60      	adds	r0, r4, #1
 80079e6:	f7ff ffb7 	bl	8007958 <LmHandlerGetTxPower>
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 80079ea:	4b15      	ldr	r3, [pc, #84]	@ (8007a40 <MlmeConfirm+0xb4>)
 80079ec:	785b      	ldrb	r3, [r3, #1]
 80079ee:	b183      	cbz	r3, 8007a12 <MlmeConfirm+0x86>
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 80079f0:	4b15      	ldr	r3, [pc, #84]	@ (8007a48 <MlmeConfirm+0xbc>)
 80079f2:	22ff      	movs	r2, #255	@ 0xff
 80079f4:	719a      	strb	r2, [r3, #6]
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 80079f6:	4b13      	ldr	r3, [pc, #76]	@ (8007a44 <MlmeConfirm+0xb8>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079fc:	b10b      	cbz	r3, 8007a02 <MlmeConfirm+0x76>
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 80079fe:	4812      	ldr	r0, [pc, #72]	@ (8007a48 <MlmeConfirm+0xbc>)
 8007a00:	4798      	blx	r3
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8007a02:	4b0f      	ldr	r3, [pc, #60]	@ (8007a40 <MlmeConfirm+0xb4>)
 8007a04:	785b      	ldrb	r3, [r3, #1]
 8007a06:	b99b      	cbnz	r3, 8007a30 <MlmeConfirm+0xa4>
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 8007a08:	4b0f      	ldr	r3, [pc, #60]	@ (8007a48 <MlmeConfirm+0xbc>)
 8007a0a:	79d8      	ldrb	r0, [r3, #7]
 8007a0c:	f007 ff28 	bl	800f860 <SecureElementPrintSessionKeys>
            break;
 8007a10:	e00e      	b.n	8007a30 <MlmeConfirm+0xa4>
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8007a12:	1f23      	subs	r3, r4, #4
 8007a14:	2200      	movs	r2, #0
 8007a16:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 8007a18:	4b0e      	ldr	r3, [pc, #56]	@ (8007a54 <MlmeConfirm+0xc8>)
 8007a1a:	7858      	ldrb	r0, [r3, #1]
 8007a1c:	f7ff fd24 	bl	8007468 <LmHandlerRequestClass>
 8007a20:	e7e9      	b.n	80079f6 <MlmeConfirm+0x6a>
                RxParams.LinkCheck = true;
 8007a22:	4b0d      	ldr	r3, [pc, #52]	@ (8007a58 <MlmeConfirm+0xcc>)
 8007a24:	2201      	movs	r2, #1
 8007a26:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 8007a28:	7a22      	ldrb	r2, [r4, #8]
 8007a2a:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 8007a2c:	7a62      	ldrb	r2, [r4, #9]
 8007a2e:	74da      	strb	r2, [r3, #19]
}
 8007a30:	b00a      	add	sp, #40	@ 0x28
 8007a32:	bd10      	pop	{r4, pc}
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8007a34:	7863      	ldrb	r3, [r4, #1]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d0fa      	beq.n	8007a30 <MlmeConfirm+0xa4>
                    LmHandlerDeviceTimeReq( );
 8007a3a:	f7ff fc29 	bl	8007290 <LmHandlerDeviceTimeReq>
}
 8007a3e:	e7f7      	b.n	8007a30 <MlmeConfirm+0xa4>
 8007a40:	20000090 	.word	0x20000090
 8007a44:	200005d4 	.word	0x200005d4
 8007a48:	200000ac 	.word	0x200000ac
 8007a4c:	20000614 	.word	0x20000614
 8007a50:	200000b0 	.word	0x200000b0
 8007a54:	200005d8 	.word	0x200005d8
 8007a58:	2000007c 	.word	0x2000007c

08007a5c <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 8007a5c:	b510      	push	{r4, lr}
 8007a5e:	b08a      	sub	sp, #40	@ 0x28
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
    int32_t status = NVM_DATA_OK;

    lmhStatus = LmHandlerHalt();
 8007a60:	f7ff ff72 	bl	8007948 <LmHandlerHalt>

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 8007a64:	4604      	mov	r4, r0
 8007a66:	b110      	cbz	r0, 8007a6e <LmHandlerNvmDataStore+0x12>

    return lmhStatus;
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 8007a68:	4620      	mov	r0, r4
 8007a6a:	b00a      	add	sp, #40	@ 0x28
 8007a6c:	bd10      	pop	{r4, pc}
        status = NvmDataMgmtStoreBegin();
 8007a6e:	f004 fe53 	bl	800c718 <NvmDataMgmtStoreBegin>
        if( status == NVM_DATA_NO_UPDATED_DATA )
 8007a72:	f110 0f02 	cmn.w	r0, #2
 8007a76:	d012      	beq.n	8007a9e <LmHandlerNvmDataStore+0x42>
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 8007a78:	bb00      	cbnz	r0, 8007abc <LmHandlerNvmDataStore+0x60>
 8007a7a:	4b15      	ldr	r3, [pc, #84]	@ (8007ad0 <LmHandlerNvmDataStore+0x74>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	695b      	ldr	r3, [r3, #20]
 8007a80:	b1fb      	cbz	r3, 8007ac2 <LmHandlerNvmDataStore+0x66>
            mibReq.Type = MIB_NVM_CTXS;
 8007a82:	2327      	movs	r3, #39	@ 0x27
 8007a84:	f88d 3000 	strb.w	r3, [sp]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8007a88:	4668      	mov	r0, sp
 8007a8a:	f002 ff7b 	bl	800a984 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 8007a8e:	4b10      	ldr	r3, [pc, #64]	@ (8007ad0 <LmHandlerNvmDataStore+0x74>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	695b      	ldr	r3, [r3, #20]
 8007a94:	f44f 61ba 	mov.w	r1, #1488	@ 0x5d0
 8007a98:	9801      	ldr	r0, [sp, #4]
 8007a9a:	4798      	blx	r3
 8007a9c:	e001      	b.n	8007aa2 <LmHandlerNvmDataStore+0x46>
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 8007a9e:	f06f 0407 	mvn.w	r4, #7
        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 8007aa2:	f004 fe49 	bl	800c738 <NvmDataMgmtStoreEnd>
 8007aa6:	b978      	cbnz	r0, 8007ac8 <LmHandlerNvmDataStore+0x6c>
    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 8007aa8:	2c00      	cmp	r4, #0
 8007aaa:	d1dd      	bne.n	8007a68 <LmHandlerNvmDataStore+0xc>
 8007aac:	4b08      	ldr	r3, [pc, #32]	@ (8007ad0 <LmHandlerNvmDataStore+0x74>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	69db      	ldr	r3, [r3, #28]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d0d8      	beq.n	8007a68 <LmHandlerNvmDataStore+0xc>
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 8007ab6:	2001      	movs	r0, #1
 8007ab8:	4798      	blx	r3
 8007aba:	e7d5      	b.n	8007a68 <LmHandlerNvmDataStore+0xc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8007abc:	f04f 34ff 	mov.w	r4, #4294967295
 8007ac0:	e7ef      	b.n	8007aa2 <LmHandlerNvmDataStore+0x46>
 8007ac2:	f04f 34ff 	mov.w	r4, #4294967295
 8007ac6:	e7ec      	b.n	8007aa2 <LmHandlerNvmDataStore+0x46>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8007ac8:	f04f 34ff 	mov.w	r4, #4294967295
 8007acc:	e7cc      	b.n	8007a68 <LmHandlerNvmDataStore+0xc>
 8007ace:	bf00      	nop
 8007ad0:	200005d4 	.word	0x200005d4

08007ad4 <LmhpComplianceIsInitialized>:
}

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 8007ad4:	4b01      	ldr	r3, [pc, #4]	@ (8007adc <LmhpComplianceIsInitialized+0x8>)
 8007ad6:	7818      	ldrb	r0, [r3, #0]
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	20000648 	.word	0x20000648

08007ae0 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
    return ComplianceTestState.IsTxPending;
}
 8007ae0:	4b01      	ldr	r3, [pc, #4]	@ (8007ae8 <LmhpComplianceIsTxPending+0x8>)
 8007ae2:	7858      	ldrb	r0, [r3, #1]
 8007ae4:	4770      	bx	lr
 8007ae6:	bf00      	nop
 8007ae8:	20000648 	.word	0x20000648

08007aec <LmhpComplianceOnMlmeConfirm>:
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 8007aec:	4770      	bx	lr

08007aee <LmhpComplianceOnMlmeIndication>:
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 8007aee:	4770      	bx	lr

08007af0 <OnProcessTimer>:
    }
}
#endif /* CLASS_B not available */

static void OnProcessTimer( void *context )
{
 8007af0:	b508      	push	{r3, lr}
    if( ComplianceTestState.DataBufferSize != 0 )
 8007af2:	4b05      	ldr	r3, [pc, #20]	@ (8007b08 <OnProcessTimer+0x18>)
 8007af4:	7a9b      	ldrb	r3, [r3, #10]
 8007af6:	b113      	cbz	r3, 8007afe <OnProcessTimer+0xe>
    {
        ComplianceTestState.IsTxPending = true;
 8007af8:	4b03      	ldr	r3, [pc, #12]	@ (8007b08 <OnProcessTimer+0x18>)
 8007afa:	2201      	movs	r2, #1
 8007afc:	705a      	strb	r2, [r3, #1]
    }
    if( CompliancePackage.OnPackageProcessEvent != NULL )
 8007afe:	4b03      	ldr	r3, [pc, #12]	@ (8007b0c <OnProcessTimer+0x1c>)
 8007b00:	695b      	ldr	r3, [r3, #20]
 8007b02:	b103      	cbz	r3, 8007b06 <OnProcessTimer+0x16>
    {
        CompliancePackage.OnPackageProcessEvent();
 8007b04:	4798      	blx	r3
    }
}
 8007b06:	bd08      	pop	{r3, pc}
 8007b08:	20000648 	.word	0x20000648
 8007b0c:	200000b8 	.word	0x200000b8

08007b10 <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 8007b10:	4b8c      	ldr	r3, [pc, #560]	@ (8007d44 <LmhpComplianceOnMcpsIndication+0x234>)
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f000 8205 	beq.w	8007f24 <LmhpComplianceOnMcpsIndication+0x414>
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 8007b1a:	78c3      	ldrb	r3, [r0, #3]
 8007b1c:	b90b      	cbnz	r3, 8007b22 <LmhpComplianceOnMcpsIndication+0x12>
 8007b1e:	7b83      	ldrb	r3, [r0, #14]
 8007b20:	b11b      	cbz	r3, 8007b2a <LmhpComplianceOnMcpsIndication+0x1a>
        ComplianceTestState.RxAppCnt++;
 8007b22:	4a88      	ldr	r2, [pc, #544]	@ (8007d44 <LmhpComplianceOnMcpsIndication+0x234>)
 8007b24:	8a13      	ldrh	r3, [r2, #16]
 8007b26:	3301      	adds	r3, #1
 8007b28:	8213      	strh	r3, [r2, #16]
    if( mcpsIndication->RxData == false )
 8007b2a:	7b43      	ldrb	r3, [r0, #13]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f000 81f9 	beq.w	8007f24 <LmhpComplianceOnMcpsIndication+0x414>
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 8007b32:	78c3      	ldrb	r3, [r0, #3]
 8007b34:	2be0      	cmp	r3, #224	@ 0xe0
 8007b36:	f040 81f5 	bne.w	8007f24 <LmhpComplianceOnMcpsIndication+0x414>
{
 8007b3a:	b570      	push	{r4, r5, r6, lr}
 8007b3c:	b096      	sub	sp, #88	@ 0x58
    ComplianceTestState.DataBufferSize = 0;
 8007b3e:	4b81      	ldr	r3, [pc, #516]	@ (8007d44 <LmhpComplianceOnMcpsIndication+0x234>)
 8007b40:	2200      	movs	r2, #0
 8007b42:	729a      	strb	r2, [r3, #10]
    switch( mcpsIndication->Buffer[cmdIndex++] )
 8007b44:	6884      	ldr	r4, [r0, #8]
 8007b46:	7823      	ldrb	r3, [r4, #0]
 8007b48:	2b7f      	cmp	r3, #127	@ 0x7f
 8007b4a:	f200 8093 	bhi.w	8007c74 <LmhpComplianceOnMcpsIndication+0x164>
 8007b4e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007b52:	0080      	.short	0x0080
 8007b54:	00a2009d 	.word	0x00a2009d
 8007b58:	00b200aa 	.word	0x00b200aa
 8007b5c:	00c600bf 	.word	0x00c600bf
 8007b60:	00f000df 	.word	0x00f000df
 8007b64:	0131011d 	.word	0x0131011d
 8007b68:	00910091 	.word	0x00910091
 8007b6c:	00910091 	.word	0x00910091
 8007b70:	00910091 	.word	0x00910091
 8007b74:	00910091 	.word	0x00910091
 8007b78:	00910091 	.word	0x00910091
 8007b7c:	00910091 	.word	0x00910091
 8007b80:	00910091 	.word	0x00910091
 8007b84:	00910091 	.word	0x00910091
 8007b88:	00910091 	.word	0x00910091
 8007b8c:	00910091 	.word	0x00910091
 8007b90:	01350091 	.word	0x01350091
 8007b94:	0140013c 	.word	0x0140013c
 8007b98:	00910091 	.word	0x00910091
 8007b9c:	00910091 	.word	0x00910091
 8007ba0:	00910091 	.word	0x00910091
 8007ba4:	00910091 	.word	0x00910091
 8007ba8:	00910091 	.word	0x00910091
 8007bac:	00910091 	.word	0x00910091
 8007bb0:	00910091 	.word	0x00910091
 8007bb4:	00910091 	.word	0x00910091
 8007bb8:	00910091 	.word	0x00910091
 8007bbc:	00910091 	.word	0x00910091
 8007bc0:	00910091 	.word	0x00910091
 8007bc4:	00910091 	.word	0x00910091
 8007bc8:	00910091 	.word	0x00910091
 8007bcc:	00910091 	.word	0x00910091
 8007bd0:	00910091 	.word	0x00910091
 8007bd4:	00910091 	.word	0x00910091
 8007bd8:	00910091 	.word	0x00910091
 8007bdc:	00910091 	.word	0x00910091
 8007be0:	00910091 	.word	0x00910091
 8007be4:	00910091 	.word	0x00910091
 8007be8:	00910091 	.word	0x00910091
 8007bec:	00910091 	.word	0x00910091
 8007bf0:	00910091 	.word	0x00910091
 8007bf4:	00910091 	.word	0x00910091
 8007bf8:	00910091 	.word	0x00910091
 8007bfc:	00910091 	.word	0x00910091
 8007c00:	00910091 	.word	0x00910091
 8007c04:	00910091 	.word	0x00910091
 8007c08:	00910091 	.word	0x00910091
 8007c0c:	00910091 	.word	0x00910091
 8007c10:	00910091 	.word	0x00910091
 8007c14:	00910091 	.word	0x00910091
 8007c18:	00910091 	.word	0x00910091
 8007c1c:	00910091 	.word	0x00910091
 8007c20:	00910091 	.word	0x00910091
 8007c24:	00910091 	.word	0x00910091
 8007c28:	00910091 	.word	0x00910091
 8007c2c:	00910091 	.word	0x00910091
 8007c30:	00910091 	.word	0x00910091
 8007c34:	00910091 	.word	0x00910091
 8007c38:	00910091 	.word	0x00910091
 8007c3c:	00910091 	.word	0x00910091
 8007c40:	00910091 	.word	0x00910091
 8007c44:	00910091 	.word	0x00910091
 8007c48:	00910091 	.word	0x00910091
 8007c4c:	016c014b 	.word	0x016c014b
 8007c50:	017a      	.short	0x017a
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 8007c52:	4b3c      	ldr	r3, [pc, #240]	@ (8007d44 <LmhpComplianceOnMcpsIndication+0x234>)
 8007c54:	68da      	ldr	r2, [r3, #12]
 8007c56:	2101      	movs	r1, #1
 8007c58:	7299      	strb	r1, [r3, #10]
 8007c5a:	2000      	movs	r0, #0
 8007c5c:	7010      	strb	r0, [r2, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 8007c5e:	68d8      	ldr	r0, [r3, #12]
 8007c60:	7a9a      	ldrb	r2, [r3, #10]
 8007c62:	1854      	adds	r4, r2, r1
 8007c64:	729c      	strb	r4, [r3, #10]
 8007c66:	2406      	movs	r4, #6
 8007c68:	5484      	strb	r4, [r0, r2]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 8007c6a:	68d8      	ldr	r0, [r3, #12]
 8007c6c:	7a9a      	ldrb	r2, [r3, #10]
 8007c6e:	1854      	adds	r4, r2, r1
 8007c70:	729c      	strb	r4, [r3, #10]
 8007c72:	5481      	strb	r1, [r0, r2]
    if( ComplianceTestState.DataBufferSize != 0 )
 8007c74:	4b33      	ldr	r3, [pc, #204]	@ (8007d44 <LmhpComplianceOnMcpsIndication+0x234>)
 8007c76:	7a9b      	ldrb	r3, [r3, #10]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f000 814c 	beq.w	8007f16 <LmhpComplianceOnMcpsIndication+0x406>
        if( ProcessTimer.IsRunning == 0U)
 8007c7e:	4b32      	ldr	r3, [pc, #200]	@ (8007d48 <LmhpComplianceOnMcpsIndication+0x238>)
 8007c80:	7a5b      	ldrb	r3, [r3, #9]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	f000 813d 	beq.w	8007f02 <LmhpComplianceOnMcpsIndication+0x3f2>
}
 8007c88:	b016      	add	sp, #88	@ 0x58
 8007c8a:	bd70      	pop	{r4, r5, r6, pc}
                ComplianceTestState.IsResetCmdPending = true;
 8007c8c:	4b2d      	ldr	r3, [pc, #180]	@ (8007d44 <LmhpComplianceOnMcpsIndication+0x234>)
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                break;
 8007c94:	e7ee      	b.n	8007c74 <LmhpComplianceOnMcpsIndication+0x164>
                if( CompliancePackage.OnJoinRequest != NULL )
 8007c96:	4b2d      	ldr	r3, [pc, #180]	@ (8007d4c <LmhpComplianceOnMcpsIndication+0x23c>)
 8007c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d0ea      	beq.n	8007c74 <LmhpComplianceOnMcpsIndication+0x164>
                    CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 8007c9e:	2101      	movs	r1, #1
 8007ca0:	2002      	movs	r0, #2
 8007ca2:	4798      	blx	r3
 8007ca4:	e7e6      	b.n	8007c74 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 8007ca6:	7862      	ldrb	r2, [r4, #1]
 8007ca8:	4b26      	ldr	r3, [pc, #152]	@ (8007d44 <LmhpComplianceOnMcpsIndication+0x234>)
 8007caa:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
                ComplianceTestState.IsClassReqCmdPending = true;
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                break;
 8007cb4:	e7de      	b.n	8007c74 <LmhpComplianceOnMcpsIndication+0x164>
                mibReq.Type            = MIB_ADR;
 8007cb6:	2304      	movs	r3, #4
 8007cb8:	f88d 3004 	strb.w	r3, [sp, #4]
                mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 8007cbc:	7863      	ldrb	r3, [r4, #1]
 8007cbe:	3b00      	subs	r3, #0
 8007cc0:	bf18      	it	ne
 8007cc2:	2301      	movne	r3, #1
 8007cc4:	f88d 3008 	strb.w	r3, [sp, #8]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8007cc8:	a801      	add	r0, sp, #4
 8007cca:	f002 ffcf 	bl	800ac6c <LoRaMacMibSetRequestConfirm>
                break;
 8007cce:	e7d1      	b.n	8007c74 <LmhpComplianceOnMcpsIndication+0x164>
                LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 8007cd0:	7860      	ldrb	r0, [r4, #1]
 8007cd2:	3800      	subs	r0, #0
 8007cd4:	bf18      	it	ne
 8007cd6:	2001      	movne	r0, #1
 8007cd8:	f003 fc88 	bl	800b5ec <LoRaMacTestSetDutyCycleOn>
                break;
 8007cdc:	e7ca      	b.n	8007c74 <LmhpComplianceOnMcpsIndication+0x164>
                uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 8007cde:	ad01      	add	r5, sp, #4
 8007ce0:	4e1b      	ldr	r6, [pc, #108]	@ (8007d50 <LmhpComplianceOnMcpsIndication+0x240>)
 8007ce2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007ce4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007ce6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007ce8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007cea:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8007cee:	e885 0007 	stmia.w	r5, {r0, r1, r2}
                uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 8007cf2:	7863      	ldrb	r3, [r4, #1]
                if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 8007cf4:	2b0a      	cmp	r3, #10
 8007cf6:	d8bd      	bhi.n	8007c74 <LmhpComplianceOnMcpsIndication+0x164>
                    if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 8007cf8:	4a16      	ldr	r2, [pc, #88]	@ (8007d54 <LmhpComplianceOnMcpsIndication+0x244>)
 8007cfa:	6812      	ldr	r2, [r2, #0]
 8007cfc:	6852      	ldr	r2, [r2, #4]
 8007cfe:	2a00      	cmp	r2, #0
 8007d00:	d0b8      	beq.n	8007c74 <LmhpComplianceOnMcpsIndication+0x164>
                        ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 8007d02:	a916      	add	r1, sp, #88	@ 0x58
 8007d04:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8007d08:	f853 0c54 	ldr.w	r0, [r3, #-84]
 8007d0c:	4790      	blx	r2
                break;
 8007d0e:	e7b1      	b.n	8007c74 <LmhpComplianceOnMcpsIndication+0x164>
                uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 8007d10:	7862      	ldrb	r2, [r4, #1]
                if( ( frameType == 1 ) || ( frameType == 2 ) )
 8007d12:	1e53      	subs	r3, r2, #1
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d8ac      	bhi.n	8007c74 <LmhpComplianceOnMcpsIndication+0x164>
                    ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 8007d1a:	1e50      	subs	r0, r2, #1
 8007d1c:	bf18      	it	ne
 8007d1e:	2001      	movne	r0, #1
 8007d20:	4b08      	ldr	r3, [pc, #32]	@ (8007d44 <LmhpComplianceOnMcpsIndication+0x234>)
 8007d22:	7218      	strb	r0, [r3, #8]
                    if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 8007d24:	4b0b      	ldr	r3, [pc, #44]	@ (8007d54 <LmhpComplianceOnMcpsIndication+0x244>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d0a2      	beq.n	8007c74 <LmhpComplianceOnMcpsIndication+0x164>
                        ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 8007d2e:	4798      	blx	r3
 8007d30:	e7a0      	b.n	8007c74 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 8007d32:	4b04      	ldr	r3, [pc, #16]	@ (8007d44 <LmhpComplianceOnMcpsIndication+0x234>)
 8007d34:	68da      	ldr	r2, [r3, #12]
 8007d36:	2101      	movs	r1, #1
 8007d38:	7299      	strb	r1, [r3, #10]
 8007d3a:	2308      	movs	r3, #8
 8007d3c:	7013      	strb	r3, [r2, #0]
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 8007d3e:	460b      	mov	r3, r1
 8007d40:	e01b      	b.n	8007d7a <LmhpComplianceOnMcpsIndication+0x26a>
 8007d42:	bf00      	nop
 8007d44:	20000648 	.word	0x20000648
 8007d48:	2000062c 	.word	0x2000062c
 8007d4c:	200000b8 	.word	0x200000b8
 8007d50:	080123bc 	.word	0x080123bc
 8007d54:	20000644 	.word	0x20000644
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 8007d58:	6882      	ldr	r2, [r0, #8]
 8007d5a:	f101 0c01 	add.w	ip, r1, #1
 8007d5e:	5c52      	ldrb	r2, [r2, r1]
 8007d60:	4971      	ldr	r1, [pc, #452]	@ (8007f28 <LmhpComplianceOnMcpsIndication+0x418>)
 8007d62:	68cd      	ldr	r5, [r1, #12]
 8007d64:	7a8c      	ldrb	r4, [r1, #10]
 8007d66:	f104 0e01 	add.w	lr, r4, #1
 8007d6a:	f881 e00a 	strb.w	lr, [r1, #10]
 8007d6e:	3201      	adds	r2, #1
 8007d70:	552a      	strb	r2, [r5, r4]
                     i++ )
 8007d72:	3301      	adds	r3, #1
 8007d74:	b2db      	uxtb	r3, r3
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 8007d76:	fa5f f18c 	uxtb.w	r1, ip
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 8007d7a:	4a6b      	ldr	r2, [pc, #428]	@ (8007f28 <LmhpComplianceOnMcpsIndication+0x418>)
 8007d7c:	7a52      	ldrb	r2, [r2, #9]
 8007d7e:	7b04      	ldrb	r4, [r0, #12]
 8007d80:	42a2      	cmp	r2, r4
 8007d82:	bf28      	it	cs
 8007d84:	4622      	movcs	r2, r4
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d8e6      	bhi.n	8007d58 <LmhpComplianceOnMcpsIndication+0x248>
 8007d8a:	e773      	b.n	8007c74 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 8007d8c:	4b66      	ldr	r3, [pc, #408]	@ (8007f28 <LmhpComplianceOnMcpsIndication+0x418>)
 8007d8e:	68da      	ldr	r2, [r3, #12]
 8007d90:	2101      	movs	r1, #1
 8007d92:	7299      	strb	r1, [r3, #10]
 8007d94:	2109      	movs	r1, #9
 8007d96:	7011      	strb	r1, [r2, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 8007d98:	8a18      	ldrh	r0, [r3, #16]
 8007d9a:	68d9      	ldr	r1, [r3, #12]
 8007d9c:	7a9a      	ldrb	r2, [r3, #10]
 8007d9e:	1c54      	adds	r4, r2, #1
 8007da0:	729c      	strb	r4, [r3, #10]
 8007da2:	5488      	strb	r0, [r1, r2]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 8007da4:	8a1a      	ldrh	r2, [r3, #16]
 8007da6:	68d8      	ldr	r0, [r3, #12]
 8007da8:	7a99      	ldrb	r1, [r3, #10]
 8007daa:	1c4c      	adds	r4, r1, #1
 8007dac:	729c      	strb	r4, [r3, #10]
 8007dae:	0a13      	lsrs	r3, r2, #8
 8007db0:	5443      	strb	r3, [r0, r1]
                break;
 8007db2:	e75f      	b.n	8007c74 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.RxAppCnt = 0;
 8007db4:	4b5c      	ldr	r3, [pc, #368]	@ (8007f28 <LmhpComplianceOnMcpsIndication+0x418>)
 8007db6:	2200      	movs	r2, #0
 8007db8:	821a      	strh	r2, [r3, #16]
                break;
 8007dba:	e75b      	b.n	8007c74 <LmhpComplianceOnMcpsIndication+0x164>
                mlmeReq.Type = MLME_LINK_CHECK;
 8007dbc:	2305      	movs	r3, #5
 8007dbe:	f88d 3004 	strb.w	r3, [sp, #4]
                LoRaMacMlmeRequest( &mlmeReq );
 8007dc2:	a801      	add	r0, sp, #4
 8007dc4:	f003 fa22 	bl	800b20c <LoRaMacMlmeRequest>
                break;
 8007dc8:	e754      	b.n	8007c74 <LmhpComplianceOnMcpsIndication+0x164>
                CompliancePackage.OnDeviceTimeRequest( );
 8007dca:	4b58      	ldr	r3, [pc, #352]	@ (8007f2c <LmhpComplianceOnMcpsIndication+0x41c>)
 8007dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dce:	4798      	blx	r3
                break;
 8007dd0:	e750      	b.n	8007c74 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 8007dd2:	7860      	ldrb	r0, [r4, #1]
 8007dd4:	4b54      	ldr	r3, [pc, #336]	@ (8007f28 <LmhpComplianceOnMcpsIndication+0x418>)
 8007dd6:	7558      	strb	r0, [r3, #21]
                if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 8007dd8:	4b55      	ldr	r3, [pc, #340]	@ (8007f30 <LmhpComplianceOnMcpsIndication+0x420>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	f43f af48 	beq.w	8007c74 <LmhpComplianceOnMcpsIndication+0x164>
                    ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 8007de4:	4798      	blx	r3
 8007de6:	e745      	b.n	8007c74 <LmhpComplianceOnMcpsIndication+0x164>
                if( mcpsIndication->BufferSize == 7 )
 8007de8:	7b03      	ldrb	r3, [r0, #12]
 8007dea:	2b07      	cmp	r3, #7
 8007dec:	f47f af42 	bne.w	8007c74 <LmhpComplianceOnMcpsIndication+0x164>
                    mlmeReq.Type = MLME_TXCW;
 8007df0:	2306      	movs	r3, #6
 8007df2:	f88d 3004 	strb.w	r3, [sp, #4]
                        ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 8007df6:	7863      	ldrb	r3, [r4, #1]
 8007df8:	78a2      	ldrb	r2, [r4, #2]
 8007dfa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                    mlmeReq.Req.TxCw.Timeout =
 8007dfe:	f8ad 3008 	strh.w	r3, [sp, #8]
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 8007e02:	78e3      	ldrb	r3, [r4, #3]
 8007e04:	7922      	ldrb	r2, [r4, #4]
 8007e06:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 8007e0a:	7962      	ldrb	r2, [r4, #5]
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 8007e0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 8007e10:	2264      	movs	r2, #100	@ 0x64
 8007e12:	fb02 f303 	mul.w	r3, r2, r3
                    mlmeReq.Req.TxCw.Frequency =
 8007e16:	9303      	str	r3, [sp, #12]
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 8007e18:	6883      	ldr	r3, [r0, #8]
 8007e1a:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8007e1e:	f88d 3010 	strb.w	r3, [sp, #16]
                    LoRaMacMlmeRequest( &mlmeReq );
 8007e22:	a801      	add	r0, sp, #4
 8007e24:	f003 f9f2 	bl	800b20c <LoRaMacMlmeRequest>
                break;
 8007e28:	e724      	b.n	8007c74 <LmhpComplianceOnMcpsIndication+0x164>
                mibReq.Type = MIB_IS_CERT_FPORT_ON;
 8007e2a:	233b      	movs	r3, #59	@ 0x3b
 8007e2c:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
                mibReq.Param.IsCertPortOn = false;
 8007e30:	2300      	movs	r3, #0
 8007e32:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
                LoRaMacMibSetRequestConfirm( &mibReq );
 8007e36:	a80c      	add	r0, sp, #48	@ 0x30
 8007e38:	f002 ff18 	bl	800ac6c <LoRaMacMibSetRequestConfirm>
                ComplianceTestState.IsResetCmdPending = true;
 8007e3c:	4b3a      	ldr	r3, [pc, #232]	@ (8007f28 <LmhpComplianceOnMcpsIndication+0x418>)
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                break;
 8007e44:	e716      	b.n	8007c74 <LmhpComplianceOnMcpsIndication+0x164>
                mibReq.Type = MIB_LORAWAN_VERSION;
 8007e46:	232a      	movs	r3, #42	@ 0x2a
 8007e48:	f88d 3004 	strb.w	r3, [sp, #4]
                LoRaMacMibGetRequestConfirm( &mibReq );
 8007e4c:	a801      	add	r0, sp, #4
 8007e4e:	f002 fd99 	bl	800a984 <LoRaMacMibGetRequestConfirm>
                lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 8007e52:	9902      	ldr	r1, [sp, #8]
                lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 8007e54:	9a03      	ldr	r2, [sp, #12]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 8007e56:	4b34      	ldr	r3, [pc, #208]	@ (8007f28 <LmhpComplianceOnMcpsIndication+0x418>)
 8007e58:	68dc      	ldr	r4, [r3, #12]
 8007e5a:	7a98      	ldrb	r0, [r3, #10]
 8007e5c:	1c45      	adds	r5, r0, #1
 8007e5e:	729d      	strb	r5, [r3, #10]
 8007e60:	257f      	movs	r5, #127	@ 0x7f
 8007e62:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 8007e64:	4832      	ldr	r0, [pc, #200]	@ (8007f30 <LmhpComplianceOnMcpsIndication+0x420>)
 8007e66:	6800      	ldr	r0, [r0, #0]
 8007e68:	68dd      	ldr	r5, [r3, #12]
 8007e6a:	7a9c      	ldrb	r4, [r3, #10]
 8007e6c:	1c66      	adds	r6, r4, #1
 8007e6e:	729e      	strb	r6, [r3, #10]
 8007e70:	78c6      	ldrb	r6, [r0, #3]
 8007e72:	552e      	strb	r6, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 8007e74:	68dd      	ldr	r5, [r3, #12]
 8007e76:	7a9c      	ldrb	r4, [r3, #10]
 8007e78:	1c66      	adds	r6, r4, #1
 8007e7a:	729e      	strb	r6, [r3, #10]
 8007e7c:	7886      	ldrb	r6, [r0, #2]
 8007e7e:	552e      	strb	r6, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 8007e80:	68dd      	ldr	r5, [r3, #12]
 8007e82:	7a9c      	ldrb	r4, [r3, #10]
 8007e84:	1c66      	adds	r6, r4, #1
 8007e86:	729e      	strb	r6, [r3, #10]
 8007e88:	7846      	ldrb	r6, [r0, #1]
 8007e8a:	552e      	strb	r6, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 8007e8c:	68dd      	ldr	r5, [r3, #12]
 8007e8e:	7a9c      	ldrb	r4, [r3, #10]
 8007e90:	1c66      	adds	r6, r4, #1
 8007e92:	729e      	strb	r6, [r3, #10]
 8007e94:	7800      	ldrb	r0, [r0, #0]
 8007e96:	5528      	strb	r0, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 8007e98:	68dc      	ldr	r4, [r3, #12]
 8007e9a:	7a98      	ldrb	r0, [r3, #10]
 8007e9c:	1c45      	adds	r5, r0, #1
 8007e9e:	729d      	strb	r5, [r3, #10]
 8007ea0:	f3c1 6507 	ubfx	r5, r1, #24, #8
 8007ea4:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 8007ea6:	68dc      	ldr	r4, [r3, #12]
 8007ea8:	7a98      	ldrb	r0, [r3, #10]
 8007eaa:	1c45      	adds	r5, r0, #1
 8007eac:	729d      	strb	r5, [r3, #10]
 8007eae:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8007eb2:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 8007eb4:	68dc      	ldr	r4, [r3, #12]
 8007eb6:	7a98      	ldrb	r0, [r3, #10]
 8007eb8:	1c45      	adds	r5, r0, #1
 8007eba:	729d      	strb	r5, [r3, #10]
 8007ebc:	f3c1 2507 	ubfx	r5, r1, #8, #8
 8007ec0:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 8007ec2:	68dc      	ldr	r4, [r3, #12]
 8007ec4:	7a98      	ldrb	r0, [r3, #10]
 8007ec6:	1c45      	adds	r5, r0, #1
 8007ec8:	729d      	strb	r5, [r3, #10]
 8007eca:	5421      	strb	r1, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 8007ecc:	68d8      	ldr	r0, [r3, #12]
 8007ece:	7a99      	ldrb	r1, [r3, #10]
 8007ed0:	1c4c      	adds	r4, r1, #1
 8007ed2:	729c      	strb	r4, [r3, #10]
 8007ed4:	f3c2 6407 	ubfx	r4, r2, #24, #8
 8007ed8:	5444      	strb	r4, [r0, r1]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 8007eda:	68d8      	ldr	r0, [r3, #12]
 8007edc:	7a99      	ldrb	r1, [r3, #10]
 8007ede:	1c4c      	adds	r4, r1, #1
 8007ee0:	729c      	strb	r4, [r3, #10]
 8007ee2:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8007ee6:	5444      	strb	r4, [r0, r1]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 8007ee8:	68d8      	ldr	r0, [r3, #12]
 8007eea:	7a99      	ldrb	r1, [r3, #10]
 8007eec:	1c4c      	adds	r4, r1, #1
 8007eee:	729c      	strb	r4, [r3, #10]
 8007ef0:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8007ef4:	5444      	strb	r4, [r0, r1]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 8007ef6:	68d8      	ldr	r0, [r3, #12]
 8007ef8:	7a99      	ldrb	r1, [r3, #10]
 8007efa:	1c4c      	adds	r4, r1, #1
 8007efc:	729c      	strb	r4, [r3, #10]
 8007efe:	5442      	strb	r2, [r0, r1]
                break;
 8007f00:	e6b8      	b.n	8007c74 <LmhpComplianceOnMcpsIndication+0x164>
            TimerSetValue( &ProcessTimer, 1000 );
 8007f02:	4c0c      	ldr	r4, [pc, #48]	@ (8007f34 <LmhpComplianceOnMcpsIndication+0x424>)
 8007f04:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8007f08:	4620      	mov	r0, r4
 8007f0a:	f009 ffb7 	bl	8011e7c <UTIL_TIMER_SetPeriod>
            TimerStart( &ProcessTimer );
 8007f0e:	4620      	mov	r0, r4
 8007f10:	f009 ff6e 	bl	8011df0 <UTIL_TIMER_Start>
 8007f14:	e6b8      	b.n	8007c88 <LmhpComplianceOnMcpsIndication+0x178>
        TimerStop( &ProcessTimer );
 8007f16:	4807      	ldr	r0, [pc, #28]	@ (8007f34 <LmhpComplianceOnMcpsIndication+0x424>)
 8007f18:	f009 ff10 	bl	8011d3c <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 8007f1c:	4b02      	ldr	r3, [pc, #8]	@ (8007f28 <LmhpComplianceOnMcpsIndication+0x418>)
 8007f1e:	2200      	movs	r2, #0
 8007f20:	705a      	strb	r2, [r3, #1]
 8007f22:	e6b1      	b.n	8007c88 <LmhpComplianceOnMcpsIndication+0x178>
 8007f24:	4770      	bx	lr
 8007f26:	bf00      	nop
 8007f28:	20000648 	.word	0x20000648
 8007f2c:	200000b8 	.word	0x200000b8
 8007f30:	20000644 	.word	0x20000644
 8007f34:	2000062c 	.word	0x2000062c

08007f38 <LmhpComplianceProcess>:
{
 8007f38:	b530      	push	{r4, r5, lr}
 8007f3a:	b083      	sub	sp, #12
    if( ComplianceTestState.IsTxPending == true )
 8007f3c:	4b27      	ldr	r3, [pc, #156]	@ (8007fdc <LmhpComplianceProcess+0xa4>)
 8007f3e:	785b      	ldrb	r3, [r3, #1]
 8007f40:	b993      	cbnz	r3, 8007f68 <LmhpComplianceProcess+0x30>
        if( ComplianceTestState.IsClassReqCmdPending == true )
 8007f42:	4b26      	ldr	r3, [pc, #152]	@ (8007fdc <LmhpComplianceProcess+0xa4>)
 8007f44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d13d      	bne.n	8007fc8 <LmhpComplianceProcess+0x90>
    if( ComplianceTestState.IsResetCmdPending == true )
 8007f4c:	4b23      	ldr	r3, [pc, #140]	@ (8007fdc <LmhpComplianceProcess+0xa4>)
 8007f4e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007f52:	b13b      	cbz	r3, 8007f64 <LmhpComplianceProcess+0x2c>
        ComplianceTestState.IsResetCmdPending = false;
 8007f54:	4b21      	ldr	r3, [pc, #132]	@ (8007fdc <LmhpComplianceProcess+0xa4>)
 8007f56:	2200      	movs	r2, #0
 8007f58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        if( CompliancePackage.OnSystemReset != NULL )
 8007f5c:	4b20      	ldr	r3, [pc, #128]	@ (8007fe0 <LmhpComplianceProcess+0xa8>)
 8007f5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f60:	b103      	cbz	r3, 8007f64 <LmhpComplianceProcess+0x2c>
            CompliancePackage.OnSystemReset( );
 8007f62:	4798      	blx	r3
}
 8007f64:	b003      	add	sp, #12
 8007f66:	bd30      	pop	{r4, r5, pc}
        TimerTime_t now = TimerGetCurrentTime( );
 8007f68:	f009 fea8 	bl	8011cbc <UTIL_TIMER_GetCurrentTime>
 8007f6c:	4604      	mov	r4, r0
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 8007f6e:	4b1b      	ldr	r3, [pc, #108]	@ (8007fdc <LmhpComplianceProcess+0xa4>)
 8007f70:	685d      	ldr	r5, [r3, #4]
 8007f72:	f7ff f9a1 	bl	80072b8 <LmHandlerGetDutyCycleWaitTime>
 8007f76:	4405      	add	r5, r0
 8007f78:	42a5      	cmp	r5, r4
 8007f7a:	d2e7      	bcs.n	8007f4c <LmhpComplianceProcess+0x14>
            if( ComplianceTestState.DataBufferSize != 0 )
 8007f7c:	4b17      	ldr	r3, [pc, #92]	@ (8007fdc <LmhpComplianceProcess+0xa4>)
 8007f7e:	7a9b      	ldrb	r3, [r3, #10]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d0e3      	beq.n	8007f4c <LmhpComplianceProcess+0x14>
                LmHandlerAppData_t appData =
 8007f84:	22e0      	movs	r2, #224	@ 0xe0
 8007f86:	f88d 2000 	strb.w	r2, [sp]
 8007f8a:	f88d 3001 	strb.w	r3, [sp, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 8007f8e:	4b13      	ldr	r3, [pc, #76]	@ (8007fdc <LmhpComplianceProcess+0xa4>)
 8007f90:	68da      	ldr	r2, [r3, #12]
                LmHandlerAppData_t appData =
 8007f92:	9201      	str	r2, [sp, #4]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 8007f94:	2201      	movs	r2, #1
 8007f96:	7a19      	ldrb	r1, [r3, #8]
 8007f98:	4668      	mov	r0, sp
 8007f9a:	f7ff f9bb 	bl	8007314 <LmHandlerSend>
                if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) || ( lmhStatus == LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED ) )
 8007f9e:	b110      	cbz	r0, 8007fa6 <LmhpComplianceProcess+0x6e>
 8007fa0:	f110 0f07 	cmn.w	r0, #7
 8007fa4:	d106      	bne.n	8007fb4 <LmhpComplianceProcess+0x7c>
                    ComplianceTestState.IsTxPending = false;
 8007fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8007fdc <LmhpComplianceProcess+0xa4>)
 8007fa8:	2200      	movs	r2, #0
 8007faa:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 8007fac:	729a      	strb	r2, [r3, #10]
                ComplianceTestState.TxPendingTimestamp = now;
 8007fae:	4b0b      	ldr	r3, [pc, #44]	@ (8007fdc <LmhpComplianceProcess+0xa4>)
 8007fb0:	605c      	str	r4, [r3, #4]
 8007fb2:	e7cb      	b.n	8007f4c <LmhpComplianceProcess+0x14>
                    TimerSetValue( &ProcessTimer, 1500 );
 8007fb4:	4d0b      	ldr	r5, [pc, #44]	@ (8007fe4 <LmhpComplianceProcess+0xac>)
 8007fb6:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8007fba:	4628      	mov	r0, r5
 8007fbc:	f009 ff5e 	bl	8011e7c <UTIL_TIMER_SetPeriod>
                    TimerStart( &ProcessTimer );
 8007fc0:	4628      	mov	r0, r5
 8007fc2:	f009 ff15 	bl	8011df0 <UTIL_TIMER_Start>
 8007fc6:	e7f2      	b.n	8007fae <LmhpComplianceProcess+0x76>
            ComplianceTestState.IsClassReqCmdPending = false;
 8007fc8:	4b04      	ldr	r3, [pc, #16]	@ (8007fdc <LmhpComplianceProcess+0xa4>)
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 8007fd0:	f893 0036 	ldrb.w	r0, [r3, #54]	@ 0x36
 8007fd4:	f7ff fa48 	bl	8007468 <LmHandlerRequestClass>
 8007fd8:	e7b8      	b.n	8007f4c <LmhpComplianceProcess+0x14>
 8007fda:	bf00      	nop
 8007fdc:	20000648 	.word	0x20000648
 8007fe0:	200000b8 	.word	0x200000b8
 8007fe4:	2000062c 	.word	0x2000062c

08007fe8 <LmhpComplianceInit>:
{
 8007fe8:	b530      	push	{r4, r5, lr}
 8007fea:	b083      	sub	sp, #12
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 8007fec:	b188      	cbz	r0, 8008012 <LmhpComplianceInit+0x2a>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	b179      	cbz	r1, 8008012 <LmhpComplianceInit+0x2a>
        ComplianceParams                      = ( LmhpComplianceParams_t * ) params;
 8007ff2:	4813      	ldr	r0, [pc, #76]	@ (8008040 <LmhpComplianceInit+0x58>)
 8007ff4:	6003      	str	r3, [r0, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 8007ff6:	4b13      	ldr	r3, [pc, #76]	@ (8008044 <LmhpComplianceInit+0x5c>)
 8007ff8:	60d9      	str	r1, [r3, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 8007ffa:	725a      	strb	r2, [r3, #9]
        ComplianceTestState.Initialized       = true;
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 8008000:	2200      	movs	r2, #0
 8008002:	9200      	str	r2, [sp, #0]
 8008004:	4b10      	ldr	r3, [pc, #64]	@ (8008048 <LmhpComplianceInit+0x60>)
 8008006:	f04f 31ff 	mov.w	r1, #4294967295
 800800a:	4810      	ldr	r0, [pc, #64]	@ (800804c <LmhpComplianceInit+0x64>)
 800800c:	f009 fe38 	bl	8011c80 <UTIL_TIMER_Create>
 8008010:	e004      	b.n	800801c <LmhpComplianceInit+0x34>
        ComplianceParams                = NULL;
 8008012:	2300      	movs	r3, #0
 8008014:	4a0a      	ldr	r2, [pc, #40]	@ (8008040 <LmhpComplianceInit+0x58>)
 8008016:	6013      	str	r3, [r2, #0]
        ComplianceTestState.Initialized = false;
 8008018:	4a0a      	ldr	r2, [pc, #40]	@ (8008044 <LmhpComplianceInit+0x5c>)
 800801a:	7013      	strb	r3, [r2, #0]
    ComplianceTestState.RxAppCnt = 0;
 800801c:	4c09      	ldr	r4, [pc, #36]	@ (8008044 <LmhpComplianceInit+0x5c>)
 800801e:	2500      	movs	r5, #0
 8008020:	8225      	strh	r5, [r4, #16]
    memset1( ( uint8_t * ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 8008022:	2220      	movs	r2, #32
 8008024:	4629      	mov	r1, r5
 8008026:	f104 0014 	add.w	r0, r4, #20
 800802a:	f007 fc72 	bl	800f912 <memset1>
    ComplianceTestState.IsTxPending = false;
 800802e:	7065      	strb	r5, [r4, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 8008030:	74a5      	strb	r5, [r4, #18]
    ComplianceTestState.IsResetCmdPending = false;
 8008032:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 8008036:	f884 5035 	strb.w	r5, [r4, #53]	@ 0x35
}
 800803a:	b003      	add	sp, #12
 800803c:	bd30      	pop	{r4, r5, pc}
 800803e:	bf00      	nop
 8008040:	20000644 	.word	0x20000644
 8008044:	20000648 	.word	0x20000648
 8008048:	08007af1 	.word	0x08007af1
 800804c:	2000062c 	.word	0x2000062c

08008050 <LmhpCompliancePackageFactory>:
}
 8008050:	4800      	ldr	r0, [pc, #0]	@ (8008054 <LmhpCompliancePackageFactory+0x4>)
 8008052:	4770      	bx	lr
 8008054:	200000b8 	.word	0x200000b8

08008058 <LmhpPackagesRegistrationInit>:
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
}
 8008058:	2000      	movs	r0, #0
 800805a:	4770      	bx	lr

0800805c <LmhpPackagesRegister>:
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 800805c:	f04f 30ff 	mov.w	r0, #4294967295
 8008060:	4770      	bx	lr
	...

08008064 <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008064:	4b07      	ldr	r3, [pc, #28]	@ (8008084 <UpdateRxSlotIdleState+0x20>)
 8008066:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800806a:	2b02      	cmp	r3, #2
 800806c:	d004      	beq.n	8008078 <UpdateRxSlotIdleState+0x14>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800806e:	4b06      	ldr	r3, [pc, #24]	@ (8008088 <UpdateRxSlotIdleState+0x24>)
 8008070:	2206      	movs	r2, #6
 8008072:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
 8008076:	4770      	bx	lr
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 8008078:	4b03      	ldr	r3, [pc, #12]	@ (8008088 <UpdateRxSlotIdleState+0x24>)
 800807a:	2202      	movs	r2, #2
 800807c:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
}
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	20008000 	.word	0x20008000
 8008088:	20000728 	.word	0x20000728

0800808c <LoRaMacEnableRequests>:
    return false;
}

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
    MacCtx.AllowRequests = requestState;
 800808c:	4b01      	ldr	r3, [pc, #4]	@ (8008094 <LoRaMacEnableRequests+0x8>)
 800808e:	f883 0492 	strb.w	r0, [r3, #1170]	@ 0x492
}
 8008092:	4770      	bx	lr
 8008094:	20000728 	.word	0x20000728

08008098 <LoRaMacHandleIndicationEvents>:
        MacCtx.MacFlags.Bits.MacDone = 0;
    }
}

static void LoRaMacHandleIndicationEvents( void )
{
 8008098:	b508      	push	{r3, lr}
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800809a:	4b15      	ldr	r3, [pc, #84]	@ (80080f0 <LoRaMacHandleIndicationEvents+0x58>)
 800809c:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 80080a0:	f013 0f08 	tst.w	r3, #8
 80080a4:	d00e      	beq.n	80080c4 <LoRaMacHandleIndicationEvents+0x2c>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 80080a6:	4812      	ldr	r0, [pc, #72]	@ (80080f0 <LoRaMacHandleIndicationEvents+0x58>)
 80080a8:	f890 3491 	ldrb.w	r3, [r0, #1169]	@ 0x491
 80080ac:	f023 0308 	bic.w	r3, r3, #8
 80080b0:	f880 3491 	strb.w	r3, [r0, #1169]	@ 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 80080b4:	f8d0 3344 	ldr.w	r3, [r0, #836]	@ 0x344
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	f200 418c 	addw	r1, r0, #1164	@ 0x48c
 80080be:	f500 608d 	add.w	r0, r0, #1128	@ 0x468
 80080c2:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80080c4:	4b0a      	ldr	r3, [pc, #40]	@ (80080f0 <LoRaMacHandleIndicationEvents+0x58>)
 80080c6:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 80080ca:	f013 0f02 	tst.w	r3, #2
 80080ce:	d00e      	beq.n	80080ee <LoRaMacHandleIndicationEvents+0x56>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 80080d0:	4807      	ldr	r0, [pc, #28]	@ (80080f0 <LoRaMacHandleIndicationEvents+0x58>)
 80080d2:	f890 3491 	ldrb.w	r3, [r0, #1169]	@ 0x491
 80080d6:	f023 0302 	bic.w	r3, r3, #2
 80080da:	f880 3491 	strb.w	r3, [r0, #1169]	@ 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 80080de:	f8d0 3344 	ldr.w	r3, [r0, #836]	@ 0x344
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	f200 418c 	addw	r1, r0, #1164	@ 0x48c
 80080e8:	f500 6084 	add.w	r0, r0, #1056	@ 0x420
 80080ec:	4798      	blx	r3
    }
}
 80080ee:	bd08      	pop	{r3, pc}
 80080f0:	20000728 	.word	0x20000728

080080f4 <CheckForMinimumAbpDatarate>:
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
    if( ( adr == true ) &&
 80080f4:	b110      	cbz	r0, 80080fc <CheckForMinimumAbpDatarate+0x8>
 80080f6:	2901      	cmp	r1, #1
 80080f8:	d001      	beq.n	80080fe <CheckForMinimumAbpDatarate+0xa>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
    {
        return true;
    }
    return false;
 80080fa:	2000      	movs	r0, #0
}
 80080fc:	4770      	bx	lr
        ( activation == ACTIVATION_TYPE_ABP ) &&
 80080fe:	2a00      	cmp	r2, #0
 8008100:	d0fc      	beq.n	80080fc <CheckForMinimumAbpDatarate+0x8>
    return false;
 8008102:	2000      	movs	r0, #0
 8008104:	4770      	bx	lr
	...

08008108 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8008108:	4b07      	ldr	r3, [pc, #28]	@ (8008128 <LoRaMacCheckForRxAbort+0x20>)
 800810a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800810e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008112:	d008      	beq.n	8008126 <LoRaMacCheckForRxAbort+0x1e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8008114:	4a04      	ldr	r2, [pc, #16]	@ (8008128 <LoRaMacCheckForRxAbort+0x20>)
 8008116:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800811a:	f8c2 1340 	str.w	r1, [r2, #832]	@ 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800811e:	f023 0382 	bic.w	r3, r3, #130	@ 0x82
 8008122:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    }
}
 8008126:	4770      	bx	lr
 8008128:	20000728 	.word	0x20000728

0800812c <CalculateBackOff>:

static void CalculateBackOff( void )
{
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800812c:	4b06      	ldr	r3, [pc, #24]	@ (8008148 <CalculateBackOff+0x1c>)
 800812e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008130:	b94b      	cbnz	r3, 8008146 <CalculateBackOff+0x1a>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8008132:	4a05      	ldr	r2, [pc, #20]	@ (8008148 <CalculateBackOff+0x1c>)
 8008134:	f8b2 3120 	ldrh.w	r3, [r2, #288]	@ 0x120
 8008138:	4904      	ldr	r1, [pc, #16]	@ (800814c <CalculateBackOff+0x20>)
 800813a:	f8d1 141c 	ldr.w	r1, [r1, #1052]	@ 0x41c
 800813e:	3b01      	subs	r3, #1
 8008140:	fb01 f303 	mul.w	r3, r1, r3
 8008144:	6313      	str	r3, [r2, #48]	@ 0x30
    }
}
 8008146:	4770      	bx	lr
 8008148:	20008000 	.word	0x20008000
 800814c:	20000728 	.word	0x20000728

08008150 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8008150:	b508      	push	{r3, lr}
 8008152:	4684      	mov	ip, r0
 8008154:	4608      	mov	r0, r1
 8008156:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8008158:	4b06      	ldr	r3, [pc, #24]	@ (8008174 <SetTxContinuousWave+0x24>)
 800815a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800815c:	4662      	mov	r2, ip
 800815e:	b249      	sxtb	r1, r1
 8008160:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8008162:	4a05      	ldr	r2, [pc, #20]	@ (8008178 <SetTxContinuousWave+0x28>)
 8008164:	f8d2 3340 	ldr.w	r3, [r2, #832]	@ 0x340
 8008168:	f043 0302 	orr.w	r3, r3, #2
 800816c:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
}
 8008170:	2000      	movs	r0, #0
 8008172:	bd08      	pop	{r3, pc}
 8008174:	08013170 	.word	0x08013170
 8008178:	20000728 	.word	0x20000728

0800817c <DetermineFrameType>:
    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 800817c:	4602      	mov	r2, r0
 800817e:	b1f8      	cbz	r0, 80081c0 <DetermineFrameType+0x44>
 8008180:	b301      	cbz	r1, 80081c4 <DetermineFrameType+0x48>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8008182:	7b03      	ldrb	r3, [r0, #12]
 8008184:	f013 030f 	ands.w	r3, r3, #15
 8008188:	d005      	beq.n	8008196 <DetermineFrameType+0x1a>
 800818a:	f890 0020 	ldrb.w	r0, [r0, #32]
 800818e:	b110      	cbz	r0, 8008196 <DetermineFrameType+0x1a>
    {
        *fType = FRAME_TYPE_A;
 8008190:	2000      	movs	r0, #0
 8008192:	7008      	strb	r0, [r1, #0]
 8008194:	4770      	bx	lr
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8008196:	f892 0028 	ldrb.w	r0, [r2, #40]	@ 0x28
 800819a:	b910      	cbnz	r0, 80081a2 <DetermineFrameType+0x26>
    {
        *fType = FRAME_TYPE_B;
 800819c:	2301      	movs	r3, #1
 800819e:	700b      	strb	r3, [r1, #0]
 80081a0:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 80081a2:	b92b      	cbnz	r3, 80081b0 <DetermineFrameType+0x34>
 80081a4:	f892 0020 	ldrb.w	r0, [r2, #32]
 80081a8:	b910      	cbnz	r0, 80081b0 <DetermineFrameType+0x34>
    {
        *fType = FRAME_TYPE_C;
 80081aa:	2302      	movs	r3, #2
 80081ac:	700b      	strb	r3, [r1, #0]
 80081ae:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 80081b0:	b953      	cbnz	r3, 80081c8 <DetermineFrameType+0x4c>
 80081b2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80081b6:	b14a      	cbz	r2, 80081cc <DetermineFrameType+0x50>
    {
        *fType = FRAME_TYPE_D;
 80081b8:	2203      	movs	r2, #3
 80081ba:	700a      	strb	r2, [r1, #0]
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
    }

    return LORAMAC_STATUS_OK;
 80081bc:	4618      	mov	r0, r3
        *fType = FRAME_TYPE_D;
 80081be:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80081c0:	2003      	movs	r0, #3
 80081c2:	4770      	bx	lr
 80081c4:	2003      	movs	r0, #3
 80081c6:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 80081c8:	2018      	movs	r0, #24
 80081ca:	4770      	bx	lr
 80081cc:	2018      	movs	r0, #24
}
 80081ce:	4770      	bx	lr

080081d0 <CheckRetrans>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
    if( counter >= limit )
 80081d0:	4288      	cmp	r0, r1
 80081d2:	d201      	bcs.n	80081d8 <CheckRetrans+0x8>
    {
        return true;
    }
    return false;
 80081d4:	2000      	movs	r0, #0
 80081d6:	4770      	bx	lr
        return true;
 80081d8:	2001      	movs	r0, #1
}
 80081da:	4770      	bx	lr

080081dc <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 80081dc:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 80081de:	4b0b      	ldr	r3, [pc, #44]	@ (800820c <CheckRetransUnconfirmedUplink+0x30>)
 80081e0:	f893 1068 	ldrb.w	r1, [r3, #104]	@ 0x68
 80081e4:	4b0a      	ldr	r3, [pc, #40]	@ (8008210 <CheckRetransUnconfirmedUplink+0x34>)
 80081e6:	f893 0418 	ldrb.w	r0, [r3, #1048]	@ 0x418
 80081ea:	f7ff fff1 	bl	80081d0 <CheckRetrans>
 80081ee:	b950      	cbnz	r0, 8008206 <CheckRetransUnconfirmedUplink+0x2a>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80081f0:	4b07      	ldr	r3, [pc, #28]	@ (8008210 <CheckRetransUnconfirmedUplink+0x34>)
 80081f2:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 80081f6:	f013 0f02 	tst.w	r3, #2
 80081fa:	d004      	beq.n	8008206 <CheckRetransUnconfirmedUplink+0x2a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80081fc:	4b04      	ldr	r3, [pc, #16]	@ (8008210 <CheckRetransUnconfirmedUplink+0x34>)
 80081fe:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 8008202:	2b01      	cmp	r3, #1
 8008204:	d900      	bls.n	8008208 <CheckRetransUnconfirmedUplink+0x2c>
        {
            return true;
        }
    }
    return false;
}
 8008206:	bd08      	pop	{r3, pc}
            return true;
 8008208:	2001      	movs	r0, #1
 800820a:	e7fc      	b.n	8008206 <CheckRetransUnconfirmedUplink+0x2a>
 800820c:	20008000 	.word	0x20008000
 8008210:	20000728 	.word	0x20000728

08008214 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8008214:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8008216:	4b09      	ldr	r3, [pc, #36]	@ (800823c <CheckRetransConfirmedUplink+0x28>)
 8008218:	f893 1068 	ldrb.w	r1, [r3, #104]	@ 0x68
 800821c:	4b08      	ldr	r3, [pc, #32]	@ (8008240 <CheckRetransConfirmedUplink+0x2c>)
 800821e:	f893 0418 	ldrb.w	r0, [r3, #1048]	@ 0x418
 8008222:	f7ff ffd5 	bl	80081d0 <CheckRetrans>
 8008226:	b940      	cbnz	r0, 800823a <CheckRetransConfirmedUplink+0x26>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8008228:	4b05      	ldr	r3, [pc, #20]	@ (8008240 <CheckRetransConfirmedUplink+0x2c>)
 800822a:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800822e:	f013 0f02 	tst.w	r3, #2
 8008232:	d002      	beq.n	800823a <CheckRetransConfirmedUplink+0x26>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8008234:	4b02      	ldr	r3, [pc, #8]	@ (8008240 <CheckRetransConfirmedUplink+0x2c>)
 8008236:	f893 0444 	ldrb.w	r0, [r3, #1092]	@ 0x444
        {
            return true;
        }
    }
    return false;
}
 800823a:	bd08      	pop	{r3, pc}
 800823c:	20008000 	.word	0x20008000
 8008240:	20000728 	.word	0x20000728

08008244 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
    if( counter < ADR_ACK_COUNTER_MAX )
 8008244:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008248:	d000      	beq.n	800824c <IncreaseAdrAckCounter+0x8>
    {
        counter++;
 800824a:	3001      	adds	r0, #1
    }
    return counter;
}
 800824c:	4770      	bx	lr
	...

08008250 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8008250:	b510      	push	{r4, lr}
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8008252:	4b12      	ldr	r3, [pc, #72]	@ (800829c <StopRetransmission+0x4c>)
 8008254:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8008258:	f013 0f02 	tst.w	r3, #2
 800825c:	d004      	beq.n	8008268 <StopRetransmission+0x18>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800825e:	4b0f      	ldr	r3, [pc, #60]	@ (800829c <StopRetransmission+0x4c>)
 8008260:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8008264:	2b01      	cmp	r3, #1
 8008266:	d908      	bls.n	800827a <StopRetransmission+0x2a>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8008268:	4b0d      	ldr	r3, [pc, #52]	@ (80082a0 <StopRetransmission+0x50>)
 800826a:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800826e:	b123      	cbz	r3, 800827a <StopRetransmission+0x2a>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8008270:	4c0b      	ldr	r4, [pc, #44]	@ (80082a0 <StopRetransmission+0x50>)
 8008272:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8008274:	f7ff ffe6 	bl	8008244 <IncreaseAdrAckCounter>
 8008278:	62a0      	str	r0, [r4, #40]	@ 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 800827a:	4b08      	ldr	r3, [pc, #32]	@ (800829c <StopRetransmission+0x4c>)
 800827c:	2200      	movs	r2, #0
 800827e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.NodeAckRequested = false;
 8008282:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8008286:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800828a:	f8d3 2340 	ldr.w	r2, [r3, #832]	@ 0x340
 800828e:	f022 0202 	bic.w	r2, r2, #2
 8008292:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    return true;
}
 8008296:	2001      	movs	r0, #1
 8008298:	bd10      	pop	{r4, pc}
 800829a:	bf00      	nop
 800829c:	20000728 	.word	0x20000728
 80082a0:	20008000 	.word	0x20008000

080082a4 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 80082a4:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80082a6:	4b04      	ldr	r3, [pc, #16]	@ (80082b8 <OnMacProcessNotify+0x14>)
 80082a8:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80082ac:	b113      	cbz	r3, 80082b4 <OnMacProcessNotify+0x10>
 80082ae:	695b      	ldr	r3, [r3, #20]
 80082b0:	b103      	cbz	r3, 80082b4 <OnMacProcessNotify+0x10>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 80082b2:	4798      	blx	r3
    }
}
 80082b4:	bd08      	pop	{r3, pc}
 80082b6:	bf00      	nop
 80082b8:	20000728 	.word	0x20000728

080082bc <OnRadioRxError>:
{
 80082bc:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 80082be:	4a04      	ldr	r2, [pc, #16]	@ (80082d0 <OnRadioRxError+0x14>)
 80082c0:	7813      	ldrb	r3, [r2, #0]
 80082c2:	f043 0304 	orr.w	r3, r3, #4
 80082c6:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 80082c8:	f7ff ffec 	bl	80082a4 <OnMacProcessNotify>
}
 80082cc:	bd08      	pop	{r3, pc}
 80082ce:	bf00      	nop
 80082d0:	20000694 	.word	0x20000694

080082d4 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 80082d4:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 80082d6:	4b04      	ldr	r3, [pc, #16]	@ (80082e8 <CallNvmDataChangeCallback+0x14>)
 80082d8:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80082dc:	b113      	cbz	r3, 80082e4 <CallNvmDataChangeCallback+0x10>
 80082de:	691b      	ldr	r3, [r3, #16]
 80082e0:	b103      	cbz	r3, 80082e4 <CallNvmDataChangeCallback+0x10>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 80082e2:	4798      	blx	r3
    }
}
 80082e4:	bd08      	pop	{r3, pc}
 80082e6:	bf00      	nop
 80082e8:	20000728 	.word	0x20000728

080082ec <IsRequestPending>:
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80082ec:	4b04      	ldr	r3, [pc, #16]	@ (8008300 <IsRequestPending+0x14>)
 80082ee:	f893 0491 	ldrb.w	r0, [r3, #1169]	@ 0x491
 80082f2:	f010 0005 	ands.w	r0, r0, #5
 80082f6:	d100      	bne.n	80082fa <IsRequestPending+0xe>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    {
        return 1;
    }
    return 0;
}
 80082f8:	4770      	bx	lr
        return 1;
 80082fa:	2001      	movs	r0, #1
 80082fc:	e7fc      	b.n	80082f8 <IsRequestPending+0xc>
 80082fe:	bf00      	nop
 8008300:	20000728 	.word	0x20000728

08008304 <GetMaxAppPayloadWithoutFOptsLength>:
{
 8008304:	b500      	push	{lr}
 8008306:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008308:	4b0d      	ldr	r3, [pc, #52]	@ (8008340 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 800830a:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 800830e:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 8008312:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8008316:	220d      	movs	r2, #13
 8008318:	f88d 2008 	strb.w	r2, [sp, #8]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800831c:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8008320:	b113      	cbz	r3, 8008328 <GetMaxAppPayloadWithoutFOptsLength+0x24>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8008322:	230e      	movs	r3, #14
 8008324:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008328:	a902      	add	r1, sp, #8
 800832a:	4b05      	ldr	r3, [pc, #20]	@ (8008340 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 800832c:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8008330:	f004 fa16 	bl	800c760 <RegionGetPhyParam>
 8008334:	9001      	str	r0, [sp, #4]
}
 8008336:	b2c0      	uxtb	r0, r0
 8008338:	b005      	add	sp, #20
 800833a:	f85d fb04 	ldr.w	pc, [sp], #4
 800833e:	bf00      	nop
 8008340:	20008000 	.word	0x20008000

08008344 <ValidatePayloadLength>:
{
 8008344:	b538      	push	{r3, r4, r5, lr}
 8008346:	4604      	mov	r4, r0
 8008348:	4615      	mov	r5, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800834a:	4608      	mov	r0, r1
 800834c:	f7ff ffda 	bl	8008304 <GetMaxAppPayloadWithoutFOptsLength>
    payloadSize = ( lenN + fOptsLen );
 8008350:	442c      	add	r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8008352:	42a0      	cmp	r0, r4
 8008354:	d201      	bcs.n	800835a <ValidatePayloadLength+0x16>
    return false;
 8008356:	2000      	movs	r0, #0
}
 8008358:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 800835a:	2001      	movs	r0, #1
 800835c:	e7fc      	b.n	8008358 <ValidatePayloadLength+0x14>
	...

08008360 <ProcessRadioTxDone>:
{
 8008360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008362:	b08f      	sub	sp, #60	@ 0x3c
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008364:	4b3b      	ldr	r3, [pc, #236]	@ (8008454 <ProcessRadioTxDone+0xf4>)
 8008366:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800836a:	2b02      	cmp	r3, #2
 800836c:	d002      	beq.n	8008374 <ProcessRadioTxDone+0x14>
        Radio.Sleep( );
 800836e:	4b3a      	ldr	r3, [pc, #232]	@ (8008458 <ProcessRadioTxDone+0xf8>)
 8008370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008372:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008374:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008378:	b672      	cpsid	i
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 800837a:	f009 fc9f 	bl	8011cbc <UTIL_TIMER_GetCurrentTime>
 800837e:	4b37      	ldr	r3, [pc, #220]	@ (800845c <ProcessRadioTxDone+0xfc>)
 8008380:	681d      	ldr	r5, [r3, #0]
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 8008382:	4c37      	ldr	r4, [pc, #220]	@ (8008460 <ProcessRadioTxDone+0x100>)
 8008384:	f8d4 13b0 	ldr.w	r1, [r4, #944]	@ 0x3b0
 8008388:	1a2d      	subs	r5, r5, r0
 800838a:	f504 7660 	add.w	r6, r4, #896	@ 0x380
 800838e:	4429      	add	r1, r5
 8008390:	4630      	mov	r0, r6
 8008392:	f009 fd73 	bl	8011e7c <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8008396:	4630      	mov	r0, r6
 8008398:	f009 fd2a 	bl	8011df0 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 800839c:	f8d4 13b4 	ldr.w	r1, [r4, #948]	@ 0x3b4
 80083a0:	f504 7666 	add.w	r6, r4, #920	@ 0x398
 80083a4:	4429      	add	r1, r5
 80083a6:	4630      	mov	r0, r6
 80083a8:	f009 fd68 	bl	8011e7c <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 80083ac:	4630      	mov	r0, r6
 80083ae:	f009 fd1f 	bl	8011df0 <UTIL_TIMER_Start>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083b2:	f387 8810 	msr	PRIMASK, r7
    if( MacCtx.NodeAckRequested == true )
 80083b6:	f894 341a 	ldrb.w	r3, [r4, #1050]	@ 0x41a
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d134      	bne.n	8008428 <ProcessRadioTxDone+0xc8>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80083be:	4b28      	ldr	r3, [pc, #160]	@ (8008460 <ProcessRadioTxDone+0x100>)
 80083c0:	2200      	movs	r2, #0
 80083c2:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 80083c6:	4b25      	ldr	r3, [pc, #148]	@ (800845c <ProcessRadioTxDone+0xfc>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4c22      	ldr	r4, [pc, #136]	@ (8008454 <ProcessRadioTxDone+0xf4>)
 80083cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
    txDone.Channel = MacCtx.Channel;
 80083ce:	4f24      	ldr	r7, [pc, #144]	@ (8008460 <ProcessRadioTxDone+0x100>)
 80083d0:	f897 241b 	ldrb.w	r2, [r7, #1051]	@ 0x41b
 80083d4:	f88d 2010 	strb.w	r2, [sp, #16]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 80083d8:	9305      	str	r3, [sp, #20]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80083da:	ae0c      	add	r6, sp, #48	@ 0x30
 80083dc:	4630      	mov	r0, r6
 80083de:	f009 fbe1 	bl	8011ba4 <SysTimeGetMcuTime>
 80083e2:	ad02      	add	r5, sp, #8
 80083e4:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 80083e8:	9300      	str	r3, [sp, #0]
 80083ea:	f8d4 3124 	ldr.w	r3, [r4, #292]	@ 0x124
 80083ee:	e896 0006 	ldmia.w	r6, {r1, r2}
 80083f2:	4628      	mov	r0, r5
 80083f4:	f009 fb73 	bl	8011ade <SysTimeSub>
 80083f8:	ab07      	add	r3, sp, #28
 80083fa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80083fe:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8008402:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8008406:	9306      	str	r3, [sp, #24]
    txDone.Joined  = true;
 8008408:	2301      	movs	r3, #1
 800840a:	f88d 3011 	strb.w	r3, [sp, #17]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800840e:	f894 3130 	ldrb.w	r3, [r4, #304]	@ 0x130
 8008412:	b90b      	cbnz	r3, 8008418 <ProcessRadioTxDone+0xb8>
        txDone.Joined  = false;
 8008414:	f88d 3011 	strb.w	r3, [sp, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8008418:	a904      	add	r1, sp, #16
 800841a:	4b0e      	ldr	r3, [pc, #56]	@ (8008454 <ProcessRadioTxDone+0xf4>)
 800841c:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8008420:	f004 f9b6 	bl	800c790 <RegionSetBandTxDone>
}
 8008424:	b00f      	add	sp, #60	@ 0x3c
 8008426:	bdf0      	pop	{r4, r5, r6, r7, pc}
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 8008428:	2315      	movs	r3, #21
 800842a:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800842e:	a90a      	add	r1, sp, #40	@ 0x28
 8008430:	4b08      	ldr	r3, [pc, #32]	@ (8008454 <ProcessRadioTxDone+0xf4>)
 8008432:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8008436:	f004 f993 	bl	800c760 <RegionGetPhyParam>
 800843a:	9009      	str	r0, [sp, #36]	@ 0x24
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800843c:	f8d4 13b4 	ldr.w	r1, [r4, #948]	@ 0x3b4
 8008440:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8008444:	4401      	add	r1, r0
 8008446:	4620      	mov	r0, r4
 8008448:	f009 fd18 	bl	8011e7c <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800844c:	4620      	mov	r0, r4
 800844e:	f009 fccf 	bl	8011df0 <UTIL_TIMER_Start>
 8008452:	e7b8      	b.n	80083c6 <ProcessRadioTxDone+0x66>
 8008454:	20008000 	.word	0x20008000
 8008458:	08013170 	.word	0x08013170
 800845c:	20000690 	.word	0x20000690
 8008460:	20000728 	.word	0x20000728

08008464 <OnRetransmitTimeoutTimerEvent>:
{
 8008464:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8008466:	4c07      	ldr	r4, [pc, #28]	@ (8008484 <OnRetransmitTimeoutTimerEvent+0x20>)
 8008468:	4620      	mov	r0, r4
 800846a:	f009 fc67 	bl	8011d3c <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 800846e:	7ea3      	ldrb	r3, [r4, #26]
 8008470:	b123      	cbz	r3, 800847c <OnRetransmitTimeoutTimerEvent+0x18>
        MacCtx.RetransmitTimeoutRetry = true;
 8008472:	f5a4 6380 	sub.w	r3, r4, #1024	@ 0x400
 8008476:	2201      	movs	r2, #1
 8008478:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    OnMacProcessNotify( );
 800847c:	f7ff ff12 	bl	80082a4 <OnMacProcessNotify>
}
 8008480:	bd10      	pop	{r4, pc}
 8008482:	bf00      	nop
 8008484:	20000b28 	.word	0x20000b28

08008488 <PrepareRxDoneAbort>:
{
 8008488:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800848a:	4b0e      	ldr	r3, [pc, #56]	@ (80084c4 <PrepareRxDoneAbort+0x3c>)
 800848c:	f8d3 2340 	ldr.w	r2, [r3, #832]	@ 0x340
 8008490:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008494:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    if( MacCtx.NodeAckRequested == true )
 8008498:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800849c:	b973      	cbnz	r3, 80084bc <PrepareRxDoneAbort+0x34>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 800849e:	4b09      	ldr	r3, [pc, #36]	@ (80084c4 <PrepareRxDoneAbort+0x3c>)
 80084a0:	f893 2491 	ldrb.w	r2, [r3, #1169]	@ 0x491
 80084a4:	f042 0202 	orr.w	r2, r2, #2
 80084a8:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 80084ac:	b2d2      	uxtb	r2, r2
 80084ae:	f042 0210 	orr.w	r2, r2, #16
 80084b2:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
    UpdateRxSlotIdleState( );
 80084b6:	f7ff fdd5 	bl	8008064 <UpdateRxSlotIdleState>
}
 80084ba:	bd08      	pop	{r3, pc}
        OnRetransmitTimeoutTimerEvent( NULL );
 80084bc:	2000      	movs	r0, #0
 80084be:	f7ff ffd1 	bl	8008464 <OnRetransmitTimeoutTimerEvent>
 80084c2:	e7ec      	b.n	800849e <PrepareRxDoneAbort+0x16>
 80084c4:	20000728 	.word	0x20000728

080084c8 <LoRaMacCheckForBeaconAcquisition>:
{
 80084c8:	b508      	push	{r3, lr}
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 80084ca:	200b      	movs	r0, #11
 80084cc:	f003 fbca 	bl	800bc64 <LoRaMacConfirmQueueIsCmdActive>
 80084d0:	b188      	cbz	r0, 80084f6 <LoRaMacCheckForBeaconAcquisition+0x2e>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 80084d2:	4b0b      	ldr	r3, [pc, #44]	@ (8008500 <LoRaMacCheckForBeaconAcquisition+0x38>)
 80084d4:	f893 0491 	ldrb.w	r0, [r3, #1169]	@ 0x491
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 80084d8:	f010 0f01 	tst.w	r0, #1
 80084dc:	d10d      	bne.n	80084fa <LoRaMacCheckForBeaconAcquisition+0x32>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80084de:	f010 0004 	ands.w	r0, r0, #4
 80084e2:	d009      	beq.n	80084f8 <LoRaMacCheckForBeaconAcquisition+0x30>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80084e4:	461a      	mov	r2, r3
 80084e6:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80084ea:	f023 0302 	bic.w	r3, r3, #2
 80084ee:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            return 0x01;
 80084f2:	2001      	movs	r0, #1
 80084f4:	e000      	b.n	80084f8 <LoRaMacCheckForBeaconAcquisition+0x30>
    return 0x00;
 80084f6:	2000      	movs	r0, #0
}
 80084f8:	bd08      	pop	{r3, pc}
    return 0x00;
 80084fa:	2000      	movs	r0, #0
 80084fc:	e7fc      	b.n	80084f8 <LoRaMacCheckForBeaconAcquisition+0x30>
 80084fe:	bf00      	nop
 8008500:	20000728 	.word	0x20000728

08008504 <GetFCntDown>:
{
 8008504:	b538      	push	{r3, r4, r5, lr}
 8008506:	9c04      	ldr	r4, [sp, #16]
 8008508:	9d05      	ldr	r5, [sp, #20]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800850a:	b1f2      	cbz	r2, 800854a <GetFCntDown+0x46>
 800850c:	4694      	mov	ip, r2
 800850e:	b1f4      	cbz	r4, 800854e <GetFCntDown+0x4a>
 8008510:	b1fd      	cbz	r5, 8008552 <GetFCntDown+0x4e>
    switch( addrID )
 8008512:	b188      	cbz	r0, 8008538 <GetFCntDown+0x34>
 8008514:	2801      	cmp	r0, #1
 8008516:	d11e      	bne.n	8008556 <GetFCntDown+0x52>
            if( lrWanVersion.Fields.Minor == 1 )
 8008518:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800851c:	2b01      	cmp	r3, #1
 800851e:	d002      	beq.n	8008526 <GetFCntDown+0x22>
                *fCntID = FCNT_DOWN;
 8008520:	2303      	movs	r3, #3
 8008522:	7023      	strb	r3, [r4, #0]
 8008524:	e00a      	b.n	800853c <GetFCntDown+0x38>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8008526:	b121      	cbz	r1, 8008532 <GetFCntDown+0x2e>
 8008528:	2903      	cmp	r1, #3
 800852a:	d002      	beq.n	8008532 <GetFCntDown+0x2e>
                    *fCntID = N_FCNT_DOWN;
 800852c:	2301      	movs	r3, #1
 800852e:	7023      	strb	r3, [r4, #0]
 8008530:	e004      	b.n	800853c <GetFCntDown+0x38>
                    *fCntID = A_FCNT_DOWN;
 8008532:	2302      	movs	r3, #2
 8008534:	7023      	strb	r3, [r4, #0]
 8008536:	e001      	b.n	800853c <GetFCntDown+0x38>
            *fCntID = MC_FCNT_DOWN_0;
 8008538:	2304      	movs	r3, #4
 800853a:	7023      	strb	r3, [r4, #0]
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 800853c:	462a      	mov	r2, r5
 800853e:	f8bc 100e 	ldrh.w	r1, [ip, #14]
 8008542:	7820      	ldrb	r0, [r4, #0]
 8008544:	f003 fdb8 	bl	800c0b8 <LoRaMacCryptoGetFCntDown>
}
 8008548:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800854a:	2009      	movs	r0, #9
 800854c:	e7fc      	b.n	8008548 <GetFCntDown+0x44>
 800854e:	2009      	movs	r0, #9
 8008550:	e7fa      	b.n	8008548 <GetFCntDown+0x44>
 8008552:	2009      	movs	r0, #9
 8008554:	e7f8      	b.n	8008548 <GetFCntDown+0x44>
    switch( addrID )
 8008556:	2005      	movs	r0, #5
 8008558:	e7f6      	b.n	8008548 <GetFCntDown+0x44>

0800855a <RemoveMacCommands>:
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800855a:	2801      	cmp	r0, #1
 800855c:	d900      	bls.n	8008560 <RemoveMacCommands+0x6>
 800855e:	4770      	bx	lr
{
 8008560:	b508      	push	{r3, lr}
        if( request == MCPS_CONFIRMED )
 8008562:	2a01      	cmp	r2, #1
 8008564:	d105      	bne.n	8008572 <RemoveMacCommands+0x18>
            if( fCtrl.Bits.Ack == 1 )
 8008566:	f011 0f20 	tst.w	r1, #32
 800856a:	d004      	beq.n	8008576 <RemoveMacCommands+0x1c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800856c:	f003 fa26 	bl	800b9bc <LoRaMacCommandsRemoveStickyAnsCmds>
 8008570:	e001      	b.n	8008576 <RemoveMacCommands+0x1c>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8008572:	f003 fa23 	bl	800b9bc <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8008576:	bd08      	pop	{r3, pc}

08008578 <ProcessMacCommands>:
{
 8008578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800857c:	b08f      	sub	sp, #60	@ 0x3c
 800857e:	4698      	mov	r8, r3
    uint8_t status = 0;
 8008580:	2300      	movs	r3, #0
 8008582:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8008586:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 800858a:	f89d 3060 	ldrb.w	r3, [sp, #96]	@ 0x60
 800858e:	2b01      	cmp	r3, #1
 8008590:	f200 82d8 	bhi.w	8008b44 <ProcessMacCommands+0x5cc>
 8008594:	4605      	mov	r5, r0
 8008596:	460c      	mov	r4, r1
 8008598:	4617      	mov	r7, r2
    bool adrBlockFound = false;
 800859a:	f04f 0900 	mov.w	r9, #0
    while( macIndex < commandsSize )
 800859e:	42bc      	cmp	r4, r7
 80085a0:	f080 82d0 	bcs.w	8008b44 <ProcessMacCommands+0x5cc>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 80085a4:	5d28      	ldrb	r0, [r5, r4]
 80085a6:	f003 fa61 	bl	800ba6c <LoRaMacCommandsGetCmdSize>
 80085aa:	4420      	add	r0, r4
 80085ac:	42b8      	cmp	r0, r7
 80085ae:	f300 82c9 	bgt.w	8008b44 <ProcessMacCommands+0x5cc>
        switch( payload[macIndex++] )
 80085b2:	1c66      	adds	r6, r4, #1
 80085b4:	b2f6      	uxtb	r6, r6
 80085b6:	5d2b      	ldrb	r3, [r5, r4]
 80085b8:	3b02      	subs	r3, #2
 80085ba:	2b11      	cmp	r3, #17
 80085bc:	f200 82c2 	bhi.w	8008b44 <ProcessMacCommands+0x5cc>
 80085c0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80085c4:	00280012 	.word	0x00280012
 80085c8:	00c000ad 	.word	0x00c000ad
 80085cc:	011d0105 	.word	0x011d0105
 80085d0:	01720156 	.word	0x01720156
 80085d4:	02c001be 	.word	0x02c001be
 80085d8:	01ee02c0 	.word	0x01ee02c0
 80085dc:	02c002c0 	.word	0x02c002c0
 80085e0:	02670250 	.word	0x02670250
 80085e4:	02a00286 	.word	0x02a00286
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 80085e8:	2005      	movs	r0, #5
 80085ea:	f003 fb3b 	bl	800bc64 <LoRaMacConfirmQueueIsCmdActive>
 80085ee:	b908      	cbnz	r0, 80085f4 <ProcessMacCommands+0x7c>
        switch( payload[macIndex++] )
 80085f0:	4634      	mov	r4, r6
 80085f2:	e7d4      	b.n	800859e <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 80085f4:	2105      	movs	r1, #5
 80085f6:	2000      	movs	r0, #0
 80085f8:	f003 fae8 	bl	800bbcc <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 80085fc:	1ca3      	adds	r3, r4, #2
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	5da9      	ldrb	r1, [r5, r6]
 8008602:	4aa6      	ldr	r2, [pc, #664]	@ (800889c <ProcessMacCommands+0x324>)
 8008604:	f882 145c 	strb.w	r1, [r2, #1116]	@ 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8008608:	3403      	adds	r4, #3
 800860a:	b2e4      	uxtb	r4, r4
 800860c:	5ceb      	ldrb	r3, [r5, r3]
 800860e:	f882 345d 	strb.w	r3, [r2, #1117]	@ 0x45d
 8008612:	e7c4      	b.n	800859e <ProcessMacCommands+0x26>
                int8_t linkAdrDatarate = DR_0;
 8008614:	2300      	movs	r3, #0
 8008616:	f88d 300a 	strb.w	r3, [sp, #10]
                int8_t linkAdrTxPower = TX_POWER_0;
 800861a:	f88d 300b 	strb.w	r3, [sp, #11]
                uint8_t linkAdrNbRep = 0;
 800861e:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t linkAdrNbBytesParsed = 0;
 8008622:	f88d 3014 	strb.w	r3, [sp, #20]
                if( adrBlockFound == false )
 8008626:	f1b9 0f00 	cmp.w	r9, #0
 800862a:	d036      	beq.n	800869a <ProcessMacCommands+0x122>
                    macIndex += 4;
 800862c:	3405      	adds	r4, #5
 800862e:	b2e4      	uxtb	r4, r4
 8008630:	e7b5      	b.n	800859e <ProcessMacCommands+0x26>
                            linkAdrReq.PayloadSize = 5;
 8008632:	2305      	movs	r3, #5
 8008634:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8008638:	e050      	b.n	80086dc <ProcessMacCommands+0x164>
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 800863a:	4b99      	ldr	r3, [pc, #612]	@ (80088a0 <ProcessMacCommands+0x328>)
 800863c:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8008640:	f99d 200a 	ldrsb.w	r2, [sp, #10]
 8008644:	4293      	cmp	r3, r2
 8008646:	da03      	bge.n	8008650 <ProcessMacCommands+0xd8>
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 8008648:	4b95      	ldr	r3, [pc, #596]	@ (80088a0 <ProcessMacCommands+0x328>)
 800864a:	2101      	movs	r1, #1
 800864c:	f883 111d 	strb.w	r1, [r3, #285]	@ 0x11d
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8008650:	4b93      	ldr	r3, [pc, #588]	@ (80088a0 <ProcessMacCommands+0x328>)
 8008652:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8008656:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800865a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800865e:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8008662:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
 8008666:	e04d      	b.n	8008704 <ProcessMacCommands+0x18c>
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8008668:	2201      	movs	r2, #1
 800866a:	f10d 012f 	add.w	r1, sp, #47	@ 0x2f
 800866e:	2003      	movs	r0, #3
 8008670:	f003 f930 	bl	800b8d4 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8008674:	3401      	adds	r4, #1
 8008676:	b2e4      	uxtb	r4, r4
 8008678:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800867c:	4989      	ldr	r1, [pc, #548]	@ (80088a4 <ProcessMacCommands+0x32c>)
 800867e:	fba1 2103 	umull	r2, r1, r1, r3
 8008682:	ebb4 0f91 	cmp.w	r4, r1, lsr #2
 8008686:	d3ef      	bcc.n	8008668 <ProcessMacCommands+0xf0>
                        macIndex += linkAdrNbBytesParsed - 1;
 8008688:	4433      	add	r3, r6
 800868a:	b2de      	uxtb	r6, r3
 800868c:	1e74      	subs	r4, r6, #1
 800868e:	b2e4      	uxtb	r4, r4
                        if( macIndex >= commandsSize )
 8008690:	42a7      	cmp	r7, r4
 8008692:	d93a      	bls.n	800870a <ProcessMacCommands+0x192>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 8008694:	5d2b      	ldrb	r3, [r5, r4]
 8008696:	2b03      	cmp	r3, #3
 8008698:	d136      	bne.n	8008708 <ProcessMacCommands+0x190>
                        linkAdrReq.Payload = &payload[macIndex - 1];
 800869a:	1e73      	subs	r3, r6, #1
 800869c:	442b      	add	r3, r5
 800869e:	9308      	str	r3, [sp, #32]
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80086a0:	4b7f      	ldr	r3, [pc, #508]	@ (80088a0 <ProcessMacCommands+0x328>)
 80086a2:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 80086a6:	f88d 2026 	strb.w	r2, [sp, #38]	@ 0x26
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80086aa:	f893 107c 	ldrb.w	r1, [r3, #124]	@ 0x7c
 80086ae:	f88d 1025 	strb.w	r1, [sp, #37]	@ 0x25
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80086b2:	f993 1039 	ldrsb.w	r1, [r3, #57]	@ 0x39
 80086b6:	f88d 1027 	strb.w	r1, [sp, #39]	@ 0x27
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80086ba:	f993 1038 	ldrsb.w	r1, [r3, #56]	@ 0x38
 80086be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80086c2:	f893 1068 	ldrb.w	r1, [r3, #104]	@ 0x68
 80086c6:	f88d 1029 	strb.w	r1, [sp, #41]	@ 0x29
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 80086ca:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 80086ce:	9307      	str	r3, [sp, #28]
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80086d0:	2a00      	cmp	r2, #0
 80086d2:	d0ae      	beq.n	8008632 <ProcessMacCommands+0xba>
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 80086d4:	1bbb      	subs	r3, r7, r6
 80086d6:	3301      	adds	r3, #1
 80086d8:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 80086dc:	ab05      	add	r3, sp, #20
 80086de:	9301      	str	r3, [sp, #4]
 80086e0:	ab03      	add	r3, sp, #12
 80086e2:	9300      	str	r3, [sp, #0]
 80086e4:	f10d 030b 	add.w	r3, sp, #11
 80086e8:	f10d 020a 	add.w	r2, sp, #10
 80086ec:	a907      	add	r1, sp, #28
 80086ee:	486c      	ldr	r0, [pc, #432]	@ (80088a0 <ProcessMacCommands+0x328>)
 80086f0:	f890 0048 	ldrb.w	r0, [r0, #72]	@ 0x48
 80086f4:	f004 f8c8 	bl	800c888 <RegionLinkAdrReq>
 80086f8:	f88d 002f 	strb.w	r0, [sp, #47]	@ 0x2f
                        if( ( status & 0x07 ) == 0x07 )
 80086fc:	f000 0007 	and.w	r0, r0, #7
 8008700:	2807      	cmp	r0, #7
 8008702:	d09a      	beq.n	800863a <ProcessMacCommands+0xc2>
{
 8008704:	2400      	movs	r4, #0
 8008706:	e7b7      	b.n	8008678 <ProcessMacCommands+0x100>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 8008708:	4634      	mov	r4, r6
                    if( macIndex < commandsSize )
 800870a:	42bc      	cmp	r4, r7
 800870c:	d204      	bcs.n	8008718 <ProcessMacCommands+0x1a0>
                        macIndex--;
 800870e:	3c01      	subs	r4, #1
 8008710:	b2e4      	uxtb	r4, r4
                    adrBlockFound = true;
 8008712:	f04f 0901 	mov.w	r9, #1
 8008716:	e742      	b.n	800859e <ProcessMacCommands+0x26>
 8008718:	f04f 0901 	mov.w	r9, #1
                break;
 800871c:	e73f      	b.n	800859e <ProcessMacCommands+0x26>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800871e:	3402      	adds	r4, #2
 8008720:	b2e4      	uxtb	r4, r4
 8008722:	5dab      	ldrb	r3, [r5, r6]
 8008724:	f003 030f 	and.w	r3, r3, #15
 8008728:	495d      	ldr	r1, [pc, #372]	@ (80088a0 <ProcessMacCommands+0x328>)
 800872a:	f881 311b 	strb.w	r3, [r1, #283]	@ 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800872e:	2201      	movs	r2, #1
 8008730:	fa02 f303 	lsl.w	r3, r2, r3
 8008734:	f8a1 3120 	strh.w	r3, [r1, #288]	@ 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8008738:	2200      	movs	r2, #0
 800873a:	a90b      	add	r1, sp, #44	@ 0x2c
 800873c:	2004      	movs	r0, #4
 800873e:	f003 f8c9 	bl	800b8d4 <LoRaMacCommandsAddCmd>
                break;
 8008742:	e72c      	b.n	800859e <ProcessMacCommands+0x26>
                status = 0x07;
 8008744:	2307      	movs	r3, #7
 8008746:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800874a:	5dab      	ldrb	r3, [r5, r6]
 800874c:	f3c3 1202 	ubfx	r2, r3, #4, #3
 8008750:	f88d 201d 	strb.w	r2, [sp, #29]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8008754:	f003 030f 	and.w	r3, r3, #15
 8008758:	f88d 301c 	strb.w	r3, [sp, #28]
                macIndex++;
 800875c:	1ca3      	adds	r3, r4, #2
 800875e:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8008760:	1ce1      	adds	r1, r4, #3
 8008762:	b2c9      	uxtb	r1, r1
 8008764:	5ceb      	ldrb	r3, [r5, r3]
 8008766:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008768:	1d22      	adds	r2, r4, #4
 800876a:	b2d2      	uxtb	r2, r2
 800876c:	5c69      	ldrb	r1, [r5, r1]
 800876e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008772:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008774:	3405      	adds	r4, #5
 8008776:	b2e4      	uxtb	r4, r4
 8008778:	5caa      	ldrb	r2, [r5, r2]
 800877a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800877e:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency *= 100;
 8008780:	2264      	movs	r2, #100	@ 0x64
 8008782:	fb02 f303 	mul.w	r3, r2, r3
 8008786:	9308      	str	r3, [sp, #32]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8008788:	a907      	add	r1, sp, #28
 800878a:	4b45      	ldr	r3, [pc, #276]	@ (80088a0 <ProcessMacCommands+0x328>)
 800878c:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8008790:	f004 f896 	bl	800c8c0 <RegionRxParamSetupReq>
 8008794:	f88d 002f 	strb.w	r0, [sp, #47]	@ 0x2f
                if( ( status & 0x07 ) == 0x07 )
 8008798:	f000 0307 	and.w	r3, r0, #7
 800879c:	2b07      	cmp	r3, #7
 800879e:	d007      	beq.n	80087b0 <ProcessMacCommands+0x238>
                macCmdPayload[0] = status;
 80087a0:	f88d 002c 	strb.w	r0, [sp, #44]	@ 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 80087a4:	2201      	movs	r2, #1
 80087a6:	a90b      	add	r1, sp, #44	@ 0x2c
 80087a8:	2005      	movs	r0, #5
 80087aa:	f003 f893 	bl	800b8d4 <LoRaMacCommandsAddCmd>
                break;
 80087ae:	e6f6      	b.n	800859e <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 80087b0:	f89d 201c 	ldrb.w	r2, [sp, #28]
 80087b4:	4b3a      	ldr	r3, [pc, #232]	@ (80088a0 <ProcessMacCommands+0x328>)
 80087b6:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 80087ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 80087be:	9a08      	ldr	r2, [sp, #32]
 80087c0:	66da      	str	r2, [r3, #108]	@ 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 80087c2:	675a      	str	r2, [r3, #116]	@ 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 80087c4:	f89d 201d 	ldrb.w	r2, [sp, #29]
 80087c8:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
 80087cc:	e7e8      	b.n	80087a0 <ProcessMacCommands+0x228>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 80087ce:	4b33      	ldr	r3, [pc, #204]	@ (800889c <ProcessMacCommands+0x324>)
 80087d0:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80087d4:	b17b      	cbz	r3, 80087f6 <ProcessMacCommands+0x27e>
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	b17b      	cbz	r3, 80087fa <ProcessMacCommands+0x282>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 80087da:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 80087dc:	f88d 002c 	strb.w	r0, [sp, #44]	@ 0x2c
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 80087e0:	f008 033f 	and.w	r3, r8, #63	@ 0x3f
 80087e4:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 80087e8:	2202      	movs	r2, #2
 80087ea:	a90b      	add	r1, sp, #44	@ 0x2c
 80087ec:	2006      	movs	r0, #6
 80087ee:	f003 f871 	bl	800b8d4 <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 80087f2:	4634      	mov	r4, r6
                break;
 80087f4:	e6d3      	b.n	800859e <ProcessMacCommands+0x26>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 80087f6:	20ff      	movs	r0, #255	@ 0xff
 80087f8:	e7f0      	b.n	80087dc <ProcessMacCommands+0x264>
 80087fa:	20ff      	movs	r0, #255	@ 0xff
 80087fc:	e7ee      	b.n	80087dc <ProcessMacCommands+0x264>
                status = 0x03;
 80087fe:	2303      	movs	r3, #3
 8008800:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
                newChannelReq.ChannelId = payload[macIndex++];
 8008804:	1ca3      	adds	r3, r4, #2
 8008806:	b2db      	uxtb	r3, r3
 8008808:	57aa      	ldrsb	r2, [r5, r6]
 800880a:	f88d 2018 	strb.w	r2, [sp, #24]
                newChannelReq.NewChannel = &chParam;
 800880e:	aa07      	add	r2, sp, #28
 8008810:	9205      	str	r2, [sp, #20]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8008812:	1ce2      	adds	r2, r4, #3
 8008814:	b2d2      	uxtb	r2, r2
 8008816:	5ceb      	ldrb	r3, [r5, r3]
 8008818:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800881a:	1d21      	adds	r1, r4, #4
 800881c:	b2c9      	uxtb	r1, r1
 800881e:	5caa      	ldrb	r2, [r5, r2]
 8008820:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008824:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008826:	1d62      	adds	r2, r4, #5
 8008828:	b2d2      	uxtb	r2, r2
 800882a:	5c69      	ldrb	r1, [r5, r1]
 800882c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008830:	9307      	str	r3, [sp, #28]
                chParam.Frequency *= 100;
 8008832:	2164      	movs	r1, #100	@ 0x64
 8008834:	fb01 f303 	mul.w	r3, r1, r3
 8008838:	9307      	str	r3, [sp, #28]
                chParam.Rx1Frequency = 0;
 800883a:	2300      	movs	r3, #0
 800883c:	9308      	str	r3, [sp, #32]
                chParam.DrRange.Value = payload[macIndex++];
 800883e:	3406      	adds	r4, #6
 8008840:	b2e4      	uxtb	r4, r4
 8008842:	56ab      	ldrsb	r3, [r5, r2]
 8008844:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8008848:	a905      	add	r1, sp, #20
 800884a:	4b15      	ldr	r3, [pc, #84]	@ (80088a0 <ProcessMacCommands+0x328>)
 800884c:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8008850:	f004 f845 	bl	800c8de <RegionNewChannelReq>
 8008854:	b2c3      	uxtb	r3, r0
 8008856:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
                if( ( int8_t )status >= 0 )
 800885a:	2800      	cmp	r0, #0
 800885c:	f6ff ae9f 	blt.w	800859e <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 8008860:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8008864:	2201      	movs	r2, #1
 8008866:	a90b      	add	r1, sp, #44	@ 0x2c
 8008868:	2007      	movs	r0, #7
 800886a:	f003 f833 	bl	800b8d4 <LoRaMacCommandsAddCmd>
                break;
 800886e:	e696      	b.n	800859e <ProcessMacCommands+0x26>
                uint8_t delay = payload[macIndex++] & 0x0F;
 8008870:	3402      	adds	r4, #2
 8008872:	b2e4      	uxtb	r4, r4
 8008874:	5dab      	ldrb	r3, [r5, r6]
                if( delay == 0 )
 8008876:	f013 030f 	ands.w	r3, r3, #15
 800887a:	d100      	bne.n	800887e <ProcessMacCommands+0x306>
                    delay++;
 800887c:	3301      	adds	r3, #1
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800887e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008882:	fb02 f303 	mul.w	r3, r2, r3
 8008886:	4a06      	ldr	r2, [pc, #24]	@ (80088a0 <ProcessMacCommands+0x328>)
 8008888:	6593      	str	r3, [r2, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800888a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800888e:	65d3      	str	r3, [r2, #92]	@ 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8008890:	2200      	movs	r2, #0
 8008892:	a90b      	add	r1, sp, #44	@ 0x2c
 8008894:	2008      	movs	r0, #8
 8008896:	f003 f81d 	bl	800b8d4 <LoRaMacCommandsAddCmd>
                break;
 800889a:	e680      	b.n	800859e <ProcessMacCommands+0x26>
 800889c:	20000728 	.word	0x20000728
 80088a0:	20008000 	.word	0x20008000
 80088a4:	cccccccd 	.word	0xcccccccd
                uint8_t eirpDwellTime = payload[macIndex++];
 80088a8:	3402      	adds	r4, #2
 80088aa:	b2e4      	uxtb	r4, r4
 80088ac:	5dab      	ldrb	r3, [r5, r6]
                txParamSetupReq.UplinkDwellTime = 0;
 80088ae:	2200      	movs	r2, #0
 80088b0:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.DownlinkDwellTime = 0;
 80088b4:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 80088b8:	f013 0f20 	tst.w	r3, #32
 80088bc:	d002      	beq.n	80088c4 <ProcessMacCommands+0x34c>
                    txParamSetupReq.DownlinkDwellTime = 1;
 80088be:	2201      	movs	r2, #1
 80088c0:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 80088c4:	f013 0f10 	tst.w	r3, #16
 80088c8:	d002      	beq.n	80088d0 <ProcessMacCommands+0x358>
                    txParamSetupReq.UplinkDwellTime = 1;
 80088ca:	2201      	movs	r2, #1
 80088cc:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 80088d0:	f003 030f 	and.w	r3, r3, #15
 80088d4:	f88d 300e 	strb.w	r3, [sp, #14]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 80088d8:	a903      	add	r1, sp, #12
 80088da:	4b9c      	ldr	r3, [pc, #624]	@ (8008b4c <ProcessMacCommands+0x5d4>)
 80088dc:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 80088e0:	f004 f80c 	bl	800c8fc <RegionTxParamSetupReq>
 80088e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80088e8:	f43f ae59 	beq.w	800859e <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 80088ec:	f89d a00c 	ldrb.w	sl, [sp, #12]
 80088f0:	4e96      	ldr	r6, [pc, #600]	@ (8008b4c <ProcessMacCommands+0x5d4>)
 80088f2:	f886 a07c 	strb.w	sl, [r6, #124]	@ 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 80088f6:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80088fa:	f886 307d 	strb.w	r3, [r6, #125]	@ 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80088fe:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8008902:	4a93      	ldr	r2, [pc, #588]	@ (8008b50 <ProcessMacCommands+0x5d8>)
 8008904:	5cd0      	ldrb	r0, [r2, r3]
 8008906:	f7f7 ff61 	bl	80007cc <__aeabi_ui2f>
 800890a:	f8c6 0080 	str.w	r0, [r6, #128]	@ 0x80
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800890e:	2302      	movs	r3, #2
 8008910:	f88d 301c 	strb.w	r3, [sp, #28]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008914:	f88d a01e 	strb.w	sl, [sp, #30]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008918:	a907      	add	r1, sp, #28
 800891a:	f896 0048 	ldrb.w	r0, [r6, #72]	@ 0x48
 800891e:	f003 ff1f 	bl	800c760 <RegionGetPhyParam>
 8008922:	9005      	str	r0, [sp, #20]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8008924:	b240      	sxtb	r0, r0
 8008926:	f996 3039 	ldrsb.w	r3, [r6, #57]	@ 0x39
 800892a:	4298      	cmp	r0, r3
 800892c:	bfb8      	it	lt
 800892e:	4618      	movlt	r0, r3
 8008930:	f886 0039 	strb.w	r0, [r6, #57]	@ 0x39
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8008934:	2200      	movs	r2, #0
 8008936:	a90b      	add	r1, sp, #44	@ 0x2c
 8008938:	2009      	movs	r0, #9
 800893a:	f002 ffcb 	bl	800b8d4 <LoRaMacCommandsAddCmd>
                break;
 800893e:	e62e      	b.n	800859e <ProcessMacCommands+0x26>
                status = 0x03;
 8008940:	2303      	movs	r3, #3
 8008942:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
                dlChannelReq.ChannelId = payload[macIndex++];
 8008946:	1ca3      	adds	r3, r4, #2
 8008948:	b2db      	uxtb	r3, r3
 800894a:	5daa      	ldrb	r2, [r5, r6]
 800894c:	f88d 201c 	strb.w	r2, [sp, #28]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8008950:	1ce1      	adds	r1, r4, #3
 8008952:	b2c9      	uxtb	r1, r1
 8008954:	5ceb      	ldrb	r3, [r5, r3]
 8008956:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008958:	1d22      	adds	r2, r4, #4
 800895a:	b2d2      	uxtb	r2, r2
 800895c:	5c69      	ldrb	r1, [r5, r1]
 800895e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008962:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008964:	3405      	adds	r4, #5
 8008966:	b2e4      	uxtb	r4, r4
 8008968:	5caa      	ldrb	r2, [r5, r2]
 800896a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800896e:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency *= 100;
 8008970:	2264      	movs	r2, #100	@ 0x64
 8008972:	fb02 f303 	mul.w	r3, r2, r3
 8008976:	9308      	str	r3, [sp, #32]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8008978:	a907      	add	r1, sp, #28
 800897a:	4b74      	ldr	r3, [pc, #464]	@ (8008b4c <ProcessMacCommands+0x5d4>)
 800897c:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8008980:	f003 ffcb 	bl	800c91a <RegionDlChannelReq>
 8008984:	b2c3      	uxtb	r3, r0
 8008986:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
                if( ( int8_t )status >= 0 )
 800898a:	2800      	cmp	r0, #0
 800898c:	f6ff ae07 	blt.w	800859e <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 8008990:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8008994:	2201      	movs	r2, #1
 8008996:	a90b      	add	r1, sp, #44	@ 0x2c
 8008998:	200a      	movs	r0, #10
 800899a:	f002 ff9b 	bl	800b8d4 <LoRaMacCommandsAddCmd>
                break;
 800899e:	e5fe      	b.n	800859e <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 80089a0:	2009      	movs	r0, #9
 80089a2:	f003 f95f 	bl	800bc64 <LoRaMacConfirmQueueIsCmdActive>
 80089a6:	b928      	cbnz	r0, 80089b4 <ProcessMacCommands+0x43c>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 80089a8:	4b6a      	ldr	r3, [pc, #424]	@ (8008b54 <ProcessMacCommands+0x5dc>)
 80089aa:	2200      	movs	r2, #0
 80089ac:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
        switch( payload[macIndex++] )
 80089b0:	4634      	mov	r4, r6
 80089b2:	e5f4      	b.n	800859e <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 80089b4:	2109      	movs	r1, #9
 80089b6:	2000      	movs	r0, #0
 80089b8:	f003 f908 	bl	800bbcc <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 80089bc:	a903      	add	r1, sp, #12
 80089be:	2300      	movs	r3, #0
 80089c0:	9303      	str	r3, [sp, #12]
 80089c2:	9304      	str	r3, [sp, #16]
                    SysTime_t sysTime = { 0 };
 80089c4:	f10d 0a14 	add.w	sl, sp, #20
 80089c8:	9305      	str	r3, [sp, #20]
 80089ca:	9306      	str	r3, [sp, #24]
                    SysTime_t sysTimeCurrent = { 0 };
 80089cc:	f10d 0b1c 	add.w	fp, sp, #28
 80089d0:	9307      	str	r3, [sp, #28]
 80089d2:	9308      	str	r3, [sp, #32]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 80089d4:	1ca0      	adds	r0, r4, #2
 80089d6:	b2c0      	uxtb	r0, r0
 80089d8:	5dab      	ldrb	r3, [r5, r6]
 80089da:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 80089dc:	1ce2      	adds	r2, r4, #3
 80089de:	b2d2      	uxtb	r2, r2
 80089e0:	5c28      	ldrb	r0, [r5, r0]
 80089e2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80089e6:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 80089e8:	1d20      	adds	r0, r4, #4
 80089ea:	b2c0      	uxtb	r0, r0
 80089ec:	5caa      	ldrb	r2, [r5, r2]
 80089ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089f2:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 80089f4:	1d62      	adds	r2, r4, #5
 80089f6:	b2d2      	uxtb	r2, r2
 80089f8:	5c28      	ldrb	r0, [r5, r0]
 80089fa:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80089fe:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8008a00:	3406      	adds	r4, #6
 8008a02:	b2e4      	uxtb	r4, r4
 8008a04:	5caa      	ldrb	r2, [r5, r2]
 8008a06:	f8ad 2010 	strh.w	r2, [sp, #16]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8008a0a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008a0e:	fb00 f202 	mul.w	r2, r0, r2
 8008a12:	0a12      	lsrs	r2, r2, #8
 8008a14:	f8ad 2010 	strh.w	r2, [sp, #16]
                    sysTime = gpsEpochTime;
 8008a18:	c903      	ldmia	r1, {r0, r1}
 8008a1a:	e88a 0003 	stmia.w	sl, {r0, r1}
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8008a1e:	4a4e      	ldr	r2, [pc, #312]	@ (8008b58 <ProcessMacCommands+0x5e0>)
 8008a20:	441a      	add	r2, r3
 8008a22:	9205      	str	r2, [sp, #20]
                    sysTimeCurrent = SysTimeGet( );
 8008a24:	4658      	mov	r0, fp
 8008a26:	f009 f89b 	bl	8011b60 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8008a2a:	4e4a      	ldr	r6, [pc, #296]	@ (8008b54 <ProcessMacCommands+0x5dc>)
 8008a2c:	f8d6 333c 	ldr.w	r3, [r6, #828]	@ 0x33c
 8008a30:	9300      	str	r3, [sp, #0]
 8008a32:	f8d6 3338 	ldr.w	r3, [r6, #824]	@ 0x338
 8008a36:	e89a 0006 	ldmia.w	sl, {r1, r2}
 8008a3a:	a80c      	add	r0, sp, #48	@ 0x30
 8008a3c:	f009 f84f 	bl	8011ade <SysTimeSub>
 8008a40:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008a42:	9300      	str	r3, [sp, #0]
 8008a44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008a46:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8008a4a:	4650      	mov	r0, sl
 8008a4c:	f009 f828 	bl	8011aa0 <SysTimeAdd>
                    SysTimeSet( sysTime );
 8008a50:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8008a54:	f009 f862 	bl	8011b1c <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8008a58:	f002 fea2 	bl	800b7a0 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	f886 3438 	strb.w	r3, [r6, #1080]	@ 0x438
 8008a62:	e59c      	b.n	800859e <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8008a64:	200c      	movs	r0, #12
 8008a66:	f003 f8fd 	bl	800bc64 <LoRaMacConfirmQueueIsCmdActive>
 8008a6a:	b908      	cbnz	r0, 8008a70 <ProcessMacCommands+0x4f8>
        switch( payload[macIndex++] )
 8008a6c:	4634      	mov	r4, r6
 8008a6e:	e596      	b.n	800859e <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8008a70:	210c      	movs	r1, #12
 8008a72:	2000      	movs	r0, #0
 8008a74:	f003 f8aa 	bl	800bbcc <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8008a78:	4b36      	ldr	r3, [pc, #216]	@ (8008b54 <ProcessMacCommands+0x5dc>)
 8008a7a:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 8008a7e:	3b04      	subs	r3, #4
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d801      	bhi.n	8008a8a <ProcessMacCommands+0x512>
        switch( payload[macIndex++] )
 8008a86:	4634      	mov	r4, r6
 8008a88:	e589      	b.n	800859e <ProcessMacCommands+0x26>
                        LoRaMacClassBPingSlotInfoAns( );
 8008a8a:	f002 fe85 	bl	800b798 <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 8008a8e:	4634      	mov	r4, r6
 8008a90:	e585      	b.n	800859e <ProcessMacCommands+0x26>
                frequency = ( uint32_t )payload[macIndex++];
 8008a92:	1ca2      	adds	r2, r4, #2
 8008a94:	b2d2      	uxtb	r2, r2
 8008a96:	5dab      	ldrb	r3, [r5, r6]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8008a98:	1ce1      	adds	r1, r4, #3
 8008a9a:	b2c9      	uxtb	r1, r1
 8008a9c:	5caa      	ldrb	r2, [r5, r2]
 8008a9e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008aa2:	1d22      	adds	r2, r4, #4
 8008aa4:	b2d2      	uxtb	r2, r2
 8008aa6:	5c69      	ldrb	r1, [r5, r1]
 8008aa8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                datarate = payload[macIndex++] & 0x0F;
 8008aac:	3405      	adds	r4, #5
 8008aae:	b2e4      	uxtb	r4, r4
 8008ab0:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8008ab2:	2164      	movs	r1, #100	@ 0x64
 8008ab4:	fb03 f101 	mul.w	r1, r3, r1
 8008ab8:	f000 000f 	and.w	r0, r0, #15
 8008abc:	f002 fe6d 	bl	800b79a <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 8008ac0:	f88d 002c 	strb.w	r0, [sp, #44]	@ 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	a90b      	add	r1, sp, #44	@ 0x2c
 8008ac8:	2011      	movs	r0, #17
 8008aca:	f002 ff03 	bl	800b8d4 <LoRaMacCommandsAddCmd>
                break;
 8008ace:	e566      	b.n	800859e <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8008ad0:	200d      	movs	r0, #13
 8008ad2:	f003 f8c7 	bl	800bc64 <LoRaMacConfirmQueueIsCmdActive>
 8008ad6:	b908      	cbnz	r0, 8008adc <ProcessMacCommands+0x564>
        switch( payload[macIndex++] )
 8008ad8:	4634      	mov	r4, r6
 8008ada:	e560      	b.n	800859e <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8008adc:	210d      	movs	r1, #13
 8008ade:	2000      	movs	r0, #0
 8008ae0:	f003 f874 	bl	800bbcc <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8008ae4:	1ca2      	adds	r2, r4, #2
 8008ae6:	b2d2      	uxtb	r2, r2
 8008ae8:	5da8      	ldrb	r0, [r5, r6]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8008aea:	1ce3      	adds	r3, r4, #3
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	5cae      	ldrb	r6, [r5, r2]
                    beaconTimingChannel = payload[macIndex++];
 8008af0:	3404      	adds	r4, #4
 8008af2:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8008af4:	4a19      	ldr	r2, [pc, #100]	@ (8008b5c <ProcessMacCommands+0x5e4>)
 8008af6:	6812      	ldr	r2, [r2, #0]
 8008af8:	5ce9      	ldrb	r1, [r5, r3]
 8008afa:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 8008afe:	f002 fe4e 	bl	800b79e <LoRaMacClassBBeaconTimingAns>
 8008b02:	e54c      	b.n	800859e <ProcessMacCommands+0x26>
                    frequency = ( uint32_t )payload[macIndex++];
 8008b04:	1ca1      	adds	r1, r4, #2
 8008b06:	b2c9      	uxtb	r1, r1
 8008b08:	5dab      	ldrb	r3, [r5, r6]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8008b0a:	1ce2      	adds	r2, r4, #3
 8008b0c:	b2d2      	uxtb	r2, r2
 8008b0e:	5c69      	ldrb	r1, [r5, r1]
 8008b10:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008b14:	3404      	adds	r4, #4
 8008b16:	b2e4      	uxtb	r4, r4
 8008b18:	5caa      	ldrb	r2, [r5, r2]
 8008b1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8008b1e:	2064      	movs	r0, #100	@ 0x64
 8008b20:	fb03 f000 	mul.w	r0, r3, r0
 8008b24:	f002 fe3d 	bl	800b7a2 <LoRaMacClassBBeaconFreqReq>
 8008b28:	b140      	cbz	r0, 8008b3c <ProcessMacCommands+0x5c4>
                        macCmdPayload[0] = 1;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8008b30:	2201      	movs	r2, #1
 8008b32:	a90b      	add	r1, sp, #44	@ 0x2c
 8008b34:	2013      	movs	r0, #19
 8008b36:	f002 fecd 	bl	800b8d4 <LoRaMacCommandsAddCmd>
                break;
 8008b3a:	e530      	b.n	800859e <ProcessMacCommands+0x26>
                        macCmdPayload[0] = 0;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8008b42:	e7f5      	b.n	8008b30 <ProcessMacCommands+0x5b8>
}
 8008b44:	b00f      	add	sp, #60	@ 0x3c
 8008b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b4a:	bf00      	nop
 8008b4c:	20008000 	.word	0x20008000
 8008b50:	08012d04 	.word	0x08012d04
 8008b54:	20000728 	.word	0x20000728
 8008b58:	12d53d80 	.word	0x12d53d80
 8008b5c:	20000680 	.word	0x20000680

08008b60 <ProcessRadioRxDone>:
{
 8008b60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b64:	b0a5      	sub	sp, #148	@ 0x94
    uint8_t *payload = RxDoneParams.Payload;
 8008b66:	4ba5      	ldr	r3, [pc, #660]	@ (8008dfc <ProcessRadioRxDone+0x29c>)
 8008b68:	685e      	ldr	r6, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 8008b6a:	891d      	ldrh	r5, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 8008b6c:	f9b3 800a 	ldrsh.w	r8, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 8008b70:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t downLinkCounter = 0;
 8008b74:	2300      	movs	r3, #0
 8008b76:	9307      	str	r3, [sp, #28]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8008b78:	4aa1      	ldr	r2, [pc, #644]	@ (8008e00 <ProcessRadioRxDone+0x2a0>)
 8008b7a:	f8d2 90e4 	ldr.w	r9, [r2, #228]	@ 0xe4
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 8008b7e:	4aa1      	ldr	r2, [pc, #644]	@ (8008e04 <ProcessRadioRxDone+0x2a4>)
 8008b80:	7811      	ldrb	r1, [r2, #0]
 8008b82:	f363 0100 	bfi	r1, r3, #0, #1
 8008b86:	7011      	strb	r1, [r2, #0]
    MacCtx.McpsConfirm.AckReceived = false;
 8008b88:	4c9f      	ldr	r4, [pc, #636]	@ (8008e08 <ProcessRadioRxDone+0x2a8>)
 8008b8a:	f884 3444 	strb.w	r3, [r4, #1092]	@ 0x444
    MacCtx.RxStatus.Rssi = rssi;
 8008b8e:	f8a4 848c 	strh.w	r8, [r4, #1164]	@ 0x48c
    MacCtx.RxStatus.Snr = snr;
 8008b92:	f884 748e 	strb.w	r7, [r4, #1166]	@ 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 8008b96:	f894 2490 	ldrb.w	r2, [r4, #1168]	@ 0x490
 8008b9a:	f884 248f 	strb.w	r2, [r4, #1167]	@ 0x48f
    MacCtx.McpsIndication.Port = 0;
 8008b9e:	f884 3423 	strb.w	r3, [r4, #1059]	@ 0x423
    MacCtx.McpsIndication.Multicast = 0;
 8008ba2:	f884 3422 	strb.w	r3, [r4, #1058]	@ 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 8008ba6:	f884 3425 	strb.w	r3, [r4, #1061]	@ 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 8008baa:	f8c4 3428 	str.w	r3, [r4, #1064]	@ 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 8008bae:	f884 342c 	strb.w	r3, [r4, #1068]	@ 0x42c
    MacCtx.McpsIndication.RxData = false;
 8008bb2:	f884 342d 	strb.w	r3, [r4, #1069]	@ 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 8008bb6:	f884 342e 	strb.w	r3, [r4, #1070]	@ 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8008bba:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8008bbe:	f884 3420 	strb.w	r3, [r4, #1056]	@ 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 8008bc2:	f8c4 3434 	str.w	r3, [r4, #1076]	@ 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8008bc6:	f884 3438 	strb.w	r3, [r4, #1080]	@ 0x438
    MacCtx.McpsIndication.ResponseTimeout = 0;
 8008bca:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
    Radio.Sleep( );
 8008bce:	4b8f      	ldr	r3, [pc, #572]	@ (8008e0c <ProcessRadioRxDone+0x2ac>)
 8008bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bd2:	4798      	blx	r3
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8008bd4:	f894 348f 	ldrb.w	r3, [r4, #1167]	@ 0x48f
 8008bd8:	b1d3      	cbz	r3, 8008c10 <ProcessRadioRxDone+0xb0>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8008bda:	4629      	mov	r1, r5
 8008bdc:	4630      	mov	r0, r6
 8008bde:	f002 fdc8 	bl	800b772 <LoRaMacClassBRxBeacon>
 8008be2:	b9d0      	cbnz	r0, 8008c1a <ProcessRadioRxDone+0xba>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008be4:	4b86      	ldr	r3, [pc, #536]	@ (8008e00 <ProcessRadioRxDone+0x2a0>)
 8008be6:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d01d      	beq.n	8008c2a <ProcessRadioRxDone+0xca>
    if( size == 0 )
 8008bee:	2d00      	cmp	r5, #0
 8008bf0:	d038      	beq.n	8008c64 <ProcessRadioRxDone+0x104>
    macHdr.Value = payload[pktHeaderLen++];
 8008bf2:	7834      	ldrb	r4, [r6, #0]
    switch( macHdr.Bits.MType )
 8008bf4:	0963      	lsrs	r3, r4, #5
 8008bf6:	3b01      	subs	r3, #1
 8008bf8:	2b06      	cmp	r3, #6
 8008bfa:	f200 82f6 	bhi.w	80091ea <ProcessRadioRxDone+0x68a>
 8008bfe:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008c02:	0038      	.short	0x0038
 8008c04:	00d102f4 	.word	0x00d102f4
 8008c08:	00cd02f4 	.word	0x00cd02f4
 8008c0c:	02c802f4 	.word	0x02c802f4
        TimerStop( &MacCtx.RxWindowTimer2 );
 8008c10:	f504 7066 	add.w	r0, r4, #920	@ 0x398
 8008c14:	f009 f892 	bl	8011d3c <UTIL_TIMER_Stop>
 8008c18:	e7df      	b.n	8008bda <ProcessRadioRxDone+0x7a>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8008c1a:	4b7b      	ldr	r3, [pc, #492]	@ (8008e08 <ProcessRadioRxDone+0x2a8>)
 8008c1c:	f8a3 847e 	strh.w	r8, [r3, #1150]	@ 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8008c20:	f883 7480 	strb.w	r7, [r3, #1152]	@ 0x480
}
 8008c24:	b025      	add	sp, #148	@ 0x94
 8008c26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 8008c2a:	f002 fda6 	bl	800b77a <LoRaMacClassBIsPingExpected>
 8008c2e:	b150      	cbz	r0, 8008c46 <ProcessRadioRxDone+0xe6>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008c30:	2000      	movs	r0, #0
 8008c32:	f002 fd97 	bl	800b764 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8008c36:	2000      	movs	r0, #0
 8008c38:	f002 fd99 	bl	800b76e <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8008c3c:	4b72      	ldr	r3, [pc, #456]	@ (8008e08 <ProcessRadioRxDone+0x2a8>)
 8008c3e:	2204      	movs	r2, #4
 8008c40:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
 8008c44:	e7d3      	b.n	8008bee <ProcessRadioRxDone+0x8e>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008c46:	f002 fd9a 	bl	800b77e <LoRaMacClassBIsMulticastExpected>
 8008c4a:	2800      	cmp	r0, #0
 8008c4c:	d0cf      	beq.n	8008bee <ProcessRadioRxDone+0x8e>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008c4e:	2000      	movs	r0, #0
 8008c50:	f002 fd89 	bl	800b766 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8008c54:	2000      	movs	r0, #0
 8008c56:	f002 fd8b 	bl	800b770 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8008c5a:	4b6b      	ldr	r3, [pc, #428]	@ (8008e08 <ProcessRadioRxDone+0x2a8>)
 8008c5c:	2205      	movs	r2, #5
 8008c5e:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
 8008c62:	e7c4      	b.n	8008bee <ProcessRadioRxDone+0x8e>
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008c64:	4b68      	ldr	r3, [pc, #416]	@ (8008e08 <ProcessRadioRxDone+0x2a8>)
 8008c66:	2201      	movs	r2, #1
 8008c68:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
        PrepareRxDoneAbort( );
 8008c6c:	f7ff fc0c 	bl	8008488 <PrepareRxDoneAbort>
        return;
 8008c70:	e7d8      	b.n	8008c24 <ProcessRadioRxDone+0xc4>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 8008c72:	2d10      	cmp	r5, #16
 8008c74:	d92e      	bls.n	8008cd4 <ProcessRadioRxDone+0x174>
            macMsgJoinAccept.Buffer = payload;
 8008c76:	9608      	str	r6, [sp, #32]
            macMsgJoinAccept.BufSize = size;
 8008c78:	b2ed      	uxtb	r5, r5
 8008c7a:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8008c7e:	4b60      	ldr	r3, [pc, #384]	@ (8008e00 <ProcessRadioRxDone+0x2a0>)
 8008c80:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8008c84:	bb6b      	cbnz	r3, 8008ce2 <ProcessRadioRxDone+0x182>
            SecureElementGetJoinEui( joinEui );
 8008c86:	a804      	add	r0, sp, #16
 8008c88:	f006 fd0e 	bl	800f6a8 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 8008c8c:	aa08      	add	r2, sp, #32
 8008c8e:	a904      	add	r1, sp, #16
 8008c90:	20ff      	movs	r0, #255	@ 0xff
 8008c92:	f003 fb63 	bl	800c35c <LoRaMacCryptoHandleJoinAccept>
 8008c96:	4604      	mov	r4, r0
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8008c98:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 8008c9c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008ca0:	f88d 300c 	strb.w	r3, [sp, #12]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008ca4:	4b56      	ldr	r3, [pc, #344]	@ (8008e00 <ProcessRadioRxDone+0x2a0>)
 8008ca6:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8008caa:	f88d 200d 	strb.w	r2, [sp, #13]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 8008cae:	2207      	movs	r2, #7
 8008cb0:	a903      	add	r1, sp, #12
 8008cb2:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8008cb6:	f003 fd85 	bl	800c7c4 <RegionVerify>
            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 8008cba:	b904      	cbnz	r4, 8008cbe <ProcessRadioRxDone+0x15e>
 8008cbc:	b9c0      	cbnz	r0, 8008cf0 <ProcessRadioRxDone+0x190>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8008cbe:	2001      	movs	r0, #1
 8008cc0:	f002 ffd0 	bl	800bc64 <LoRaMacConfirmQueueIsCmdActive>
 8008cc4:	2800      	cmp	r0, #0
 8008cc6:	f000 827c 	beq.w	80091c2 <ProcessRadioRxDone+0x662>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8008cca:	2101      	movs	r1, #1
 8008ccc:	2007      	movs	r0, #7
 8008cce:	f002 ff7d 	bl	800bbcc <LoRaMacConfirmQueueSetStatus>
 8008cd2:	e276      	b.n	80091c2 <ProcessRadioRxDone+0x662>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008cd4:	4b4c      	ldr	r3, [pc, #304]	@ (8008e08 <ProcessRadioRxDone+0x2a8>)
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 8008cdc:	f7ff fbd4 	bl	8008488 <PrepareRxDoneAbort>
                return;
 8008ce0:	e7a0      	b.n	8008c24 <ProcessRadioRxDone+0xc4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008ce2:	4b49      	ldr	r3, [pc, #292]	@ (8008e08 <ProcessRadioRxDone+0x2a8>)
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 8008cea:	f7ff fbcd 	bl	8008488 <PrepareRxDoneAbort>
                return;
 8008cee:	e799      	b.n	8008c24 <ProcessRadioRxDone+0xc4>
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8008cf0:	f89d 3029 	ldrb.w	r3, [sp, #41]	@ 0x29
 8008cf4:	4c42      	ldr	r4, [pc, #264]	@ (8008e00 <ProcessRadioRxDone+0x2a0>)
 8008cf6:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8008cfa:	f89d 202a 	ldrb.w	r2, [sp, #42]	@ 0x2a
 8008cfe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008d02:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8008d06:	f89d 202b 	ldrb.w	r2, [sp, #43]	@ 0x2b
 8008d0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d0e:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 8008d12:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008d14:	f8c4 10e4 	str.w	r1, [r4, #228]	@ 0xe4
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 8008d18:	2002      	movs	r0, #2
 8008d1a:	f006 fcd3 	bl	800f6c4 <SecureElementSetDevAddr>
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8008d1e:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 8008d22:	f3c3 1202 	ubfx	r2, r3, #4, #3
 8008d26:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8008d2a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008d2e:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8008d32:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8008d36:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 8008d3a:	65a3      	str	r3, [r4, #88]	@ 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 8008d3c:	b90b      	cbnz	r3, 8008d42 <ProcessRadioRxDone+0x1e2>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 8008d3e:	2201      	movs	r2, #1
 8008d40:	65a2      	str	r2, [r4, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8008d42:	4c2f      	ldr	r4, [pc, #188]	@ (8008e00 <ProcessRadioRxDone+0x2a0>)
 8008d44:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008d46:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008d4a:	fb02 f303 	mul.w	r3, r2, r3
 8008d4e:	65a3      	str	r3, [r4, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8008d50:	4413      	add	r3, r2
 8008d52:	65e3      	str	r3, [r4, #92]	@ 0x5c
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 8008d54:	2601      	movs	r6, #1
 8008d56:	f884 6068 	strb.w	r6, [r4, #104]	@ 0x68
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	f884 312e 	strb.w	r3, [r4, #302]	@ 0x12e
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8008d60:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8008d64:	9322      	str	r3, [sp, #136]	@ 0x88
                applyCFList.Size = size - 17;
 8008d66:	3d11      	subs	r5, #17
 8008d68:	f88d 508c 	strb.w	r5, [sp, #140]	@ 0x8c
                applyCFList.JoinChannel = MacCtx.Channel;
 8008d6c:	4b26      	ldr	r3, [pc, #152]	@ (8008e08 <ProcessRadioRxDone+0x2a8>)
 8008d6e:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 8008d72:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8008d76:	a921      	add	r1, sp, #132	@ 0x84
 8008d78:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 8008d7c:	f003 fd32 	bl	800c7e4 <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8008d80:	2302      	movs	r3, #2
 8008d82:	f884 3130 	strb.w	r3, [r4, #304]	@ 0x130
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 8008d86:	4630      	mov	r0, r6
 8008d88:	f002 ff6c 	bl	800bc64 <LoRaMacConfirmQueueIsCmdActive>
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	f000 8218 	beq.w	80091c2 <ProcessRadioRxDone+0x662>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 8008d92:	4631      	mov	r1, r6
 8008d94:	2000      	movs	r0, #0
 8008d96:	f002 ff19 	bl	800bbcc <LoRaMacConfirmQueueSetStatus>
 8008d9a:	e212      	b.n	80091c2 <ProcessRadioRxDone+0x662>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8008d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8008e08 <ProcessRadioRxDone+0x2a8>)
 8008d9e:	2201      	movs	r2, #1
 8008da0:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008da4:	4b16      	ldr	r3, [pc, #88]	@ (8008e00 <ProcessRadioRxDone+0x2a0>)
 8008da6:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8008daa:	f88d 207e 	strb.w	r2, [sp, #126]	@ 0x7e
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8008dae:	4a16      	ldr	r2, [pc, #88]	@ (8008e08 <ProcessRadioRxDone+0x2a8>)
 8008db0:	f992 2424 	ldrsb.w	r2, [r2, #1060]	@ 0x424
 8008db4:	f88d 207d 	strb.w	r2, [sp, #125]	@ 0x7d
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8008db8:	220d      	movs	r2, #13
 8008dba:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8008dbe:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8008dc2:	b113      	cbz	r3, 8008dca <ProcessRadioRxDone+0x26a>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8008dc4:	230e      	movs	r3, #14
 8008dc6:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008dca:	a91f      	add	r1, sp, #124	@ 0x7c
 8008dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8008e00 <ProcessRadioRxDone+0x2a0>)
 8008dce:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8008dd2:	f003 fcc5 	bl	800c760 <RegionGetPhyParam>
 8008dd6:	901e      	str	r0, [sp, #120]	@ 0x78
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8008dd8:	f1a5 030d 	sub.w	r3, r5, #13
 8008ddc:	b21b      	sxth	r3, r3
 8008dde:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008de2:	b200      	sxth	r0, r0
 8008de4:	4283      	cmp	r3, r0
 8008de6:	dc01      	bgt.n	8008dec <ProcessRadioRxDone+0x28c>
 8008de8:	2d0b      	cmp	r5, #11
 8008dea:	d811      	bhi.n	8008e10 <ProcessRadioRxDone+0x2b0>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008dec:	4b06      	ldr	r3, [pc, #24]	@ (8008e08 <ProcessRadioRxDone+0x2a8>)
 8008dee:	2201      	movs	r2, #1
 8008df0:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 8008df4:	f7ff fb48 	bl	8008488 <PrepareRxDoneAbort>
                return;
 8008df8:	e714      	b.n	8008c24 <ProcessRadioRxDone+0xc4>
 8008dfa:	bf00      	nop
 8008dfc:	20000680 	.word	0x20000680
 8008e00:	20008000 	.word	0x20008000
 8008e04:	20000694 	.word	0x20000694
 8008e08:	20000728 	.word	0x20000728
 8008e0c:	08013170 	.word	0x08013170
            macMsgData.Buffer = payload;
 8008e10:	9612      	str	r6, [sp, #72]	@ 0x48
            macMsgData.BufSize = size;
 8008e12:	f88d 504c 	strb.w	r5, [sp, #76]	@ 0x4c
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8008e16:	4bb6      	ldr	r3, [pc, #728]	@ (80090f0 <ProcessRadioRxDone+0x590>)
 8008e18:	931b      	str	r3, [sp, #108]	@ 0x6c
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8008e1a:	23ff      	movs	r3, #255	@ 0xff
 8008e1c:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8008e20:	a812      	add	r0, sp, #72	@ 0x48
 8008e22:	f003 fb6d 	bl	800c500 <LoRaMacParserData>
 8008e26:	2800      	cmp	r0, #0
 8008e28:	d136      	bne.n	8008e98 <ProcessRadioRxDone+0x338>
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008e2a:	4bb2      	ldr	r3, [pc, #712]	@ (80090f4 <ProcessRadioRxDone+0x594>)
 8008e2c:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d038      	beq.n	8008ea6 <ProcessRadioRxDone+0x346>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8008e34:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008e36:	4bb0      	ldr	r3, [pc, #704]	@ (80090f8 <ProcessRadioRxDone+0x598>)
 8008e38:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8008e3c:	a904      	add	r1, sp, #16
 8008e3e:	a812      	add	r0, sp, #72	@ 0x48
 8008e40:	f7ff f99c 	bl	800817c <DetermineFrameType>
 8008e44:	4605      	mov	r5, r0
 8008e46:	2800      	cmp	r0, #0
 8008e48:	d158      	bne.n	8008efc <ProcessRadioRxDone+0x39c>
            downLinkCounter = 0;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	9307      	str	r3, [sp, #28]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d05a      	beq.n	8008f0a <ProcessRadioRxDone+0x3aa>
 8008e54:	2601      	movs	r6, #1
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 8008e56:	ab07      	add	r3, sp, #28
 8008e58:	9301      	str	r3, [sp, #4]
 8008e5a:	f10d 031b 	add.w	r3, sp, #27
 8008e5e:	9300      	str	r3, [sp, #0]
 8008e60:	4ba4      	ldr	r3, [pc, #656]	@ (80090f4 <ProcessRadioRxDone+0x594>)
 8008e62:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8008e66:	aa12      	add	r2, sp, #72	@ 0x48
 8008e68:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8008e6c:	4630      	mov	r0, r6
 8008e6e:	f7ff fb49 	bl	8008504 <GetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8008e72:	2800      	cmp	r0, #0
 8008e74:	f000 808b 	beq.w	8008f8e <ProcessRadioRxDone+0x42e>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 8008e78:	2807      	cmp	r0, #7
 8008e7a:	f000 8083 	beq.w	8008f84 <ProcessRadioRxDone+0x424>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008e7e:	4b9e      	ldr	r3, [pc, #632]	@ (80090f8 <ProcessRadioRxDone+0x598>)
 8008e80:	2201      	movs	r2, #1
 8008e82:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8008e86:	9a07      	ldr	r2, [sp, #28]
 8008e88:	4b9b      	ldr	r3, [pc, #620]	@ (80090f8 <ProcessRadioRxDone+0x598>)
 8008e8a:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8008e8e:	f8c3 246c 	str.w	r2, [r3, #1132]	@ 0x46c
                PrepareRxDoneAbort( );
 8008e92:	f7ff faf9 	bl	8008488 <PrepareRxDoneAbort>
                return;
 8008e96:	e6c5      	b.n	8008c24 <ProcessRadioRxDone+0xc4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008e98:	4b97      	ldr	r3, [pc, #604]	@ (80090f8 <ProcessRadioRxDone+0x598>)
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 8008ea0:	f7ff faf2 	bl	8008488 <PrepareRxDoneAbort>
                return;
 8008ea4:	e6be      	b.n	8008c24 <ProcessRadioRxDone+0xc4>
                if( LoRaMacClassBIsPingExpected( ) == true )
 8008ea6:	f002 fc68 	bl	800b77a <LoRaMacClassBIsPingExpected>
 8008eaa:	b188      	cbz	r0, 8008ed0 <ProcessRadioRxDone+0x370>
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008eac:	2000      	movs	r0, #0
 8008eae:	f002 fc59 	bl	800b764 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 8008eb2:	2000      	movs	r0, #0
 8008eb4:	f002 fc5b 	bl	800b76e <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8008eb8:	4b8f      	ldr	r3, [pc, #572]	@ (80090f8 <ProcessRadioRxDone+0x598>)
 8008eba:	2204      	movs	r2, #4
 8008ebc:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 8008ec0:	f89d 1054 	ldrb.w	r1, [sp, #84]	@ 0x54
 8008ec4:	f3c1 1100 	ubfx	r1, r1, #4, #1
 8008ec8:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8008eca:	f002 fc6f 	bl	800b7ac <LoRaMacClassBSetFPendingBit>
 8008ece:	e7b1      	b.n	8008e34 <ProcessRadioRxDone+0x2d4>
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008ed0:	f002 fc55 	bl	800b77e <LoRaMacClassBIsMulticastExpected>
 8008ed4:	2800      	cmp	r0, #0
 8008ed6:	d0ad      	beq.n	8008e34 <ProcessRadioRxDone+0x2d4>
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008ed8:	2000      	movs	r0, #0
 8008eda:	f002 fc44 	bl	800b766 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8008ede:	2000      	movs	r0, #0
 8008ee0:	f002 fc46 	bl	800b770 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8008ee4:	4b84      	ldr	r3, [pc, #528]	@ (80090f8 <ProcessRadioRxDone+0x598>)
 8008ee6:	2205      	movs	r2, #5
 8008ee8:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 8008eec:	f89d 1054 	ldrb.w	r1, [sp, #84]	@ 0x54
 8008ef0:	f3c1 1100 	ubfx	r1, r1, #4, #1
 8008ef4:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8008ef6:	f002 fc59 	bl	800b7ac <LoRaMacClassBSetFPendingBit>
 8008efa:	e79b      	b.n	8008e34 <ProcessRadioRxDone+0x2d4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008efc:	4b7e      	ldr	r3, [pc, #504]	@ (80090f8 <ProcessRadioRxDone+0x598>)
 8008efe:	2201      	movs	r2, #1
 8008f00:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 8008f04:	f7ff fac0 	bl	8008488 <PrepareRxDoneAbort>
                return;
 8008f08:	e68c      	b.n	8008c24 <ProcessRadioRxDone+0xc4>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8008f10:	4a78      	ldr	r2, [pc, #480]	@ (80090f4 <ProcessRadioRxDone+0x594>)
 8008f12:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8008f16:	f8d2 20ec 	ldr.w	r2, [r2, #236]	@ 0xec
 8008f1a:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8008f1c:	428a      	cmp	r2, r1
 8008f1e:	d002      	beq.n	8008f26 <ProcessRadioRxDone+0x3c6>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8008f20:	3301      	adds	r3, #1
 8008f22:	b2db      	uxtb	r3, r3
 8008f24:	e794      	b.n	8008e50 <ProcessRadioRxDone+0x2f0>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 8008f26:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8008f2a:	4972      	ldr	r1, [pc, #456]	@ (80090f4 <ProcessRadioRxDone+0x594>)
 8008f2c:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 8008f30:	f891 10e9 	ldrb.w	r1, [r1, #233]	@ 0xe9
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8008f34:	2900      	cmp	r1, #0
 8008f36:	d0f3      	beq.n	8008f20 <ProcessRadioRxDone+0x3c0>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8008f38:	4b6e      	ldr	r3, [pc, #440]	@ (80090f4 <ProcessRadioRxDone+0x594>)
 8008f3a:	2130      	movs	r1, #48	@ 0x30
 8008f3c:	fb01 3000 	mla	r0, r1, r0, r3
 8008f40:	f890 60ea 	ldrb.w	r6, [r0, #234]	@ 0xea
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8008f44:	f8d0 110c 	ldr.w	r1, [r0, #268]	@ 0x10c
 8008f48:	6809      	ldr	r1, [r1, #0]
 8008f4a:	9107      	str	r1, [sp, #28]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8008f4c:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8008f50:	2b02      	cmp	r3, #2
 8008f52:	d00b      	beq.n	8008f6c <ProcessRadioRxDone+0x40c>
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8008f54:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8008f58:	2b03      	cmp	r3, #3
 8008f5a:	d10c      	bne.n	8008f76 <ProcessRadioRxDone+0x416>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8008f5c:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8008f60:	f013 0f60 	tst.w	r3, #96	@ 0x60
 8008f64:	d107      	bne.n	8008f76 <ProcessRadioRxDone+0x416>
 8008f66:	4691      	mov	r9, r2
 8008f68:	2501      	movs	r5, #1
 8008f6a:	e774      	b.n	8008e56 <ProcessRadioRxDone+0x2f6>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8008f6c:	4b62      	ldr	r3, [pc, #392]	@ (80090f8 <ProcessRadioRxDone+0x598>)
 8008f6e:	2103      	movs	r1, #3
 8008f70:	f883 148f 	strb.w	r1, [r3, #1167]	@ 0x48f
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8008f74:	e7ee      	b.n	8008f54 <ProcessRadioRxDone+0x3f4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008f76:	4b60      	ldr	r3, [pc, #384]	@ (80090f8 <ProcessRadioRxDone+0x598>)
 8008f78:	2201      	movs	r2, #1
 8008f7a:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 8008f7e:	f7ff fa83 	bl	8008488 <PrepareRxDoneAbort>
                return;
 8008f82:	e64f      	b.n	8008c24 <ProcessRadioRxDone+0xc4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8008f84:	4b5c      	ldr	r3, [pc, #368]	@ (80090f8 <ProcessRadioRxDone+0x598>)
 8008f86:	2208      	movs	r2, #8
 8008f88:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
 8008f8c:	e77b      	b.n	8008e86 <ProcessRadioRxDone+0x326>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8008f8e:	ab12      	add	r3, sp, #72	@ 0x48
 8008f90:	9300      	str	r3, [sp, #0]
 8008f92:	9b07      	ldr	r3, [sp, #28]
 8008f94:	f89d 201b 	ldrb.w	r2, [sp, #27]
 8008f98:	4649      	mov	r1, r9
 8008f9a:	4630      	mov	r0, r6
 8008f9c:	f003 f936 	bl	800c20c <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8008fa0:	2800      	cmp	r0, #0
 8008fa2:	d14a      	bne.n	800903a <ProcessRadioRxDone+0x4da>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008fa4:	4b54      	ldr	r3, [pc, #336]	@ (80090f8 <ProcessRadioRxDone+0x598>)
 8008fa6:	2100      	movs	r1, #0
 8008fa8:	f883 1421 	strb.w	r1, [r3, #1057]	@ 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 8008fac:	f883 5422 	strb.w	r5, [r3, #1058]	@ 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 8008fb0:	f8c3 1428 	str.w	r1, [r3, #1064]	@ 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 8008fb4:	f883 142c 	strb.w	r1, [r3, #1068]	@ 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8008fb8:	9a07      	ldr	r2, [sp, #28]
 8008fba:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8008fbe:	f8c3 246c 	str.w	r2, [r3, #1132]	@ 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8008fc2:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 8008fc6:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8008fca:	f883 242e 	strb.w	r2, [r3, #1070]	@ 0x42e
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008fce:	f883 1441 	strb.w	r1, [r3, #1089]	@ 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8008fd2:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8008fd6:	f893 048f 	ldrb.w	r0, [r3, #1167]	@ 0x48f
 8008fda:	2801      	cmp	r0, #1
 8008fdc:	d93b      	bls.n	8009056 <ProcessRadioRxDone+0x4f6>
            if( multicast == 1 )
 8008fde:	2d01      	cmp	r5, #1
 8008fe0:	d03f      	beq.n	8009062 <ProcessRadioRxDone+0x502>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8008fe2:	f004 04e0 	and.w	r4, r4, #224	@ 0xe0
 8008fe6:	2ca0      	cmp	r4, #160	@ 0xa0
 8008fe8:	d040      	beq.n	800906c <ProcessRadioRxDone+0x50c>
                    Nvm.MacGroup1.SrvAckRequested = false;
 8008fea:	2300      	movs	r3, #0
 8008fec:	4a41      	ldr	r2, [pc, #260]	@ (80090f4 <ProcessRadioRxDone+0x594>)
 8008fee:	f882 303a 	strb.w	r3, [r2, #58]	@ 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8008ff2:	4a41      	ldr	r2, [pc, #260]	@ (80090f8 <ProcessRadioRxDone+0x598>)
 8008ff4:	f882 3420 	strb.w	r3, [r2, #1056]	@ 0x420
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 8008ff8:	4b3e      	ldr	r3, [pc, #248]	@ (80090f4 <ProcessRadioRxDone+0x594>)
 8008ffa:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8008ffe:	b923      	cbnz	r3, 800900a <ProcessRadioRxDone+0x4aa>
 8009000:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8009004:	f013 0f10 	tst.w	r3, #16
 8009008:	d007      	beq.n	800901a <ProcessRadioRxDone+0x4ba>
 800900a:	4b3a      	ldr	r3, [pc, #232]	@ (80090f4 <ProcessRadioRxDone+0x594>)
 800900c:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8009010:	b91b      	cbnz	r3, 800901a <ProcessRadioRxDone+0x4ba>
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 8009012:	4b39      	ldr	r3, [pc, #228]	@ (80090f8 <ProcessRadioRxDone+0x598>)
 8009014:	2201      	movs	r2, #1
 8009016:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800901a:	4b37      	ldr	r3, [pc, #220]	@ (80090f8 <ProcessRadioRxDone+0x598>)
 800901c:	f893 2440 	ldrb.w	r2, [r3, #1088]	@ 0x440
 8009020:	f89d 1054 	ldrb.w	r1, [sp, #84]	@ 0x54
 8009024:	f7ff fa99 	bl	800855a <RemoveMacCommands>
            switch( fType )
 8009028:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800902c:	2b03      	cmp	r3, #3
 800902e:	f200 8099 	bhi.w	8009164 <ProcessRadioRxDone+0x604>
 8009032:	e8df f003 	tbb	[pc, r3]
 8009036:	6536      	.short	0x6536
 8009038:	8777      	.short	0x8777
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800903a:	2802      	cmp	r0, #2
 800903c:	d006      	beq.n	800904c <ProcessRadioRxDone+0x4ec>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800903e:	4b2e      	ldr	r3, [pc, #184]	@ (80090f8 <ProcessRadioRxDone+0x598>)
 8009040:	220b      	movs	r2, #11
 8009042:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 8009046:	f7ff fa1f 	bl	8008488 <PrepareRxDoneAbort>
                return;
 800904a:	e5eb      	b.n	8008c24 <ProcessRadioRxDone+0xc4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800904c:	4b2a      	ldr	r3, [pc, #168]	@ (80090f8 <ProcessRadioRxDone+0x598>)
 800904e:	220a      	movs	r2, #10
 8009050:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
 8009054:	e7f7      	b.n	8009046 <ProcessRadioRxDone+0x4e6>
                Nvm.MacGroup1.AdrAckCounter = 0;
 8009056:	4b27      	ldr	r3, [pc, #156]	@ (80090f4 <ProcessRadioRxDone+0x594>)
 8009058:	6299      	str	r1, [r3, #40]	@ 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
 800905a:	2201      	movs	r2, #1
 800905c:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
 8009060:	e7bd      	b.n	8008fde <ProcessRadioRxDone+0x47e>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8009062:	4b25      	ldr	r3, [pc, #148]	@ (80090f8 <ProcessRadioRxDone+0x598>)
 8009064:	2202      	movs	r2, #2
 8009066:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
 800906a:	e7c5      	b.n	8008ff8 <ProcessRadioRxDone+0x498>
                    Nvm.MacGroup1.SrvAckRequested = true;
 800906c:	4b21      	ldr	r3, [pc, #132]	@ (80090f4 <ProcessRadioRxDone+0x594>)
 800906e:	2201      	movs	r2, #1
 8009070:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8009074:	f893 312e 	ldrb.w	r3, [r3, #302]	@ 0x12e
 8009078:	b913      	cbnz	r3, 8009080 <ProcessRadioRxDone+0x520>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800907a:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800907c:	4b1d      	ldr	r3, [pc, #116]	@ (80090f4 <ProcessRadioRxDone+0x594>)
 800907e:	635a      	str	r2, [r3, #52]	@ 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8009080:	4b1d      	ldr	r3, [pc, #116]	@ (80090f8 <ProcessRadioRxDone+0x598>)
 8009082:	2201      	movs	r2, #1
 8009084:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8009088:	4290      	cmp	r0, r2
 800908a:	d9b5      	bls.n	8008ff8 <ProcessRadioRxDone+0x498>
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800908c:	4b19      	ldr	r3, [pc, #100]	@ (80090f4 <ProcessRadioRxDone+0x594>)
 800908e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8009092:	4b19      	ldr	r3, [pc, #100]	@ (80090f8 <ProcessRadioRxDone+0x598>)
 8009094:	f8c3 243c 	str.w	r2, [r3, #1084]	@ 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 8009098:	4a18      	ldr	r2, [pc, #96]	@ (80090fc <ProcessRadioRxDone+0x59c>)
 800909a:	6812      	ldr	r2, [r2, #0]
 800909c:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
 80090a0:	e7aa      	b.n	8008ff8 <ProcessRadioRxDone+0x498>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 80090a2:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 80090a6:	4c14      	ldr	r4, [pc, #80]	@ (80090f8 <ProcessRadioRxDone+0x598>)
 80090a8:	f894 348f 	ldrb.w	r3, [r4, #1167]	@ 0x48f
 80090ac:	9300      	str	r3, [sp, #0]
 80090ae:	463b      	mov	r3, r7
 80090b0:	f002 020f 	and.w	r2, r2, #15
 80090b4:	2100      	movs	r1, #0
 80090b6:	a816      	add	r0, sp, #88	@ 0x58
 80090b8:	f7ff fa5e 	bl	8008578 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80090bc:	f89d 3068 	ldrb.w	r3, [sp, #104]	@ 0x68
 80090c0:	f884 3423 	strb.w	r3, [r4, #1059]	@ 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 80090c4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80090c6:	f8c4 3428 	str.w	r3, [r4, #1064]	@ 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 80090ca:	f89d 3070 	ldrb.w	r3, [sp, #112]	@ 0x70
 80090ce:	f884 342c 	strb.w	r3, [r4, #1068]	@ 0x42c
                    MacCtx.McpsIndication.RxData = true;
 80090d2:	2301      	movs	r3, #1
 80090d4:	f884 342d 	strb.w	r3, [r4, #1069]	@ 0x42d
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 80090d8:	f89d 3068 	ldrb.w	r3, [sp, #104]	@ 0x68
 80090dc:	2be0      	cmp	r3, #224	@ 0xe0
 80090de:	d048      	beq.n	8009172 <ProcessRadioRxDone+0x612>
            MacCtx.MacFlags.Bits.McpsInd = 1;
 80090e0:	4a05      	ldr	r2, [pc, #20]	@ (80090f8 <ProcessRadioRxDone+0x598>)
 80090e2:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80090e6:	f043 0302 	orr.w	r3, r3, #2
 80090ea:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            break;
 80090ee:	e068      	b.n	80091c2 <ProcessRadioRxDone+0x662>
 80090f0:	20000960 	.word	0x20000960
 80090f4:	20008000 	.word	0x20008000
 80090f8:	20000728 	.word	0x20000728
 80090fc:	20000680 	.word	0x20000680
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8009100:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 8009104:	4c43      	ldr	r4, [pc, #268]	@ (8009214 <ProcessRadioRxDone+0x6b4>)
 8009106:	f894 348f 	ldrb.w	r3, [r4, #1167]	@ 0x48f
 800910a:	9300      	str	r3, [sp, #0]
 800910c:	463b      	mov	r3, r7
 800910e:	f002 020f 	and.w	r2, r2, #15
 8009112:	2100      	movs	r1, #0
 8009114:	a816      	add	r0, sp, #88	@ 0x58
 8009116:	f7ff fa2f 	bl	8008578 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800911a:	f89d 3068 	ldrb.w	r3, [sp, #104]	@ 0x68
 800911e:	f884 3423 	strb.w	r3, [r4, #1059]	@ 0x423
                    break;
 8009122:	e7d9      	b.n	80090d8 <ProcessRadioRxDone+0x578>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 8009124:	4c3b      	ldr	r4, [pc, #236]	@ (8009214 <ProcessRadioRxDone+0x6b4>)
 8009126:	f894 348f 	ldrb.w	r3, [r4, #1167]	@ 0x48f
 800912a:	9300      	str	r3, [sp, #0]
 800912c:	463b      	mov	r3, r7
 800912e:	f89d 2070 	ldrb.w	r2, [sp, #112]	@ 0x70
 8009132:	2100      	movs	r1, #0
 8009134:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8009136:	f7ff fa1f 	bl	8008578 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800913a:	f89d 3068 	ldrb.w	r3, [sp, #104]	@ 0x68
 800913e:	f884 3423 	strb.w	r3, [r4, #1059]	@ 0x423
                    break;
 8009142:	e7c9      	b.n	80090d8 <ProcessRadioRxDone+0x578>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009144:	f89d 2068 	ldrb.w	r2, [sp, #104]	@ 0x68
 8009148:	4b32      	ldr	r3, [pc, #200]	@ (8009214 <ProcessRadioRxDone+0x6b4>)
 800914a:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800914e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009150:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8009154:	f89d 2070 	ldrb.w	r2, [sp, #112]	@ 0x70
 8009158:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800915c:	2201      	movs	r2, #1
 800915e:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
                    break;
 8009162:	e7b9      	b.n	80090d8 <ProcessRadioRxDone+0x578>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009164:	4b2b      	ldr	r3, [pc, #172]	@ (8009214 <ProcessRadioRxDone+0x6b4>)
 8009166:	2201      	movs	r2, #1
 8009168:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                    PrepareRxDoneAbort( );
 800916c:	f7ff f98c 	bl	8008488 <PrepareRxDoneAbort>
                    break;
 8009170:	e7b2      	b.n	80090d8 <ProcessRadioRxDone+0x578>
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 8009172:	4a29      	ldr	r2, [pc, #164]	@ (8009218 <ProcessRadioRxDone+0x6b8>)
 8009174:	f892 211f 	ldrb.w	r2, [r2, #287]	@ 0x11f
 8009178:	2a00      	cmp	r2, #0
 800917a:	d1b1      	bne.n	80090e0 <ProcessRadioRxDone+0x580>
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800917c:	4a25      	ldr	r2, [pc, #148]	@ (8009214 <ProcessRadioRxDone+0x6b4>)
 800917e:	f882 3423 	strb.w	r3, [r2, #1059]	@ 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 8009182:	2300      	movs	r3, #0
 8009184:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 8009188:	f882 342c 	strb.w	r3, [r2, #1068]	@ 0x42c
                MacCtx.McpsIndication.RxData = false;
 800918c:	f882 342d 	strb.w	r3, [r2, #1069]	@ 0x42d
 8009190:	e7a6      	b.n	80090e0 <ProcessRadioRxDone+0x580>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8009192:	1e6a      	subs	r2, r5, #1
 8009194:	4c21      	ldr	r4, [pc, #132]	@ (800921c <ProcessRadioRxDone+0x6bc>)
 8009196:	b292      	uxth	r2, r2
 8009198:	1c71      	adds	r1, r6, #1
 800919a:	4620      	mov	r0, r4
 800919c:	f006 fba1 	bl	800f8e2 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 80091a0:	2203      	movs	r2, #3
 80091a2:	f884 21e8 	strb.w	r2, [r4, #488]	@ 0x1e8
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80091a6:	2200      	movs	r2, #0
 80091a8:	f884 21e9 	strb.w	r2, [r4, #489]	@ 0x1e9
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 80091ac:	f8c4 41f0 	str.w	r4, [r4, #496]	@ 0x1f0
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 80091b0:	3d01      	subs	r5, #1
 80091b2:	f884 51f4 	strb.w	r5, [r4, #500]	@ 0x1f4
            MacCtx.MacFlags.Bits.McpsInd = 1;
 80091b6:	f894 2259 	ldrb.w	r2, [r4, #601]	@ 0x259
 80091ba:	f042 0202 	orr.w	r2, r2, #2
 80091be:	f884 2259 	strb.w	r2, [r4, #601]	@ 0x259
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80091c2:	4b14      	ldr	r3, [pc, #80]	@ (8009214 <ProcessRadioRxDone+0x6b4>)
 80091c4:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d915      	bls.n	80091f8 <ProcessRadioRxDone+0x698>
    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 80091cc:	4b11      	ldr	r3, [pc, #68]	@ (8009214 <ProcessRadioRxDone+0x6b4>)
 80091ce:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 80091d2:	2b02      	cmp	r3, #2
 80091d4:	d006      	beq.n	80091e4 <ProcessRadioRxDone+0x684>
        MacCtx.MacFlags.Bits.MacDone = 1;
 80091d6:	4a0f      	ldr	r2, [pc, #60]	@ (8009214 <ProcessRadioRxDone+0x6b4>)
 80091d8:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80091dc:	f043 0310 	orr.w	r3, r3, #16
 80091e0:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    UpdateRxSlotIdleState( );
 80091e4:	f7fe ff3e 	bl	8008064 <UpdateRxSlotIdleState>
 80091e8:	e51c      	b.n	8008c24 <ProcessRadioRxDone+0xc4>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80091ea:	4b0a      	ldr	r3, [pc, #40]	@ (8009214 <ProcessRadioRxDone+0x6b4>)
 80091ec:	2201      	movs	r2, #1
 80091ee:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            PrepareRxDoneAbort( );
 80091f2:	f7ff f949 	bl	8008488 <PrepareRxDoneAbort>
            break;
 80091f6:	e7e4      	b.n	80091c2 <ProcessRadioRxDone+0x662>
        if( MacCtx.NodeAckRequested == true )
 80091f8:	4b06      	ldr	r3, [pc, #24]	@ (8009214 <ProcessRadioRxDone+0x6b4>)
 80091fa:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d0e4      	beq.n	80091cc <ProcessRadioRxDone+0x66c>
            if( MacCtx.McpsConfirm.AckReceived == true )
 8009202:	4b04      	ldr	r3, [pc, #16]	@ (8009214 <ProcessRadioRxDone+0x6b4>)
 8009204:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 8009208:	2b00      	cmp	r3, #0
 800920a:	d0df      	beq.n	80091cc <ProcessRadioRxDone+0x66c>
                OnRetransmitTimeoutTimerEvent( NULL );
 800920c:	2000      	movs	r0, #0
 800920e:	f7ff f929 	bl	8008464 <OnRetransmitTimeoutTimerEvent>
 8009212:	e7db      	b.n	80091cc <ProcessRadioRxDone+0x66c>
 8009214:	20000728 	.word	0x20000728
 8009218:	20008000 	.word	0x20008000
 800921c:	20000960 	.word	0x20000960

08009220 <ProcessRadioTxTimeout>:
{
 8009220:	b510      	push	{r4, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8009222:	4b0f      	ldr	r3, [pc, #60]	@ (8009260 <ProcessRadioTxTimeout+0x40>)
 8009224:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8009228:	2b02      	cmp	r3, #2
 800922a:	d002      	beq.n	8009232 <ProcessRadioTxTimeout+0x12>
        Radio.Sleep( );
 800922c:	4b0d      	ldr	r3, [pc, #52]	@ (8009264 <ProcessRadioTxTimeout+0x44>)
 800922e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009230:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 8009232:	f7fe ff17 	bl	8008064 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8009236:	4c0c      	ldr	r4, [pc, #48]	@ (8009268 <ProcessRadioTxTimeout+0x48>)
 8009238:	2002      	movs	r0, #2
 800923a:	f884 0441 	strb.w	r0, [r4, #1089]	@ 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800923e:	f002 fcf3 	bl	800bc28 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8009242:	f894 341a 	ldrb.w	r3, [r4, #1050]	@ 0x41a
 8009246:	b113      	cbz	r3, 800924e <ProcessRadioTxTimeout+0x2e>
        MacCtx.RetransmitTimeoutRetry = true;
 8009248:	2201      	movs	r2, #1
 800924a:	f884 2419 	strb.w	r2, [r4, #1049]	@ 0x419
    MacCtx.MacFlags.Bits.MacDone = 1;
 800924e:	4a06      	ldr	r2, [pc, #24]	@ (8009268 <ProcessRadioTxTimeout+0x48>)
 8009250:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8009254:	f043 0310 	orr.w	r3, r3, #16
 8009258:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
}
 800925c:	bd10      	pop	{r4, pc}
 800925e:	bf00      	nop
 8009260:	20008000 	.word	0x20008000
 8009264:	08013170 	.word	0x08013170
 8009268:	20000728 	.word	0x20000728

0800926c <CheckForClassBCollision>:
{
 800926c:	b508      	push	{r3, lr}
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800926e:	f002 fa82 	bl	800b776 <LoRaMacClassBIsBeaconExpected>
 8009272:	b978      	cbnz	r0, 8009294 <CheckForClassBCollision+0x28>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009274:	4b09      	ldr	r3, [pc, #36]	@ (800929c <CheckForClassBCollision+0x30>)
 8009276:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800927a:	2b01      	cmp	r3, #1
 800927c:	d001      	beq.n	8009282 <CheckForClassBCollision+0x16>
    return LORAMAC_STATUS_OK;
 800927e:	2000      	movs	r0, #0
}
 8009280:	bd08      	pop	{r3, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 8009282:	f002 fa7a 	bl	800b77a <LoRaMacClassBIsPingExpected>
 8009286:	b938      	cbnz	r0, 8009298 <CheckForClassBCollision+0x2c>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8009288:	f002 fa79 	bl	800b77e <LoRaMacClassBIsMulticastExpected>
 800928c:	2800      	cmp	r0, #0
 800928e:	d0f7      	beq.n	8009280 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8009290:	200f      	movs	r0, #15
 8009292:	e7f5      	b.n	8009280 <CheckForClassBCollision+0x14>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8009294:	200e      	movs	r0, #14
 8009296:	e7f3      	b.n	8009280 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8009298:	200f      	movs	r0, #15
 800929a:	e7f1      	b.n	8009280 <CheckForClassBCollision+0x14>
 800929c:	20008000 	.word	0x20008000

080092a0 <HandleRadioRxErrorTimeout>:
{
 80092a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092a2:	4605      	mov	r5, r0
 80092a4:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80092a6:	4b34      	ldr	r3, [pc, #208]	@ (8009378 <HandleRadioRxErrorTimeout+0xd8>)
 80092a8:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80092ac:	2b02      	cmp	r3, #2
 80092ae:	d002      	beq.n	80092b6 <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 80092b0:	4b32      	ldr	r3, [pc, #200]	@ (800937c <HandleRadioRxErrorTimeout+0xdc>)
 80092b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092b4:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80092b6:	f002 fa5e 	bl	800b776 <LoRaMacClassBIsBeaconExpected>
 80092ba:	4606      	mov	r6, r0
 80092bc:	bb48      	cbnz	r0, 8009312 <HandleRadioRxErrorTimeout+0x72>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80092be:	4b2e      	ldr	r3, [pc, #184]	@ (8009378 <HandleRadioRxErrorTimeout+0xd8>)
 80092c0:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d02b      	beq.n	8009320 <HandleRadioRxErrorTimeout+0x80>
    if( classBRx == false )
 80092c8:	2e00      	cmp	r6, #0
 80092ca:	d151      	bne.n	8009370 <HandleRadioRxErrorTimeout+0xd0>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80092cc:	4b2c      	ldr	r3, [pc, #176]	@ (8009380 <HandleRadioRxErrorTimeout+0xe0>)
 80092ce:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d13b      	bne.n	800934e <HandleRadioRxErrorTimeout+0xae>
            if( MacCtx.NodeAckRequested == true )
 80092d6:	4b2a      	ldr	r3, [pc, #168]	@ (8009380 <HandleRadioRxErrorTimeout+0xe0>)
 80092d8:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 80092dc:	b113      	cbz	r3, 80092e4 <HandleRadioRxErrorTimeout+0x44>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 80092de:	4b28      	ldr	r3, [pc, #160]	@ (8009380 <HandleRadioRxErrorTimeout+0xe0>)
 80092e0:	f883 5441 	strb.w	r5, [r3, #1089]	@ 0x441
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 80092e4:	4628      	mov	r0, r5
 80092e6:	f002 fc9f 	bl	800bc28 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 80092ea:	4b23      	ldr	r3, [pc, #140]	@ (8009378 <HandleRadioRxErrorTimeout+0xd8>)
 80092ec:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80092ee:	f008 fcef 	bl	8011cd0 <UTIL_TIMER_GetElapsedTime>
 80092f2:	4b23      	ldr	r3, [pc, #140]	@ (8009380 <HandleRadioRxErrorTimeout+0xe0>)
 80092f4:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 80092f8:	4298      	cmp	r0, r3
 80092fa:	d339      	bcc.n	8009370 <HandleRadioRxErrorTimeout+0xd0>
                TimerStop( &MacCtx.RxWindowTimer2 );
 80092fc:	4c21      	ldr	r4, [pc, #132]	@ (8009384 <HandleRadioRxErrorTimeout+0xe4>)
 80092fe:	4620      	mov	r0, r4
 8009300:	f008 fd1c 	bl	8011d3c <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8009304:	f894 30f9 	ldrb.w	r3, [r4, #249]	@ 0xf9
 8009308:	f043 0310 	orr.w	r3, r3, #16
 800930c:	f884 30f9 	strb.w	r3, [r4, #249]	@ 0xf9
 8009310:	e02e      	b.n	8009370 <HandleRadioRxErrorTimeout+0xd0>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8009312:	2002      	movs	r0, #2
 8009314:	f002 fa25 	bl	800b762 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8009318:	2000      	movs	r0, #0
 800931a:	f002 fa27 	bl	800b76c <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800931e:	e7ce      	b.n	80092be <HandleRadioRxErrorTimeout+0x1e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8009320:	f002 fa2b 	bl	800b77a <LoRaMacClassBIsPingExpected>
 8009324:	4607      	mov	r7, r0
 8009326:	b950      	cbnz	r0, 800933e <HandleRadioRxErrorTimeout+0x9e>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8009328:	f002 fa29 	bl	800b77e <LoRaMacClassBIsMulticastExpected>
 800932c:	2800      	cmp	r0, #0
 800932e:	d0cb      	beq.n	80092c8 <HandleRadioRxErrorTimeout+0x28>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009330:	2000      	movs	r0, #0
 8009332:	f002 fa18 	bl	800b766 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8009336:	2000      	movs	r0, #0
 8009338:	f002 fa1a 	bl	800b770 <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 800933c:	e018      	b.n	8009370 <HandleRadioRxErrorTimeout+0xd0>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800933e:	2000      	movs	r0, #0
 8009340:	f002 fa10 	bl	800b764 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8009344:	2000      	movs	r0, #0
 8009346:	f002 fa12 	bl	800b76e <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800934a:	463e      	mov	r6, r7
 800934c:	e7ec      	b.n	8009328 <HandleRadioRxErrorTimeout+0x88>
            if( MacCtx.NodeAckRequested == true )
 800934e:	4b0c      	ldr	r3, [pc, #48]	@ (8009380 <HandleRadioRxErrorTimeout+0xe0>)
 8009350:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 8009354:	b113      	cbz	r3, 800935c <HandleRadioRxErrorTimeout+0xbc>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8009356:	4b0a      	ldr	r3, [pc, #40]	@ (8009380 <HandleRadioRxErrorTimeout+0xe0>)
 8009358:	f883 4441 	strb.w	r4, [r3, #1089]	@ 0x441
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800935c:	4620      	mov	r0, r4
 800935e:	f002 fc63 	bl	800bc28 <LoRaMacConfirmQueueSetStatusCmn>
            MacCtx.MacFlags.Bits.MacDone = 1;
 8009362:	4a07      	ldr	r2, [pc, #28]	@ (8009380 <HandleRadioRxErrorTimeout+0xe0>)
 8009364:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8009368:	f043 0310 	orr.w	r3, r3, #16
 800936c:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    UpdateRxSlotIdleState( );
 8009370:	f7fe fe78 	bl	8008064 <UpdateRxSlotIdleState>
}
 8009374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009376:	bf00      	nop
 8009378:	20008000 	.word	0x20008000
 800937c:	08013170 	.word	0x08013170
 8009380:	20000728 	.word	0x20000728
 8009384:	20000ac0 	.word	0x20000ac0

08009388 <ProcessRadioRxError>:
{
 8009388:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800938a:	2106      	movs	r1, #6
 800938c:	2005      	movs	r0, #5
 800938e:	f7ff ff87 	bl	80092a0 <HandleRadioRxErrorTimeout>
}
 8009392:	bd08      	pop	{r3, pc}

08009394 <ProcessRadioRxTimeout>:
{
 8009394:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8009396:	2104      	movs	r1, #4
 8009398:	2003      	movs	r0, #3
 800939a:	f7ff ff81 	bl	80092a0 <HandleRadioRxErrorTimeout>
}
 800939e:	bd08      	pop	{r3, pc}

080093a0 <LoRaMacHandleIrqEvents>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093a0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80093a4:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 80093a6:	4a14      	ldr	r2, [pc, #80]	@ (80093f8 <LoRaMacHandleIrqEvents+0x58>)
 80093a8:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 80093aa:	2000      	movs	r0, #0
 80093ac:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093ae:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 80093b2:	b303      	cbz	r3, 80093f6 <LoRaMacHandleIrqEvents+0x56>
{
 80093b4:	b510      	push	{r4, lr}
        if( events.Events.TxDone == 1 )
 80093b6:	b2dc      	uxtb	r4, r3
 80093b8:	f013 0f20 	tst.w	r3, #32
 80093bc:	d10c      	bne.n	80093d8 <LoRaMacHandleIrqEvents+0x38>
        if( events.Events.RxDone == 1 )
 80093be:	f014 0f10 	tst.w	r4, #16
 80093c2:	d10c      	bne.n	80093de <LoRaMacHandleIrqEvents+0x3e>
        if( events.Events.TxTimeout == 1 )
 80093c4:	f014 0f08 	tst.w	r4, #8
 80093c8:	d10c      	bne.n	80093e4 <LoRaMacHandleIrqEvents+0x44>
        if( events.Events.RxError == 1 )
 80093ca:	f014 0f04 	tst.w	r4, #4
 80093ce:	d10c      	bne.n	80093ea <LoRaMacHandleIrqEvents+0x4a>
        if( events.Events.RxTimeout == 1 )
 80093d0:	f014 0f02 	tst.w	r4, #2
 80093d4:	d10c      	bne.n	80093f0 <LoRaMacHandleIrqEvents+0x50>
}
 80093d6:	bd10      	pop	{r4, pc}
            ProcessRadioTxDone( );
 80093d8:	f7fe ffc2 	bl	8008360 <ProcessRadioTxDone>
 80093dc:	e7ef      	b.n	80093be <LoRaMacHandleIrqEvents+0x1e>
            ProcessRadioRxDone( );
 80093de:	f7ff fbbf 	bl	8008b60 <ProcessRadioRxDone>
 80093e2:	e7ef      	b.n	80093c4 <LoRaMacHandleIrqEvents+0x24>
            ProcessRadioTxTimeout( );
 80093e4:	f7ff ff1c 	bl	8009220 <ProcessRadioTxTimeout>
 80093e8:	e7ef      	b.n	80093ca <LoRaMacHandleIrqEvents+0x2a>
            ProcessRadioRxError( );
 80093ea:	f7ff ffcd 	bl	8009388 <ProcessRadioRxError>
 80093ee:	e7ef      	b.n	80093d0 <LoRaMacHandleIrqEvents+0x30>
            ProcessRadioRxTimeout( );
 80093f0:	f7ff ffd0 	bl	8009394 <ProcessRadioRxTimeout>
}
 80093f4:	e7ef      	b.n	80093d6 <LoRaMacHandleIrqEvents+0x36>
 80093f6:	4770      	bx	lr
 80093f8:	20000694 	.word	0x20000694

080093fc <LoRaMacHandleResponseTimeout>:
    if( startTimeInMs != 0 )
 80093fc:	b909      	cbnz	r1, 8009402 <LoRaMacHandleResponseTimeout+0x6>
    return false;
 80093fe:	2000      	movs	r0, #0
}
 8009400:	4770      	bx	lr
{
 8009402:	b510      	push	{r4, lr}
 8009404:	4604      	mov	r4, r0
 8009406:	4608      	mov	r0, r1
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 8009408:	f008 fc62 	bl	8011cd0 <UTIL_TIMER_GetElapsedTime>
        if( elapsedTime > timeoutInMs )
 800940c:	42a0      	cmp	r0, r4
 800940e:	d801      	bhi.n	8009414 <LoRaMacHandleResponseTimeout+0x18>
    return false;
 8009410:	2000      	movs	r0, #0
}
 8009412:	bd10      	pop	{r4, pc}
            Nvm.MacGroup1.SrvAckRequested = false;
 8009414:	4b02      	ldr	r3, [pc, #8]	@ (8009420 <LoRaMacHandleResponseTimeout+0x24>)
 8009416:	2200      	movs	r2, #0
 8009418:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            return true;
 800941c:	2001      	movs	r0, #1
 800941e:	e7f8      	b.n	8009412 <LoRaMacHandleResponseTimeout+0x16>
 8009420:	20008000 	.word	0x20008000

08009424 <LoRaMacHandleMlmeRequest>:
{
 8009424:	b508      	push	{r3, lr}
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8009426:	4b14      	ldr	r3, [pc, #80]	@ (8009478 <LoRaMacHandleMlmeRequest+0x54>)
 8009428:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800942c:	f013 0f04 	tst.w	r3, #4
 8009430:	d100      	bne.n	8009434 <LoRaMacHandleMlmeRequest+0x10>
}
 8009432:	bd08      	pop	{r3, pc}
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8009434:	2001      	movs	r0, #1
 8009436:	f002 fc15 	bl	800bc64 <LoRaMacConfirmQueueIsCmdActive>
 800943a:	b178      	cbz	r0, 800945c <LoRaMacHandleMlmeRequest+0x38>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800943c:	2001      	movs	r0, #1
 800943e:	f002 fbdb 	bl	800bbf8 <LoRaMacConfirmQueueGetStatus>
 8009442:	b918      	cbnz	r0, 800944c <LoRaMacHandleMlmeRequest+0x28>
                MacCtx.ChannelsNbTransCounter = 0;
 8009444:	4b0c      	ldr	r3, [pc, #48]	@ (8009478 <LoRaMacHandleMlmeRequest+0x54>)
 8009446:	2200      	movs	r2, #0
 8009448:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800944c:	4a0a      	ldr	r2, [pc, #40]	@ (8009478 <LoRaMacHandleMlmeRequest+0x54>)
 800944e:	f8d2 3340 	ldr.w	r3, [r2, #832]	@ 0x340
 8009452:	f023 0302 	bic.w	r3, r3, #2
 8009456:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
 800945a:	e7ea      	b.n	8009432 <LoRaMacHandleMlmeRequest+0xe>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800945c:	2006      	movs	r0, #6
 800945e:	f002 fc01 	bl	800bc64 <LoRaMacConfirmQueueIsCmdActive>
 8009462:	2800      	cmp	r0, #0
 8009464:	d0e5      	beq.n	8009432 <LoRaMacHandleMlmeRequest+0xe>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009466:	4a04      	ldr	r2, [pc, #16]	@ (8009478 <LoRaMacHandleMlmeRequest+0x54>)
 8009468:	f8d2 3340 	ldr.w	r3, [r2, #832]	@ 0x340
 800946c:	f023 0302 	bic.w	r3, r3, #2
 8009470:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
}
 8009474:	e7dd      	b.n	8009432 <LoRaMacHandleMlmeRequest+0xe>
 8009476:	bf00      	nop
 8009478:	20000728 	.word	0x20000728

0800947c <SerializeTxFrame>:
{
 800947c:	b508      	push	{r3, lr}
    switch( MacCtx.TxMsg.Type )
 800947e:	4b0f      	ldr	r3, [pc, #60]	@ (80094bc <SerializeTxFrame+0x40>)
 8009480:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8009484:	b11b      	cbz	r3, 800948e <SerializeTxFrame+0x12>
 8009486:	2b04      	cmp	r3, #4
 8009488:	d00a      	beq.n	80094a0 <SerializeTxFrame+0x24>
 800948a:	2003      	movs	r0, #3
}
 800948c:	bd08      	pop	{r3, pc}
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800948e:	480c      	ldr	r0, [pc, #48]	@ (80094c0 <SerializeTxFrame+0x44>)
 8009490:	f003 f895 	bl	800c5be <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8009494:	b968      	cbnz	r0, 80094b2 <SerializeTxFrame+0x36>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8009496:	4b09      	ldr	r3, [pc, #36]	@ (80094bc <SerializeTxFrame+0x40>)
 8009498:	f893 210c 	ldrb.w	r2, [r3, #268]	@ 0x10c
 800949c:	801a      	strh	r2, [r3, #0]
            break;
 800949e:	e7f5      	b.n	800948c <SerializeTxFrame+0x10>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 80094a0:	4807      	ldr	r0, [pc, #28]	@ (80094c0 <SerializeTxFrame+0x44>)
 80094a2:	f003 f8c2 	bl	800c62a <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80094a6:	b930      	cbnz	r0, 80094b6 <SerializeTxFrame+0x3a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80094a8:	4b04      	ldr	r3, [pc, #16]	@ (80094bc <SerializeTxFrame+0x40>)
 80094aa:	f893 210c 	ldrb.w	r2, [r3, #268]	@ 0x10c
 80094ae:	801a      	strh	r2, [r3, #0]
            break;
 80094b0:	e7ec      	b.n	800948c <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80094b2:	2011      	movs	r0, #17
 80094b4:	e7ea      	b.n	800948c <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80094b6:	2011      	movs	r0, #17
 80094b8:	e7e8      	b.n	800948c <SerializeTxFrame+0x10>
 80094ba:	bf00      	nop
 80094bc:	20000728 	.word	0x20000728
 80094c0:	20000830 	.word	0x20000830

080094c4 <ComputeRxWindowParameters>:
{
 80094c4:	b570      	push	{r4, r5, r6, lr}
 80094c6:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80094c8:	4c1e      	ldr	r4, [pc, #120]	@ (8009544 <ComputeRxWindowParameters+0x80>)
 80094ca:	f894 6048 	ldrb.w	r6, [r4, #72]	@ 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80094ce:	f994 3069 	ldrsb.w	r3, [r4, #105]	@ 0x69
 80094d2:	f994 2039 	ldrsb.w	r2, [r4, #57]	@ 0x39
 80094d6:	f894 107d 	ldrb.w	r1, [r4, #125]	@ 0x7d
 80094da:	4630      	mov	r0, r6
 80094dc:	f003 fa51 	bl	800c982 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80094e0:	4d19      	ldr	r5, [pc, #100]	@ (8009548 <ComputeRxWindowParameters+0x84>)
 80094e2:	9500      	str	r5, [sp, #0]
 80094e4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80094e6:	f894 2050 	ldrb.w	r2, [r4, #80]	@ 0x50
 80094ea:	b241      	sxtb	r1, r0
 80094ec:	4630      	mov	r0, r6
 80094ee:	f003 f995 	bl	800c81c <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80094f2:	f105 0318 	add.w	r3, r5, #24
 80094f6:	9300      	str	r3, [sp, #0]
 80094f8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80094fa:	f894 2050 	ldrb.w	r2, [r4, #80]	@ 0x50
 80094fe:	f994 1070 	ldrsb.w	r1, [r4, #112]	@ 0x70
 8009502:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 8009506:	f003 f989 	bl	800c81c <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800950a:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800950c:	f5a5 736e 	sub.w	r3, r5, #952	@ 0x3b8
 8009510:	68e8      	ldr	r0, [r5, #12]
 8009512:	4402      	add	r2, r0
 8009514:	f845 2c08 	str.w	r2, [r5, #-8]
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8009518:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800951a:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 800951c:	440a      	add	r2, r1
 800951e:	f845 2c04 	str.w	r2, [r5, #-4]
    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 8009522:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8009526:	2b04      	cmp	r3, #4
 8009528:	d009      	beq.n	800953e <ComputeRxWindowParameters+0x7a>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800952a:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800952c:	4418      	add	r0, r3
 800952e:	f5a5 736e 	sub.w	r3, r5, #952	@ 0x3b8
 8009532:	f8c3 03b0 	str.w	r0, [r3, #944]	@ 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8009536:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009538:	4411      	add	r1, r2
 800953a:	f8c3 13b4 	str.w	r1, [r3, #948]	@ 0x3b4
}
 800953e:	b002      	add	sp, #8
 8009540:	bd70      	pop	{r4, r5, r6, pc}
 8009542:	bf00      	nop
 8009544:	20008000 	.word	0x20008000
 8009548:	20000ae0 	.word	0x20000ae0

0800954c <VerifyTxFrame>:
{
 800954c:	b510      	push	{r4, lr}
 800954e:	b082      	sub	sp, #8
    size_t macCmdsSize = 0;
 8009550:	2300      	movs	r3, #0
 8009552:	9301      	str	r3, [sp, #4]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8009554:	4b0d      	ldr	r3, [pc, #52]	@ (800958c <VerifyTxFrame+0x40>)
 8009556:	f893 4130 	ldrb.w	r4, [r3, #304]	@ 0x130
 800955a:	b914      	cbnz	r4, 8009562 <VerifyTxFrame+0x16>
}
 800955c:	4620      	mov	r0, r4
 800955e:	b002      	add	sp, #8
 8009560:	bd10      	pop	{r4, pc}
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8009562:	a801      	add	r0, sp, #4
 8009564:	f002 fa44 	bl	800b9f0 <LoRaMacCommandsGetSizeSerializedCmds>
 8009568:	4604      	mov	r4, r0
 800956a:	b968      	cbnz	r0, 8009588 <VerifyTxFrame+0x3c>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800956c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009570:	4b06      	ldr	r3, [pc, #24]	@ (800958c <VerifyTxFrame+0x40>)
 8009572:	f993 1039 	ldrsb.w	r1, [r3, #57]	@ 0x39
 8009576:	4b06      	ldr	r3, [pc, #24]	@ (8009590 <VerifyTxFrame+0x44>)
 8009578:	f893 0237 	ldrb.w	r0, [r3, #567]	@ 0x237
 800957c:	f7fe fee2 	bl	8008344 <ValidatePayloadLength>
 8009580:	2800      	cmp	r0, #0
 8009582:	d1eb      	bne.n	800955c <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_LENGTH_ERROR;
 8009584:	2408      	movs	r4, #8
 8009586:	e7e9      	b.n	800955c <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009588:	2413      	movs	r4, #19
 800958a:	e7e7      	b.n	800955c <VerifyTxFrame+0x10>
 800958c:	20008000 	.word	0x20008000
 8009590:	20000728 	.word	0x20000728

08009594 <SecureFrame>:
{
 8009594:	b530      	push	{r4, r5, lr}
 8009596:	b083      	sub	sp, #12
    uint32_t fCntUp = 0;
 8009598:	2300      	movs	r3, #0
 800959a:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 800959c:	4b18      	ldr	r3, [pc, #96]	@ (8009600 <SecureFrame+0x6c>)
 800959e:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80095a2:	b133      	cbz	r3, 80095b2 <SecureFrame+0x1e>
 80095a4:	4605      	mov	r5, r0
 80095a6:	460c      	mov	r4, r1
 80095a8:	2b04      	cmp	r3, #4
 80095aa:	d00b      	beq.n	80095c4 <SecureFrame+0x30>
 80095ac:	2003      	movs	r0, #3
}
 80095ae:	b003      	add	sp, #12
 80095b0:	bd30      	pop	{r4, r5, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80095b2:	4814      	ldr	r0, [pc, #80]	@ (8009604 <SecureFrame+0x70>)
 80095b4:	f002 fdc0 	bl	800c138 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80095b8:	b9d8      	cbnz	r0, 80095f2 <SecureFrame+0x5e>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80095ba:	4b11      	ldr	r3, [pc, #68]	@ (8009600 <SecureFrame+0x6c>)
 80095bc:	f893 210c 	ldrb.w	r2, [r3, #268]	@ 0x10c
 80095c0:	801a      	strh	r2, [r3, #0]
            break;
 80095c2:	e7f4      	b.n	80095ae <SecureFrame+0x1a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80095c4:	a801      	add	r0, sp, #4
 80095c6:	f002 fd6b 	bl	800c0a0 <LoRaMacCryptoGetFCntUp>
 80095ca:	b9a0      	cbnz	r0, 80095f6 <SecureFrame+0x62>
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 80095cc:	4b0c      	ldr	r3, [pc, #48]	@ (8009600 <SecureFrame+0x6c>)
 80095ce:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80095d2:	b113      	cbz	r3, 80095da <SecureFrame+0x46>
                fCntUp -= 1;
 80095d4:	9b01      	ldr	r3, [sp, #4]
 80095d6:	3b01      	subs	r3, #1
 80095d8:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 80095da:	4b0a      	ldr	r3, [pc, #40]	@ (8009604 <SecureFrame+0x70>)
 80095dc:	4622      	mov	r2, r4
 80095de:	4629      	mov	r1, r5
 80095e0:	9801      	ldr	r0, [sp, #4]
 80095e2:	f002 fdcf 	bl	800c184 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80095e6:	b940      	cbnz	r0, 80095fa <SecureFrame+0x66>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80095e8:	4b05      	ldr	r3, [pc, #20]	@ (8009600 <SecureFrame+0x6c>)
 80095ea:	f893 210c 	ldrb.w	r2, [r3, #268]	@ 0x10c
 80095ee:	801a      	strh	r2, [r3, #0]
            break;
 80095f0:	e7dd      	b.n	80095ae <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80095f2:	2011      	movs	r0, #17
 80095f4:	e7db      	b.n	80095ae <SecureFrame+0x1a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80095f6:	2012      	movs	r0, #18
 80095f8:	e7d9      	b.n	80095ae <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80095fa:	2011      	movs	r0, #17
 80095fc:	e7d7      	b.n	80095ae <SecureFrame+0x1a>
 80095fe:	bf00      	nop
 8009600:	20000728 	.word	0x20000728
 8009604:	20000830 	.word	0x20000830

08009608 <SendFrameOnChannel>:
{
 8009608:	b570      	push	{r4, r5, r6, lr}
 800960a:	b086      	sub	sp, #24
 800960c:	4606      	mov	r6, r0
    int8_t txPower = 0;
 800960e:	2300      	movs	r3, #0
 8009610:	f88d 3007 	strb.w	r3, [sp, #7]
    txConfig.Channel = channel;
 8009614:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009618:	4d36      	ldr	r5, [pc, #216]	@ (80096f4 <SendFrameOnChannel+0xec>)
 800961a:	f995 3039 	ldrsb.w	r3, [r5, #57]	@ 0x39
 800961e:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8009622:	f995 3038 	ldrsb.w	r3, [r5, #56]	@ 0x38
 8009626:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800962a:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 800962e:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8009630:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
 8009634:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8009636:	4c30      	ldr	r4, [pc, #192]	@ (80096f8 <SendFrameOnChannel+0xf0>)
 8009638:	8823      	ldrh	r3, [r4, #0]
 800963a:	f8ad 3014 	strh.w	r3, [sp, #20]
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800963e:	f895 3130 	ldrb.w	r3, [r5, #304]	@ 0x130
 8009642:	f88d 3016 	strb.w	r3, [sp, #22]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8009646:	f204 431c 	addw	r3, r4, #1052	@ 0x41c
 800964a:	f10d 0207 	add.w	r2, sp, #7
 800964e:	a902      	add	r1, sp, #8
 8009650:	f895 0048 	ldrb.w	r0, [r5, #72]	@ 0x48
 8009654:	f003 f905 	bl	800c862 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009658:	2301      	movs	r3, #1
 800965a:	f884 3441 	strb.w	r3, [r4, #1089]	@ 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800965e:	f895 3039 	ldrb.w	r3, [r5, #57]	@ 0x39
 8009662:	f884 3442 	strb.w	r3, [r4, #1090]	@ 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 8009666:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800966a:	f884 3443 	strb.w	r3, [r4, #1091]	@ 0x443
    MacCtx.McpsConfirm.Channel = channel;
 800966e:	f8c4 6450 	str.w	r6, [r4, #1104]	@ 0x450
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8009672:	f8d4 341c 	ldr.w	r3, [r4, #1052]	@ 0x41c
 8009676:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800967a:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800967e:	f002 f880 	bl	800b782 <LoRaMacClassBIsBeaconModeActive>
 8009682:	bb60      	cbnz	r0, 80096de <SendFrameOnChannel+0xd6>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009684:	4b1b      	ldr	r3, [pc, #108]	@ (80096f4 <SendFrameOnChannel+0xec>)
 8009686:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800968a:	2b01      	cmp	r3, #1
 800968c:	d02f      	beq.n	80096ee <SendFrameOnChannel+0xe6>
    LoRaMacClassBHaltBeaconing( );
 800968e:	f002 f87b 	bl	800b788 <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8009692:	4b18      	ldr	r3, [pc, #96]	@ (80096f4 <SendFrameOnChannel+0xec>)
 8009694:	f993 0039 	ldrsb.w	r0, [r3, #57]	@ 0x39
 8009698:	4b17      	ldr	r3, [pc, #92]	@ (80096f8 <SendFrameOnChannel+0xf0>)
 800969a:	f893 141b 	ldrb.w	r1, [r3, #1051]	@ 0x41b
 800969e:	b2c0      	uxtb	r0, r0
 80096a0:	f7ff ff78 	bl	8009594 <SecureFrame>
    if( status != LORAMAC_STATUS_OK )
 80096a4:	4604      	mov	r4, r0
 80096a6:	b9b8      	cbnz	r0, 80096d8 <SendFrameOnChannel+0xd0>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80096a8:	4813      	ldr	r0, [pc, #76]	@ (80096f8 <SendFrameOnChannel+0xf0>)
 80096aa:	f8d0 3340 	ldr.w	r3, [r0, #832]	@ 0x340
 80096ae:	f043 0302 	orr.w	r3, r3, #2
 80096b2:	f8c0 3340 	str.w	r3, [r0, #832]	@ 0x340
    MacCtx.ChannelsNbTransCounter++;
 80096b6:	f890 3418 	ldrb.w	r3, [r0, #1048]	@ 0x418
 80096ba:	3301      	adds	r3, #1
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	f880 3418 	strb.w	r3, [r0, #1048]	@ 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 80096c2:	f880 3445 	strb.w	r3, [r0, #1093]	@ 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 80096c6:	2300      	movs	r3, #0
 80096c8:	f8c0 3498 	str.w	r3, [r0, #1176]	@ 0x498
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 80096cc:	4b0b      	ldr	r3, [pc, #44]	@ (80096fc <SendFrameOnChannel+0xf4>)
 80096ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096d0:	f830 1b02 	ldrh.w	r1, [r0], #2
 80096d4:	b2c9      	uxtb	r1, r1
 80096d6:	4798      	blx	r3
}
 80096d8:	4620      	mov	r0, r4
 80096da:	b006      	add	sp, #24
 80096dc:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 80096de:	f8d4 041c 	ldr.w	r0, [r4, #1052]	@ 0x41c
 80096e2:	f002 f860 	bl	800b7a6 <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 80096e6:	2800      	cmp	r0, #0
 80096e8:	d0cc      	beq.n	8009684 <SendFrameOnChannel+0x7c>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 80096ea:	2410      	movs	r4, #16
 80096ec:	e7f4      	b.n	80096d8 <SendFrameOnChannel+0xd0>
        LoRaMacClassBStopRxSlots( );
 80096ee:	f002 f85c 	bl	800b7aa <LoRaMacClassBStopRxSlots>
 80096f2:	e7cc      	b.n	800968e <SendFrameOnChannel+0x86>
 80096f4:	20008000 	.word	0x20008000
 80096f8:	20000728 	.word	0x20000728
 80096fc:	08013170 	.word	0x08013170

08009700 <ScheduleTx>:
{
 8009700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009704:	b08c      	sub	sp, #48	@ 0x30
 8009706:	4605      	mov	r5, r0
    status = CheckForClassBCollision( );
 8009708:	f7ff fdb0 	bl	800926c <CheckForClassBCollision>
    if( status != LORAMAC_STATUS_OK )
 800970c:	4604      	mov	r4, r0
 800970e:	b118      	cbz	r0, 8009718 <ScheduleTx+0x18>
}
 8009710:	4620      	mov	r0, r4
 8009712:	b00c      	add	sp, #48	@ 0x30
 8009714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CalculateBackOff( );
 8009718:	f7fe fd08 	bl	800812c <CalculateBackOff>
    status = SerializeTxFrame( );
 800971c:	f7ff feae 	bl	800947c <SerializeTxFrame>
    if( status != LORAMAC_STATUS_OK )
 8009720:	4604      	mov	r4, r0
 8009722:	2800      	cmp	r0, #0
 8009724:	d1f4      	bne.n	8009710 <ScheduleTx+0x10>
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8009726:	4e35      	ldr	r6, [pc, #212]	@ (80097fc <ScheduleTx+0xfc>)
 8009728:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800972a:	9304      	str	r3, [sp, #16]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800972c:	f996 3039 	ldrsb.w	r3, [r6, #57]	@ 0x39
 8009730:	f88d 3018 	strb.w	r3, [sp, #24]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8009734:	f896 311c 	ldrb.w	r3, [r6, #284]	@ 0x11c
 8009738:	f88d 301a 	strb.w	r3, [sp, #26]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800973c:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 8009740:	4640      	mov	r0, r8
 8009742:	f008 fa2f 	bl	8011ba4 <SysTimeGetMcuTime>
 8009746:	af02      	add	r7, sp, #8
 8009748:	f8d6 3128 	ldr.w	r3, [r6, #296]	@ 0x128
 800974c:	9300      	str	r3, [sp, #0]
 800974e:	f8d6 3124 	ldr.w	r3, [r6, #292]	@ 0x124
 8009752:	e898 0006 	ldmia.w	r8, {r1, r2}
 8009756:	4638      	mov	r0, r7
 8009758:	f008 f9c1 	bl	8011ade <SysTimeSub>
 800975c:	ab07      	add	r3, sp, #28
 800975e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8009762:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8009766:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 8009768:	9305      	str	r3, [sp, #20]
    nextChan.LastTxIsJoinRequest = false;
 800976a:	2300      	movs	r3, #0
 800976c:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    nextChan.Joined = true;
 8009770:	2301      	movs	r3, #1
 8009772:	f88d 3019 	strb.w	r3, [sp, #25]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8009776:	4b22      	ldr	r3, [pc, #136]	@ (8009800 <ScheduleTx+0x100>)
 8009778:	881b      	ldrh	r3, [r3, #0]
 800977a:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800977e:	f896 3130 	ldrb.w	r3, [r6, #304]	@ 0x130
 8009782:	b92b      	cbnz	r3, 8009790 <ScheduleTx+0x90>
        nextChan.LastTxIsJoinRequest = true;
 8009784:	2301      	movs	r3, #1
 8009786:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
        nextChan.Joined = false;
 800978a:	2300      	movs	r3, #0
 800978c:	f88d 3019 	strb.w	r3, [sp, #25]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8009790:	4b1c      	ldr	r3, [pc, #112]	@ (8009804 <ScheduleTx+0x104>)
 8009792:	481a      	ldr	r0, [pc, #104]	@ (80097fc <ScheduleTx+0xfc>)
 8009794:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8009798:	9200      	str	r2, [sp, #0]
 800979a:	f1a3 0279 	sub.w	r2, r3, #121	@ 0x79
 800979e:	a904      	add	r1, sp, #16
 80097a0:	f890 0048 	ldrb.w	r0, [r0, #72]	@ 0x48
 80097a4:	f003 f8d8 	bl	800c958 <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 80097a8:	b1c0      	cbz	r0, 80097dc <ScheduleTx+0xdc>
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 80097aa:	280b      	cmp	r0, #11
 80097ac:	d124      	bne.n	80097f8 <ScheduleTx+0xf8>
            if( MacCtx.DutyCycleWaitTime != 0 )
 80097ae:	4a14      	ldr	r2, [pc, #80]	@ (8009800 <ScheduleTx+0x100>)
 80097b0:	f8d2 1494 	ldr.w	r1, [r2, #1172]	@ 0x494
 80097b4:	b191      	cbz	r1, 80097dc <ScheduleTx+0xdc>
                if( allowDelayedTx == true )
 80097b6:	b90d      	cbnz	r5, 80097bc <ScheduleTx+0xbc>
                return status;
 80097b8:	4604      	mov	r4, r0
 80097ba:	e7a9      	b.n	8009710 <ScheduleTx+0x10>
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 80097bc:	4615      	mov	r5, r2
 80097be:	f8d2 2340 	ldr.w	r2, [r2, #832]	@ 0x340
 80097c2:	f042 0220 	orr.w	r2, r2, #32
 80097c6:	f8c5 2340 	str.w	r2, [r5, #832]	@ 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 80097ca:	f505 755a 	add.w	r5, r5, #872	@ 0x368
 80097ce:	4628      	mov	r0, r5
 80097d0:	f008 fb54 	bl	8011e7c <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 80097d4:	4628      	mov	r0, r5
 80097d6:	f008 fb0b 	bl	8011df0 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 80097da:	e799      	b.n	8009710 <ScheduleTx+0x10>
    ComputeRxWindowParameters( );
 80097dc:	f7ff fe72 	bl	80094c4 <ComputeRxWindowParameters>
    status = VerifyTxFrame( );
 80097e0:	f7ff feb4 	bl	800954c <VerifyTxFrame>
    if( status != LORAMAC_STATUS_OK )
 80097e4:	4604      	mov	r4, r0
 80097e6:	2800      	cmp	r0, #0
 80097e8:	d192      	bne.n	8009710 <ScheduleTx+0x10>
    return SendFrameOnChannel( MacCtx.Channel );
 80097ea:	4b05      	ldr	r3, [pc, #20]	@ (8009800 <ScheduleTx+0x100>)
 80097ec:	f893 041b 	ldrb.w	r0, [r3, #1051]	@ 0x41b
 80097f0:	f7ff ff0a 	bl	8009608 <SendFrameOnChannel>
 80097f4:	4604      	mov	r4, r0
 80097f6:	e78b      	b.n	8009710 <ScheduleTx+0x10>
            return status;
 80097f8:	4604      	mov	r4, r0
 80097fa:	e789      	b.n	8009710 <ScheduleTx+0x10>
 80097fc:	20008000 	.word	0x20008000
 8009800:	20000728 	.word	0x20000728
 8009804:	20000bbc 	.word	0x20000bbc

08009808 <OnTxDelayedTimerEvent>:
{
 8009808:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 800980a:	4c16      	ldr	r4, [pc, #88]	@ (8009864 <OnTxDelayedTimerEvent+0x5c>)
 800980c:	4620      	mov	r0, r4
 800980e:	f008 fa95 	bl	8011d3c <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8009812:	f854 3c28 	ldr.w	r3, [r4, #-40]
 8009816:	f023 0320 	bic.w	r3, r3, #32
 800981a:	f844 3c28 	str.w	r3, [r4, #-40]
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800981e:	f8d4 1130 	ldr.w	r1, [r4, #304]	@ 0x130
 8009822:	4b11      	ldr	r3, [pc, #68]	@ (8009868 <OnTxDelayedTimerEvent+0x60>)
 8009824:	f8d3 0090 	ldr.w	r0, [r3, #144]	@ 0x90
 8009828:	f7ff fde8 	bl	80093fc <LoRaMacHandleResponseTimeout>
 800982c:	b100      	cbz	r0, 8009830 <OnTxDelayedTimerEvent+0x28>
}
 800982e:	bd10      	pop	{r4, pc}
    switch( ScheduleTx( true ) )
 8009830:	2001      	movs	r0, #1
 8009832:	f7ff ff65 	bl	8009700 <ScheduleTx>
 8009836:	2800      	cmp	r0, #0
 8009838:	d0f9      	beq.n	800982e <OnTxDelayedTimerEvent+0x26>
 800983a:	280b      	cmp	r0, #11
 800983c:	d0f7      	beq.n	800982e <OnTxDelayedTimerEvent+0x26>
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800983e:	4b0a      	ldr	r3, [pc, #40]	@ (8009868 <OnTxDelayedTimerEvent+0x60>)
 8009840:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 8009844:	f5a4 735a 	sub.w	r3, r4, #872	@ 0x368
 8009848:	f883 2442 	strb.w	r2, [r3, #1090]	@ 0x442
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800984c:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8009850:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8009854:	2009      	movs	r0, #9
 8009856:	f883 0441 	strb.w	r0, [r3, #1089]	@ 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800985a:	f002 f9e5 	bl	800bc28 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800985e:	f7fe fcf7 	bl	8008250 <StopRetransmission>
            break;
 8009862:	e7e4      	b.n	800982e <OnTxDelayedTimerEvent+0x26>
 8009864:	20000a90 	.word	0x20000a90
 8009868:	20008000 	.word	0x20008000

0800986c <LoRaMacHandleMcpsRequest>:
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800986c:	4b1c      	ldr	r3, [pc, #112]	@ (80098e0 <LoRaMacHandleMcpsRequest+0x74>)
 800986e:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8009872:	f013 0f01 	tst.w	r3, #1
 8009876:	d031      	beq.n	80098dc <LoRaMacHandleMcpsRequest+0x70>
{
 8009878:	b510      	push	{r4, lr}
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800987a:	4b19      	ldr	r3, [pc, #100]	@ (80098e0 <LoRaMacHandleMcpsRequest+0x74>)
 800987c:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
 8009880:	b12b      	cbz	r3, 800988e <LoRaMacHandleMcpsRequest+0x22>
 8009882:	2b03      	cmp	r3, #3
 8009884:	d003      	beq.n	800988e <LoRaMacHandleMcpsRequest+0x22>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8009886:	2b01      	cmp	r3, #1
 8009888:	d006      	beq.n	8009898 <LoRaMacHandleMcpsRequest+0x2c>
        bool waitForRetransmission = false;
 800988a:	2000      	movs	r0, #0
 800988c:	e002      	b.n	8009894 <LoRaMacHandleMcpsRequest+0x28>
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800988e:	f7fe fca5 	bl	80081dc <CheckRetransUnconfirmedUplink>
        if( stopRetransmission == true )
 8009892:	b940      	cbnz	r0, 80098a6 <LoRaMacHandleMcpsRequest+0x3a>
        else if( waitForRetransmission == false )
 8009894:	b1b0      	cbz	r0, 80098c4 <LoRaMacHandleMcpsRequest+0x58>
}
 8009896:	bd10      	pop	{r4, pc}
            if( MacCtx.RetransmitTimeoutRetry == true )
 8009898:	4b11      	ldr	r3, [pc, #68]	@ (80098e0 <LoRaMacHandleMcpsRequest+0x74>)
 800989a:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 800989e:	b17b      	cbz	r3, 80098c0 <LoRaMacHandleMcpsRequest+0x54>
                stopRetransmission = CheckRetransConfirmedUplink( );
 80098a0:	f7fe fcb8 	bl	8008214 <CheckRetransConfirmedUplink>
 80098a4:	e7f5      	b.n	8009892 <LoRaMacHandleMcpsRequest+0x26>
            TimerStop( &MacCtx.TxDelayedTimer );
 80098a6:	4c0f      	ldr	r4, [pc, #60]	@ (80098e4 <LoRaMacHandleMcpsRequest+0x78>)
 80098a8:	4620      	mov	r0, r4
 80098aa:	f008 fa47 	bl	8011d3c <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80098ae:	f854 3c28 	ldr.w	r3, [r4, #-40]
 80098b2:	f023 0320 	bic.w	r3, r3, #32
 80098b6:	f844 3c28 	str.w	r3, [r4, #-40]
            StopRetransmission( );
 80098ba:	f7fe fcc9 	bl	8008250 <StopRetransmission>
 80098be:	e7ea      	b.n	8009896 <LoRaMacHandleMcpsRequest+0x2a>
                waitForRetransmission = true;
 80098c0:	2001      	movs	r0, #1
 80098c2:	e7e7      	b.n	8009894 <LoRaMacHandleMcpsRequest+0x28>
            MacCtx.MacFlags.Bits.MacDone = 0;
 80098c4:	4b06      	ldr	r3, [pc, #24]	@ (80098e0 <LoRaMacHandleMcpsRequest+0x74>)
 80098c6:	f893 2491 	ldrb.w	r2, [r3, #1169]	@ 0x491
 80098ca:	f022 0210 	bic.w	r2, r2, #16
 80098ce:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 80098d2:	f883 0419 	strb.w	r0, [r3, #1049]	@ 0x419
            OnTxDelayedTimerEvent( NULL );
 80098d6:	f7ff ff97 	bl	8009808 <OnTxDelayedTimerEvent>
}
 80098da:	e7dc      	b.n	8009896 <LoRaMacHandleMcpsRequest+0x2a>
 80098dc:	4770      	bx	lr
 80098de:	bf00      	nop
 80098e0:	20000728 	.word	0x20000728
 80098e4:	20000a90 	.word	0x20000a90

080098e8 <LoRaMacHandleRequestEvents>:
{
 80098e8:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState == LORAMAC_IDLE )
 80098ea:	4b22      	ldr	r3, [pc, #136]	@ (8009974 <LoRaMacHandleRequestEvents+0x8c>)
 80098ec:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80098f0:	bb83      	cbnz	r3, 8009954 <LoRaMacHandleRequestEvents+0x6c>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 80098f2:	4b20      	ldr	r3, [pc, #128]	@ (8009974 <LoRaMacHandleRequestEvents+0x8c>)
 80098f4:	f893 4491 	ldrb.w	r4, [r3, #1169]	@ 0x491
 80098f8:	f014 0501 	ands.w	r5, r4, #1
 80098fc:	d006      	beq.n	800990c <LoRaMacHandleRequestEvents+0x24>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 80098fe:	461a      	mov	r2, r3
 8009900:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8009904:	f023 0301 	bic.w	r3, r3, #1
 8009908:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800990c:	4b19      	ldr	r3, [pc, #100]	@ (8009974 <LoRaMacHandleRequestEvents+0x8c>)
 800990e:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8009912:	f013 0f04 	tst.w	r3, #4
 8009916:	d006      	beq.n	8009926 <LoRaMacHandleRequestEvents+0x3e>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8009918:	4a16      	ldr	r2, [pc, #88]	@ (8009974 <LoRaMacHandleRequestEvents+0x8c>)
 800991a:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800991e:	f023 0304 	bic.w	r3, r3, #4
 8009922:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8009926:	2001      	movs	r0, #1
 8009928:	f7fe fbb0 	bl	800808c <LoRaMacEnableRequests>
        if( reqEvents.Bits.McpsReq == 1 )
 800992c:	b135      	cbz	r5, 800993c <LoRaMacHandleRequestEvents+0x54>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800992e:	4811      	ldr	r0, [pc, #68]	@ (8009974 <LoRaMacHandleRequestEvents+0x8c>)
 8009930:	f8d0 3344 	ldr.w	r3, [r0, #836]	@ 0x344
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f500 6088 	add.w	r0, r0, #1088	@ 0x440
 800993a:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 800993c:	f014 0f04 	tst.w	r4, #4
 8009940:	d109      	bne.n	8009956 <LoRaMacHandleRequestEvents+0x6e>
        LoRaMacClassBResumeBeaconing( );
 8009942:	f001 ff22 	bl	800b78a <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 8009946:	4a0b      	ldr	r2, [pc, #44]	@ (8009974 <LoRaMacHandleRequestEvents+0x8c>)
 8009948:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800994c:	f023 0310 	bic.w	r3, r3, #16
 8009950:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
}
 8009954:	bd38      	pop	{r3, r4, r5, pc}
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8009956:	4808      	ldr	r0, [pc, #32]	@ (8009978 <LoRaMacHandleRequestEvents+0x90>)
 8009958:	f002 f990 	bl	800bc7c <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800995c:	f002 f9c6 	bl	800bcec <LoRaMacConfirmQueueGetCnt>
 8009960:	2800      	cmp	r0, #0
 8009962:	d0ee      	beq.n	8009942 <LoRaMacHandleRequestEvents+0x5a>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8009964:	4a03      	ldr	r2, [pc, #12]	@ (8009974 <LoRaMacHandleRequestEvents+0x8c>)
 8009966:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800996a:	f043 0304 	orr.w	r3, r3, #4
 800996e:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 8009972:	e7e6      	b.n	8009942 <LoRaMacHandleRequestEvents+0x5a>
 8009974:	20000728 	.word	0x20000728
 8009978:	20000b7c 	.word	0x20000b7c

0800997c <OpenContinuousRxCWindow>:
{
 800997c:	b530      	push	{r4, r5, lr}
 800997e:	b083      	sub	sp, #12
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8009980:	4c15      	ldr	r4, [pc, #84]	@ (80099d8 <OpenContinuousRxCWindow+0x5c>)
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8009982:	4d16      	ldr	r5, [pc, #88]	@ (80099dc <OpenContinuousRxCWindow+0x60>)
 8009984:	9500      	str	r5, [sp, #0]
 8009986:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8009988:	f894 2050 	ldrb.w	r2, [r4, #80]	@ 0x50
 800998c:	f994 1078 	ldrsb.w	r1, [r4, #120]	@ 0x78
 8009990:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 8009994:	f002 ff42 	bl	800c81c <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8009998:	2302      	movs	r3, #2
 800999a:	74eb      	strb	r3, [r5, #19]
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800999c:	f894 3130 	ldrb.w	r3, [r4, #304]	@ 0x130
 80099a0:	752b      	strb	r3, [r5, #20]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80099a2:	2301      	movs	r3, #1
 80099a4:	74ab      	strb	r3, [r5, #18]
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80099a6:	f105 023c 	add.w	r2, r5, #60	@ 0x3c
 80099aa:	4629      	mov	r1, r5
 80099ac:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 80099b0:	f002 ff47 	bl	800c842 <RegionRxConfig>
 80099b4:	b168      	cbz	r0, 80099d2 <OpenContinuousRxCWindow+0x56>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80099b6:	f5a5 747a 	sub.w	r4, r5, #1000	@ 0x3e8
 80099ba:	f894 3424 	ldrb.w	r3, [r4, #1060]	@ 0x424
 80099be:	f884 346a 	strb.w	r3, [r4, #1130]	@ 0x46a
        Radio.Rx( 0 ); // Continuous mode
 80099c2:	4b07      	ldr	r3, [pc, #28]	@ (80099e0 <OpenContinuousRxCWindow+0x64>)
 80099c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099c6:	2000      	movs	r0, #0
 80099c8:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80099ca:	f894 33fb 	ldrb.w	r3, [r4, #1019]	@ 0x3fb
 80099ce:	f884 3490 	strb.w	r3, [r4, #1168]	@ 0x490
}
 80099d2:	b003      	add	sp, #12
 80099d4:	bd30      	pop	{r4, r5, pc}
 80099d6:	bf00      	nop
 80099d8:	20008000 	.word	0x20008000
 80099dc:	20000b10 	.word	0x20000b10
 80099e0:	08013170 	.word	0x08013170

080099e4 <RxWindowSetup>:
{
 80099e4:	b538      	push	{r3, r4, r5, lr}
 80099e6:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 80099e8:	f008 f9a8 	bl	8011d3c <UTIL_TIMER_Stop>
    Radio.Standby( );
 80099ec:	4b0c      	ldr	r3, [pc, #48]	@ (8009a20 <RxWindowSetup+0x3c>)
 80099ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099f0:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80099f2:	4a0c      	ldr	r2, [pc, #48]	@ (8009a24 <RxWindowSetup+0x40>)
 80099f4:	4621      	mov	r1, r4
 80099f6:	4b0c      	ldr	r3, [pc, #48]	@ (8009a28 <RxWindowSetup+0x44>)
 80099f8:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 80099fc:	f002 ff21 	bl	800c842 <RegionRxConfig>
 8009a00:	b160      	cbz	r0, 8009a1c <RxWindowSetup+0x38>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8009a02:	4d0a      	ldr	r5, [pc, #40]	@ (8009a2c <RxWindowSetup+0x48>)
 8009a04:	f895 3424 	ldrb.w	r3, [r5, #1060]	@ 0x424
 8009a08:	f885 346a 	strb.w	r3, [r5, #1130]	@ 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8009a0c:	4b04      	ldr	r3, [pc, #16]	@ (8009a20 <RxWindowSetup+0x3c>)
 8009a0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a10:	4a05      	ldr	r2, [pc, #20]	@ (8009a28 <RxWindowSetup+0x44>)
 8009a12:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 8009a14:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8009a16:	7ce3      	ldrb	r3, [r4, #19]
 8009a18:	f885 3490 	strb.w	r3, [r5, #1168]	@ 0x490
}
 8009a1c:	bd38      	pop	{r3, r4, r5, pc}
 8009a1e:	bf00      	nop
 8009a20:	08013170 	.word	0x08013170
 8009a24:	20000b4c 	.word	0x20000b4c
 8009a28:	20008000 	.word	0x20008000
 8009a2c:	20000728 	.word	0x20000728

08009a30 <OnRxWindow2TimerEvent>:
{
 8009a30:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8009a32:	4b13      	ldr	r3, [pc, #76]	@ (8009a80 <OnRxWindow2TimerEvent+0x50>)
 8009a34:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 8009a38:	b903      	cbnz	r3, 8009a3c <OnRxWindow2TimerEvent+0xc>
}
 8009a3a:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8009a3c:	4810      	ldr	r0, [pc, #64]	@ (8009a80 <OnRxWindow2TimerEvent+0x50>)
 8009a3e:	f890 341b 	ldrb.w	r3, [r0, #1051]	@ 0x41b
 8009a42:	f880 33d0 	strb.w	r3, [r0, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8009a46:	4b0f      	ldr	r3, [pc, #60]	@ (8009a84 <OnRxWindow2TimerEvent+0x54>)
 8009a48:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8009a4a:	f8c0 23d4 	str.w	r2, [r0, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009a4e:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8009a52:	f880 23e0 	strb.w	r2, [r0, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8009a56:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8009a5a:	f880 23e1 	strb.w	r2, [r0, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8009a5e:	2200      	movs	r2, #0
 8009a60:	f880 23e2 	strb.w	r2, [r0, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8009a64:	2201      	movs	r2, #1
 8009a66:	f880 23e3 	strb.w	r2, [r0, #995]	@ 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8009a6a:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8009a6e:	f880 33e4 	strb.w	r3, [r0, #996]	@ 0x3e4
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8009a72:	f500 7174 	add.w	r1, r0, #976	@ 0x3d0
 8009a76:	f500 7066 	add.w	r0, r0, #920	@ 0x398
 8009a7a:	f7ff ffb3 	bl	80099e4 <RxWindowSetup>
 8009a7e:	e7dc      	b.n	8009a3a <OnRxWindow2TimerEvent+0xa>
 8009a80:	20000728 	.word	0x20000728
 8009a84:	20008000 	.word	0x20008000

08009a88 <OnRxWindow1TimerEvent>:
{
 8009a88:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8009a8a:	4811      	ldr	r0, [pc, #68]	@ (8009ad0 <OnRxWindow1TimerEvent+0x48>)
 8009a8c:	f890 341b 	ldrb.w	r3, [r0, #1051]	@ 0x41b
 8009a90:	f880 33b8 	strb.w	r3, [r0, #952]	@ 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8009a94:	4b0f      	ldr	r3, [pc, #60]	@ (8009ad4 <OnRxWindow1TimerEvent+0x4c>)
 8009a96:	f993 2069 	ldrsb.w	r2, [r3, #105]	@ 0x69
 8009a9a:	f880 23bb 	strb.w	r2, [r0, #955]	@ 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009a9e:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8009aa2:	f880 23c8 	strb.w	r2, [r0, #968]	@ 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8009aa6:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8009aaa:	f880 23c9 	strb.w	r2, [r0, #969]	@ 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 8009aae:	2200      	movs	r2, #0
 8009ab0:	f880 23ca 	strb.w	r2, [r0, #970]	@ 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8009ab4:	f880 23cb 	strb.w	r2, [r0, #971]	@ 0x3cb
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8009ab8:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8009abc:	f880 33cc 	strb.w	r3, [r0, #972]	@ 0x3cc
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8009ac0:	f500 716e 	add.w	r1, r0, #952	@ 0x3b8
 8009ac4:	f500 7060 	add.w	r0, r0, #896	@ 0x380
 8009ac8:	f7ff ff8c 	bl	80099e4 <RxWindowSetup>
}
 8009acc:	bd08      	pop	{r3, pc}
 8009ace:	bf00      	nop
 8009ad0:	20000728 	.word	0x20000728
 8009ad4:	20008000 	.word	0x20008000

08009ad8 <LoRaMacHandleNvm>:
{
 8009ad8:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_IDLE )
 8009ada:	4b31      	ldr	r3, [pc, #196]	@ (8009ba0 <LoRaMacHandleNvm+0xc8>)
 8009adc:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8009ae0:	b103      	cbz	r3, 8009ae4 <LoRaMacHandleNvm+0xc>
}
 8009ae2:	bd38      	pop	{r3, r4, r5, pc}
 8009ae4:	4604      	mov	r4, r0
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8009ae6:	2124      	movs	r1, #36	@ 0x24
 8009ae8:	f005 ff1c 	bl	800f924 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 8009aec:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009aee:	4283      	cmp	r3, r0
 8009af0:	d053      	beq.n	8009b9a <LoRaMacHandleNvm+0xc2>
        nvmData->Crypto.Crc32 = crc;
 8009af2:	6260      	str	r0, [r4, #36]	@ 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8009af4:	2501      	movs	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8009af6:	211c      	movs	r1, #28
 8009af8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8009afc:	f005 ff12 	bl	800f924 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 8009b00:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009b02:	4283      	cmp	r3, r0
 8009b04:	d002      	beq.n	8009b0c <LoRaMacHandleNvm+0x34>
        nvmData->MacGroup1.Crc32 = crc;
 8009b06:	6460      	str	r0, [r4, #68]	@ 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 8009b08:	f045 0502 	orr.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8009b0c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009b10:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 8009b14:	f005 ff06 	bl	800f924 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 8009b18:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
 8009b1c:	4283      	cmp	r3, r0
 8009b1e:	d003      	beq.n	8009b28 <LoRaMacHandleNvm+0x50>
        nvmData->MacGroup2.Crc32 = crc;
 8009b20:	f8c4 0148 	str.w	r0, [r4, #328]	@ 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8009b24:	f045 0504 	orr.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 8009b28:	21d4      	movs	r1, #212	@ 0xd4
 8009b2a:	f504 70a6 	add.w	r0, r4, #332	@ 0x14c
 8009b2e:	f005 fef9 	bl	800f924 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 8009b32:	f8d4 3220 	ldr.w	r3, [r4, #544]	@ 0x220
 8009b36:	4283      	cmp	r3, r0
 8009b38:	d003      	beq.n	8009b42 <LoRaMacHandleNvm+0x6a>
        nvmData->SecureElement.Crc32 = crc;
 8009b3a:	f8c4 0220 	str.w	r0, [r4, #544]	@ 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8009b3e:	f045 0508 	orr.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8009b42:	2110      	movs	r1, #16
 8009b44:	f504 7009 	add.w	r0, r4, #548	@ 0x224
 8009b48:	f005 feec 	bl	800f924 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 8009b4c:	f8d4 3234 	ldr.w	r3, [r4, #564]	@ 0x234
 8009b50:	4283      	cmp	r3, r0
 8009b52:	d003      	beq.n	8009b5c <LoRaMacHandleNvm+0x84>
        nvmData->RegionGroup1.Crc32 = crc;
 8009b54:	f8c4 0234 	str.w	r0, [r4, #564]	@ 0x234
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 8009b58:	f045 0510 	orr.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8009b5c:	f44f 715e 	mov.w	r1, #888	@ 0x378
 8009b60:	f504 700e 	add.w	r0, r4, #568	@ 0x238
 8009b64:	f005 fede 	bl	800f924 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 8009b68:	f8d4 35b0 	ldr.w	r3, [r4, #1456]	@ 0x5b0
 8009b6c:	4283      	cmp	r3, r0
 8009b6e:	d003      	beq.n	8009b78 <LoRaMacHandleNvm+0xa0>
        nvmData->RegionGroup2.Crc32 = crc;
 8009b70:	f8c4 05b0 	str.w	r0, [r4, #1456]	@ 0x5b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 8009b74:	f045 0520 	orr.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8009b78:	2114      	movs	r1, #20
 8009b7a:	f204 50b4 	addw	r0, r4, #1460	@ 0x5b4
 8009b7e:	f005 fed1 	bl	800f924 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 8009b82:	f8d4 35c8 	ldr.w	r3, [r4, #1480]	@ 0x5c8
 8009b86:	4283      	cmp	r3, r0
 8009b88:	d003      	beq.n	8009b92 <LoRaMacHandleNvm+0xba>
        nvmData->ClassB.Crc32 = crc;
 8009b8a:	f8c4 05c8 	str.w	r0, [r4, #1480]	@ 0x5c8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8009b8e:	f045 0540 	orr.w	r5, r5, #64	@ 0x40
    CallNvmDataChangeCallback( notifyFlags );
 8009b92:	4628      	mov	r0, r5
 8009b94:	f7fe fb9e 	bl	80082d4 <CallNvmDataChangeCallback>
 8009b98:	e7a3      	b.n	8009ae2 <LoRaMacHandleNvm+0xa>
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8009b9a:	2500      	movs	r5, #0
 8009b9c:	e7ab      	b.n	8009af6 <LoRaMacHandleNvm+0x1e>
 8009b9e:	bf00      	nop
 8009ba0:	20000728 	.word	0x20000728

08009ba4 <RestoreNvmData>:
{
 8009ba4:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8009ba6:	4b3e      	ldr	r3, [pc, #248]	@ (8009ca0 <RestoreNvmData+0xfc>)
 8009ba8:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d001      	beq.n	8009bb4 <RestoreNvmData+0x10>
        return LORAMAC_STATUS_BUSY;
 8009bb0:	2001      	movs	r0, #1
}
 8009bb2:	bd38      	pop	{r3, r4, r5, pc}
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 8009bb4:	4c3b      	ldr	r4, [pc, #236]	@ (8009ca4 <RestoreNvmData+0x100>)
 8009bb6:	2124      	movs	r1, #36	@ 0x24
 8009bb8:	4620      	mov	r0, r4
 8009bba:	f005 feb3 	bl	800f924 <Crc32>
    if( crc != NvmBackup.Crypto.Crc32 )
 8009bbe:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009bc0:	4283      	cmp	r3, r0
 8009bc2:	d001      	beq.n	8009bc8 <RestoreNvmData+0x24>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009bc4:	2017      	movs	r0, #23
 8009bc6:	e7f4      	b.n	8009bb2 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 8009bc8:	3428      	adds	r4, #40	@ 0x28
 8009bca:	211c      	movs	r1, #28
 8009bcc:	4620      	mov	r0, r4
 8009bce:	f005 fea9 	bl	800f924 <Crc32>
    if( crc != NvmBackup.MacGroup1.Crc32 )
 8009bd2:	69e3      	ldr	r3, [r4, #28]
 8009bd4:	4283      	cmp	r3, r0
 8009bd6:	d001      	beq.n	8009bdc <RestoreNvmData+0x38>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009bd8:	2017      	movs	r0, #23
 8009bda:	e7ea      	b.n	8009bb2 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8009bdc:	3420      	adds	r4, #32
 8009bde:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009be2:	4620      	mov	r0, r4
 8009be4:	f005 fe9e 	bl	800f924 <Crc32>
    if( crc != NvmBackup.MacGroup2.Crc32 )
 8009be8:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
 8009bec:	4283      	cmp	r3, r0
 8009bee:	d001      	beq.n	8009bf4 <RestoreNvmData+0x50>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009bf0:	2017      	movs	r0, #23
 8009bf2:	e7de      	b.n	8009bb2 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 8009bf4:	f504 7482 	add.w	r4, r4, #260	@ 0x104
 8009bf8:	21d4      	movs	r1, #212	@ 0xd4
 8009bfa:	4620      	mov	r0, r4
 8009bfc:	f005 fe92 	bl	800f924 <Crc32>
    if( crc != NvmBackup.SecureElement.Crc32 )
 8009c00:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 8009c04:	4283      	cmp	r3, r0
 8009c06:	d001      	beq.n	8009c0c <RestoreNvmData+0x68>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009c08:	2017      	movs	r0, #23
 8009c0a:	e7d2      	b.n	8009bb2 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 8009c0c:	34d8      	adds	r4, #216	@ 0xd8
 8009c0e:	2110      	movs	r1, #16
 8009c10:	4620      	mov	r0, r4
 8009c12:	f005 fe87 	bl	800f924 <Crc32>
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 8009c16:	6923      	ldr	r3, [r4, #16]
 8009c18:	4283      	cmp	r3, r0
 8009c1a:	d001      	beq.n	8009c20 <RestoreNvmData+0x7c>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009c1c:	2017      	movs	r0, #23
 8009c1e:	e7c8      	b.n	8009bb2 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 8009c20:	3414      	adds	r4, #20
 8009c22:	f44f 715e 	mov.w	r1, #888	@ 0x378
 8009c26:	4620      	mov	r0, r4
 8009c28:	f005 fe7c 	bl	800f924 <Crc32>
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 8009c2c:	f8d4 3378 	ldr.w	r3, [r4, #888]	@ 0x378
 8009c30:	4283      	cmp	r3, r0
 8009c32:	d001      	beq.n	8009c38 <RestoreNvmData+0x94>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009c34:	2017      	movs	r0, #23
 8009c36:	e7bc      	b.n	8009bb2 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 8009c38:	f504 745f 	add.w	r4, r4, #892	@ 0x37c
 8009c3c:	2114      	movs	r1, #20
 8009c3e:	4620      	mov	r0, r4
 8009c40:	f005 fe70 	bl	800f924 <Crc32>
    if( crc != NvmBackup.ClassB.Crc32 )
 8009c44:	6963      	ldr	r3, [r4, #20]
 8009c46:	4283      	cmp	r3, r0
 8009c48:	d001      	beq.n	8009c4e <RestoreNvmData+0xaa>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009c4a:	2017      	movs	r0, #23
 8009c4c:	e7b1      	b.n	8009bb2 <RestoreNvmData+0xe>
    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8009c4e:	f2a4 55b4 	subw	r5, r4, #1460	@ 0x5b4
 8009c52:	4c15      	ldr	r4, [pc, #84]	@ (8009ca8 <RestoreNvmData+0x104>)
 8009c54:	f240 52cc 	movw	r2, #1484	@ 0x5cc
 8009c58:	4629      	mov	r1, r5
 8009c5a:	4620      	mov	r0, r4
 8009c5c:	f005 fe41 	bl	800f8e2 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8009c60:	f240 52cc 	movw	r2, #1484	@ 0x5cc
 8009c64:	2100      	movs	r1, #0
 8009c66:	4628      	mov	r0, r5
 8009c68:	f005 fe53 	bl	800f912 <memset1>
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8009c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8009ca0 <RestoreNvmData+0xfc>)
 8009c6e:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 8009c72:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8009c76:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 8009c78:	f8c3 23ec 	str.w	r2, [r3, #1004]	@ 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009c7c:	f894 207d 	ldrb.w	r2, [r4, #125]	@ 0x7d
 8009c80:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8009c84:	2201      	movs	r2, #1
 8009c86:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8009c8a:	2202      	movs	r2, #2
 8009c8c:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8009c90:	4b06      	ldr	r3, [pc, #24]	@ (8009cac <RestoreNvmData+0x108>)
 8009c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c94:	f894 0119 	ldrb.w	r0, [r4, #281]	@ 0x119
 8009c98:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
 8009c9a:	2000      	movs	r0, #0
 8009c9c:	e789      	b.n	8009bb2 <RestoreNvmData+0xe>
 8009c9e:	bf00      	nop
 8009ca0:	20000728 	.word	0x20000728
 8009ca4:	200085cc 	.word	0x200085cc
 8009ca8:	20008000 	.word	0x20008000
 8009cac:	08013170 	.word	0x08013170

08009cb0 <OnRadioRxTimeout>:
{
 8009cb0:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8009cb2:	4a07      	ldr	r2, [pc, #28]	@ (8009cd0 <OnRadioRxTimeout+0x20>)
 8009cb4:	7813      	ldrb	r3, [r2, #0]
 8009cb6:	f043 0302 	orr.w	r3, r3, #2
 8009cba:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 8009cbc:	f7fe faf2 	bl	80082a4 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 8009cc0:	4b04      	ldr	r3, [pc, #16]	@ (8009cd4 <OnRadioRxTimeout+0x24>)
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	2100      	movs	r1, #0
 8009cc6:	2002      	movs	r0, #2
 8009cc8:	f007 fce6 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
}
 8009ccc:	bd08      	pop	{r3, pc}
 8009cce:	bf00      	nop
 8009cd0:	20000694 	.word	0x20000694
 8009cd4:	080128d0 	.word	0x080128d0

08009cd8 <OnRadioTxTimeout>:
{
 8009cd8:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8009cda:	4a07      	ldr	r2, [pc, #28]	@ (8009cf8 <OnRadioTxTimeout+0x20>)
 8009cdc:	7813      	ldrb	r3, [r2, #0]
 8009cde:	f043 0308 	orr.w	r3, r3, #8
 8009ce2:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 8009ce4:	f7fe fade 	bl	80082a4 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 8009ce8:	4b04      	ldr	r3, [pc, #16]	@ (8009cfc <OnRadioTxTimeout+0x24>)
 8009cea:	2201      	movs	r2, #1
 8009cec:	2100      	movs	r1, #0
 8009cee:	2002      	movs	r0, #2
 8009cf0:	f007 fcd2 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
}
 8009cf4:	bd08      	pop	{r3, pc}
 8009cf6:	bf00      	nop
 8009cf8:	20000694 	.word	0x20000694
 8009cfc:	080128e0 	.word	0x080128e0

08009d00 <OnRadioRxDone>:
{
 8009d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d04:	4680      	mov	r8, r0
 8009d06:	460f      	mov	r7, r1
 8009d08:	4616      	mov	r6, r2
 8009d0a:	461d      	mov	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8009d0c:	f007 ffd6 	bl	8011cbc <UTIL_TIMER_GetCurrentTime>
 8009d10:	4c0c      	ldr	r4, [pc, #48]	@ (8009d44 <OnRadioRxDone+0x44>)
 8009d12:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 8009d14:	f8c4 8004 	str.w	r8, [r4, #4]
    RxDoneParams.Size = size;
 8009d18:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 8009d1a:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 8009d1c:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 8009d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8009d48 <OnRadioRxDone+0x48>)
 8009d20:	781a      	ldrb	r2, [r3, #0]
 8009d22:	f042 0210 	orr.w	r2, r2, #16
 8009d26:	701a      	strb	r2, [r3, #0]
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 8009d28:	b2d2      	uxtb	r2, r2
 8009d2a:	f042 0201 	orr.w	r2, r2, #1
 8009d2e:	701a      	strb	r2, [r3, #0]
    OnMacProcessNotify( );
 8009d30:	f7fe fab8 	bl	80082a4 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 8009d34:	4b05      	ldr	r3, [pc, #20]	@ (8009d4c <OnRadioRxDone+0x4c>)
 8009d36:	2201      	movs	r2, #1
 8009d38:	2100      	movs	r1, #0
 8009d3a:	2002      	movs	r0, #2
 8009d3c:	f007 fcac 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
}
 8009d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d44:	20000680 	.word	0x20000680
 8009d48:	20000694 	.word	0x20000694
 8009d4c:	080128f0 	.word	0x080128f0

08009d50 <OnRadioTxDone>:
{
 8009d50:	b510      	push	{r4, lr}
 8009d52:	b082      	sub	sp, #8
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8009d54:	f007 ffb2 	bl	8011cbc <UTIL_TIMER_GetCurrentTime>
 8009d58:	4b0c      	ldr	r3, [pc, #48]	@ (8009d8c <OnRadioTxDone+0x3c>)
 8009d5a:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 8009d5c:	466c      	mov	r4, sp
 8009d5e:	4620      	mov	r0, r4
 8009d60:	f007 fefe 	bl	8011b60 <SysTimeGet>
 8009d64:	4b0a      	ldr	r3, [pc, #40]	@ (8009d90 <OnRadioTxDone+0x40>)
 8009d66:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009d6a:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 8009d6e:	4a09      	ldr	r2, [pc, #36]	@ (8009d94 <OnRadioTxDone+0x44>)
 8009d70:	7813      	ldrb	r3, [r2, #0]
 8009d72:	f043 0320 	orr.w	r3, r3, #32
 8009d76:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 8009d78:	f7fe fa94 	bl	80082a4 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 8009d7c:	4b06      	ldr	r3, [pc, #24]	@ (8009d98 <OnRadioTxDone+0x48>)
 8009d7e:	2201      	movs	r2, #1
 8009d80:	2100      	movs	r1, #0
 8009d82:	2002      	movs	r0, #2
 8009d84:	f007 fc88 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
}
 8009d88:	b002      	add	sp, #8
 8009d8a:	bd10      	pop	{r4, pc}
 8009d8c:	20000690 	.word	0x20000690
 8009d90:	20000a60 	.word	0x20000a60
 8009d94:	20000694 	.word	0x20000694
 8009d98:	08012900 	.word	0x08012900

08009d9c <ResetMacParameters>:
{
 8009d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d9e:	b091      	sub	sp, #68	@ 0x44
    if( isRejoin == false )
 8009da0:	b918      	cbnz	r0, 8009daa <ResetMacParameters+0xe>
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8009da2:	4b5e      	ldr	r3, [pc, #376]	@ (8009f1c <ResetMacParameters+0x180>)
 8009da4:	2200      	movs	r2, #0
 8009da6:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    Nvm.MacGroup1.AdrAckCounter = 0;
 8009daa:	4c5c      	ldr	r4, [pc, #368]	@ (8009f1c <ResetMacParameters+0x180>)
 8009dac:	2500      	movs	r5, #0
 8009dae:	62a5      	str	r5, [r4, #40]	@ 0x28
    MacCtx.ChannelsNbTransCounter = 0;
 8009db0:	4e5b      	ldr	r6, [pc, #364]	@ (8009f20 <ResetMacParameters+0x184>)
 8009db2:	f886 5418 	strb.w	r5, [r6, #1048]	@ 0x418
    MacCtx.RetransmitTimeoutRetry = false;
 8009db6:	f886 5419 	strb.w	r5, [r6, #1049]	@ 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 8009dba:	f8c6 5498 	str.w	r5, [r6, #1176]	@ 0x498
    Nvm.MacGroup2.MaxDCycle = 0;
 8009dbe:	f884 511b 	strb.w	r5, [r4, #283]	@ 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8009dc2:	2701      	movs	r7, #1
 8009dc4:	f8a4 7120 	strh.w	r7, [r4, #288]	@ 0x120
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8009dc8:	f994 30dc 	ldrsb.w	r3, [r4, #220]	@ 0xdc
 8009dcc:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8009dd0:	f994 30dd 	ldrsb.w	r3, [r4, #221]	@ 0xdd
 8009dd4:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8009dd8:	f894 30b1 	ldrb.w	r3, [r4, #177]	@ 0xb1
 8009ddc:	f884 3069 	strb.w	r3, [r4, #105]	@ 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8009de0:	f104 036c 	add.w	r3, r4, #108	@ 0x6c
 8009de4:	f104 02b4 	add.w	r2, r4, #180	@ 0xb4
 8009de8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009dec:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8009df0:	f104 0374 	add.w	r3, r4, #116	@ 0x74
 8009df4:	f104 02bc 	add.w	r2, r4, #188	@ 0xbc
 8009df8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009dfc:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8009e00:	f894 30c4 	ldrb.w	r3, [r4, #196]	@ 0xc4
 8009e04:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8009e08:	f894 30c5 	ldrb.w	r3, [r4, #197]	@ 0xc5
 8009e0c:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8009e10:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
 8009e14:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8009e18:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
 8009e1c:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8009e20:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	@ 0xd0
 8009e24:	f8a4 3088 	strh.w	r3, [r4, #136]	@ 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8009e28:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	@ 0xd2
 8009e2c:	f8a4 308a 	strh.w	r3, [r4, #138]	@ 0x8a
    MacCtx.NodeAckRequested = false;
 8009e30:	f886 541a 	strb.w	r5, [r6, #1050]	@ 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 8009e34:	f884 503a 	strb.w	r5, [r4, #58]	@ 0x3a
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8009e38:	f884 511d 	strb.w	r5, [r4, #285]	@ 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 8009e3c:	f884 511e 	strb.w	r5, [r4, #286]	@ 0x11e
    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 8009e40:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 8009e44:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 8009e48:	f884 5139 	strb.w	r5, [r4, #313]	@ 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 8009e4c:	f8c4 513c 	str.w	r5, [r4, #316]	@ 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 8009e50:	f8c4 5140 	str.w	r5, [r4, #320]	@ 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 8009e54:	f884 5145 	strb.w	r5, [r4, #325]	@ 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 8009e58:	f884 5146 	strb.w	r5, [r4, #326]	@ 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 8009e5c:	f884 5147 	strb.w	r5, [r4, #327]	@ 0x147
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8009e60:	f88d 7010 	strb.w	r7, [sp, #16]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8009e64:	f504 7309 	add.w	r3, r4, #548	@ 0x224
 8009e68:	9301      	str	r3, [sp, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8009e6a:	f504 730e 	add.w	r3, r4, #568	@ 0x238
 8009e6e:	9302      	str	r3, [sp, #8]
    params.Bands = &RegionBands;
 8009e70:	4b2c      	ldr	r3, [pc, #176]	@ (8009f24 <ResetMacParameters+0x188>)
 8009e72:	9303      	str	r3, [sp, #12]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8009e74:	a901      	add	r1, sp, #4
 8009e76:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 8009e7a:	f002 fc96 	bl	800c7aa <RegionInitDefaults>
    MacCtx.Channel = 0;
 8009e7e:	f886 541b 	strb.w	r5, [r6, #1051]	@ 0x41b
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8009e82:	f886 53d0 	strb.w	r5, [r6, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8009e86:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8009e88:	f8c6 33d4 	str.w	r3, [r6, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009e8c:	f894 307d 	ldrb.w	r3, [r4, #125]	@ 0x7d
 8009e90:	f886 33e0 	strb.w	r3, [r6, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8009e94:	f894 308c 	ldrb.w	r3, [r4, #140]	@ 0x8c
 8009e98:	f886 33e1 	strb.w	r3, [r6, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8009e9c:	f886 53e2 	strb.w	r5, [r6, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8009ea0:	f886 73e3 	strb.w	r7, [r6, #995]	@ 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8009ea4:	f894 3130 	ldrb.w	r3, [r4, #304]	@ 0x130
 8009ea8:	f886 33e4 	strb.w	r3, [r6, #996]	@ 0x3e4
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8009eac:	f506 747a 	add.w	r4, r6, #1000	@ 0x3e8
 8009eb0:	f506 7c74 	add.w	ip, r6, #976	@ 0x3d0
 8009eb4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009eb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009eba:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8009ebe:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8009ec2:	f886 73fa 	strb.w	r7, [r6, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8009ec6:	2302      	movs	r3, #2
 8009ec8:	f886 33fb 	strb.w	r3, [r6, #1019]	@ 0x3fb
    classBCallbacks.GetTemperatureLevel = NULL;
 8009ecc:	950e      	str	r5, [sp, #56]	@ 0x38
    classBCallbacks.MacProcessNotify = NULL;
 8009ece:	950f      	str	r5, [sp, #60]	@ 0x3c
    if( MacCtx.MacCallbacks != NULL )
 8009ed0:	f8d6 3348 	ldr.w	r3, [r6, #840]	@ 0x348
 8009ed4:	b11b      	cbz	r3, 8009ede <ResetMacParameters+0x142>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8009ed6:	685a      	ldr	r2, [r3, #4]
 8009ed8:	920e      	str	r2, [sp, #56]	@ 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8009eda:	695b      	ldr	r3, [r3, #20]
 8009edc:	930f      	str	r3, [sp, #60]	@ 0x3c
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8009ede:	4b12      	ldr	r3, [pc, #72]	@ (8009f28 <ResetMacParameters+0x18c>)
 8009ee0:	9305      	str	r3, [sp, #20]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8009ee2:	f1a3 0248 	sub.w	r2, r3, #72	@ 0x48
 8009ee6:	9206      	str	r2, [sp, #24]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8009ee8:	f1a3 0214 	sub.w	r2, r3, #20
 8009eec:	9207      	str	r2, [sp, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8009eee:	3329      	adds	r3, #41	@ 0x29
 8009ef0:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8009ef2:	4a0e      	ldr	r2, [pc, #56]	@ (8009f2c <ResetMacParameters+0x190>)
 8009ef4:	9209      	str	r2, [sp, #36]	@ 0x24
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8009ef6:	f1a2 039c 	sub.w	r3, r2, #156	@ 0x9c
 8009efa:	930a      	str	r3, [sp, #40]	@ 0x28
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8009efc:	f1a2 0398 	sub.w	r3, r2, #152	@ 0x98
 8009f00:	930b      	str	r3, [sp, #44]	@ 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8009f02:	1d13      	adds	r3, r2, #4
 8009f04:	930c      	str	r3, [sp, #48]	@ 0x30
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 8009f06:	f102 034c 	add.w	r3, r2, #76	@ 0x4c
 8009f0a:	930d      	str	r3, [sp, #52]	@ 0x34
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8009f0c:	f502 629a 	add.w	r2, r2, #1232	@ 0x4d0
 8009f10:	a90e      	add	r1, sp, #56	@ 0x38
 8009f12:	a805      	add	r0, sp, #20
 8009f14:	f001 fc24 	bl	800b760 <LoRaMacClassBInit>
}
 8009f18:	b011      	add	sp, #68	@ 0x44
 8009f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f1c:	20008000 	.word	0x20008000
 8009f20:	20000728 	.word	0x20000728
 8009f24:	20000698 	.word	0x20000698
 8009f28:	20000b90 	.word	0x20000b90
 8009f2c:	200080e4 	.word	0x200080e4

08009f30 <SwitchClass>:
{
 8009f30:	b570      	push	{r4, r5, r6, lr}
 8009f32:	4604      	mov	r4, r0
    switch( Nvm.MacGroup2.DeviceClass )
 8009f34:	4b45      	ldr	r3, [pc, #276]	@ (800a04c <SwitchClass+0x11c>)
 8009f36:	f893 5118 	ldrb.w	r5, [r3, #280]	@ 0x118
 8009f3a:	2d01      	cmp	r5, #1
 8009f3c:	d06d      	beq.n	800a01a <SwitchClass+0xea>
 8009f3e:	2d02      	cmp	r5, #2
 8009f40:	d072      	beq.n	800a028 <SwitchClass+0xf8>
 8009f42:	2d00      	cmp	r5, #0
 8009f44:	d17d      	bne.n	800a042 <SwitchClass+0x112>
            if( deviceClass == CLASS_A )
 8009f46:	bb58      	cbnz	r0, 8009fa0 <SwitchClass+0x70>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8009f48:	f103 0274 	add.w	r2, r3, #116	@ 0x74
 8009f4c:	336c      	adds	r3, #108	@ 0x6c
 8009f4e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009f52:	e882 0003 	stmia.w	r2, {r0, r1}
                status = LORAMAC_STATUS_OK;
 8009f56:	4620      	mov	r0, r4
            if( deviceClass == CLASS_B )
 8009f58:	2c01      	cmp	r4, #1
 8009f5a:	d023      	beq.n	8009fa4 <SwitchClass+0x74>
            if( deviceClass == CLASS_C )
 8009f5c:	2c02      	cmp	r4, #2
 8009f5e:	d171      	bne.n	800a044 <SwitchClass+0x114>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8009f60:	4b3a      	ldr	r3, [pc, #232]	@ (800a04c <SwitchClass+0x11c>)
 8009f62:	f883 4118 	strb.w	r4, [r3, #280]	@ 0x118
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8009f66:	4e3a      	ldr	r6, [pc, #232]	@ (800a050 <SwitchClass+0x120>)
 8009f68:	f506 747a 	add.w	r4, r6, #1000	@ 0x3e8
 8009f6c:	f506 7c74 	add.w	ip, r6, #976	@ 0x3d0
 8009f70:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009f74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f76:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8009f7a:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8009f7e:	2302      	movs	r3, #2
 8009f80:	f886 33fb 	strb.w	r3, [r6, #1019]	@ 0x3fb
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8009f84:	2300      	movs	r3, #0
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	dd15      	ble.n	8009fb6 <SwitchClass+0x86>
                MacCtx.NodeAckRequested = false;
 8009f8a:	4b31      	ldr	r3, [pc, #196]	@ (800a050 <SwitchClass+0x120>)
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
                Radio.Sleep( );
 8009f92:	4b30      	ldr	r3, [pc, #192]	@ (800a054 <SwitchClass+0x124>)
 8009f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f96:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 8009f98:	f7ff fcf0 	bl	800997c <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 8009f9c:	4628      	mov	r0, r5
 8009f9e:	e051      	b.n	800a044 <SwitchClass+0x114>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009fa0:	2003      	movs	r0, #3
 8009fa2:	e7d9      	b.n	8009f58 <SwitchClass+0x28>
                status = LoRaMacClassBSwitchClass( deviceClass );
 8009fa4:	4620      	mov	r0, r4
 8009fa6:	f001 fbf1 	bl	800b78c <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 8009faa:	2800      	cmp	r0, #0
 8009fac:	d1d6      	bne.n	8009f5c <SwitchClass+0x2c>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 8009fae:	4b27      	ldr	r3, [pc, #156]	@ (800a04c <SwitchClass+0x11c>)
 8009fb0:	f883 4118 	strb.w	r4, [r3, #280]	@ 0x118
 8009fb4:	e7d2      	b.n	8009f5c <SwitchClass+0x2c>
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 8009fb6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8009fba:	4a24      	ldr	r2, [pc, #144]	@ (800a04c <SwitchClass+0x11c>)
 8009fbc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8009fc0:	f892 20e9 	ldrb.w	r2, [r2, #233]	@ 0xe9
 8009fc4:	b132      	cbz	r2, 8009fd4 <SwitchClass+0xa4>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 8009fc6:	4a21      	ldr	r2, [pc, #132]	@ (800a04c <SwitchClass+0x11c>)
 8009fc8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8009fcc:	f892 2100 	ldrb.w	r2, [r2, #256]	@ 0x100
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 8009fd0:	2a02      	cmp	r2, #2
 8009fd2:	d002      	beq.n	8009fda <SwitchClass+0xaa>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	b25b      	sxtb	r3, r3
 8009fd8:	e7d5      	b.n	8009f86 <SwitchClass+0x56>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 8009fda:	4a1c      	ldr	r2, [pc, #112]	@ (800a04c <SwitchClass+0x11c>)
 8009fdc:	eb02 1301 	add.w	r3, r2, r1, lsl #4
 8009fe0:	f8d3 1104 	ldr.w	r1, [r3, #260]	@ 0x104
 8009fe4:	6751      	str	r1, [r2, #116]	@ 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 8009fe6:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8009fea:	f882 3078 	strb.w	r3, [r2, #120]	@ 0x78
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8009fee:	4b18      	ldr	r3, [pc, #96]	@ (800a050 <SwitchClass+0x120>)
 8009ff0:	f893 041b 	ldrb.w	r0, [r3, #1051]	@ 0x41b
 8009ff4:	f883 03e8 	strb.w	r0, [r3, #1000]	@ 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8009ff8:	f8c3 13ec 	str.w	r1, [r3, #1004]	@ 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009ffc:	f892 107d 	ldrb.w	r1, [r2, #125]	@ 0x7d
 800a000:	f883 13f8 	strb.w	r1, [r3, #1016]	@ 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800a004:	f892 208c 	ldrb.w	r2, [r2, #140]	@ 0x8c
 800a008:	f883 23f9 	strb.w	r2, [r3, #1017]	@ 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800a00c:	2203      	movs	r2, #3
 800a00e:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800a012:	2201      	movs	r2, #1
 800a014:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
                        break;
 800a018:	e7b7      	b.n	8009f8a <SwitchClass+0x5a>
            status = LoRaMacClassBSwitchClass( deviceClass );
 800a01a:	f001 fbb7 	bl	800b78c <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 800a01e:	b988      	cbnz	r0, 800a044 <SwitchClass+0x114>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800a020:	4b0a      	ldr	r3, [pc, #40]	@ (800a04c <SwitchClass+0x11c>)
 800a022:	f883 4118 	strb.w	r4, [r3, #280]	@ 0x118
 800a026:	e00d      	b.n	800a044 <SwitchClass+0x114>
            if( deviceClass == CLASS_A )
 800a028:	b968      	cbnz	r0, 800a046 <SwitchClass+0x116>
                MacCtx.RxSlot = RX_SLOT_NONE;
 800a02a:	4b09      	ldr	r3, [pc, #36]	@ (800a050 <SwitchClass+0x120>)
 800a02c:	2206      	movs	r2, #6
 800a02e:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800a032:	4b06      	ldr	r3, [pc, #24]	@ (800a04c <SwitchClass+0x11c>)
 800a034:	f883 0118 	strb.w	r0, [r3, #280]	@ 0x118
                Radio.Sleep( );
 800a038:	4b06      	ldr	r3, [pc, #24]	@ (800a054 <SwitchClass+0x124>)
 800a03a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a03c:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 800a03e:	4620      	mov	r0, r4
 800a040:	e000      	b.n	800a044 <SwitchClass+0x114>
    switch( Nvm.MacGroup2.DeviceClass )
 800a042:	2003      	movs	r0, #3
}
 800a044:	bd70      	pop	{r4, r5, r6, pc}
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a046:	2003      	movs	r0, #3
 800a048:	e7fc      	b.n	800a044 <SwitchClass+0x114>
 800a04a:	bf00      	nop
 800a04c:	20008000 	.word	0x20008000
 800a050:	20000728 	.word	0x20000728
 800a054:	08013170 	.word	0x08013170

0800a058 <SendReJoinReq>:
{
 800a058:	b538      	push	{r3, r4, r5, lr}
    switch( joinReqType )
 800a05a:	28ff      	cmp	r0, #255	@ 0xff
 800a05c:	d003      	beq.n	800a066 <SendReJoinReq+0xe>
    bool allowDelayedTx = true;
 800a05e:	2001      	movs	r0, #1
    status = ScheduleTx( allowDelayedTx );
 800a060:	f7ff fb4e 	bl	8009700 <ScheduleTx>
}
 800a064:	bd38      	pop	{r3, r4, r5, pc}
            SwitchClass( CLASS_A );
 800a066:	2000      	movs	r0, #0
 800a068:	f7ff ff62 	bl	8009f30 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800a06c:	4d0a      	ldr	r5, [pc, #40]	@ (800a098 <SendReJoinReq+0x40>)
 800a06e:	2400      	movs	r4, #0
 800a070:	f885 4104 	strb.w	r4, [r5, #260]	@ 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800a074:	1cab      	adds	r3, r5, #2
 800a076:	f8c5 3108 	str.w	r3, [r5, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800a07a:	23ff      	movs	r3, #255	@ 0xff
 800a07c:	f885 310c 	strb.w	r3, [r5, #268]	@ 0x10c
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800a080:	f885 410d 	strb.w	r4, [r5, #269]	@ 0x10d
            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 800a084:	f505 7087 	add.w	r0, r5, #270	@ 0x10e
 800a088:	f005 fb0e 	bl	800f6a8 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 800a08c:	f505 708b 	add.w	r0, r5, #278	@ 0x116
 800a090:	f005 faec 	bl	800f66c <SecureElementGetDevEui>
            allowDelayedTx = false;
 800a094:	4620      	mov	r0, r4
            break;
 800a096:	e7e3      	b.n	800a060 <SendReJoinReq+0x8>
 800a098:	20000728 	.word	0x20000728

0800a09c <PrepareFrame>:
{
 800a09c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a0a0:	b083      	sub	sp, #12
 800a0a2:	4605      	mov	r5, r0
 800a0a4:	460e      	mov	r6, r1
 800a0a6:	4617      	mov	r7, r2
 800a0a8:	f8bd 8028 	ldrh.w	r8, [sp, #40]	@ 0x28
    MacCtx.PktBufferLen = 0;
 800a0ac:	495a      	ldr	r1, [pc, #360]	@ (800a218 <PrepareFrame+0x17c>)
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	800a      	strh	r2, [r1, #0]
    MacCtx.NodeAckRequested = false;
 800a0b2:	f881 241a 	strb.w	r2, [r1, #1050]	@ 0x41a
    uint32_t fCntUp = 0;
 800a0b6:	9201      	str	r2, [sp, #4]
    size_t macCmdsSize = 0;
 800a0b8:	9200      	str	r2, [sp, #0]
    if( fBuffer == NULL )
 800a0ba:	4699      	mov	r9, r3
 800a0bc:	b1cb      	cbz	r3, 800a0f2 <PrepareFrame+0x56>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800a0be:	4c57      	ldr	r4, [pc, #348]	@ (800a21c <PrepareFrame+0x180>)
 800a0c0:	4642      	mov	r2, r8
 800a0c2:	4649      	mov	r1, r9
 800a0c4:	4620      	mov	r0, r4
 800a0c6:	f005 fc0c 	bl	800f8e2 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800a0ca:	fa5f f088 	uxtb.w	r0, r8
 800a0ce:	f884 00ff 	strb.w	r0, [r4, #255]	@ 0xff
 800a0d2:	f5a4 749c 	sub.w	r4, r4, #312	@ 0x138
    MacCtx.PktBuffer[0] = macHdr->Value;
 800a0d6:	782b      	ldrb	r3, [r5, #0]
 800a0d8:	70a3      	strb	r3, [r4, #2]
    switch( macHdr->Bits.MType )
 800a0da:	782b      	ldrb	r3, [r5, #0]
 800a0dc:	095b      	lsrs	r3, r3, #5
 800a0de:	2b04      	cmp	r3, #4
 800a0e0:	d009      	beq.n	800a0f6 <PrepareFrame+0x5a>
 800a0e2:	2b07      	cmp	r3, #7
 800a0e4:	d079      	beq.n	800a1da <PrepareFrame+0x13e>
 800a0e6:	2b02      	cmp	r3, #2
 800a0e8:	d009      	beq.n	800a0fe <PrepareFrame+0x62>
 800a0ea:	2002      	movs	r0, #2
}
 800a0ec:	b003      	add	sp, #12
 800a0ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        fBufferSize = 0;
 800a0f2:	4690      	mov	r8, r2
 800a0f4:	e7e3      	b.n	800a0be <PrepareFrame+0x22>
            MacCtx.NodeAckRequested = true;
 800a0f6:	4b48      	ldr	r3, [pc, #288]	@ (800a218 <PrepareFrame+0x17c>)
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800a0fe:	4b46      	ldr	r3, [pc, #280]	@ (800a218 <PrepareFrame+0x17c>)
 800a100:	2204      	movs	r2, #4
 800a102:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800a106:	1c9a      	adds	r2, r3, #2
 800a108:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800a10c:	22ff      	movs	r2, #255	@ 0xff
 800a10e:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800a112:	782a      	ldrb	r2, [r5, #0]
 800a114:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800a118:	f883 7128 	strb.w	r7, [r3, #296]	@ 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800a11c:	4a40      	ldr	r2, [pc, #256]	@ (800a220 <PrepareFrame+0x184>)
 800a11e:	f8d2 20e4 	ldr.w	r2, [r2, #228]	@ 0xe4
 800a122:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800a126:	7832      	ldrb	r2, [r6, #0]
 800a128:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800a12c:	f883 0130 	strb.w	r0, [r3, #304]	@ 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800a130:	f503 729c 	add.w	r2, r3, #312	@ 0x138
 800a134:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800a138:	a801      	add	r0, sp, #4
 800a13a:	f001 ffb1 	bl	800c0a0 <LoRaMacCryptoGetFCntUp>
 800a13e:	2800      	cmp	r0, #0
 800a140:	d15e      	bne.n	800a200 <PrepareFrame+0x164>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800a142:	9a01      	ldr	r2, [sp, #4]
 800a144:	4b34      	ldr	r3, [pc, #208]	@ (800a218 <PrepareFrame+0x17c>)
 800a146:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116
            MacCtx.McpsConfirm.NbTrans = 0;
 800a14a:	2100      	movs	r1, #0
 800a14c:	f883 1445 	strb.w	r1, [r3, #1093]	@ 0x445
            MacCtx.McpsConfirm.AckReceived = false;
 800a150:	f883 1444 	strb.w	r1, [r3, #1092]	@ 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800a154:	f8c3 244c 	str.w	r2, [r3, #1100]	@ 0x44c
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800a158:	4668      	mov	r0, sp
 800a15a:	f001 fc49 	bl	800b9f0 <LoRaMacCommandsGetSizeSerializedCmds>
 800a15e:	2800      	cmp	r0, #0
 800a160:	d150      	bne.n	800a204 <PrepareFrame+0x168>
            if( macCmdsSize > 0 )
 800a162:	9b00      	ldr	r3, [sp, #0]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d0c1      	beq.n	800a0ec <PrepareFrame+0x50>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800a168:	4b2d      	ldr	r3, [pc, #180]	@ (800a220 <PrepareFrame+0x184>)
 800a16a:	f993 0039 	ldrsb.w	r0, [r3, #57]	@ 0x39
 800a16e:	f7fe f8c9 	bl	8008304 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800a172:	4b29      	ldr	r3, [pc, #164]	@ (800a218 <PrepareFrame+0x17c>)
 800a174:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800a178:	b113      	cbz	r3, 800a180 <PrepareFrame+0xe4>
 800a17a:	9a00      	ldr	r2, [sp, #0]
 800a17c:	2a0f      	cmp	r2, #15
 800a17e:	d915      	bls.n	800a1ac <PrepareFrame+0x110>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800a180:	b113      	cbz	r3, 800a188 <PrepareFrame+0xec>
 800a182:	9b00      	ldr	r3, [sp, #0]
 800a184:	2b0f      	cmp	r3, #15
 800a186:	d821      	bhi.n	800a1cc <PrepareFrame+0x130>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800a188:	4a26      	ldr	r2, [pc, #152]	@ (800a224 <PrepareFrame+0x188>)
 800a18a:	4669      	mov	r1, sp
 800a18c:	f001 fc3c 	bl	800ba08 <LoRaMacCommandsSerializeCmds>
 800a190:	2800      	cmp	r0, #0
 800a192:	d13d      	bne.n	800a210 <PrepareFrame+0x174>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800a194:	4b20      	ldr	r3, [pc, #128]	@ (800a218 <PrepareFrame+0x17c>)
 800a196:	2200      	movs	r2, #0
 800a198:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800a19c:	f203 429c 	addw	r2, r3, #1180	@ 0x49c
 800a1a0:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800a1a4:	9a00      	ldr	r2, [sp, #0]
 800a1a6:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
 800a1aa:	e79f      	b.n	800a0ec <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800a1ac:	4a1e      	ldr	r2, [pc, #120]	@ (800a228 <PrepareFrame+0x18c>)
 800a1ae:	4669      	mov	r1, sp
 800a1b0:	200f      	movs	r0, #15
 800a1b2:	f001 fc29 	bl	800ba08 <LoRaMacCommandsSerializeCmds>
 800a1b6:	bb38      	cbnz	r0, 800a208 <PrepareFrame+0x16c>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800a1b8:	7833      	ldrb	r3, [r6, #0]
 800a1ba:	9a00      	ldr	r2, [sp, #0]
 800a1bc:	f362 0303 	bfi	r3, r2, #0, #4
 800a1c0:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800a1c2:	b2da      	uxtb	r2, r3
 800a1c4:	4b14      	ldr	r3, [pc, #80]	@ (800a218 <PrepareFrame+0x17c>)
 800a1c6:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
 800a1ca:	e78f      	b.n	800a0ec <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800a1cc:	4a15      	ldr	r2, [pc, #84]	@ (800a224 <PrepareFrame+0x188>)
 800a1ce:	4669      	mov	r1, sp
 800a1d0:	f001 fc1a 	bl	800ba08 <LoRaMacCommandsSerializeCmds>
 800a1d4:	b1d0      	cbz	r0, 800a20c <PrepareFrame+0x170>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a1d6:	2013      	movs	r0, #19
 800a1d8:	e788      	b.n	800a0ec <PrepareFrame+0x50>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800a1da:	f1b9 0f00 	cmp.w	r9, #0
 800a1de:	d019      	beq.n	800a214 <PrepareFrame+0x178>
 800a1e0:	2800      	cmp	r0, #0
 800a1e2:	d083      	beq.n	800a0ec <PrepareFrame+0x50>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800a1e4:	4c11      	ldr	r4, [pc, #68]	@ (800a22c <PrepareFrame+0x190>)
 800a1e6:	fa5f f288 	uxtb.w	r2, r8
 800a1ea:	4649      	mov	r1, r9
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	f005 fb78 	bl	800f8e2 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800a1f2:	f894 3234 	ldrb.w	r3, [r4, #564]	@ 0x234
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	f824 3c03 	strh.w	r3, [r4, #-3]
    return LORAMAC_STATUS_OK;
 800a1fc:	2000      	movs	r0, #0
 800a1fe:	e775      	b.n	800a0ec <PrepareFrame+0x50>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800a200:	2012      	movs	r0, #18
 800a202:	e773      	b.n	800a0ec <PrepareFrame+0x50>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a204:	2013      	movs	r0, #19
 800a206:	e771      	b.n	800a0ec <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a208:	2013      	movs	r0, #19
 800a20a:	e76f      	b.n	800a0ec <PrepareFrame+0x50>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800a20c:	200a      	movs	r0, #10
 800a20e:	e76d      	b.n	800a0ec <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a210:	2013      	movs	r0, #19
 800a212:	e76b      	b.n	800a0ec <PrepareFrame+0x50>
    return LORAMAC_STATUS_OK;
 800a214:	2000      	movs	r0, #0
 800a216:	e769      	b.n	800a0ec <PrepareFrame+0x50>
 800a218:	20000728 	.word	0x20000728
 800a21c:	20000860 	.word	0x20000860
 800a220:	20008000 	.word	0x20008000
 800a224:	20000bc4 	.word	0x20000bc4
 800a228:	20000840 	.word	0x20000840
 800a22c:	2000072b 	.word	0x2000072b

0800a230 <Send>:
{
 800a230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a234:	b08a      	sub	sp, #40	@ 0x28
 800a236:	4617      	mov	r7, r2
 800a238:	4698      	mov	r8, r3
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a23a:	4c44      	ldr	r4, [pc, #272]	@ (800a34c <Send+0x11c>)
 800a23c:	f994 a039 	ldrsb.w	sl, [r4, #57]	@ 0x39
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800a240:	f994 9038 	ldrsb.w	r9, [r4, #56]	@ 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800a244:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800a246:	9208      	str	r2, [sp, #32]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800a248:	f894 3130 	ldrb.w	r3, [r4, #304]	@ 0x130
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d07a      	beq.n	800a346 <Send+0x116>
 800a250:	4605      	mov	r5, r0
 800a252:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800a254:	f894 311b 	ldrb.w	r3, [r4, #283]	@ 0x11b
 800a258:	b90b      	cbnz	r3, 800a25e <Send+0x2e>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800a25a:	2100      	movs	r1, #0
 800a25c:	6321      	str	r1, [r4, #48]	@ 0x30
    fCtrl.Value = 0;
 800a25e:	2300      	movs	r3, #0
 800a260:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800a264:	4839      	ldr	r0, [pc, #228]	@ (800a34c <Send+0x11c>)
 800a266:	f890 111a 	ldrb.w	r1, [r0, #282]	@ 0x11a
 800a26a:	f361 13c7 	bfi	r3, r1, #7, #1
 800a26e:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a272:	f890 3118 	ldrb.w	r3, [r0, #280]	@ 0x118
 800a276:	2b01      	cmp	r3, #1
 800a278:	d052      	beq.n	800a320 <Send+0xf0>
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800a27a:	4b34      	ldr	r3, [pc, #208]	@ (800a34c <Send+0x11c>)
 800a27c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800a280:	b12b      	cbz	r3, 800a28e <Send+0x5e>
        fCtrl.Bits.Ack = 1;
 800a282:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800a286:	f043 0320 	orr.w	r3, r3, #32
 800a28a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    adrNext.UpdateChanMask = true;
 800a28e:	2301      	movs	r3, #1
 800a290:	f88d 300c 	strb.w	r3, [sp, #12]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800a294:	f88d 100d 	strb.w	r1, [sp, #13]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800a298:	9204      	str	r2, [sp, #16]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800a29a:	492c      	ldr	r1, [pc, #176]	@ (800a34c <Send+0x11c>)
 800a29c:	f8b1 3088 	ldrh.w	r3, [r1, #136]	@ 0x88
 800a2a0:	f8ad 3014 	strh.w	r3, [sp, #20]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800a2a4:	f8b1 308a 	ldrh.w	r3, [r1, #138]	@ 0x8a
 800a2a8:	f8ad 3016 	strh.w	r3, [sp, #22]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a2ac:	f88d a018 	strb.w	sl, [sp, #24]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800a2b0:	f88d 9019 	strb.w	r9, [sp, #25]
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a2b4:	f891 307c 	ldrb.w	r3, [r1, #124]	@ 0x7c
 800a2b8:	f88d 301b 	strb.w	r3, [sp, #27]
    adrNext.Region = Nvm.MacGroup2.Region;
 800a2bc:	f891 3048 	ldrb.w	r3, [r1, #72]	@ 0x48
 800a2c0:	f88d 301c 	strb.w	r3, [sp, #28]
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	f813 2f68 	ldrb.w	r2, [r3, #104]!
 800a2ca:	f88d 201a 	strb.w	r2, [sp, #26]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800a2ce:	aa08      	add	r2, sp, #32
 800a2d0:	9200      	str	r2, [sp, #0]
 800a2d2:	f101 0238 	add.w	r2, r1, #56	@ 0x38
 800a2d6:	3139      	adds	r1, #57	@ 0x39
 800a2d8:	a803      	add	r0, sp, #12
 800a2da:	f001 f9c7 	bl	800b66c <LoRaMacAdrCalcNext>
 800a2de:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800a2e2:	f360 1386 	bfi	r3, r0, #6, #1
 800a2e6:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800a2ea:	f8cd 8000 	str.w	r8, [sp]
 800a2ee:	463b      	mov	r3, r7
 800a2f0:	4632      	mov	r2, r6
 800a2f2:	a909      	add	r1, sp, #36	@ 0x24
 800a2f4:	4628      	mov	r0, r5
 800a2f6:	f7ff fed1 	bl	800a09c <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800a2fa:	4604      	mov	r4, r0
 800a2fc:	b108      	cbz	r0, 800a302 <Send+0xd2>
 800a2fe:	280a      	cmp	r0, #10
 800a300:	d104      	bne.n	800a30c <Send+0xdc>
        status = ScheduleTx( allowDelayedTx );
 800a302:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 800a306:	f7ff f9fb 	bl	8009700 <ScheduleTx>
 800a30a:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 800a30c:	b17c      	cbz	r4, 800a32e <Send+0xfe>
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800a30e:	4b0f      	ldr	r3, [pc, #60]	@ (800a34c <Send+0x11c>)
 800a310:	f883 a039 	strb.w	sl, [r3, #57]	@ 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800a314:	f883 9038 	strb.w	r9, [r3, #56]	@ 0x38
}
 800a318:	4620      	mov	r0, r4
 800a31a:	b00a      	add	sp, #40	@ 0x28
 800a31c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        fCtrl.Bits.FPending      = 1;
 800a320:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800a324:	f043 0310 	orr.w	r3, r3, #16
 800a328:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800a32c:	e7a5      	b.n	800a27a <Send+0x4a>
        Nvm.MacGroup1.SrvAckRequested = false;
 800a32e:	4b07      	ldr	r3, [pc, #28]	@ (800a34c <Send+0x11c>)
 800a330:	2200      	movs	r2, #0
 800a332:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800a336:	9a08      	ldr	r2, [sp, #32]
 800a338:	629a      	str	r2, [r3, #40]	@ 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800a33a:	f001 fb27 	bl	800b98c <LoRaMacCommandsRemoveNoneStickyCmds>
 800a33e:	2800      	cmp	r0, #0
 800a340:	d0ea      	beq.n	800a318 <Send+0xe8>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a342:	2413      	movs	r4, #19
 800a344:	e7e8      	b.n	800a318 <Send+0xe8>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800a346:	2407      	movs	r4, #7
 800a348:	e7e6      	b.n	800a318 <Send+0xe8>
 800a34a:	bf00      	nop
 800a34c:	20008000 	.word	0x20008000

0800a350 <LoRaMacIsBusy>:
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800a350:	4b0c      	ldr	r3, [pc, #48]	@ (800a384 <LoRaMacIsBusy+0x34>)
 800a352:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800a356:	2b01      	cmp	r3, #1
 800a358:	d00c      	beq.n	800a374 <LoRaMacIsBusy+0x24>
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800a35a:	4a0b      	ldr	r2, [pc, #44]	@ (800a388 <LoRaMacIsBusy+0x38>)
 800a35c:	7812      	ldrb	r2, [r2, #0]
 800a35e:	f012 0f01 	tst.w	r2, #1
 800a362:	d109      	bne.n	800a378 <LoRaMacIsBusy+0x28>
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800a364:	b953      	cbnz	r3, 800a37c <LoRaMacIsBusy+0x2c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800a366:	4b07      	ldr	r3, [pc, #28]	@ (800a384 <LoRaMacIsBusy+0x34>)
 800a368:	f893 3492 	ldrb.w	r3, [r3, #1170]	@ 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d007      	beq.n	800a380 <LoRaMacIsBusy+0x30>
    return true;
 800a370:	2001      	movs	r0, #1
 800a372:	4770      	bx	lr
        return false;
 800a374:	2000      	movs	r0, #0
 800a376:	4770      	bx	lr
        return true;
 800a378:	2001      	movs	r0, #1
 800a37a:	4770      	bx	lr
    return true;
 800a37c:	2001      	movs	r0, #1
 800a37e:	4770      	bx	lr
        return false;
 800a380:	2000      	movs	r0, #0
}
 800a382:	4770      	bx	lr
 800a384:	20000728 	.word	0x20000728
 800a388:	20000694 	.word	0x20000694

0800a38c <LoRaMacIsStopped>:
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800a38c:	4b04      	ldr	r3, [pc, #16]	@ (800a3a0 <LoRaMacIsStopped+0x14>)
 800a38e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800a392:	2b01      	cmp	r3, #1
 800a394:	d001      	beq.n	800a39a <LoRaMacIsStopped+0xe>
    return false;
 800a396:	2000      	movs	r0, #0
 800a398:	4770      	bx	lr
        return true;
 800a39a:	2001      	movs	r0, #1
}
 800a39c:	4770      	bx	lr
 800a39e:	bf00      	nop
 800a3a0:	20000728 	.word	0x20000728

0800a3a4 <LoRaMacProcess>:
{
 800a3a4:	b508      	push	{r3, lr}
    LoRaMacHandleIrqEvents( );
 800a3a6:	f7fe fffb 	bl	80093a0 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800a3aa:	f001 fa00 	bl	800b7ae <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800a3ae:	4b1f      	ldr	r3, [pc, #124]	@ (800a42c <LoRaMacProcess+0x88>)
 800a3b0:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800a3b4:	f013 0f10 	tst.w	r3, #16
 800a3b8:	d10d      	bne.n	800a3d6 <LoRaMacProcess+0x32>
    LoRaMacHandleIndicationEvents( );
 800a3ba:	f7fd fe6d 	bl	8008098 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800a3be:	4b1b      	ldr	r3, [pc, #108]	@ (800a42c <LoRaMacProcess+0x88>)
 800a3c0:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800a3c4:	2b02      	cmp	r3, #2
 800a3c6:	d022      	beq.n	800a40e <LoRaMacProcess+0x6a>
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800a3c8:	4b18      	ldr	r3, [pc, #96]	@ (800a42c <LoRaMacProcess+0x88>)
 800a3ca:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800a3ce:	f013 0f20 	tst.w	r3, #32
 800a3d2:	d11f      	bne.n	800a414 <LoRaMacProcess+0x70>
}
 800a3d4:	bd08      	pop	{r3, pc}
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800a3d6:	2000      	movs	r0, #0
 800a3d8:	f7fd fe58 	bl	800808c <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800a3dc:	f7fd fe94 	bl	8008108 <LoRaMacCheckForRxAbort>
        if( IsRequestPending( ) > 0 )
 800a3e0:	f7fd ff84 	bl	80082ec <IsRequestPending>
 800a3e4:	b110      	cbz	r0, 800a3ec <LoRaMacProcess+0x48>
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800a3e6:	f7fe f86f 	bl	80084c8 <LoRaMacCheckForBeaconAcquisition>
        if( noTx == 0x00 )
 800a3ea:	b918      	cbnz	r0, 800a3f4 <LoRaMacProcess+0x50>
            LoRaMacHandleMlmeRequest( );
 800a3ec:	f7ff f81a 	bl	8009424 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800a3f0:	f7ff fa3c 	bl	800986c <LoRaMacHandleMcpsRequest>
        LoRaMacHandleRequestEvents( );
 800a3f4:	f7ff fa78 	bl	80098e8 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800a3f8:	2001      	movs	r0, #1
 800a3fa:	f7fd fe47 	bl	800808c <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800a3fe:	4a0b      	ldr	r2, [pc, #44]	@ (800a42c <LoRaMacProcess+0x88>)
 800a400:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800a404:	f043 0320 	orr.w	r3, r3, #32
 800a408:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 800a40c:	e7d5      	b.n	800a3ba <LoRaMacProcess+0x16>
        OpenContinuousRxCWindow( );
 800a40e:	f7ff fab5 	bl	800997c <OpenContinuousRxCWindow>
 800a412:	e7d9      	b.n	800a3c8 <LoRaMacProcess+0x24>
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800a414:	4a05      	ldr	r2, [pc, #20]	@ (800a42c <LoRaMacProcess+0x88>)
 800a416:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800a41a:	f023 0320 	bic.w	r3, r3, #32
 800a41e:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        LoRaMacHandleNvm( &Nvm );
 800a422:	4803      	ldr	r0, [pc, #12]	@ (800a430 <LoRaMacProcess+0x8c>)
 800a424:	f7ff fb58 	bl	8009ad8 <LoRaMacHandleNvm>
}
 800a428:	e7d4      	b.n	800a3d4 <LoRaMacProcess+0x30>
 800a42a:	bf00      	nop
 800a42c:	20000728 	.word	0x20000728
 800a430:	20008000 	.word	0x20008000

0800a434 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800a434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a438:	b08d      	sub	sp, #52	@ 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 800a43a:	2800      	cmp	r0, #0
 800a43c:	f000 81a3 	beq.w	800a786 <LoRaMacInitialization+0x352>
 800a440:	4688      	mov	r8, r1
 800a442:	4691      	mov	r9, r2
 800a444:	4607      	mov	r7, r0
 800a446:	2900      	cmp	r1, #0
 800a448:	f000 819f 	beq.w	800a78a <LoRaMacInitialization+0x356>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800a44c:	6803      	ldr	r3, [r0, #0]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	f000 819d 	beq.w	800a78e <LoRaMacInitialization+0x35a>
        ( primitives->MacMcpsIndication == NULL ) ||
 800a454:	6843      	ldr	r3, [r0, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800a456:	2b00      	cmp	r3, #0
 800a458:	f000 819b 	beq.w	800a792 <LoRaMacInitialization+0x35e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800a45c:	6883      	ldr	r3, [r0, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800a45e:	2b00      	cmp	r3, #0
 800a460:	f000 8199 	beq.w	800a796 <LoRaMacInitialization+0x362>
        ( primitives->MacMlmeIndication == NULL ) )
 800a464:	68c3      	ldr	r3, [r0, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800a466:	2b00      	cmp	r3, #0
 800a468:	f000 8197 	beq.w	800a79a <LoRaMacInitialization+0x366>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800a46c:	4610      	mov	r0, r2
 800a46e:	f002 f96d 	bl	800c74c <RegionIsActive>
 800a472:	2800      	cmp	r0, #0
 800a474:	f000 8193 	beq.w	800a79e <LoRaMacInitialization+0x36a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800a478:	4638      	mov	r0, r7
 800a47a:	f001 fb59 	bl	800bb30 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800a47e:	4ccb      	ldr	r4, [pc, #812]	@ (800a7ac <LoRaMacInitialization+0x378>)
 800a480:	f240 52cc 	movw	r2, #1484	@ 0x5cc
 800a484:	2100      	movs	r1, #0
 800a486:	4620      	mov	r0, r4
 800a488:	f005 fa43 	bl	800f912 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800a48c:	4ec8      	ldr	r6, [pc, #800]	@ (800a7b0 <LoRaMacInitialization+0x37c>)
 800a48e:	f240 521c 	movw	r2, #1308	@ 0x51c
 800a492:	2100      	movs	r1, #0
 800a494:	4630      	mov	r0, r6
 800a496:	f005 fa3c 	bl	800f912 <memset1>
    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 800a49a:	f884 9048 	strb.w	r9, [r4, #72]	@ 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800a49e:	2500      	movs	r5, #0
 800a4a0:	f884 5118 	strb.w	r5, [r4, #280]	@ 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 800a4a4:	f884 508c 	strb.w	r5, [r4, #140]	@ 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800a4a8:	4bc2      	ldr	r3, [pc, #776]	@ (800a7b4 <LoRaMacInitialization+0x380>)
 800a4aa:	f8c4 312c 	str.w	r3, [r4, #300]	@ 0x12c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800a4ae:	f88d 5020 	strb.w	r5, [sp, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800a4b2:	f504 7309 	add.w	r3, r4, #548	@ 0x224
 800a4b6:	9305      	str	r3, [sp, #20]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800a4b8:	f504 730e 	add.w	r3, r4, #568	@ 0x238
 800a4bc:	9306      	str	r3, [sp, #24]
    params.Bands = &RegionBands;
 800a4be:	4bbe      	ldr	r3, [pc, #760]	@ (800a7b8 <LoRaMacInitialization+0x384>)
 800a4c0:	9307      	str	r3, [sp, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800a4c2:	a905      	add	r1, sp, #20
 800a4c4:	4648      	mov	r0, r9
 800a4c6:	f002 f970 	bl	800c7aa <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800a4ca:	230f      	movs	r3, #15
 800a4cc:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a4d0:	a90a      	add	r1, sp, #40	@ 0x28
 800a4d2:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800a4d6:	f002 f943 	bl	800c760 <RegionGetPhyParam>
 800a4da:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800a4dc:	1b40      	subs	r0, r0, r5
 800a4de:	bf18      	it	ne
 800a4e0:	2001      	movne	r0, #1
 800a4e2:	f884 011c 	strb.w	r0, [r4, #284]	@ 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800a4e6:	f04f 0a0a 	mov.w	sl, #10
 800a4ea:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a4ee:	a90a      	add	r1, sp, #40	@ 0x28
 800a4f0:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800a4f4:	f002 f934 	bl	800c760 <RegionGetPhyParam>
 800a4f8:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800a4fa:	f884 00dc 	strb.w	r0, [r4, #220]	@ 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 800a4fe:	f04f 0906 	mov.w	r9, #6
 800a502:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a506:	a90a      	add	r1, sp, #40	@ 0x28
 800a508:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800a50c:	f002 f928 	bl	800c760 <RegionGetPhyParam>
 800a510:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800a512:	f884 00dd 	strb.w	r0, [r4, #221]	@ 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800a516:	2310      	movs	r3, #16
 800a518:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a51c:	a90a      	add	r1, sp, #40	@ 0x28
 800a51e:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800a522:	f002 f91d 	bl	800c760 <RegionGetPhyParam>
 800a526:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800a528:	f8c4 009c 	str.w	r0, [r4, #156]	@ 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800a52c:	2311      	movs	r3, #17
 800a52e:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a532:	a90a      	add	r1, sp, #40	@ 0x28
 800a534:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800a538:	f002 f912 	bl	800c760 <RegionGetPhyParam>
 800a53c:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800a53e:	f8c4 00a0 	str.w	r0, [r4, #160]	@ 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800a542:	2312      	movs	r3, #18
 800a544:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a548:	a90a      	add	r1, sp, #40	@ 0x28
 800a54a:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800a54e:	f002 f907 	bl	800c760 <RegionGetPhyParam>
 800a552:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800a554:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800a558:	2313      	movs	r3, #19
 800a55a:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a55e:	a90a      	add	r1, sp, #40	@ 0x28
 800a560:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800a564:	f002 f8fc 	bl	800c760 <RegionGetPhyParam>
 800a568:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800a56a:	f8c4 00a8 	str.w	r0, [r4, #168]	@ 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800a56e:	2314      	movs	r3, #20
 800a570:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a574:	a90a      	add	r1, sp, #40	@ 0x28
 800a576:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800a57a:	f002 f8f1 	bl	800c760 <RegionGetPhyParam>
 800a57e:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800a580:	f8c4 00ac 	str.w	r0, [r4, #172]	@ 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800a584:	2316      	movs	r3, #22
 800a586:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a58a:	a90a      	add	r1, sp, #40	@ 0x28
 800a58c:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800a590:	f002 f8e6 	bl	800c760 <RegionGetPhyParam>
 800a594:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800a596:	f884 00b1 	strb.w	r0, [r4, #177]	@ 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800a59a:	2317      	movs	r3, #23
 800a59c:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a5a0:	a90a      	add	r1, sp, #40	@ 0x28
 800a5a2:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800a5a6:	f002 f8db 	bl	800c760 <RegionGetPhyParam>
 800a5aa:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800a5ac:	f8c4 00b4 	str.w	r0, [r4, #180]	@ 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800a5b0:	f8c4 00bc 	str.w	r0, [r4, #188]	@ 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800a5b4:	2318      	movs	r3, #24
 800a5b6:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a5ba:	a90a      	add	r1, sp, #40	@ 0x28
 800a5bc:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800a5c0:	f002 f8ce 	bl	800c760 <RegionGetPhyParam>
 800a5c4:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800a5c6:	b2c0      	uxtb	r0, r0
 800a5c8:	f884 00b8 	strb.w	r0, [r4, #184]	@ 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800a5cc:	f884 00c0 	strb.w	r0, [r4, #192]	@ 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800a5d0:	231d      	movs	r3, #29
 800a5d2:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a5d6:	a90a      	add	r1, sp, #40	@ 0x28
 800a5d8:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800a5dc:	f002 f8c0 	bl	800c760 <RegionGetPhyParam>
 800a5e0:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800a5e2:	f884 00c4 	strb.w	r0, [r4, #196]	@ 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800a5e6:	231e      	movs	r3, #30
 800a5e8:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a5ec:	a90a      	add	r1, sp, #40	@ 0x28
 800a5ee:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800a5f2:	f002 f8b5 	bl	800c760 <RegionGetPhyParam>
 800a5f6:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800a5f8:	f884 00c5 	strb.w	r0, [r4, #197]	@ 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800a5fc:	231f      	movs	r3, #31
 800a5fe:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a602:	a90a      	add	r1, sp, #40	@ 0x28
 800a604:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800a608:	f002 f8aa 	bl	800c760 <RegionGetPhyParam>
 800a60c:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800a60e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a610:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800a614:	2320      	movs	r3, #32
 800a616:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a61a:	a90a      	add	r1, sp, #40	@ 0x28
 800a61c:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800a620:	f002 f89e 	bl	800c760 <RegionGetPhyParam>
 800a624:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800a626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a628:	f8c4 30cc 	str.w	r3, [r4, #204]	@ 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800a62c:	230b      	movs	r3, #11
 800a62e:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a632:	a90a      	add	r1, sp, #40	@ 0x28
 800a634:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800a638:	f002 f892 	bl	800c760 <RegionGetPhyParam>
 800a63c:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 800a63e:	f8a4 00d0 	strh.w	r0, [r4, #208]	@ 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800a642:	230c      	movs	r3, #12
 800a644:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a648:	a90a      	add	r1, sp, #40	@ 0x28
 800a64a:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800a64e:	f002 f887 	bl	800c760 <RegionGetPhyParam>
 800a652:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 800a654:	f8a4 00d2 	strh.w	r0, [r4, #210]	@ 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800a658:	f04f 0b01 	mov.w	fp, #1
 800a65c:	f884 b0b0 	strb.w	fp, [r4, #176]	@ 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800a660:	f8c4 a094 	str.w	sl, [r4, #148]	@ 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800a664:	f884 9098 	strb.w	r9, [r4, #152]	@ 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800a668:	f8c4 a04c 	str.w	sl, [r4, #76]	@ 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800a66c:	f884 9050 	strb.w	r9, [r4, #80]	@ 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800a670:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 800a674:	6563      	str	r3, [r4, #84]	@ 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800a676:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 800a67a:	65a3      	str	r3, [r4, #88]	@ 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800a67c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 800a680:	65e3      	str	r3, [r4, #92]	@ 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800a682:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
 800a686:	6623      	str	r3, [r4, #96]	@ 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800a688:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 800a68c:	6663      	str	r3, [r4, #100]	@ 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800a68e:	f884 b068 	strb.w	fp, [r4, #104]	@ 0x68
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 800a692:	f884 b11f 	strb.w	fp, [r4, #287]	@ 0x11f
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 800a696:	f8c6 8348 	str.w	r8, [r6, #840]	@ 0x348
    ResetMacParameters( false );
 800a69a:	4628      	mov	r0, r5
 800a69c:	f7ff fb7e 	bl	8009d9c <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 800a6a0:	f884 b119 	strb.w	fp, [r4, #281]	@ 0x119

    MacCtx.MacPrimitives = primitives;
 800a6a4:	f8c6 7344 	str.w	r7, [r6, #836]	@ 0x344
    MacCtx.MacFlags.Value = 0;
 800a6a8:	f886 5491 	strb.w	r5, [r6, #1169]	@ 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 800a6ac:	f8c6 b340 	str.w	fp, [r6, #832]	@ 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800a6b0:	62e5      	str	r5, [r4, #44]	@ 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800a6b2:	6325      	str	r5, [r4, #48]	@ 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800a6b4:	9500      	str	r5, [sp, #0]
 800a6b6:	4b41      	ldr	r3, [pc, #260]	@ (800a7bc <LoRaMacInitialization+0x388>)
 800a6b8:	462a      	mov	r2, r5
 800a6ba:	f04f 31ff 	mov.w	r1, #4294967295
 800a6be:	f506 705a 	add.w	r0, r6, #872	@ 0x368
 800a6c2:	f007 fadd 	bl	8011c80 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800a6c6:	9500      	str	r5, [sp, #0]
 800a6c8:	4b3d      	ldr	r3, [pc, #244]	@ (800a7c0 <LoRaMacInitialization+0x38c>)
 800a6ca:	462a      	mov	r2, r5
 800a6cc:	f04f 31ff 	mov.w	r1, #4294967295
 800a6d0:	f506 7060 	add.w	r0, r6, #896	@ 0x380
 800a6d4:	f007 fad4 	bl	8011c80 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800a6d8:	9500      	str	r5, [sp, #0]
 800a6da:	4b3a      	ldr	r3, [pc, #232]	@ (800a7c4 <LoRaMacInitialization+0x390>)
 800a6dc:	462a      	mov	r2, r5
 800a6de:	f04f 31ff 	mov.w	r1, #4294967295
 800a6e2:	f506 7066 	add.w	r0, r6, #920	@ 0x398
 800a6e6:	f007 facb 	bl	8011c80 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 800a6ea:	9500      	str	r5, [sp, #0]
 800a6ec:	4b36      	ldr	r3, [pc, #216]	@ (800a7c8 <LoRaMacInitialization+0x394>)
 800a6ee:	462a      	mov	r2, r5
 800a6f0:	f04f 31ff 	mov.w	r1, #4294967295
 800a6f4:	f506 6080 	add.w	r0, r6, #1024	@ 0x400
 800a6f8:	f007 fac2 	bl	8011c80 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800a6fc:	af02      	add	r7, sp, #8
 800a6fe:	4638      	mov	r0, r7
 800a700:	f007 fa50 	bl	8011ba4 <SysTimeGetMcuTime>
 800a704:	f504 7392 	add.w	r3, r4, #292	@ 0x124
 800a708:	e897 0003 	ldmia.w	r7, {r0, r1}
 800a70c:	e883 0003 	stmia.w	r3, {r0, r1}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 800a710:	4b2e      	ldr	r3, [pc, #184]	@ (800a7cc <LoRaMacInitialization+0x398>)
 800a712:	601d      	str	r5, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800a714:	4b2e      	ldr	r3, [pc, #184]	@ (800a7d0 <LoRaMacInitialization+0x39c>)
 800a716:	f8c6 334c 	str.w	r3, [r6, #844]	@ 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800a71a:	4b2e      	ldr	r3, [pc, #184]	@ (800a7d4 <LoRaMacInitialization+0x3a0>)
 800a71c:	f8c6 3354 	str.w	r3, [r6, #852]	@ 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800a720:	4b2d      	ldr	r3, [pc, #180]	@ (800a7d8 <LoRaMacInitialization+0x3a4>)
 800a722:	f8c6 335c 	str.w	r3, [r6, #860]	@ 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800a726:	4b2d      	ldr	r3, [pc, #180]	@ (800a7dc <LoRaMacInitialization+0x3a8>)
 800a728:	f8c6 3350 	str.w	r3, [r6, #848]	@ 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800a72c:	4b2c      	ldr	r3, [pc, #176]	@ (800a7e0 <LoRaMacInitialization+0x3ac>)
 800a72e:	f8c6 3358 	str.w	r3, [r6, #856]	@ 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800a732:	4b2c      	ldr	r3, [pc, #176]	@ (800a7e4 <LoRaMacInitialization+0x3b0>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f506 7053 	add.w	r0, r6, #844	@ 0x34c
 800a73a:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 800a73c:	f504 70a6 	add.w	r0, r4, #332	@ 0x14c
 800a740:	f004 fdfe 	bl	800f340 <SecureElementInit>
 800a744:	bb80      	cbnz	r0, 800a7a8 <LoRaMacInitialization+0x374>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800a746:	4620      	mov	r0, r4
 800a748:	f001 fc8a 	bl	800c060 <LoRaMacCryptoInit>
 800a74c:	2800      	cmp	r0, #0
 800a74e:	d14b      	bne.n	800a7e8 <LoRaMacInitialization+0x3b4>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800a750:	f001 f8b0 	bl	800b8b4 <LoRaMacCommandsInit>
 800a754:	2800      	cmp	r0, #0
 800a756:	d149      	bne.n	800a7ec <LoRaMacInitialization+0x3b8>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800a758:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 800a75c:	f001 fcd2 	bl	800c104 <LoRaMacCryptoSetMulticastReference>
 800a760:	4604      	mov	r4, r0
 800a762:	2800      	cmp	r0, #0
 800a764:	d144      	bne.n	800a7f0 <LoRaMacInitialization+0x3bc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800a766:	4d1f      	ldr	r5, [pc, #124]	@ (800a7e4 <LoRaMacInitialization+0x3b0>)
 800a768:	696b      	ldr	r3, [r5, #20]
 800a76a:	4798      	blx	r3
 800a76c:	f005 f8a6 	bl	800f8bc <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800a770:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800a772:	4a0e      	ldr	r2, [pc, #56]	@ (800a7ac <LoRaMacInitialization+0x378>)
 800a774:	f892 0119 	ldrb.w	r0, [r2, #281]	@ 0x119
 800a778:	4798      	blx	r3
    Radio.Sleep( );
 800a77a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a77c:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800a77e:	4658      	mov	r0, fp
 800a780:	f7fd fc84 	bl	800808c <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800a784:	e00c      	b.n	800a7a0 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a786:	2403      	movs	r4, #3
 800a788:	e00a      	b.n	800a7a0 <LoRaMacInitialization+0x36c>
 800a78a:	2403      	movs	r4, #3
 800a78c:	e008      	b.n	800a7a0 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a78e:	2403      	movs	r4, #3
 800a790:	e006      	b.n	800a7a0 <LoRaMacInitialization+0x36c>
 800a792:	2403      	movs	r4, #3
 800a794:	e004      	b.n	800a7a0 <LoRaMacInitialization+0x36c>
 800a796:	2403      	movs	r4, #3
 800a798:	e002      	b.n	800a7a0 <LoRaMacInitialization+0x36c>
 800a79a:	2403      	movs	r4, #3
 800a79c:	e000      	b.n	800a7a0 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800a79e:	2409      	movs	r4, #9
}
 800a7a0:	4620      	mov	r0, r4
 800a7a2:	b00d      	add	sp, #52	@ 0x34
 800a7a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800a7a8:	2411      	movs	r4, #17
 800a7aa:	e7f9      	b.n	800a7a0 <LoRaMacInitialization+0x36c>
 800a7ac:	20008000 	.word	0x20008000
 800a7b0:	20000728 	.word	0x20000728
 800a7b4:	01000400 	.word	0x01000400
 800a7b8:	20000698 	.word	0x20000698
 800a7bc:	08009809 	.word	0x08009809
 800a7c0:	08009a89 	.word	0x08009a89
 800a7c4:	08009a31 	.word	0x08009a31
 800a7c8:	08008465 	.word	0x08008465
 800a7cc:	20000694 	.word	0x20000694
 800a7d0:	08009d51 	.word	0x08009d51
 800a7d4:	08009d01 	.word	0x08009d01
 800a7d8:	080082bd 	.word	0x080082bd
 800a7dc:	08009cd9 	.word	0x08009cd9
 800a7e0:	08009cb1 	.word	0x08009cb1
 800a7e4:	08013170 	.word	0x08013170
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800a7e8:	2411      	movs	r4, #17
 800a7ea:	e7d9      	b.n	800a7a0 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a7ec:	2413      	movs	r4, #19
 800a7ee:	e7d7      	b.n	800a7a0 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800a7f0:	2411      	movs	r4, #17
 800a7f2:	e7d5      	b.n	800a7a0 <LoRaMacInitialization+0x36c>

0800a7f4 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 800a7f4:	b510      	push	{r4, lr}
    MacCtx.MacState = LORAMAC_IDLE;
 800a7f6:	2400      	movs	r4, #0
 800a7f8:	4b03      	ldr	r3, [pc, #12]	@ (800a808 <LoRaMacStart+0x14>)
 800a7fa:	f8c3 4340 	str.w	r4, [r3, #832]	@ 0x340
    UpdateRxSlotIdleState();
 800a7fe:	f7fd fc31 	bl	8008064 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
}
 800a802:	4620      	mov	r0, r4
 800a804:	bd10      	pop	{r4, pc}
 800a806:	bf00      	nop
 800a808:	20000728 	.word	0x20000728

0800a80c <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 800a80c:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == false )
 800a80e:	f7ff fd9f 	bl	800a350 <LoRaMacIsBusy>
 800a812:	b130      	cbz	r0, 800a822 <LoRaMacStop+0x16>
            Radio.Sleep( );
        }
        MacCtx.MacState = LORAMAC_STOPPED;
        return LORAMAC_STATUS_OK;
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 800a814:	4b0b      	ldr	r3, [pc, #44]	@ (800a844 <LoRaMacStop+0x38>)
 800a816:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800a81a:	2b01      	cmp	r3, #1
 800a81c:	d010      	beq.n	800a840 <LoRaMacStop+0x34>
    {
        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_BUSY;
 800a81e:	2001      	movs	r0, #1
}
 800a820:	bd08      	pop	{r3, pc}
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800a822:	4b09      	ldr	r3, [pc, #36]	@ (800a848 <LoRaMacStop+0x3c>)
 800a824:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800a828:	2b02      	cmp	r3, #2
 800a82a:	d005      	beq.n	800a838 <LoRaMacStop+0x2c>
        MacCtx.MacState = LORAMAC_STOPPED;
 800a82c:	4b05      	ldr	r3, [pc, #20]	@ (800a844 <LoRaMacStop+0x38>)
 800a82e:	2201      	movs	r2, #1
 800a830:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
        return LORAMAC_STATUS_OK;
 800a834:	2000      	movs	r0, #0
 800a836:	e7f3      	b.n	800a820 <LoRaMacStop+0x14>
            Radio.Sleep( );
 800a838:	4b04      	ldr	r3, [pc, #16]	@ (800a84c <LoRaMacStop+0x40>)
 800a83a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a83c:	4798      	blx	r3
 800a83e:	e7f5      	b.n	800a82c <LoRaMacStop+0x20>
        return LORAMAC_STATUS_OK;
 800a840:	2000      	movs	r0, #0
 800a842:	e7ed      	b.n	800a820 <LoRaMacStop+0x14>
 800a844:	20000728 	.word	0x20000728
 800a848:	20008000 	.word	0x20008000
 800a84c:	08013170 	.word	0x08013170

0800a850 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 800a850:	b570      	push	{r4, r5, r6, lr}
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 800a852:	4c13      	ldr	r4, [pc, #76]	@ (800a8a0 <LoRaMacHalt+0x50>)
 800a854:	4620      	mov	r0, r4
 800a856:	f007 fa71 	bl	8011d3c <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 800a85a:	f104 0018 	add.w	r0, r4, #24
 800a85e:	f007 fa6d 	bl	8011d3c <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 800a862:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 800a866:	f007 fa69 	bl	8011d3c <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800a86a:	f104 0098 	add.w	r0, r4, #152	@ 0x98
 800a86e:	f007 fa65 	bl	8011d3c <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 800a872:	f000 ff89 	bl	800b788 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 800a876:	4b0b      	ldr	r3, [pc, #44]	@ (800a8a4 <LoRaMacHalt+0x54>)
 800a878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a87a:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 800a87c:	2500      	movs	r5, #0
 800a87e:	f844 5c28 	str.w	r5, [r4, #-40]

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 800a882:	4e09      	ldr	r6, [pc, #36]	@ (800a8a8 <LoRaMacHalt+0x58>)
 800a884:	4630      	mov	r0, r6
 800a886:	f7ff f927 	bl	8009ad8 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 800a88a:	f240 52cc 	movw	r2, #1484	@ 0x5cc
 800a88e:	4631      	mov	r1, r6
 800a890:	4806      	ldr	r0, [pc, #24]	@ (800a8ac <LoRaMacHalt+0x5c>)
 800a892:	f005 f826 	bl	800f8e2 <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 800a896:	2301      	movs	r3, #1
 800a898:	f844 3c28 	str.w	r3, [r4, #-40]

    return LORAMAC_STATUS_OK;
}
 800a89c:	4628      	mov	r0, r5
 800a89e:	bd70      	pop	{r4, r5, r6, pc}
 800a8a0:	20000a90 	.word	0x20000a90
 800a8a4:	08013170 	.word	0x08013170
 800a8a8:	20008000 	.word	0x20008000
 800a8ac:	200085cc 	.word	0x200085cc

0800a8b0 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800a8b0:	b530      	push	{r4, r5, lr}
 800a8b2:	b08b      	sub	sp, #44	@ 0x2c
 800a8b4:	4604      	mov	r4, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800a8b6:	4b31      	ldr	r3, [pc, #196]	@ (800a97c <LoRaMacQueryTxPossible+0xcc>)
 800a8b8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800a8ba:	9004      	str	r0, [sp, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800a8bc:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 800a8c0:	f88d 200f 	strb.w	r2, [sp, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800a8c4:	f993 30dc 	ldrsb.w	r3, [r3, #220]	@ 0xdc
 800a8c8:	f88d 300e 	strb.w	r3, [sp, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 800a8cc:	4b2c      	ldr	r3, [pc, #176]	@ (800a980 <LoRaMacQueryTxPossible+0xd0>)
 800a8ce:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800a8d2:	f88d 200d 	strb.w	r2, [sp, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	9302      	str	r3, [sp, #8]

    if( txInfo == NULL )
 800a8da:	2900      	cmp	r1, #0
 800a8dc:	d048      	beq.n	800a970 <LoRaMacQueryTxPossible+0xc0>
 800a8de:	460d      	mov	r5, r1

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 800a8e0:	f88d 3014 	strb.w	r3, [sp, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800a8e4:	4b25      	ldr	r3, [pc, #148]	@ (800a97c <LoRaMacQueryTxPossible+0xcc>)
 800a8e6:	f893 111a 	ldrb.w	r1, [r3, #282]	@ 0x11a
 800a8ea:	f88d 1015 	strb.w	r1, [sp, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800a8ee:	9006      	str	r0, [sp, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800a8f0:	f8b3 1088 	ldrh.w	r1, [r3, #136]	@ 0x88
 800a8f4:	f8ad 101c 	strh.w	r1, [sp, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800a8f8:	f8b3 108a 	ldrh.w	r1, [r3, #138]	@ 0x8a
 800a8fc:	f8ad 101e 	strh.w	r1, [sp, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a900:	f993 1039 	ldrsb.w	r1, [r3, #57]	@ 0x39
 800a904:	f88d 1020 	strb.w	r1, [sp, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800a908:	f993 1038 	ldrsb.w	r1, [r3, #56]	@ 0x38
 800a90c:	f88d 1021 	strb.w	r1, [sp, #33]	@ 0x21
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 800a910:	f88d 2022 	strb.w	r2, [sp, #34]	@ 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a914:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 800a918:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 800a91c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800a920:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 800a924:	ab04      	add	r3, sp, #16
 800a926:	9300      	str	r3, [sp, #0]
 800a928:	f10d 030d 	add.w	r3, sp, #13
 800a92c:	f10d 020e 	add.w	r2, sp, #14
 800a930:	f10d 010f 	add.w	r1, sp, #15
 800a934:	a805      	add	r0, sp, #20
 800a936:	f000 fe99 	bl	800b66c <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800a93a:	f99d 000f 	ldrsb.w	r0, [sp, #15]
 800a93e:	f7fd fce1 	bl	8008304 <GetMaxAppPayloadWithoutFOptsLength>
 800a942:	7068      	strb	r0, [r5, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800a944:	a802      	add	r0, sp, #8
 800a946:	f001 f853 	bl	800b9f0 <LoRaMacCommandsGetSizeSerializedCmds>
 800a94a:	b998      	cbnz	r0, 800a974 <LoRaMacQueryTxPossible+0xc4>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800a94c:	9b02      	ldr	r3, [sp, #8]
 800a94e:	2b0f      	cmp	r3, #15
 800a950:	d80a      	bhi.n	800a968 <LoRaMacQueryTxPossible+0xb8>
 800a952:	786a      	ldrb	r2, [r5, #1]
 800a954:	4293      	cmp	r3, r2
 800a956:	d807      	bhi.n	800a968 <LoRaMacQueryTxPossible+0xb8>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800a958:	1ad3      	subs	r3, r2, r3
 800a95a:	702b      	strb	r3, [r5, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800a95c:	9b02      	ldr	r3, [sp, #8]
 800a95e:	441c      	add	r4, r3
 800a960:	42a2      	cmp	r2, r4
 800a962:	d309      	bcc.n	800a978 <LoRaMacQueryTxPossible+0xc8>
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800a964:	b00b      	add	sp, #44	@ 0x2c
 800a966:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800a968:	2300      	movs	r3, #0
 800a96a:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800a96c:	2008      	movs	r0, #8
 800a96e:	e7f9      	b.n	800a964 <LoRaMacQueryTxPossible+0xb4>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a970:	2003      	movs	r0, #3
 800a972:	e7f7      	b.n	800a964 <LoRaMacQueryTxPossible+0xb4>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a974:	2013      	movs	r0, #19
 800a976:	e7f5      	b.n	800a964 <LoRaMacQueryTxPossible+0xb4>
           return LORAMAC_STATUS_LENGTH_ERROR;
 800a978:	2008      	movs	r0, #8
 800a97a:	e7f3      	b.n	800a964 <LoRaMacQueryTxPossible+0xb4>
 800a97c:	20008000 	.word	0x20008000
 800a980:	20000728 	.word	0x20000728

0800a984 <LoRaMacMibGetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800a984:	2800      	cmp	r0, #0
 800a986:	f000 815f 	beq.w	800ac48 <LoRaMacMibGetRequestConfirm+0x2c4>
{
 800a98a:	b510      	push	{r4, lr}
 800a98c:	b084      	sub	sp, #16
 800a98e:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 800a990:	7800      	ldrb	r0, [r0, #0]
 800a992:	2841      	cmp	r0, #65	@ 0x41
 800a994:	f200 8154 	bhi.w	800ac40 <LoRaMacMibGetRequestConfirm+0x2bc>
 800a998:	e8df f010 	tbh	[pc, r0, lsl #1]
 800a99c:	00470042 	.word	0x00470042
 800a9a0:	0052004d 	.word	0x0052004d
 800a9a4:	005d0057 	.word	0x005d0057
 800a9a8:	01520063 	.word	0x01520063
 800a9ac:	01520152 	.word	0x01520152
 800a9b0:	01520152 	.word	0x01520152
 800a9b4:	01520152 	.word	0x01520152
 800a9b8:	006b0152 	.word	0x006b0152
 800a9bc:	00770071 	.word	0x00770071
 800a9c0:	008c0084 	.word	0x008c0084
 800a9c4:	009c0094 	.word	0x009c0094
 800a9c8:	00a400b1 	.word	0x00a400b1
 800a9cc:	00c400be 	.word	0x00c400be
 800a9d0:	00ce00c9 	.word	0x00ce00c9
 800a9d4:	00d800d3 	.word	0x00d800d3
 800a9d8:	00ee00dd 	.word	0x00ee00dd
 800a9dc:	010000f4 	.word	0x010000f4
 800a9e0:	010600fa 	.word	0x010600fa
 800a9e4:	0111010b 	.word	0x0111010b
 800a9e8:	0117011f 	.word	0x0117011f
 800a9ec:	0152011b 	.word	0x0152011b
 800a9f0:	01520125 	.word	0x01520125
 800a9f4:	01520152 	.word	0x01520152
 800a9f8:	01520152 	.word	0x01520152
 800a9fc:	01520152 	.word	0x01520152
 800aa00:	01520152 	.word	0x01520152
 800aa04:	01520152 	.word	0x01520152
 800aa08:	01520152 	.word	0x01520152
 800aa0c:	01520152 	.word	0x01520152
 800aa10:	0134012e 	.word	0x0134012e
 800aa14:	0140013a 	.word	0x0140013a
 800aa18:	014c0146 	.word	0x014c0146
 800aa1c:	01580158 	.word	0x01580158
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800aa20:	4b8c      	ldr	r3, [pc, #560]	@ (800ac54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800aa22:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800aa26:	7123      	strb	r3, [r4, #4]
            break;
 800aa28:	e111      	b.n	800ac4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800aa2a:	4b8a      	ldr	r3, [pc, #552]	@ (800ac54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800aa2c:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800aa30:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa32:	2000      	movs	r0, #0
            break;
 800aa34:	e10b      	b.n	800ac4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 800aa36:	6860      	ldr	r0, [r4, #4]
 800aa38:	f004 fe18 	bl	800f66c <SecureElementGetDevEui>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa3c:	2000      	movs	r0, #0
            break;
 800aa3e:	e106      	b.n	800ac4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 800aa40:	6860      	ldr	r0, [r4, #4]
 800aa42:	f004 fe31 	bl	800f6a8 <SecureElementGetJoinEui>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa46:	2000      	movs	r0, #0
            break;
 800aa48:	e101      	b.n	800ac4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800aa4a:	4b82      	ldr	r3, [pc, #520]	@ (800ac54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800aa4c:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800aa50:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa52:	2000      	movs	r0, #0
            break;
 800aa54:	e0fb      	b.n	800ac4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800aa56:	4b7f      	ldr	r3, [pc, #508]	@ (800ac54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800aa58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aa5c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa5e:	2000      	movs	r0, #0
            break;
 800aa60:	e0f5      	b.n	800ac4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 800aa62:	1d21      	adds	r1, r4, #4
 800aa64:	4b7b      	ldr	r3, [pc, #492]	@ (800ac54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800aa66:	f893 0130 	ldrb.w	r0, [r3, #304]	@ 0x130
 800aa6a:	f004 fe39 	bl	800f6e0 <SecureElementGetDevAddr>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa6e:	2000      	movs	r0, #0
            break;
 800aa70:	e0ed      	b.n	800ac4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800aa72:	4b78      	ldr	r3, [pc, #480]	@ (800ac54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800aa74:	f893 3119 	ldrb.w	r3, [r3, #281]	@ 0x119
 800aa78:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa7a:	2000      	movs	r0, #0
            break;
 800aa7c:	e0e7      	b.n	800ac4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800aa7e:	4b75      	ldr	r3, [pc, #468]	@ (800ac54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800aa80:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800aa84:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa86:	2000      	movs	r0, #0
            break;
 800aa88:	e0e1      	b.n	800ac4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 800aa8a:	231c      	movs	r3, #28
 800aa8c:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800aa90:	a902      	add	r1, sp, #8
 800aa92:	4b70      	ldr	r3, [pc, #448]	@ (800ac54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800aa94:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800aa98:	f001 fe62 	bl	800c760 <RegionGetPhyParam>
 800aa9c:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelList = phyParam.Channels;
 800aa9e:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aaa0:	2000      	movs	r0, #0
            break;
 800aaa2:	e0d4      	b.n	800ac4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800aaa4:	3404      	adds	r4, #4
 800aaa6:	4b6c      	ldr	r3, [pc, #432]	@ (800ac58 <LoRaMacMibGetRequestConfirm+0x2d4>)
 800aaa8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800aaac:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aab0:	2000      	movs	r0, #0
            break;
 800aab2:	e0cc      	b.n	800ac4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800aab4:	3404      	adds	r4, #4
 800aab6:	4b69      	ldr	r3, [pc, #420]	@ (800ac5c <LoRaMacMibGetRequestConfirm+0x2d8>)
 800aab8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800aabc:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aac0:	2000      	movs	r0, #0
            break;
 800aac2:	e0c4      	b.n	800ac4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800aac4:	3404      	adds	r4, #4
 800aac6:	4b66      	ldr	r3, [pc, #408]	@ (800ac60 <LoRaMacMibGetRequestConfirm+0x2dc>)
 800aac8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800aacc:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aad0:	2000      	movs	r0, #0
            break;
 800aad2:	e0bc      	b.n	800ac4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800aad4:	3404      	adds	r4, #4
 800aad6:	4b63      	ldr	r3, [pc, #396]	@ (800ac64 <LoRaMacMibGetRequestConfirm+0x2e0>)
 800aad8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800aadc:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aae0:	2000      	movs	r0, #0
            break;
 800aae2:	e0b4      	b.n	800ac4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800aae4:	231a      	movs	r3, #26
 800aae6:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800aaea:	a902      	add	r1, sp, #8
 800aaec:	4b59      	ldr	r3, [pc, #356]	@ (800ac54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800aaee:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800aaf2:	f001 fe35 	bl	800c760 <RegionGetPhyParam>
 800aaf6:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800aaf8:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aafa:	2000      	movs	r0, #0
            break;
 800aafc:	e0a7      	b.n	800ac4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800aafe:	2319      	movs	r3, #25
 800ab00:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ab04:	a902      	add	r1, sp, #8
 800ab06:	4b53      	ldr	r3, [pc, #332]	@ (800ac54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800ab08:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800ab0c:	f001 fe28 	bl	800c760 <RegionGetPhyParam>
 800ab10:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800ab12:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab14:	2000      	movs	r0, #0
            break;
 800ab16:	e09a      	b.n	800ac4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800ab18:	4b4e      	ldr	r3, [pc, #312]	@ (800ac54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800ab1a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800ab1e:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab20:	2000      	movs	r0, #0
            break;
 800ab22:	e094      	b.n	800ac4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800ab24:	4b4b      	ldr	r3, [pc, #300]	@ (800ac54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800ab26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab28:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab2a:	2000      	movs	r0, #0
            break;
 800ab2c:	e08f      	b.n	800ac4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800ab2e:	4b49      	ldr	r3, [pc, #292]	@ (800ac54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800ab30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab32:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab34:	2000      	movs	r0, #0
            break;
 800ab36:	e08a      	b.n	800ac4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800ab38:	4b46      	ldr	r3, [pc, #280]	@ (800ac54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800ab3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ab3c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab3e:	2000      	movs	r0, #0
            break;
 800ab40:	e085      	b.n	800ac4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800ab42:	4b44      	ldr	r3, [pc, #272]	@ (800ac54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800ab44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab46:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab48:	2000      	movs	r0, #0
            break;
 800ab4a:	e080      	b.n	800ac4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800ab4c:	4b41      	ldr	r3, [pc, #260]	@ (800ac54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800ab4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab50:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab52:	2000      	movs	r0, #0
            break;
 800ab54:	e07b      	b.n	800ac4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 800ab56:	2302      	movs	r3, #2
 800ab58:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ab5c:	4b3d      	ldr	r3, [pc, #244]	@ (800ac54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800ab5e:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 800ab62:	f88d 200a 	strb.w	r2, [sp, #10]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ab66:	a902      	add	r1, sp, #8
 800ab68:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800ab6c:	f001 fdf8 	bl	800c760 <RegionGetPhyParam>
 800ab70:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 800ab72:	7120      	strb	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab74:	2000      	movs	r0, #0
            break;
 800ab76:	e06a      	b.n	800ac4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800ab78:	4b36      	ldr	r3, [pc, #216]	@ (800ac54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800ab7a:	f993 30dd 	ldrsb.w	r3, [r3, #221]	@ 0xdd
 800ab7e:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab80:	2000      	movs	r0, #0
            break;
 800ab82:	e064      	b.n	800ac4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800ab84:	4b33      	ldr	r3, [pc, #204]	@ (800ac54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800ab86:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800ab8a:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab8c:	2000      	movs	r0, #0
            break;
 800ab8e:	e05e      	b.n	800ac4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800ab90:	4b30      	ldr	r3, [pc, #192]	@ (800ac54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800ab92:	f993 30dc 	ldrsb.w	r3, [r3, #220]	@ 0xdc
 800ab96:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab98:	2000      	movs	r0, #0
            break;
 800ab9a:	e058      	b.n	800ac4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800ab9c:	4b2d      	ldr	r3, [pc, #180]	@ (800ac54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800ab9e:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800aba2:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aba4:	2000      	movs	r0, #0
            break;
 800aba6:	e052      	b.n	800ac4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800aba8:	4b2a      	ldr	r3, [pc, #168]	@ (800ac54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800abaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abac:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800abae:	2000      	movs	r0, #0
            break;
 800abb0:	e04d      	b.n	800ac4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800abb2:	4b28      	ldr	r3, [pc, #160]	@ (800ac54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800abb4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800abb8:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800abba:	2000      	movs	r0, #0
            break;
 800abbc:	e047      	b.n	800ac4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800abbe:	4b25      	ldr	r3, [pc, #148]	@ (800ac54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800abc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800abc4:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800abc6:	2000      	movs	r0, #0
            break;
 800abc8:	e041      	b.n	800ac4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 800abca:	4b22      	ldr	r3, [pc, #136]	@ (800ac54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800abcc:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800abce:	2000      	movs	r0, #0
            break;
 800abd0:	e03d      	b.n	800ac4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 800abd2:	4b25      	ldr	r3, [pc, #148]	@ (800ac68 <LoRaMacMibGetRequestConfirm+0x2e4>)
 800abd4:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800abd6:	2000      	movs	r0, #0
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 800abd8:	e039      	b.n	800ac4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800abda:	4b1e      	ldr	r3, [pc, #120]	@ (800ac54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800abdc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800abe0:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800abe2:	2000      	movs	r0, #0
            break;
 800abe4:	e033      	b.n	800ac4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800abe6:	4b1b      	ldr	r3, [pc, #108]	@ (800ac54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800abe8:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800abec:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800abee:	f001 fedb 	bl	800c9a8 <RegionGetVersion>
 800abf2:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800abf4:	2000      	movs	r0, #0
            break;
 800abf6:	e02a      	b.n	800ac4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800abf8:	4b16      	ldr	r3, [pc, #88]	@ (800ac54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800abfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abfe:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac00:	2000      	movs	r0, #0
            break;
 800ac02:	e024      	b.n	800ac4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 800ac04:	4b13      	ldr	r3, [pc, #76]	@ (800ac54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800ac06:	f893 311f 	ldrb.w	r3, [r3, #287]	@ 0x11f
 800ac0a:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac0c:	2000      	movs	r0, #0
            break;
 800ac0e:	e01e      	b.n	800ac4e <LoRaMacMibGetRequestConfirm+0x2ca>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800ac10:	4b10      	ldr	r3, [pc, #64]	@ (800ac54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800ac12:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 800ac16:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac18:	2000      	movs	r0, #0
            break;
 800ac1a:	e018      	b.n	800ac4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800ac1c:	4b0d      	ldr	r3, [pc, #52]	@ (800ac54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800ac1e:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 800ac22:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac24:	2000      	movs	r0, #0
            break;
 800ac26:	e012      	b.n	800ac4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800ac28:	4b0a      	ldr	r3, [pc, #40]	@ (800ac54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800ac2a:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	@ 0xd0
 800ac2e:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac30:	2000      	movs	r0, #0
            break;
 800ac32:	e00c      	b.n	800ac4e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800ac34:	4b07      	ldr	r3, [pc, #28]	@ (800ac54 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800ac36:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	@ 0xd2
 800ac3a:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac3c:	2000      	movs	r0, #0
            break;
 800ac3e:	e006      	b.n	800ac4e <LoRaMacMibGetRequestConfirm+0x2ca>
#endif
            break;
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800ac40:	4620      	mov	r0, r4
 800ac42:	f000 fda5 	bl	800b790 <LoRaMacClassBMibGetRequestConfirm>
            break;
 800ac46:	e002      	b.n	800ac4e <LoRaMacMibGetRequestConfirm+0x2ca>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ac48:	2003      	movs	r0, #3
        }
    }
    return status;
}
 800ac4a:	4770      	bx	lr
    switch( mibGet->Type )
 800ac4c:	2018      	movs	r0, #24
}
 800ac4e:	b004      	add	sp, #16
 800ac50:	bd10      	pop	{r4, pc}
 800ac52:	bf00      	nop
 800ac54:	20008000 	.word	0x20008000
 800ac58:	2000806c 	.word	0x2000806c
 800ac5c:	200080b4 	.word	0x200080b4
 800ac60:	20008074 	.word	0x20008074
 800ac64:	200080bc 	.word	0x200080bc
 800ac68:	200085cc 	.word	0x200085cc

0800ac6c <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 800ac6c:	b530      	push	{r4, r5, lr}
 800ac6e:	b085      	sub	sp, #20
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800ac70:	2800      	cmp	r0, #0
 800ac72:	f000 82c5 	beq.w	800b200 <LoRaMacMibSetRequestConfirm+0x594>
 800ac76:	4605      	mov	r5, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800ac78:	4ba0      	ldr	r3, [pc, #640]	@ (800aefc <LoRaMacMibSetRequestConfirm+0x290>)
 800ac7a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ac7e:	f013 0f02 	tst.w	r3, #2
 800ac82:	f040 82bf 	bne.w	800b204 <LoRaMacMibSetRequestConfirm+0x598>
    {
        return LORAMAC_STATUS_BUSY;
    }

    switch( mibSet->Type )
 800ac86:	7804      	ldrb	r4, [r0, #0]
 800ac88:	2c41      	cmp	r4, #65	@ 0x41
 800ac8a:	f200 8278 	bhi.w	800b17e <LoRaMacMibSetRequestConfirm+0x512>
 800ac8e:	e8df f014 	tbh	[pc, r4, lsl #1]
 800ac92:	0042      	.short	0x0042
 800ac94:	00500047 	.word	0x00500047
 800ac98:	00610059 	.word	0x00610059
 800ac9c:	006d0067 	.word	0x006d0067
 800aca0:	0089007c 	.word	0x0089007c
 800aca4:	00a30096 	.word	0x00a30096
 800aca8:	00bd00b0 	.word	0x00bd00b0
 800acac:	00d700ca 	.word	0x00d700ca
 800acb0:	00ef00e4 	.word	0x00ef00e4
 800acb4:	00f50276 	.word	0x00f50276
 800acb8:	013f011b 	.word	0x013f011b
 800acbc:	0197016d 	.word	0x0197016d
 800acc0:	01a70187 	.word	0x01a70187
 800acc4:	01b701b2 	.word	0x01b701b2
 800acc8:	01c101bc 	.word	0x01c101bc
 800accc:	027601c6 	.word	0x027601c6
 800acd0:	01e001cb 	.word	0x01e001cb
 800acd4:	01f9020e 	.word	0x01f9020e
 800acd8:	022a0223 	.word	0x022a0223
 800acdc:	02380232 	.word	0x02380232
 800ace0:	0276023e 	.word	0x0276023e
 800ace4:	02760242 	.word	0x02760242
 800ace8:	02760276 	.word	0x02760276
 800acec:	02760276 	.word	0x02760276
 800acf0:	02760276 	.word	0x02760276
 800acf4:	02760276 	.word	0x02760276
 800acf8:	02760276 	.word	0x02760276
 800acfc:	02760276 	.word	0x02760276
 800ad00:	02760276 	.word	0x02760276
 800ad04:	02520276 	.word	0x02520276
 800ad08:	025e0258 	.word	0x025e0258
 800ad0c:	026a0264 	.word	0x026a0264
 800ad10:	027a0270 	.word	0x027a0270
 800ad14:	027a      	.short	0x027a
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800ad16:	7900      	ldrb	r0, [r0, #4]
 800ad18:	f7ff f90a 	bl	8009f30 <SwitchClass>
 800ad1c:	4604      	mov	r4, r0
            break;
 800ad1e:	e233      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800ad20:	7903      	ldrb	r3, [r0, #4]
 800ad22:	2b02      	cmp	r3, #2
 800ad24:	f000 823a 	beq.w	800b19c <LoRaMacMibSetRequestConfirm+0x530>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800ad28:	4a75      	ldr	r2, [pc, #468]	@ (800af00 <LoRaMacMibSetRequestConfirm+0x294>)
 800ad2a:	f882 3130 	strb.w	r3, [r2, #304]	@ 0x130
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad2e:	2400      	movs	r4, #0
 800ad30:	e22a      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
            }
            break;
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800ad32:	6840      	ldr	r0, [r0, #4]
 800ad34:	f004 fc8c 	bl	800f650 <SecureElementSetDevEui>
 800ad38:	4604      	mov	r4, r0
 800ad3a:	2800      	cmp	r0, #0
 800ad3c:	f000 8224 	beq.w	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ad40:	2403      	movs	r4, #3
 800ad42:	e221      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
            }
            break;
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800ad44:	6840      	ldr	r0, [r0, #4]
 800ad46:	f004 fc9f 	bl	800f688 <SecureElementSetJoinEui>
 800ad4a:	2800      	cmp	r0, #0
 800ad4c:	f040 821c 	bne.w	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad50:	4604      	mov	r4, r0
 800ad52:	e219      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
            }
            break;
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800ad54:	7902      	ldrb	r2, [r0, #4]
 800ad56:	4b6a      	ldr	r3, [pc, #424]	@ (800af00 <LoRaMacMibSetRequestConfirm+0x294>)
 800ad58:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad5c:	2400      	movs	r4, #0
            break;
 800ad5e:	e213      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800ad60:	6842      	ldr	r2, [r0, #4]
 800ad62:	4b67      	ldr	r3, [pc, #412]	@ (800af00 <LoRaMacMibSetRequestConfirm+0x294>)
 800ad64:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad68:	2400      	movs	r4, #0
            break;
 800ad6a:	e20d      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 800ad6c:	6841      	ldr	r1, [r0, #4]
 800ad6e:	4b64      	ldr	r3, [pc, #400]	@ (800af00 <LoRaMacMibSetRequestConfirm+0x294>)
 800ad70:	f893 0130 	ldrb.w	r0, [r3, #304]	@ 0x130
 800ad74:	f004 fca6 	bl	800f6c4 <SecureElementSetDevAddr>
 800ad78:	4604      	mov	r4, r0
 800ad7a:	2800      	cmp	r0, #0
 800ad7c:	f040 8210 	bne.w	800b1a0 <LoRaMacMibSetRequestConfirm+0x534>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800ad80:	686a      	ldr	r2, [r5, #4]
 800ad82:	4b5f      	ldr	r3, [pc, #380]	@ (800af00 <LoRaMacMibSetRequestConfirm+0x294>)
 800ad84:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 800ad88:	e1fe      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
            }
            break;
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 800ad8a:	6841      	ldr	r1, [r0, #4]
 800ad8c:	2900      	cmp	r1, #0
 800ad8e:	f000 8209 	beq.w	800b1a4 <LoRaMacMibSetRequestConfirm+0x538>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800ad92:	2000      	movs	r0, #0
 800ad94:	f001 fac0 	bl	800c318 <LoRaMacCryptoSetKey>
 800ad98:	4604      	mov	r4, r0
 800ad9a:	2800      	cmp	r0, #0
 800ad9c:	f000 81f4 	beq.w	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ada0:	2411      	movs	r4, #17
 800ada2:	e230      	b.n	800b206 <LoRaMacMibSetRequestConfirm+0x59a>
            }
            break;
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 800ada4:	6841      	ldr	r1, [r0, #4]
 800ada6:	2900      	cmp	r1, #0
 800ada8:	f000 81fe 	beq.w	800b1a8 <LoRaMacMibSetRequestConfirm+0x53c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800adac:	2001      	movs	r0, #1
 800adae:	f001 fab3 	bl	800c318 <LoRaMacCryptoSetKey>
 800adb2:	4604      	mov	r4, r0
 800adb4:	2800      	cmp	r0, #0
 800adb6:	f000 81e7 	beq.w	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800adba:	2411      	movs	r4, #17
 800adbc:	e223      	b.n	800b206 <LoRaMacMibSetRequestConfirm+0x59a>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 800adbe:	6841      	ldr	r1, [r0, #4]
 800adc0:	2900      	cmp	r1, #0
 800adc2:	f000 81f3 	beq.w	800b1ac <LoRaMacMibSetRequestConfirm+0x540>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800adc6:	2008      	movs	r0, #8
 800adc8:	f001 faa6 	bl	800c318 <LoRaMacCryptoSetKey>
 800adcc:	4604      	mov	r4, r0
 800adce:	2800      	cmp	r0, #0
 800add0:	f000 81da 	beq.w	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800add4:	2411      	movs	r4, #17
 800add6:	e216      	b.n	800b206 <LoRaMacMibSetRequestConfirm+0x59a>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 800add8:	6841      	ldr	r1, [r0, #4]
 800adda:	2900      	cmp	r1, #0
 800addc:	f000 81e8 	beq.w	800b1b0 <LoRaMacMibSetRequestConfirm+0x544>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800ade0:	2009      	movs	r0, #9
 800ade2:	f001 fa99 	bl	800c318 <LoRaMacCryptoSetKey>
 800ade6:	4604      	mov	r4, r0
 800ade8:	2800      	cmp	r0, #0
 800adea:	f000 81cd 	beq.w	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800adee:	2411      	movs	r4, #17
 800adf0:	e209      	b.n	800b206 <LoRaMacMibSetRequestConfirm+0x59a>
            }
            break;
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 800adf2:	6841      	ldr	r1, [r0, #4]
 800adf4:	2900      	cmp	r1, #0
 800adf6:	f000 81dd 	beq.w	800b1b4 <LoRaMacMibSetRequestConfirm+0x548>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800adfa:	200c      	movs	r0, #12
 800adfc:	f001 fa8c 	bl	800c318 <LoRaMacCryptoSetKey>
 800ae00:	4604      	mov	r4, r0
 800ae02:	2800      	cmp	r0, #0
 800ae04:	f000 81c0 	beq.w	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ae08:	2411      	movs	r4, #17
 800ae0a:	e1fc      	b.n	800b206 <LoRaMacMibSetRequestConfirm+0x59a>
            break;
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 800ae0c:	6841      	ldr	r1, [r0, #4]
 800ae0e:	2900      	cmp	r1, #0
 800ae10:	f000 81d2 	beq.w	800b1b8 <LoRaMacMibSetRequestConfirm+0x54c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800ae14:	200d      	movs	r0, #13
 800ae16:	f001 fa7f 	bl	800c318 <LoRaMacCryptoSetKey>
 800ae1a:	4604      	mov	r4, r0
 800ae1c:	2800      	cmp	r0, #0
 800ae1e:	f000 81b3 	beq.w	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ae22:	2411      	movs	r4, #17
 800ae24:	e1ef      	b.n	800b206 <LoRaMacMibSetRequestConfirm+0x59a>
            }
            break;
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 800ae26:	6841      	ldr	r1, [r0, #4]
 800ae28:	2900      	cmp	r1, #0
 800ae2a:	f000 81c7 	beq.w	800b1bc <LoRaMacMibSetRequestConfirm+0x550>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800ae2e:	200e      	movs	r0, #14
 800ae30:	f001 fa72 	bl	800c318 <LoRaMacCryptoSetKey>
 800ae34:	4604      	mov	r4, r0
 800ae36:	2800      	cmp	r0, #0
 800ae38:	f000 81a6 	beq.w	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ae3c:	2411      	movs	r4, #17
 800ae3e:	e1e2      	b.n	800b206 <LoRaMacMibSetRequestConfirm+0x59a>
            }
            break;
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 800ae40:	6841      	ldr	r1, [r0, #4]
 800ae42:	2900      	cmp	r1, #0
 800ae44:	f000 81bc 	beq.w	800b1c0 <LoRaMacMibSetRequestConfirm+0x554>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800ae48:	200f      	movs	r0, #15
 800ae4a:	f001 fa65 	bl	800c318 <LoRaMacCryptoSetKey>
 800ae4e:	4604      	mov	r4, r0
 800ae50:	2800      	cmp	r0, #0
 800ae52:	f000 8199 	beq.w	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ae56:	2411      	movs	r4, #17
 800ae58:	e1d5      	b.n	800b206 <LoRaMacMibSetRequestConfirm+0x59a>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800ae5a:	7900      	ldrb	r0, [r0, #4]
 800ae5c:	4b28      	ldr	r3, [pc, #160]	@ (800af00 <LoRaMacMibSetRequestConfirm+0x294>)
 800ae5e:	f883 0119 	strb.w	r0, [r3, #281]	@ 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800ae62:	4c28      	ldr	r4, [pc, #160]	@ (800af04 <LoRaMacMibSetRequestConfirm+0x298>)
 800ae64:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ae66:	4798      	blx	r3
            Radio.Sleep( );
 800ae68:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ae6a:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ae6c:	2400      	movs	r4, #0
            break;
 800ae6e:	e18b      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800ae70:	7902      	ldrb	r2, [r0, #4]
 800ae72:	4b23      	ldr	r3, [pc, #140]	@ (800af00 <LoRaMacMibSetRequestConfirm+0x294>)
 800ae74:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ae78:	2400      	movs	r4, #0
            break;
 800ae7a:	e185      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800ae7c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800ae80:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ae84:	4b1e      	ldr	r3, [pc, #120]	@ (800af00 <LoRaMacMibSetRequestConfirm+0x294>)
 800ae86:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800ae8a:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800ae8e:	2207      	movs	r2, #7
 800ae90:	a901      	add	r1, sp, #4
 800ae92:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800ae96:	f001 fc95 	bl	800c7c4 <RegionVerify>
 800ae9a:	b908      	cbnz	r0, 800aea0 <LoRaMacMibSetRequestConfirm+0x234>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ae9c:	2403      	movs	r4, #3
 800ae9e:	e173      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
            }
            else
            {
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800aea0:	686b      	ldr	r3, [r5, #4]
 800aea2:	9301      	str	r3, [sp, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800aea4:	2200      	movs	r2, #0
 800aea6:	a901      	add	r1, sp, #4
 800aea8:	4b15      	ldr	r3, [pc, #84]	@ (800af00 <LoRaMacMibSetRequestConfirm+0x294>)
 800aeaa:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800aeae:	f001 fc89 	bl	800c7c4 <RegionVerify>
 800aeb2:	2800      	cmp	r0, #0
 800aeb4:	f000 8186 	beq.w	800b1c4 <LoRaMacMibSetRequestConfirm+0x558>
                {
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
                }
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800aeb8:	4b13      	ldr	r3, [pc, #76]	@ (800af08 <LoRaMacMibSetRequestConfirm+0x29c>)
 800aeba:	3504      	adds	r5, #4
 800aebc:	e895 0003 	ldmia.w	r5, {r0, r1}
 800aec0:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aec4:	2400      	movs	r4, #0
 800aec6:	e15f      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
            }
            break;
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800aec8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800aecc:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800aed0:	4b0b      	ldr	r3, [pc, #44]	@ (800af00 <LoRaMacMibSetRequestConfirm+0x294>)
 800aed2:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800aed6:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800aeda:	2207      	movs	r2, #7
 800aedc:	a901      	add	r1, sp, #4
 800aede:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800aee2:	f001 fc6f 	bl	800c7c4 <RegionVerify>
 800aee6:	2800      	cmp	r0, #0
 800aee8:	f000 816e 	beq.w	800b1c8 <LoRaMacMibSetRequestConfirm+0x55c>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800aeec:	4b07      	ldr	r3, [pc, #28]	@ (800af0c <LoRaMacMibSetRequestConfirm+0x2a0>)
 800aeee:	3504      	adds	r5, #4
 800aef0:	e895 0003 	ldmia.w	r5, {r0, r1}
 800aef4:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aef8:	2400      	movs	r4, #0
 800aefa:	e145      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
 800aefc:	20000728 	.word	0x20000728
 800af00:	20008000 	.word	0x20008000
 800af04:	08013170 	.word	0x08013170
 800af08:	2000806c 	.word	0x2000806c
 800af0c:	200080b4 	.word	0x200080b4
            }
            break;
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800af10:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800af14:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800af18:	4bb5      	ldr	r3, [pc, #724]	@ (800b1f0 <LoRaMacMibSetRequestConfirm+0x584>)
 800af1a:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800af1e:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800af22:	2207      	movs	r2, #7
 800af24:	a901      	add	r1, sp, #4
 800af26:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800af2a:	f001 fc4b 	bl	800c7c4 <RegionVerify>
 800af2e:	2800      	cmp	r0, #0
 800af30:	f000 814c 	beq.w	800b1cc <LoRaMacMibSetRequestConfirm+0x560>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800af34:	4bae      	ldr	r3, [pc, #696]	@ (800b1f0 <LoRaMacMibSetRequestConfirm+0x584>)
 800af36:	f103 0274 	add.w	r2, r3, #116	@ 0x74
 800af3a:	3504      	adds	r5, #4
 800af3c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800af40:	e882 0003 	stmia.w	r2, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800af44:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800af48:	2b02      	cmp	r3, #2
 800af4a:	d001      	beq.n	800af50 <LoRaMacMibSetRequestConfirm+0x2e4>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800af4c:	2400      	movs	r4, #0
 800af4e:	e11b      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800af50:	f1a2 0374 	sub.w	r3, r2, #116	@ 0x74
 800af54:	f893 4130 	ldrb.w	r4, [r3, #304]	@ 0x130
 800af58:	2c00      	cmp	r4, #0
 800af5a:	f000 8115 	beq.w	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 800af5e:	4ba5      	ldr	r3, [pc, #660]	@ (800b1f4 <LoRaMacMibSetRequestConfirm+0x588>)
 800af60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af62:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 800af64:	f7fe fd0a 	bl	800997c <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800af68:	2400      	movs	r4, #0
 800af6a:	e10d      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
            }
            break;
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800af6c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800af70:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800af74:	4b9e      	ldr	r3, [pc, #632]	@ (800b1f0 <LoRaMacMibSetRequestConfirm+0x584>)
 800af76:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800af7a:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800af7e:	2207      	movs	r2, #7
 800af80:	a901      	add	r1, sp, #4
 800af82:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800af86:	f001 fc1d 	bl	800c7c4 <RegionVerify>
 800af8a:	2800      	cmp	r0, #0
 800af8c:	f000 8120 	beq.w	800b1d0 <LoRaMacMibSetRequestConfirm+0x564>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800af90:	4b99      	ldr	r3, [pc, #612]	@ (800b1f8 <LoRaMacMibSetRequestConfirm+0x58c>)
 800af92:	3504      	adds	r5, #4
 800af94:	e895 0003 	ldmia.w	r5, {r0, r1}
 800af98:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800af9c:	2400      	movs	r4, #0
 800af9e:	e0f3      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
            }
            break;
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800afa0:	6843      	ldr	r3, [r0, #4]
 800afa2:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800afa4:	2301      	movs	r3, #1
 800afa6:	f88d 300c 	strb.w	r3, [sp, #12]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800afaa:	a902      	add	r1, sp, #8
 800afac:	4b90      	ldr	r3, [pc, #576]	@ (800b1f0 <LoRaMacMibSetRequestConfirm+0x584>)
 800afae:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800afb2:	f001 fc24 	bl	800c7fe <RegionChanMaskSet>
 800afb6:	2800      	cmp	r0, #0
 800afb8:	f000 810c 	beq.w	800b1d4 <LoRaMacMibSetRequestConfirm+0x568>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800afbc:	2400      	movs	r4, #0
 800afbe:	e0e3      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
            }
            break;
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800afc0:	6843      	ldr	r3, [r0, #4]
 800afc2:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800afc4:	2300      	movs	r3, #0
 800afc6:	f88d 300c 	strb.w	r3, [sp, #12]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800afca:	a902      	add	r1, sp, #8
 800afcc:	4b88      	ldr	r3, [pc, #544]	@ (800b1f0 <LoRaMacMibSetRequestConfirm+0x584>)
 800afce:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800afd2:	f001 fc14 	bl	800c7fe <RegionChanMaskSet>
 800afd6:	2800      	cmp	r0, #0
 800afd8:	f000 80fe 	beq.w	800b1d8 <LoRaMacMibSetRequestConfirm+0x56c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800afdc:	2400      	movs	r4, #0
 800afde:	e0d3      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
            }
            break;
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800afe0:	7902      	ldrb	r2, [r0, #4]
 800afe2:	1e53      	subs	r3, r2, #1
 800afe4:	b2db      	uxtb	r3, r3
 800afe6:	2b0e      	cmp	r3, #14
 800afe8:	f200 80f8 	bhi.w	800b1dc <LoRaMacMibSetRequestConfirm+0x570>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800afec:	4b80      	ldr	r3, [pc, #512]	@ (800b1f0 <LoRaMacMibSetRequestConfirm+0x584>)
 800afee:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aff2:	2400      	movs	r4, #0
 800aff4:	e0c8      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
            }
            break;
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800aff6:	6842      	ldr	r2, [r0, #4]
 800aff8:	4b7d      	ldr	r3, [pc, #500]	@ (800b1f0 <LoRaMacMibSetRequestConfirm+0x584>)
 800affa:	655a      	str	r2, [r3, #84]	@ 0x54
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800affc:	2400      	movs	r4, #0
            break;
 800affe:	e0c3      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800b000:	6842      	ldr	r2, [r0, #4]
 800b002:	4b7b      	ldr	r3, [pc, #492]	@ (800b1f0 <LoRaMacMibSetRequestConfirm+0x584>)
 800b004:	659a      	str	r2, [r3, #88]	@ 0x58
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b006:	2400      	movs	r4, #0
            break;
 800b008:	e0be      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800b00a:	6842      	ldr	r2, [r0, #4]
 800b00c:	4b78      	ldr	r3, [pc, #480]	@ (800b1f0 <LoRaMacMibSetRequestConfirm+0x584>)
 800b00e:	65da      	str	r2, [r3, #92]	@ 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b010:	2400      	movs	r4, #0
            break;
 800b012:	e0b9      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800b014:	6842      	ldr	r2, [r0, #4]
 800b016:	4b76      	ldr	r3, [pc, #472]	@ (800b1f0 <LoRaMacMibSetRequestConfirm+0x584>)
 800b018:	661a      	str	r2, [r3, #96]	@ 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b01a:	2400      	movs	r4, #0
            break;
 800b01c:	e0b4      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800b01e:	6842      	ldr	r2, [r0, #4]
 800b020:	4b73      	ldr	r3, [pc, #460]	@ (800b1f0 <LoRaMacMibSetRequestConfirm+0x584>)
 800b022:	665a      	str	r2, [r3, #100]	@ 0x64
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b024:	2400      	movs	r4, #0
            break;
 800b026:	e0af      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800b028:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800b02c:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800b030:	2206      	movs	r2, #6
 800b032:	a901      	add	r1, sp, #4
 800b034:	4b6e      	ldr	r3, [pc, #440]	@ (800b1f0 <LoRaMacMibSetRequestConfirm+0x584>)
 800b036:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800b03a:	f001 fbc3 	bl	800c7c4 <RegionVerify>
 800b03e:	2800      	cmp	r0, #0
 800b040:	f000 80ce 	beq.w	800b1e0 <LoRaMacMibSetRequestConfirm+0x574>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800b044:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800b048:	4b69      	ldr	r3, [pc, #420]	@ (800b1f0 <LoRaMacMibSetRequestConfirm+0x584>)
 800b04a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b04e:	2400      	movs	r4, #0
 800b050:	e09a      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
            }
            break;
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800b052:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800b056:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b05a:	4b65      	ldr	r3, [pc, #404]	@ (800b1f0 <LoRaMacMibSetRequestConfirm+0x584>)
 800b05c:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 800b060:	f88d 2006 	strb.w	r2, [sp, #6]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800b064:	2205      	movs	r2, #5
 800b066:	a901      	add	r1, sp, #4
 800b068:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800b06c:	f001 fbaa 	bl	800c7c4 <RegionVerify>
 800b070:	2800      	cmp	r0, #0
 800b072:	f000 80b7 	beq.w	800b1e4 <LoRaMacMibSetRequestConfirm+0x578>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800b076:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800b07a:	4b5d      	ldr	r3, [pc, #372]	@ (800b1f0 <LoRaMacMibSetRequestConfirm+0x584>)
 800b07c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b080:	2400      	movs	r4, #0
 800b082:	e081      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
            }
            break;
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800b084:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800b088:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800b08c:	220a      	movs	r2, #10
 800b08e:	a901      	add	r1, sp, #4
 800b090:	4b57      	ldr	r3, [pc, #348]	@ (800b1f0 <LoRaMacMibSetRequestConfirm+0x584>)
 800b092:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800b096:	f001 fb95 	bl	800c7c4 <RegionVerify>
 800b09a:	2800      	cmp	r0, #0
 800b09c:	f000 80a4 	beq.w	800b1e8 <LoRaMacMibSetRequestConfirm+0x57c>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800b0a0:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800b0a4:	4b52      	ldr	r3, [pc, #328]	@ (800b1f0 <LoRaMacMibSetRequestConfirm+0x584>)
 800b0a6:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b0aa:	2400      	movs	r4, #0
 800b0ac:	e06c      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
            }
            break;
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800b0ae:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800b0b2:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800b0b6:	2209      	movs	r2, #9
 800b0b8:	a901      	add	r1, sp, #4
 800b0ba:	4b4d      	ldr	r3, [pc, #308]	@ (800b1f0 <LoRaMacMibSetRequestConfirm+0x584>)
 800b0bc:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800b0c0:	f001 fb80 	bl	800c7c4 <RegionVerify>
 800b0c4:	2800      	cmp	r0, #0
 800b0c6:	f000 8091 	beq.w	800b1ec <LoRaMacMibSetRequestConfirm+0x580>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800b0ca:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800b0ce:	4b48      	ldr	r3, [pc, #288]	@ (800b1f0 <LoRaMacMibSetRequestConfirm+0x584>)
 800b0d0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b0d4:	2400      	movs	r4, #0
 800b0d6:	e057      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
            }
            break;
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800b0d8:	6842      	ldr	r2, [r0, #4]
 800b0da:	4b45      	ldr	r3, [pc, #276]	@ (800b1f0 <LoRaMacMibSetRequestConfirm+0x584>)
 800b0dc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800b0e0:	64da      	str	r2, [r3, #76]	@ 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b0e2:	2400      	movs	r4, #0
            break;
 800b0e4:	e050      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800b0e6:	7902      	ldrb	r2, [r0, #4]
 800b0e8:	4b41      	ldr	r3, [pc, #260]	@ (800b1f0 <LoRaMacMibSetRequestConfirm+0x584>)
 800b0ea:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
 800b0ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b0f2:	2400      	movs	r4, #0
            break;
 800b0f4:	e048      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800b0f6:	6842      	ldr	r2, [r0, #4]
 800b0f8:	4b3d      	ldr	r3, [pc, #244]	@ (800b1f0 <LoRaMacMibSetRequestConfirm+0x584>)
 800b0fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b0fe:	2400      	movs	r4, #0
            break;
 800b100:	e042      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800b102:	6842      	ldr	r2, [r0, #4]
 800b104:	4b3a      	ldr	r3, [pc, #232]	@ (800b1f0 <LoRaMacMibSetRequestConfirm+0x584>)
 800b106:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b10a:	2400      	movs	r4, #0
            break;
 800b10c:	e03c      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 800b10e:	f7fe fd49 	bl	8009ba4 <RestoreNvmData>
 800b112:	4604      	mov	r4, r0
            break;
 800b114:	e038      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800b116:	7983      	ldrb	r3, [r0, #6]
 800b118:	2b01      	cmp	r3, #1
 800b11a:	d901      	bls.n	800b120 <LoRaMacMibSetRequestConfirm+0x4b4>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b11c:	2403      	movs	r4, #3
 800b11e:	e033      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800b120:	6842      	ldr	r2, [r0, #4]
 800b122:	4b33      	ldr	r3, [pc, #204]	@ (800b1f0 <LoRaMacMibSetRequestConfirm+0x584>)
 800b124:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800b128:	6840      	ldr	r0, [r0, #4]
 800b12a:	f000 ffb1 	bl	800c090 <LoRaMacCryptoSetLrWanVersion>
 800b12e:	4604      	mov	r4, r0
 800b130:	b350      	cbz	r0, 800b188 <LoRaMacMibSetRequestConfirm+0x51c>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b132:	2411      	movs	r4, #17
 800b134:	e067      	b.n	800b206 <LoRaMacMibSetRequestConfirm+0x59a>
            }
            break;
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 800b136:	6842      	ldr	r2, [r0, #4]
 800b138:	4b2d      	ldr	r3, [pc, #180]	@ (800b1f0 <LoRaMacMibSetRequestConfirm+0x584>)
 800b13a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b13e:	2400      	movs	r4, #0
            break;
 800b140:	e022      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 800b142:	7902      	ldrb	r2, [r0, #4]
 800b144:	4b2a      	ldr	r3, [pc, #168]	@ (800b1f0 <LoRaMacMibSetRequestConfirm+0x584>)
 800b146:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b14a:	2400      	movs	r4, #0
            break;
 800b14c:	e01c      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800b14e:	8882      	ldrh	r2, [r0, #4]
 800b150:	4b27      	ldr	r3, [pc, #156]	@ (800b1f0 <LoRaMacMibSetRequestConfirm+0x584>)
 800b152:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b156:	2400      	movs	r4, #0
            break;
 800b158:	e016      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800b15a:	8882      	ldrh	r2, [r0, #4]
 800b15c:	4b24      	ldr	r3, [pc, #144]	@ (800b1f0 <LoRaMacMibSetRequestConfirm+0x584>)
 800b15e:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b162:	2400      	movs	r4, #0
            break;
 800b164:	e010      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800b166:	8882      	ldrh	r2, [r0, #4]
 800b168:	4b21      	ldr	r3, [pc, #132]	@ (800b1f0 <LoRaMacMibSetRequestConfirm+0x584>)
 800b16a:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b16e:	2400      	movs	r4, #0
            break;
 800b170:	e00a      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800b172:	8882      	ldrh	r2, [r0, #4]
 800b174:	4b1e      	ldr	r3, [pc, #120]	@ (800b1f0 <LoRaMacMibSetRequestConfirm+0x584>)
 800b176:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b17a:	2400      	movs	r4, #0
            break;
 800b17c:	e004      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
#endif
            break;
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800b17e:	f000 fb09 	bl	800b794 <LoRaMacMibClassBSetRequestConfirm>
 800b182:	4604      	mov	r4, r0
            break;
 800b184:	e000      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
    switch( mibSet->Type )
 800b186:	2418      	movs	r4, #24
        }
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( status == LORAMAC_STATUS_OK )
 800b188:	2c00      	cmp	r4, #0
 800b18a:	d13c      	bne.n	800b206 <LoRaMacMibSetRequestConfirm+0x59a>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800b18c:	4a1b      	ldr	r2, [pc, #108]	@ (800b1fc <LoRaMacMibSetRequestConfirm+0x590>)
 800b18e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b192:	f043 0320 	orr.w	r3, r3, #32
 800b196:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 800b19a:	e034      	b.n	800b206 <LoRaMacMibSetRequestConfirm+0x59a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b19c:	2403      	movs	r4, #3
 800b19e:	e7f3      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b1a0:	2403      	movs	r4, #3
 800b1a2:	e7f1      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b1a4:	2403      	movs	r4, #3
 800b1a6:	e7ef      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b1a8:	2403      	movs	r4, #3
 800b1aa:	e7ed      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b1ac:	2403      	movs	r4, #3
 800b1ae:	e7eb      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b1b0:	2403      	movs	r4, #3
 800b1b2:	e7e9      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b1b4:	2403      	movs	r4, #3
 800b1b6:	e7e7      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b1b8:	2403      	movs	r4, #3
 800b1ba:	e7e5      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b1bc:	2403      	movs	r4, #3
 800b1be:	e7e3      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b1c0:	2403      	movs	r4, #3
 800b1c2:	e7e1      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b1c4:	2403      	movs	r4, #3
 800b1c6:	e7df      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b1c8:	2403      	movs	r4, #3
 800b1ca:	e7dd      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b1cc:	2403      	movs	r4, #3
 800b1ce:	e7db      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b1d0:	2403      	movs	r4, #3
 800b1d2:	e7d9      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b1d4:	2403      	movs	r4, #3
 800b1d6:	e7d7      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b1d8:	2403      	movs	r4, #3
 800b1da:	e7d5      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b1dc:	2403      	movs	r4, #3
 800b1de:	e7d3      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b1e0:	2403      	movs	r4, #3
 800b1e2:	e7d1      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b1e4:	2403      	movs	r4, #3
 800b1e6:	e7cf      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b1e8:	2403      	movs	r4, #3
 800b1ea:	e7cd      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b1ec:	2403      	movs	r4, #3
 800b1ee:	e7cb      	b.n	800b188 <LoRaMacMibSetRequestConfirm+0x51c>
 800b1f0:	20008000 	.word	0x20008000
 800b1f4:	08013170 	.word	0x08013170
 800b1f8:	200080bc 	.word	0x200080bc
 800b1fc:	20000728 	.word	0x20000728
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b200:	2403      	movs	r4, #3
 800b202:	e000      	b.n	800b206 <LoRaMacMibSetRequestConfirm+0x59a>
        return LORAMAC_STATUS_BUSY;
 800b204:	2401      	movs	r4, #1
    }
#endif /* LORAMAC_VERSION */
    return status;
}
 800b206:	4620      	mov	r0, r4
 800b208:	b005      	add	sp, #20
 800b20a:	bd30      	pop	{r4, r5, pc}

0800b20c <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800b20c:	b570      	push	{r4, r5, r6, lr}
 800b20e:	b086      	sub	sp, #24
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800b210:	2300      	movs	r3, #0
 800b212:	f8ad 3010 	strh.w	r3, [sp, #16]

    if( mlmeRequest == NULL )
 800b216:	2800      	cmp	r0, #0
 800b218:	f000 80f3 	beq.w	800b402 <LoRaMacMlmeRequest+0x1f6>
 800b21c:	4605      	mov	r5, r0
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 800b21e:	6103      	str	r3, [r0, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 800b220:	f7ff f896 	bl	800a350 <LoRaMacIsBusy>
 800b224:	b118      	cbz	r0, 800b22e <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 800b226:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 800b228:	4620      	mov	r0, r4
 800b22a:	b006      	add	sp, #24
 800b22c:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800b22e:	f000 fd63 	bl	800bcf8 <LoRaMacConfirmQueueIsFull>
 800b232:	b108      	cbz	r0, 800b238 <LoRaMacMlmeRequest+0x2c>
        return LORAMAC_STATUS_BUSY;
 800b234:	2401      	movs	r4, #1
 800b236:	e7f7      	b.n	800b228 <LoRaMacMlmeRequest+0x1c>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800b238:	f000 fd58 	bl	800bcec <LoRaMacConfirmQueueGetCnt>
 800b23c:	b308      	cbz	r0, 800b282 <LoRaMacMlmeRequest+0x76>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b23e:	4b72      	ldr	r3, [pc, #456]	@ (800b408 <LoRaMacMlmeRequest+0x1fc>)
 800b240:	2101      	movs	r1, #1
 800b242:	f883 1455 	strb.w	r1, [r3, #1109]	@ 0x455
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800b246:	f893 2491 	ldrb.w	r2, [r3, #1169]	@ 0x491
 800b24a:	f042 0204 	orr.w	r2, r2, #4
 800b24e:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
    queueElement.Request = mlmeRequest->Type;
 800b252:	782b      	ldrb	r3, [r5, #0]
 800b254:	f88d 3014 	strb.w	r3, [sp, #20]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b258:	f88d 1015 	strb.w	r1, [sp, #21]
    queueElement.RestrictCommonReadyToHandle = false;
 800b25c:	2200      	movs	r2, #0
 800b25e:	f88d 2017 	strb.w	r2, [sp, #23]
    queueElement.ReadyToHandle = false;
 800b262:	f88d 2016 	strb.w	r2, [sp, #22]
    switch( mlmeRequest->Type )
 800b266:	461c      	mov	r4, r3
 800b268:	3b01      	subs	r3, #1
 800b26a:	2b0c      	cmp	r3, #12
 800b26c:	f200 80af 	bhi.w	800b3ce <LoRaMacMlmeRequest+0x1c2>
 800b270:	e8df f003 	tbb	[pc, r3]
 800b274:	adadad0d 	.word	0xadadad0d
 800b278:	adad675d 	.word	0xadad675d
 800b27c:	7f9ead70 	.word	0x7f9ead70
 800b280:	95          	.byte	0x95
 800b281:	00          	.byte	0x00
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800b282:	2214      	movs	r2, #20
 800b284:	2100      	movs	r1, #0
 800b286:	4861      	ldr	r0, [pc, #388]	@ (800b40c <LoRaMacMlmeRequest+0x200>)
 800b288:	f004 fb43 	bl	800f912 <memset1>
 800b28c:	e7d7      	b.n	800b23e <LoRaMacMlmeRequest+0x32>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800b28e:	4b5e      	ldr	r3, [pc, #376]	@ (800b408 <LoRaMacMlmeRequest+0x1fc>)
 800b290:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800b294:	f013 0f20 	tst.w	r3, #32
 800b298:	d1c6      	bne.n	800b228 <LoRaMacMlmeRequest+0x1c>
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 800b29a:	792b      	ldrb	r3, [r5, #4]
 800b29c:	2b02      	cmp	r3, #2
 800b29e:	d003      	beq.n	800b2a8 <LoRaMacMlmeRequest+0x9c>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 800b2a0:	2b01      	cmp	r3, #1
 800b2a2:	d026      	beq.n	800b2f2 <LoRaMacMlmeRequest+0xe6>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b2a4:	2402      	movs	r4, #2
 800b2a6:	e093      	b.n	800b3d0 <LoRaMacMlmeRequest+0x1c4>
                ResetMacParameters( false );
 800b2a8:	2000      	movs	r0, #0
 800b2aa:	f7fe fd77 	bl	8009d9c <ResetMacParameters>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800b2ae:	4c58      	ldr	r4, [pc, #352]	@ (800b410 <LoRaMacMlmeRequest+0x204>)
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800b2b6:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800b2ba:	f001 fb3d 	bl	800c938 <RegionAlternateDr>
 800b2be:	f884 0039 	strb.w	r0, [r4, #57]	@ 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 800b2c2:	f995 3006 	ldrsb.w	r3, [r5, #6]
 800b2c6:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800b2ca:	2307      	movs	r3, #7
 800b2cc:	f88d 3015 	strb.w	r3, [sp, #21]
                status = SendReJoinReq( JOIN_REQ );
 800b2d0:	20ff      	movs	r0, #255	@ 0xff
 800b2d2:	f7fe fec1 	bl	800a058 <SendReJoinReq>
                if( status != LORAMAC_STATUS_OK )
 800b2d6:	4604      	mov	r4, r0
 800b2d8:	2800      	cmp	r0, #0
 800b2da:	d079      	beq.n	800b3d0 <LoRaMacMlmeRequest+0x1c4>
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800b2dc:	4e4c      	ldr	r6, [pc, #304]	@ (800b410 <LoRaMacMlmeRequest+0x204>)
 800b2de:	2201      	movs	r2, #1
 800b2e0:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800b2e4:	f896 0048 	ldrb.w	r0, [r6, #72]	@ 0x48
 800b2e8:	f001 fb26 	bl	800c938 <RegionAlternateDr>
 800b2ec:	f886 0039 	strb.w	r0, [r6, #57]	@ 0x39
 800b2f0:	e06e      	b.n	800b3d0 <LoRaMacMlmeRequest+0x1c4>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800b2f2:	4e47      	ldr	r6, [pc, #284]	@ (800b410 <LoRaMacMlmeRequest+0x204>)
 800b2f4:	2400      	movs	r4, #0
 800b2f6:	f886 411d 	strb.w	r4, [r6, #285]	@ 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800b2fa:	2302      	movs	r3, #2
 800b2fc:	f88d 300c 	strb.w	r3, [sp, #12]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800b300:	4669      	mov	r1, sp
 800b302:	f896 0048 	ldrb.w	r0, [r6, #72]	@ 0x48
 800b306:	f001 fa50 	bl	800c7aa <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 800b30a:	792b      	ldrb	r3, [r5, #4]
 800b30c:	f886 3130 	strb.w	r3, [r6, #304]	@ 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800b310:	f88d 4015 	strb.w	r4, [sp, #21]
                queueElement.ReadyToHandle = true;
 800b314:	2301      	movs	r3, #1
 800b316:	f88d 3016 	strb.w	r3, [sp, #22]
                OnMacProcessNotify( );
 800b31a:	f7fc ffc3 	bl	80082a4 <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800b31e:	4a3a      	ldr	r2, [pc, #232]	@ (800b408 <LoRaMacMlmeRequest+0x1fc>)
 800b320:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b324:	f043 0310 	orr.w	r3, r3, #16
 800b328:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
                status = LORAMAC_STATUS_OK;
 800b32c:	e050      	b.n	800b3d0 <LoRaMacMlmeRequest+0x1c4>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800b32e:	2200      	movs	r2, #0
 800b330:	a904      	add	r1, sp, #16
 800b332:	2002      	movs	r0, #2
 800b334:	f000 face 	bl	800b8d4 <LoRaMacCommandsAddCmd>
 800b338:	4604      	mov	r4, r0
 800b33a:	2800      	cmp	r0, #0
 800b33c:	d048      	beq.n	800b3d0 <LoRaMacMlmeRequest+0x1c4>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b33e:	2413      	movs	r4, #19
 800b340:	e046      	b.n	800b3d0 <LoRaMacMlmeRequest+0x1c4>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800b342:	f995 200c 	ldrsb.w	r2, [r5, #12]
 800b346:	b2d2      	uxtb	r2, r2
 800b348:	68a9      	ldr	r1, [r5, #8]
 800b34a:	88a8      	ldrh	r0, [r5, #4]
 800b34c:	f7fc ff00 	bl	8008150 <SetTxContinuousWave>
 800b350:	4604      	mov	r4, r0
            break;
 800b352:	e03d      	b.n	800b3d0 <LoRaMacMlmeRequest+0x1c4>
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 800b354:	4669      	mov	r1, sp
 800b356:	200d      	movs	r0, #13
 800b358:	f000 fb08 	bl	800b96c <LoRaMacCommandsGetCmd>
 800b35c:	4604      	mov	r4, r0
 800b35e:	b3b8      	cbz	r0, 800b3d0 <LoRaMacMlmeRequest+0x1c4>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800b360:	2200      	movs	r2, #0
 800b362:	a904      	add	r1, sp, #16
 800b364:	200d      	movs	r0, #13
 800b366:	f000 fab5 	bl	800b8d4 <LoRaMacCommandsAddCmd>
 800b36a:	4604      	mov	r4, r0
 800b36c:	b380      	cbz	r0, 800b3d0 <LoRaMacMlmeRequest+0x1c4>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b36e:	2413      	movs	r4, #19
            break;
 800b370:	e02e      	b.n	800b3d0 <LoRaMacMlmeRequest+0x1c4>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800b372:	4b27      	ldr	r3, [pc, #156]	@ (800b410 <LoRaMacMlmeRequest+0x204>)
 800b374:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800b378:	b10b      	cbz	r3, 800b37e <LoRaMacMlmeRequest+0x172>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b37a:	2402      	movs	r4, #2
 800b37c:	e028      	b.n	800b3d0 <LoRaMacMlmeRequest+0x1c4>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800b37e:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800b380:	f004 0007 	and.w	r0, r4, #7
 800b384:	f000 f9ff 	bl	800b786 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800b388:	f88d 4010 	strb.w	r4, [sp, #16]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800b38c:	2201      	movs	r2, #1
 800b38e:	a904      	add	r1, sp, #16
 800b390:	2010      	movs	r0, #16
 800b392:	f000 fa9f 	bl	800b8d4 <LoRaMacCommandsAddCmd>
 800b396:	4604      	mov	r4, r0
 800b398:	b1d0      	cbz	r0, 800b3d0 <LoRaMacMlmeRequest+0x1c4>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b39a:	2413      	movs	r4, #19
 800b39c:	e018      	b.n	800b3d0 <LoRaMacMlmeRequest+0x1c4>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800b39e:	2200      	movs	r2, #0
 800b3a0:	a904      	add	r1, sp, #16
 800b3a2:	2012      	movs	r0, #18
 800b3a4:	f000 fa96 	bl	800b8d4 <LoRaMacCommandsAddCmd>
 800b3a8:	4604      	mov	r4, r0
 800b3aa:	b188      	cbz	r0, 800b3d0 <LoRaMacMlmeRequest+0x1c4>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b3ac:	2413      	movs	r4, #19
 800b3ae:	e00f      	b.n	800b3d0 <LoRaMacMlmeRequest+0x1c4>
            queueElement.RestrictCommonReadyToHandle = true;
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	f88d 3017 	strb.w	r3, [sp, #23]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800b3b6:	f000 f9d7 	bl	800b768 <LoRaMacClassBIsAcquisitionInProgress>
 800b3ba:	b108      	cbz	r0, 800b3c0 <LoRaMacMlmeRequest+0x1b4>
                status = LORAMAC_STATUS_BUSY;
 800b3bc:	2401      	movs	r4, #1
 800b3be:	e007      	b.n	800b3d0 <LoRaMacMlmeRequest+0x1c4>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800b3c0:	f000 f9cf 	bl	800b762 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800b3c4:	2000      	movs	r0, #0
 800b3c6:	f000 f9d1 	bl	800b76c <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 800b3ca:	2400      	movs	r4, #0
 800b3cc:	e000      	b.n	800b3d0 <LoRaMacMlmeRequest+0x1c4>
    switch( mlmeRequest->Type )
 800b3ce:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800b3d0:	4b0d      	ldr	r3, [pc, #52]	@ (800b408 <LoRaMacMlmeRequest+0x1fc>)
 800b3d2:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 800b3d6:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 800b3d8:	b17c      	cbz	r4, 800b3fa <LoRaMacMlmeRequest+0x1ee>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800b3da:	f000 fc87 	bl	800bcec <LoRaMacConfirmQueueGetCnt>
 800b3de:	2800      	cmp	r0, #0
 800b3e0:	f47f af22 	bne.w	800b228 <LoRaMacMlmeRequest+0x1c>
            MacCtx.NodeAckRequested = false;
 800b3e4:	4b08      	ldr	r3, [pc, #32]	@ (800b408 <LoRaMacMlmeRequest+0x1fc>)
 800b3e6:	2100      	movs	r1, #0
 800b3e8:	f883 141a 	strb.w	r1, [r3, #1050]	@ 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800b3ec:	f893 2491 	ldrb.w	r2, [r3, #1169]	@ 0x491
 800b3f0:	f361 0282 	bfi	r2, r1, #2, #1
 800b3f4:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
 800b3f8:	e716      	b.n	800b228 <LoRaMacMlmeRequest+0x1c>
        LoRaMacConfirmQueueAdd( &queueElement );
 800b3fa:	a805      	add	r0, sp, #20
 800b3fc:	f000 fbac 	bl	800bb58 <LoRaMacConfirmQueueAdd>
 800b400:	e712      	b.n	800b228 <LoRaMacMlmeRequest+0x1c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b402:	2403      	movs	r4, #3
 800b404:	e710      	b.n	800b228 <LoRaMacMlmeRequest+0x1c>
 800b406:	bf00      	nop
 800b408:	20000728 	.word	0x20000728
 800b40c:	20000b7c 	.word	0x20000b7c
 800b410:	20008000 	.word	0x20008000

0800b414 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 800b414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b418:	b091      	sub	sp, #68	@ 0x44
 800b41a:	9103      	str	r1, [sp, #12]
    void* fBuffer = NULL;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800b41c:	2800      	cmp	r0, #0
 800b41e:	f000 80db 	beq.w	800b5d8 <LoRaMacMcpsRequest+0x1c4>
 800b422:	f04f 0800 	mov.w	r8, #0
 800b426:	4605      	mov	r5, r0
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 800b428:	f8c0 8010 	str.w	r8, [r0, #16]

    if( LoRaMacIsBusy( ) == true )
 800b42c:	f7fe ff90 	bl	800a350 <LoRaMacIsBusy>
 800b430:	4607      	mov	r7, r0
 800b432:	b118      	cbz	r0, 800b43c <LoRaMacMcpsRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 800b434:	2001      	movs	r0, #1

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800b436:	b011      	add	sp, #68	@ 0x44
 800b438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    McpsReq_t request = *mcpsRequest;
 800b43c:	ac06      	add	r4, sp, #24
 800b43e:	462e      	mov	r6, r5
 800b440:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800b442:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b444:	f8c4 8000 	str.w	r8, [r4]
    macHdr.Value = 0;
 800b448:	4641      	mov	r1, r8
 800b44a:	f88d 8030 	strb.w	r8, [sp, #48]	@ 0x30
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800b44e:	4c64      	ldr	r4, [pc, #400]	@ (800b5e0 <LoRaMacMcpsRequest+0x1cc>)
 800b450:	2214      	movs	r2, #20
 800b452:	4620      	mov	r0, r4
 800b454:	f004 fa5d 	bl	800f912 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b458:	2301      	movs	r3, #1
 800b45a:	7063      	strb	r3, [r4, #1]
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800b45c:	4b61      	ldr	r3, [pc, #388]	@ (800b5e4 <LoRaMacMcpsRequest+0x1d0>)
 800b45e:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800b462:	2b02      	cmp	r3, #2
 800b464:	d071      	beq.n	800b54a <LoRaMacMcpsRequest+0x136>
    switch( request.Type )
 800b466:	f89d 9018 	ldrb.w	r9, [sp, #24]
 800b46a:	f1b9 0f01 	cmp.w	r9, #1
 800b46e:	d07f      	beq.n	800b570 <LoRaMacMcpsRequest+0x15c>
 800b470:	f1b9 0f03 	cmp.w	r9, #3
 800b474:	f000 808e 	beq.w	800b594 <LoRaMacMcpsRequest+0x180>
 800b478:	f1b9 0f00 	cmp.w	r9, #0
 800b47c:	f040 809a 	bne.w	800b5b4 <LoRaMacMcpsRequest+0x1a0>
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800b480:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 800b484:	2202      	movs	r2, #2
 800b486:	f362 1347 	bfi	r3, r2, #5, #3
 800b48a:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
            fPort = request.Req.Unconfirmed.fPort;
 800b48e:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800b492:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Unconfirmed.fBuffer;
 800b494:	9b08      	ldr	r3, [sp, #32]
 800b496:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 800b498:	f8bd 8024 	ldrh.w	r8, [sp, #36]	@ 0x24
            datarate = request.Req.Unconfirmed.Datarate;
 800b49c:	f99d b026 	ldrsb.w	fp, [sp, #38]	@ 0x26
            readyToSend = true;
 800b4a0:	2701      	movs	r7, #1
    getPhy.Attribute = PHY_MIN_TX_DR;
 800b4a2:	2302      	movs	r3, #2
 800b4a4:	f88d 3038 	strb.w	r3, [sp, #56]	@ 0x38
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b4a8:	4e4e      	ldr	r6, [pc, #312]	@ (800b5e4 <LoRaMacMcpsRequest+0x1d0>)
 800b4aa:	f896 307c 	ldrb.w	r3, [r6, #124]	@ 0x7c
 800b4ae:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b4b2:	a90e      	add	r1, sp, #56	@ 0x38
 800b4b4:	f896 0048 	ldrb.w	r0, [r6, #72]	@ 0x48
 800b4b8:	f001 f952 	bl	800c760 <RegionGetPhyParam>
 800b4bc:	900d      	str	r0, [sp, #52]	@ 0x34
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800b4be:	b244      	sxtb	r4, r0
 800b4c0:	45a3      	cmp	fp, r4
 800b4c2:	bfb8      	it	lt
 800b4c4:	46a3      	movlt	fp, r4
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 800b4c6:	f896 a11a 	ldrb.w	sl, [r6, #282]	@ 0x11a
 800b4ca:	f896 211d 	ldrb.w	r2, [r6, #285]	@ 0x11d
 800b4ce:	f896 1130 	ldrb.w	r1, [r6, #304]	@ 0x130
 800b4d2:	4650      	mov	r0, sl
 800b4d4:	f7fc fe0e 	bl	80080f4 <CheckForMinimumAbpDatarate>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	b900      	cbnz	r0, 800b4de <LoRaMacMcpsRequest+0xca>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800b4dc:	465c      	mov	r4, fp
    if( readyToSend == true )
 800b4de:	2f00      	cmp	r7, #0
 800b4e0:	d074      	beq.n	800b5cc <LoRaMacMcpsRequest+0x1b8>
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 800b4e2:	f1ba 0f00 	cmp.w	sl, #0
 800b4e6:	d000      	beq.n	800b4ea <LoRaMacMcpsRequest+0xd6>
 800b4e8:	b19b      	cbz	r3, 800b512 <LoRaMacMcpsRequest+0xfe>
            verify.DatarateParams.Datarate = datarate;
 800b4ea:	f88d 402c 	strb.w	r4, [sp, #44]	@ 0x2c
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b4ee:	4b3d      	ldr	r3, [pc, #244]	@ (800b5e4 <LoRaMacMcpsRequest+0x1d0>)
 800b4f0:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 800b4f4:	f88d 202e 	strb.w	r2, [sp, #46]	@ 0x2e
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800b4f8:	2205      	movs	r2, #5
 800b4fa:	a90b      	add	r1, sp, #44	@ 0x2c
 800b4fc:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800b500:	f001 f960 	bl	800c7c4 <RegionVerify>
 800b504:	2800      	cmp	r0, #0
 800b506:	d069      	beq.n	800b5dc <LoRaMacMcpsRequest+0x1c8>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800b508:	f99d 202c 	ldrsb.w	r2, [sp, #44]	@ 0x2c
 800b50c:	4b35      	ldr	r3, [pc, #212]	@ (800b5e4 <LoRaMacMcpsRequest+0x1d0>)
 800b50e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800b512:	4b35      	ldr	r3, [pc, #212]	@ (800b5e8 <LoRaMacMcpsRequest+0x1d4>)
 800b514:	f8d3 1498 	ldr.w	r1, [r3, #1176]	@ 0x498
 800b518:	4b32      	ldr	r3, [pc, #200]	@ (800b5e4 <LoRaMacMcpsRequest+0x1d0>)
 800b51a:	f8d3 0090 	ldr.w	r0, [r3, #144]	@ 0x90
 800b51e:	f7fd ff6d 	bl	80093fc <LoRaMacHandleResponseTimeout>
        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 800b522:	9b03      	ldr	r3, [sp, #12]
 800b524:	9300      	str	r3, [sp, #0]
 800b526:	4643      	mov	r3, r8
 800b528:	9a05      	ldr	r2, [sp, #20]
 800b52a:	9904      	ldr	r1, [sp, #16]
 800b52c:	a80c      	add	r0, sp, #48	@ 0x30
 800b52e:	f7fe fe7f 	bl	800a230 <Send>
        if( status == LORAMAC_STATUS_OK )
 800b532:	2800      	cmp	r0, #0
 800b534:	d145      	bne.n	800b5c2 <LoRaMacMcpsRequest+0x1ae>
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 800b536:	4b2c      	ldr	r3, [pc, #176]	@ (800b5e8 <LoRaMacMcpsRequest+0x1d4>)
 800b538:	f883 9440 	strb.w	r9, [r3, #1088]	@ 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800b53c:	f893 2491 	ldrb.w	r2, [r3, #1169]	@ 0x491
 800b540:	f042 0201 	orr.w	r2, r2, #1
 800b544:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
 800b548:	e041      	b.n	800b5ce <LoRaMacMcpsRequest+0x1ba>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800b54a:	4b26      	ldr	r3, [pc, #152]	@ (800b5e4 <LoRaMacMcpsRequest+0x1d0>)
 800b54c:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800b550:	2b02      	cmp	r3, #2
 800b552:	d188      	bne.n	800b466 <LoRaMacMcpsRequest+0x52>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800b554:	4b23      	ldr	r3, [pc, #140]	@ (800b5e4 <LoRaMacMcpsRequest+0x1d0>)
 800b556:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d183      	bne.n	800b466 <LoRaMacMcpsRequest+0x52>
        ( request.Type == MCPS_UNCONFIRMED ) )
 800b55e:	f89d 3018 	ldrb.w	r3, [sp, #24]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800b562:	2b00      	cmp	r3, #0
 800b564:	f47f af7f 	bne.w	800b466 <LoRaMacMcpsRequest+0x52>
        request.Type = MCPS_CONFIRMED;
 800b568:	2301      	movs	r3, #1
 800b56a:	f88d 3018 	strb.w	r3, [sp, #24]
 800b56e:	e77a      	b.n	800b466 <LoRaMacMcpsRequest+0x52>
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800b570:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 800b574:	2204      	movs	r2, #4
 800b576:	f362 1347 	bfi	r3, r2, #5, #3
 800b57a:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
            fPort = request.Req.Confirmed.fPort;
 800b57e:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800b582:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Confirmed.fBuffer;
 800b584:	9b08      	ldr	r3, [sp, #32]
 800b586:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Confirmed.fBufferSize;
 800b588:	f8bd 8024 	ldrh.w	r8, [sp, #36]	@ 0x24
            datarate = request.Req.Confirmed.Datarate;
 800b58c:	f99d b026 	ldrsb.w	fp, [sp, #38]	@ 0x26
            readyToSend = true;
 800b590:	2701      	movs	r7, #1
            break;
 800b592:	e786      	b.n	800b4a2 <LoRaMacMcpsRequest+0x8e>
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800b594:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 800b598:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 800b59c:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
            fBuffer = request.Req.Proprietary.fBuffer;
 800b5a0:	9b07      	ldr	r3, [sp, #28]
 800b5a2:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Proprietary.fBufferSize;
 800b5a4:	f8bd 8020 	ldrh.w	r8, [sp, #32]
            datarate = request.Req.Proprietary.Datarate;
 800b5a8:	f99d b022 	ldrsb.w	fp, [sp, #34]	@ 0x22
            readyToSend = true;
 800b5ac:	2701      	movs	r7, #1
    uint8_t fPort = 0;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	9304      	str	r3, [sp, #16]
            break;
 800b5b2:	e776      	b.n	800b4a2 <LoRaMacMcpsRequest+0x8e>
    switch( request.Type )
 800b5b4:	f04f 0b00 	mov.w	fp, #0
 800b5b8:	f8cd b014 	str.w	fp, [sp, #20]
 800b5bc:	f8cd b010 	str.w	fp, [sp, #16]
 800b5c0:	e76f      	b.n	800b4a2 <LoRaMacMcpsRequest+0x8e>
            MacCtx.NodeAckRequested = false;
 800b5c2:	4b09      	ldr	r3, [pc, #36]	@ (800b5e8 <LoRaMacMcpsRequest+0x1d4>)
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
 800b5ca:	e000      	b.n	800b5ce <LoRaMacMcpsRequest+0x1ba>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b5cc:	2002      	movs	r0, #2
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800b5ce:	4b06      	ldr	r3, [pc, #24]	@ (800b5e8 <LoRaMacMcpsRequest+0x1d4>)
 800b5d0:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 800b5d4:	612b      	str	r3, [r5, #16]
    return status;
 800b5d6:	e72e      	b.n	800b436 <LoRaMacMcpsRequest+0x22>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b5d8:	2003      	movs	r0, #3
 800b5da:	e72c      	b.n	800b436 <LoRaMacMcpsRequest+0x22>
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800b5dc:	2003      	movs	r0, #3
 800b5de:	e72a      	b.n	800b436 <LoRaMacMcpsRequest+0x22>
 800b5e0:	20000b68 	.word	0x20000b68
 800b5e4:	20008000 	.word	0x20008000
 800b5e8:	20000728 	.word	0x20000728

0800b5ec <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800b5ec:	b510      	push	{r4, lr}
 800b5ee:	b082      	sub	sp, #8
 800b5f0:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800b5f2:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800b5f6:	220f      	movs	r2, #15
 800b5f8:	a901      	add	r1, sp, #4
 800b5fa:	4b09      	ldr	r3, [pc, #36]	@ (800b620 <LoRaMacTestSetDutyCycleOn+0x34>)
 800b5fc:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800b600:	f001 f8e0 	bl	800c7c4 <RegionVerify>
 800b604:	b148      	cbz	r0, 800b61a <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800b606:	4b06      	ldr	r3, [pc, #24]	@ (800b620 <LoRaMacTestSetDutyCycleOn+0x34>)
 800b608:	f883 411c 	strb.w	r4, [r3, #284]	@ 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800b60c:	4a05      	ldr	r2, [pc, #20]	@ (800b624 <LoRaMacTestSetDutyCycleOn+0x38>)
 800b60e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b612:	f043 0320 	orr.w	r3, r3, #32
 800b616:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
}
 800b61a:	b002      	add	sp, #8
 800b61c:	bd10      	pop	{r4, pc}
 800b61e:	bf00      	nop
 800b620:	20008000 	.word	0x20008000
 800b624:	20000728 	.word	0x20000728

0800b628 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 800b628:	b538      	push	{r3, r4, r5, lr}
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 800b62a:	f7ff f8ef 	bl	800a80c <LoRaMacStop>
 800b62e:	b110      	cbz	r0, 800b636 <LoRaMacDeInitialization+0xe>
        // Return success
        return LORAMAC_STATUS_OK;
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 800b630:	2401      	movs	r4, #1
    }
}
 800b632:	4620      	mov	r0, r4
 800b634:	bd38      	pop	{r3, r4, r5, pc}
 800b636:	4604      	mov	r4, r0
        TimerStop( &MacCtx.TxDelayedTimer );
 800b638:	4d0a      	ldr	r5, [pc, #40]	@ (800b664 <LoRaMacDeInitialization+0x3c>)
 800b63a:	4628      	mov	r0, r5
 800b63c:	f006 fb7e 	bl	8011d3c <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 800b640:	f105 0018 	add.w	r0, r5, #24
 800b644:	f006 fb7a 	bl	8011d3c <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 800b648:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 800b64c:	f006 fb76 	bl	8011d3c <UTIL_TIMER_Stop>
        LoRaMacClassBHaltBeaconing( );
 800b650:	f000 f89a 	bl	800b788 <LoRaMacClassBHaltBeaconing>
        ResetMacParameters( false );
 800b654:	2000      	movs	r0, #0
 800b656:	f7fe fba1 	bl	8009d9c <ResetMacParameters>
        Radio.Sleep( );
 800b65a:	4b03      	ldr	r3, [pc, #12]	@ (800b668 <LoRaMacDeInitialization+0x40>)
 800b65c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b65e:	4798      	blx	r3
        return LORAMAC_STATUS_OK;
 800b660:	e7e7      	b.n	800b632 <LoRaMacDeInitialization+0xa>
 800b662:	bf00      	nop
 800b664:	20000a90 	.word	0x20000a90
 800b668:	08013170 	.word	0x08013170

0800b66c <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 800b66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b670:	b08b      	sub	sp, #44	@ 0x2c
 800b672:	460f      	mov	r7, r1
 800b674:	4616      	mov	r6, r2
 800b676:	461d      	mov	r5, r3
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
 800b678:	f990 900c 	ldrsb.w	r9, [r0, #12]
    int8_t txPower = adrNext->TxPower;
 800b67c:	f990 a00d 	ldrsb.w	sl, [r0, #13]
    uint8_t nbTrans = adrNext->NbTrans;
 800b680:	f890 b00e 	ldrb.w	fp, [r0, #14]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800b684:	6842      	ldr	r2, [r0, #4]
 800b686:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b688:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 800b68a:	f890 8001 	ldrb.w	r8, [r0, #1]
 800b68e:	f1b8 0f00 	cmp.w	r8, #0
 800b692:	d109      	bne.n	800b6a8 <LoRaMacAdrCalcNext+0x3c>
                datarate = phyParam.Value;
            }
        }
    }

    *drOut = datarate;
 800b694:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 800b698:	f886 a000 	strb.w	sl, [r6]
    *nbTransOut = nbTrans;
 800b69c:	f885 b000 	strb.w	fp, [r5]
    return adrAckReq;
}
 800b6a0:	4640      	mov	r0, r8
 800b6a2:	b00b      	add	sp, #44	@ 0x2c
 800b6a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6a8:	4604      	mov	r4, r0
        getPhy.Attribute = PHY_MIN_TX_DR;
 800b6aa:	2302      	movs	r3, #2
 800b6ac:	f88d 3020 	strb.w	r3, [sp, #32]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800b6b0:	7bc3      	ldrb	r3, [r0, #15]
 800b6b2:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b6b6:	a908      	add	r1, sp, #32
 800b6b8:	7c00      	ldrb	r0, [r0, #16]
 800b6ba:	f001 f851 	bl	800c760 <RegionGetPhyParam>
 800b6be:	9007      	str	r0, [sp, #28]
        minTxDatarate = phyParam.Value;
 800b6c0:	b243      	sxtb	r3, r0
 800b6c2:	9301      	str	r3, [sp, #4]
        datarate = MAX( datarate, minTxDatarate );
 800b6c4:	454b      	cmp	r3, r9
 800b6c6:	bfb8      	it	lt
 800b6c8:	464b      	movlt	r3, r9
 800b6ca:	9300      	str	r3, [sp, #0]
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 800b6cc:	6862      	ldr	r2, [r4, #4]
 800b6ce:	8923      	ldrh	r3, [r4, #8]
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d201      	bcs.n	800b6d8 <LoRaMacAdrCalcNext+0x6c>
    bool adrAckReq = false;
 800b6d4:	f04f 0800 	mov.w	r8, #0
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800b6d8:	8961      	ldrh	r1, [r4, #10]
 800b6da:	440b      	add	r3, r1
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d224      	bcs.n	800b72a <LoRaMacAdrCalcNext+0xbe>
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 800b6e0:	6863      	ldr	r3, [r4, #4]
 800b6e2:	8921      	ldrh	r1, [r4, #8]
 800b6e4:	8962      	ldrh	r2, [r4, #10]
 800b6e6:	eb01 0042 	add.w	r0, r1, r2, lsl #1
 800b6ea:	4283      	cmp	r3, r0
 800b6ec:	d332      	bcc.n	800b754 <LoRaMacAdrCalcNext+0xe8>
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 800b6ee:	1a5b      	subs	r3, r3, r1
 800b6f0:	fbb3 f1f2 	udiv	r1, r3, r2
 800b6f4:	fb02 3311 	mls	r3, r2, r1, r3
 800b6f8:	bb7b      	cbnz	r3, 800b75a <LoRaMacAdrCalcNext+0xee>
                if( datarate == minTxDatarate )
 800b6fa:	9b01      	ldr	r3, [sp, #4]
 800b6fc:	4599      	cmp	r9, r3
 800b6fe:	dc03      	bgt.n	800b708 <LoRaMacAdrCalcNext+0x9c>
                    if( adrNext->UpdateChanMask == true )
 800b700:	7823      	ldrb	r3, [r4, #0]
 800b702:	b9eb      	cbnz	r3, 800b740 <LoRaMacAdrCalcNext+0xd4>
                    nbTrans = 1;
 800b704:	f04f 0b01 	mov.w	fp, #1
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800b708:	2321      	movs	r3, #33	@ 0x21
 800b70a:	f88d 3020 	strb.w	r3, [sp, #32]
                getPhy.Datarate = datarate;
 800b70e:	9b00      	ldr	r3, [sp, #0]
 800b710:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800b714:	7be3      	ldrb	r3, [r4, #15]
 800b716:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b71a:	a908      	add	r1, sp, #32
 800b71c:	7c20      	ldrb	r0, [r4, #16]
 800b71e:	f001 f81f 	bl	800c760 <RegionGetPhyParam>
 800b722:	9007      	str	r0, [sp, #28]
                datarate = phyParam.Value;
 800b724:	fa4f f980 	sxtb.w	r9, r0
 800b728:	e7b4      	b.n	800b694 <LoRaMacAdrCalcNext+0x28>
            getPhy.Attribute = PHY_DEF_TX_POWER;
 800b72a:	230a      	movs	r3, #10
 800b72c:	f88d 3020 	strb.w	r3, [sp, #32]
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b730:	a908      	add	r1, sp, #32
 800b732:	7c20      	ldrb	r0, [r4, #16]
 800b734:	f001 f814 	bl	800c760 <RegionGetPhyParam>
 800b738:	9007      	str	r0, [sp, #28]
            txPower = phyParam.Value;
 800b73a:	fa4f fa80 	sxtb.w	sl, r0
 800b73e:	e7cf      	b.n	800b6e0 <LoRaMacAdrCalcNext+0x74>
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800b740:	2302      	movs	r3, #2
 800b742:	f88d 3018 	strb.w	r3, [sp, #24]
                        RegionInitDefaults( adrNext->Region, &params );
 800b746:	a903      	add	r1, sp, #12
 800b748:	7c20      	ldrb	r0, [r4, #16]
 800b74a:	f001 f82e 	bl	800c7aa <RegionInitDefaults>
                    nbTrans = 1;
 800b74e:	f04f 0b01 	mov.w	fp, #1
 800b752:	e7d9      	b.n	800b708 <LoRaMacAdrCalcNext+0x9c>
        datarate = MAX( datarate, minTxDatarate );
 800b754:	f8dd 9000 	ldr.w	r9, [sp]
 800b758:	e79c      	b.n	800b694 <LoRaMacAdrCalcNext+0x28>
 800b75a:	f8dd 9000 	ldr.w	r9, [sp]
 800b75e:	e799      	b.n	800b694 <LoRaMacAdrCalcNext+0x28>

0800b760 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b760:	4770      	bx	lr

0800b762 <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b762:	4770      	bx	lr

0800b764 <LoRaMacClassBSetPingSlotState>:
void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b764:	4770      	bx	lr

0800b766 <LoRaMacClassBSetMulticastSlotState>:
void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b766:	4770      	bx	lr

0800b768 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b768:	2000      	movs	r0, #0
 800b76a:	4770      	bx	lr

0800b76c <LoRaMacClassBBeaconTimerEvent>:
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b76c:	4770      	bx	lr

0800b76e <LoRaMacClassBPingSlotTimerEvent>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b76e:	4770      	bx	lr

0800b770 <LoRaMacClassBMulticastSlotTimerEvent>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b770:	4770      	bx	lr

0800b772 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b772:	2000      	movs	r0, #0
 800b774:	4770      	bx	lr

0800b776 <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b776:	2000      	movs	r0, #0
 800b778:	4770      	bx	lr

0800b77a <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b77a:	2000      	movs	r0, #0
 800b77c:	4770      	bx	lr

0800b77e <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b77e:	2000      	movs	r0, #0
 800b780:	4770      	bx	lr

0800b782 <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b782:	2000      	movs	r0, #0
 800b784:	4770      	bx	lr

0800b786 <LoRaMacClassBSetPingSlotInfo>:
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b786:	4770      	bx	lr

0800b788 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b788:	4770      	bx	lr

0800b78a <LoRaMacClassBResumeBeaconing>:
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b78a:	4770      	bx	lr

0800b78c <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b78c:	2002      	movs	r0, #2
 800b78e:	4770      	bx	lr

0800b790 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b790:	2002      	movs	r0, #2
 800b792:	4770      	bx	lr

0800b794 <LoRaMacMibClassBSetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b794:	2002      	movs	r0, #2
 800b796:	4770      	bx	lr

0800b798 <LoRaMacClassBPingSlotInfoAns>:
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b798:	4770      	bx	lr

0800b79a <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b79a:	2000      	movs	r0, #0
 800b79c:	4770      	bx	lr

0800b79e <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b79e:	4770      	bx	lr

0800b7a0 <LoRaMacClassBDeviceTimeAns>:
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b7a0:	4770      	bx	lr

0800b7a2 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b7a2:	2000      	movs	r0, #0
 800b7a4:	4770      	bx	lr

0800b7a6 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b7a6:	2000      	movs	r0, #0
 800b7a8:	4770      	bx	lr

0800b7aa <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b7aa:	4770      	bx	lr

0800b7ac <LoRaMacClassBSetFPendingBit>:
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b7ac:	4770      	bx	lr

0800b7ae <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b7ae:	4770      	bx	lr

0800b7b0 <IsSlotFree>:
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
    uint8_t* mem = ( uint8_t* )slot;

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	2b0f      	cmp	r3, #15
 800b7b4:	d804      	bhi.n	800b7c0 <IsSlotFree+0x10>
    {
        if( mem[size] != 0x00 )
 800b7b6:	5cc2      	ldrb	r2, [r0, r3]
 800b7b8:	b922      	cbnz	r2, 800b7c4 <IsSlotFree+0x14>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800b7ba:	3301      	adds	r3, #1
 800b7bc:	b29b      	uxth	r3, r3
 800b7be:	e7f8      	b.n	800b7b2 <IsSlotFree+0x2>
        {
            return false;
        }
    }
    return true;
 800b7c0:	2001      	movs	r0, #1
 800b7c2:	4770      	bx	lr
            return false;
 800b7c4:	2000      	movs	r0, #0
}
 800b7c6:	4770      	bx	lr

0800b7c8 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800b7c8:	b538      	push	{r3, r4, r5, lr}
    uint8_t itr = 0;
 800b7ca:	2500      	movs	r5, #0

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800b7cc:	012c      	lsls	r4, r5, #4
 800b7ce:	3408      	adds	r4, #8
 800b7d0:	4b06      	ldr	r3, [pc, #24]	@ (800b7ec <MallocNewMacCommandSlot+0x24>)
 800b7d2:	441c      	add	r4, r3
 800b7d4:	4620      	mov	r0, r4
 800b7d6:	f7ff ffeb 	bl	800b7b0 <IsSlotFree>
 800b7da:	b920      	cbnz	r0, 800b7e6 <MallocNewMacCommandSlot+0x1e>
    {
        itr++;
 800b7dc:	3501      	adds	r5, #1
 800b7de:	b2ed      	uxtb	r5, r5
        if( itr == NUM_OF_MAC_COMMANDS )
 800b7e0:	2d20      	cmp	r5, #32
 800b7e2:	d1f3      	bne.n	800b7cc <MallocNewMacCommandSlot+0x4>
        {
            return NULL;
 800b7e4:	2400      	movs	r4, #0
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
}
 800b7e6:	4620      	mov	r0, r4
 800b7e8:	bd38      	pop	{r3, r4, r5, pc}
 800b7ea:	bf00      	nop
 800b7ec:	20000c44 	.word	0x20000c44

0800b7f0 <LinkedListInit>:
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
    if( list == NULL )
 800b7f0:	b120      	cbz	r0, 800b7fc <LinkedListInit+0xc>
    {
        return false;
    }

    list->First = NULL;
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	6002      	str	r2, [r0, #0]
    list->Last = NULL;
 800b7f6:	6042      	str	r2, [r0, #4]

    return true;
 800b7f8:	2001      	movs	r0, #1
 800b7fa:	4770      	bx	lr
        return false;
 800b7fc:	2000      	movs	r0, #0
}
 800b7fe:	4770      	bx	lr

0800b800 <LinkedListAdd>:
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800b800:	4603      	mov	r3, r0
 800b802:	b160      	cbz	r0, 800b81e <LinkedListAdd+0x1e>
 800b804:	b169      	cbz	r1, 800b822 <LinkedListAdd+0x22>
    {
        return false;
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 800b806:	6802      	ldr	r2, [r0, #0]
 800b808:	b13a      	cbz	r2, 800b81a <LinkedListAdd+0x1a>
    {
        list->First = element;
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800b80a:	685a      	ldr	r2, [r3, #4]
 800b80c:	b102      	cbz	r2, 800b810 <LinkedListAdd+0x10>
    {
        list->Last->Next = element;
 800b80e:	6011      	str	r1, [r2, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 800b810:	2200      	movs	r2, #0
 800b812:	600a      	str	r2, [r1, #0]

    // Update the last entry of the list.
    list->Last = element;
 800b814:	6059      	str	r1, [r3, #4]

    return true;
 800b816:	2001      	movs	r0, #1
 800b818:	4770      	bx	lr
        list->First = element;
 800b81a:	6001      	str	r1, [r0, #0]
 800b81c:	e7f5      	b.n	800b80a <LinkedListAdd+0xa>
        return false;
 800b81e:	2000      	movs	r0, #0
 800b820:	4770      	bx	lr
 800b822:	2000      	movs	r0, #0
}
 800b824:	4770      	bx	lr

0800b826 <LinkedListGetPrevious>:
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800b826:	b160      	cbz	r0, 800b842 <LinkedListGetPrevious+0x1c>
 800b828:	b161      	cbz	r1, 800b844 <LinkedListGetPrevious+0x1e>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800b82a:	6800      	ldr	r0, [r0, #0]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800b82c:	4281      	cmp	r1, r0
 800b82e:	d102      	bne.n	800b836 <LinkedListGetPrevious+0x10>
            curElement = curElement->Next;
        }
    }
    else
    {
        curElement = NULL;
 800b830:	2000      	movs	r0, #0
    }

    return curElement;
}
 800b832:	4770      	bx	lr
            curElement = curElement->Next;
 800b834:	4618      	mov	r0, r3
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800b836:	2800      	cmp	r0, #0
 800b838:	d0fb      	beq.n	800b832 <LinkedListGetPrevious+0xc>
 800b83a:	6803      	ldr	r3, [r0, #0]
 800b83c:	428b      	cmp	r3, r1
 800b83e:	d1f9      	bne.n	800b834 <LinkedListGetPrevious+0xe>
 800b840:	4770      	bx	lr
 800b842:	4770      	bx	lr
        return NULL;
 800b844:	4608      	mov	r0, r1
 800b846:	4770      	bx	lr

0800b848 <LinkedListRemove>:
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800b848:	b1b8      	cbz	r0, 800b87a <LinkedListRemove+0x32>
{
 800b84a:	b538      	push	{r3, r4, r5, lr}
 800b84c:	460c      	mov	r4, r1
 800b84e:	4605      	mov	r5, r0
    if( ( list == NULL ) || ( element == NULL ) )
 800b850:	b1a9      	cbz	r1, 800b87e <LinkedListRemove+0x36>
    {
        return false;
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800b852:	f7ff ffe8 	bl	800b826 <LinkedListGetPrevious>

    if( list->First == element )
 800b856:	682b      	ldr	r3, [r5, #0]
 800b858:	42a3      	cmp	r3, r4
 800b85a:	d009      	beq.n	800b870 <LinkedListRemove+0x28>
    {
        list->First = element->Next;
    }

    if( list->Last == element )
 800b85c:	686b      	ldr	r3, [r5, #4]
 800b85e:	42a3      	cmp	r3, r4
 800b860:	d009      	beq.n	800b876 <LinkedListRemove+0x2e>
    {
        list->Last = PrevElement;
    }

    if( PrevElement != NULL )
 800b862:	b108      	cbz	r0, 800b868 <LinkedListRemove+0x20>
    {
        PrevElement->Next = element->Next;
 800b864:	6823      	ldr	r3, [r4, #0]
 800b866:	6003      	str	r3, [r0, #0]
    }

    element->Next = NULL;
 800b868:	2300      	movs	r3, #0
 800b86a:	6023      	str	r3, [r4, #0]

    return true;
 800b86c:	2001      	movs	r0, #1
}
 800b86e:	bd38      	pop	{r3, r4, r5, pc}
        list->First = element->Next;
 800b870:	6823      	ldr	r3, [r4, #0]
 800b872:	602b      	str	r3, [r5, #0]
 800b874:	e7f2      	b.n	800b85c <LinkedListRemove+0x14>
        list->Last = PrevElement;
 800b876:	6068      	str	r0, [r5, #4]
 800b878:	e7f3      	b.n	800b862 <LinkedListRemove+0x1a>
        return false;
 800b87a:	2000      	movs	r0, #0
}
 800b87c:	4770      	bx	lr
        return false;
 800b87e:	2000      	movs	r0, #0
 800b880:	e7f5      	b.n	800b86e <LinkedListRemove+0x26>
	...

0800b884 <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
 800b884:	2811      	cmp	r0, #17
 800b886:	d805      	bhi.n	800b894 <IsSticky+0x10>
 800b888:	4b03      	ldr	r3, [pc, #12]	@ (800b898 <IsSticky+0x14>)
 800b88a:	fa23 f000 	lsr.w	r0, r3, r0
 800b88e:	f000 0001 	and.w	r0, r0, #1
 800b892:	4770      	bx	lr
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
        default:
            return false;
 800b894:	2000      	movs	r0, #0
    }
}
 800b896:	4770      	bx	lr
 800b898:	00020720 	.word	0x00020720

0800b89c <IsConfirmationRequired>:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
    }
}
 800b89c:	2000      	movs	r0, #0
 800b89e:	4770      	bx	lr

0800b8a0 <FreeMacCommandSlot>:
    if( slot == NULL )
 800b8a0:	b130      	cbz	r0, 800b8b0 <FreeMacCommandSlot+0x10>
{
 800b8a2:	b508      	push	{r3, lr}
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800b8a4:	2210      	movs	r2, #16
 800b8a6:	2100      	movs	r1, #0
 800b8a8:	f004 f833 	bl	800f912 <memset1>
    return true;
 800b8ac:	2001      	movs	r0, #1
}
 800b8ae:	bd08      	pop	{r3, pc}
        return false;
 800b8b0:	2000      	movs	r0, #0
}
 800b8b2:	4770      	bx	lr

0800b8b4 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800b8b4:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800b8b6:	4c06      	ldr	r4, [pc, #24]	@ (800b8d0 <LoRaMacCommandsInit+0x1c>)
 800b8b8:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 800b8bc:	2100      	movs	r1, #0
 800b8be:	4620      	mov	r0, r4
 800b8c0:	f004 f827 	bl	800f912 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 800b8c4:	4620      	mov	r0, r4
 800b8c6:	f7ff ff93 	bl	800b7f0 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b8ca:	2000      	movs	r0, #0
 800b8cc:	bd10      	pop	{r4, pc}
 800b8ce:	bf00      	nop
 800b8d0:	20000c44 	.word	0x20000c44

0800b8d4 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
    if( payload == NULL )
 800b8d4:	b321      	cbz	r1, 800b920 <LoRaMacCommandsAddCmd+0x4c>
{
 800b8d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8d8:	4605      	mov	r5, r0
 800b8da:	4614      	mov	r4, r2
 800b8dc:	460f      	mov	r7, r1
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800b8de:	f7ff ff73 	bl	800b7c8 <MallocNewMacCommandSlot>

    if( newCmd == NULL )
 800b8e2:	4606      	mov	r6, r0
 800b8e4:	b1f0      	cbz	r0, 800b924 <LoRaMacCommandsAddCmd+0x50>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 800b8e6:	4601      	mov	r1, r0
 800b8e8:	4810      	ldr	r0, [pc, #64]	@ (800b92c <LoRaMacCommandsAddCmd+0x58>)
 800b8ea:	f7ff ff89 	bl	800b800 <LinkedListAdd>
 800b8ee:	b1d8      	cbz	r0, 800b928 <LoRaMacCommandsAddCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800b8f0:	7135      	strb	r5, [r6, #4]
    newCmd->PayloadSize = payloadSize;
 800b8f2:	60b4      	str	r4, [r6, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800b8f4:	b2a2      	uxth	r2, r4
 800b8f6:	4639      	mov	r1, r7
 800b8f8:	1d70      	adds	r0, r6, #5
 800b8fa:	f003 fff2 	bl	800f8e2 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800b8fe:	4628      	mov	r0, r5
 800b900:	f7ff ffc0 	bl	800b884 <IsSticky>
 800b904:	7330      	strb	r0, [r6, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 800b906:	4628      	mov	r0, r5
 800b908:	f7ff ffc8 	bl	800b89c <IsConfirmationRequired>
 800b90c:	7370      	strb	r0, [r6, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800b90e:	4a07      	ldr	r2, [pc, #28]	@ (800b92c <LoRaMacCommandsAddCmd+0x58>)
 800b910:	f8d2 3208 	ldr.w	r3, [r2, #520]	@ 0x208
 800b914:	4423      	add	r3, r4
 800b916:	3301      	adds	r3, #1
 800b918:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 800b91c:	2000      	movs	r0, #0
}
 800b91e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b920:	2001      	movs	r0, #1
}
 800b922:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800b924:	2002      	movs	r0, #2
 800b926:	e7fa      	b.n	800b91e <LoRaMacCommandsAddCmd+0x4a>
        return LORAMAC_COMMANDS_ERROR;
 800b928:	2005      	movs	r0, #5
 800b92a:	e7f8      	b.n	800b91e <LoRaMacCommandsAddCmd+0x4a>
 800b92c:	20000c44 	.word	0x20000c44

0800b930 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 800b930:	b1a0      	cbz	r0, 800b95c <LoRaMacCommandsRemoveCmd+0x2c>
{
 800b932:	b510      	push	{r4, lr}
 800b934:	4604      	mov	r4, r0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 800b936:	4601      	mov	r1, r0
 800b938:	480b      	ldr	r0, [pc, #44]	@ (800b968 <LoRaMacCommandsRemoveCmd+0x38>)
 800b93a:	f7ff ff85 	bl	800b848 <LinkedListRemove>
 800b93e:	b178      	cbz	r0, 800b960 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800b940:	4a09      	ldr	r2, [pc, #36]	@ (800b968 <LoRaMacCommandsRemoveCmd+0x38>)
 800b942:	f8d2 3208 	ldr.w	r3, [r2, #520]	@ 0x208
 800b946:	68a1      	ldr	r1, [r4, #8]
 800b948:	1a5b      	subs	r3, r3, r1
 800b94a:	3b01      	subs	r3, #1
 800b94c:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800b950:	4620      	mov	r0, r4
 800b952:	f7ff ffa5 	bl	800b8a0 <FreeMacCommandSlot>
 800b956:	b128      	cbz	r0, 800b964 <LoRaMacCommandsRemoveCmd+0x34>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800b958:	2000      	movs	r0, #0
}
 800b95a:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b95c:	2001      	movs	r0, #1
}
 800b95e:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800b960:	2003      	movs	r0, #3
 800b962:	e7fa      	b.n	800b95a <LoRaMacCommandsRemoveCmd+0x2a>
        return LORAMAC_COMMANDS_ERROR;
 800b964:	2005      	movs	r0, #5
 800b966:	e7f8      	b.n	800b95a <LoRaMacCommandsRemoveCmd+0x2a>
 800b968:	20000c44 	.word	0x20000c44

0800b96c <LoRaMacCommandsGetCmd>:
LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800b96c:	4b06      	ldr	r3, [pc, #24]	@ (800b988 <LoRaMacCommandsGetCmd+0x1c>)
 800b96e:	681b      	ldr	r3, [r3, #0]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800b970:	e000      	b.n	800b974 <LoRaMacCommandsGetCmd+0x8>
    {
        curElement = curElement->Next;
 800b972:	681b      	ldr	r3, [r3, #0]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800b974:	b113      	cbz	r3, 800b97c <LoRaMacCommandsGetCmd+0x10>
 800b976:	791a      	ldrb	r2, [r3, #4]
 800b978:	4282      	cmp	r2, r0
 800b97a:	d1fa      	bne.n	800b972 <LoRaMacCommandsGetCmd+0x6>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 800b97c:	600b      	str	r3, [r1, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 800b97e:	b10b      	cbz	r3, 800b984 <LoRaMacCommandsGetCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }
    return LORAMAC_COMMANDS_SUCCESS;
 800b980:	2000      	movs	r0, #0
 800b982:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800b984:	2003      	movs	r0, #3
}
 800b986:	4770      	bx	lr
 800b988:	20000c44 	.word	0x20000c44

0800b98c <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800b98c:	4b0a      	ldr	r3, [pc, #40]	@ (800b9b8 <LoRaMacCommandsRemoveNoneStickyCmds+0x2c>)
 800b98e:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800b990:	b120      	cbz	r0, 800b99c <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 800b992:	7b03      	ldrb	r3, [r0, #12]
 800b994:	b11b      	cbz	r3, 800b99e <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 800b996:	6800      	ldr	r0, [r0, #0]
 800b998:	e7fa      	b.n	800b990 <LoRaMacCommandsRemoveNoneStickyCmds+0x4>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b99a:	bd10      	pop	{r4, pc}
 800b99c:	4770      	bx	lr
{
 800b99e:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 800b9a0:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800b9a2:	f7ff ffc5 	bl	800b930 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800b9a6:	4620      	mov	r0, r4
    while( curElement != NULL )
 800b9a8:	2800      	cmp	r0, #0
 800b9aa:	d0f6      	beq.n	800b99a <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        if( curElement->IsSticky == false )
 800b9ac:	7b03      	ldrb	r3, [r0, #12]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d0f6      	beq.n	800b9a0 <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            curElement = curElement->Next;
 800b9b2:	6800      	ldr	r0, [r0, #0]
 800b9b4:	e7f8      	b.n	800b9a8 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
 800b9b6:	bf00      	nop
 800b9b8:	20000c44 	.word	0x20000c44

0800b9bc <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800b9bc:	b570      	push	{r4, r5, r6, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800b9be:	4b0b      	ldr	r3, [pc, #44]	@ (800b9ec <LoRaMacCommandsRemoveStickyAnsCmds+0x30>)
 800b9c0:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800b9c2:	e000      	b.n	800b9c6 <LoRaMacCommandsRemoveStickyAnsCmds+0xa>
{
 800b9c4:	4634      	mov	r4, r6
    while( curElement != NULL )
 800b9c6:	b17c      	cbz	r4, 800b9e8 <LoRaMacCommandsRemoveStickyAnsCmds+0x2c>
    {
        nexElement = curElement->Next;
 800b9c8:	6826      	ldr	r6, [r4, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 800b9ca:	7925      	ldrb	r5, [r4, #4]
 800b9cc:	4628      	mov	r0, r5
 800b9ce:	f7ff ff59 	bl	800b884 <IsSticky>
 800b9d2:	2800      	cmp	r0, #0
 800b9d4:	d0f6      	beq.n	800b9c4 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 800b9d6:	4628      	mov	r0, r5
 800b9d8:	f7ff ff60 	bl	800b89c <IsConfirmationRequired>
        if( ( IsSticky( curElement->CID ) == true ) &&
 800b9dc:	2800      	cmp	r0, #0
 800b9de:	d1f1      	bne.n	800b9c4 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800b9e0:	4620      	mov	r0, r4
 800b9e2:	f7ff ffa5 	bl	800b930 <LoRaMacCommandsRemoveCmd>
 800b9e6:	e7ed      	b.n	800b9c4 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b9e8:	2000      	movs	r0, #0
 800b9ea:	bd70      	pop	{r4, r5, r6, pc}
 800b9ec:	20000c44 	.word	0x20000c44

0800b9f0 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 800b9f0:	b128      	cbz	r0, 800b9fe <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800b9f2:	4a04      	ldr	r2, [pc, #16]	@ (800ba04 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800b9f4:	f8d2 2208 	ldr.w	r2, [r2, #520]	@ 0x208
 800b9f8:	6002      	str	r2, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800b9fa:	2000      	movs	r0, #0
 800b9fc:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b9fe:	2001      	movs	r0, #1
}
 800ba00:	4770      	bx	lr
 800ba02:	bf00      	nop
 800ba04:	20000c44 	.word	0x20000c44

0800ba08 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800ba08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800ba0c:	4b16      	ldr	r3, [pc, #88]	@ (800ba68 <LoRaMacCommandsSerializeCmds+0x60>)
 800ba0e:	681c      	ldr	r4, [r3, #0]
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800ba10:	b32a      	cbz	r2, 800ba5e <LoRaMacCommandsSerializeCmds+0x56>
 800ba12:	4607      	mov	r7, r0
 800ba14:	4688      	mov	r8, r1
 800ba16:	4616      	mov	r6, r2
 800ba18:	b319      	cbz	r1, 800ba62 <LoRaMacCommandsSerializeCmds+0x5a>
    uint8_t itr = 0;
 800ba1a:	2100      	movs	r1, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800ba1c:	b194      	cbz	r4, 800ba44 <LoRaMacCommandsSerializeCmds+0x3c>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800ba1e:	1a7a      	subs	r2, r7, r1
 800ba20:	68a3      	ldr	r3, [r4, #8]
 800ba22:	3301      	adds	r3, #1
 800ba24:	429a      	cmp	r2, r3
 800ba26:	d30d      	bcc.n	800ba44 <LoRaMacCommandsSerializeCmds+0x3c>
        {
            buffer[itr++] = curElement->CID;
 800ba28:	1c4d      	adds	r5, r1, #1
 800ba2a:	b2ed      	uxtb	r5, r5
 800ba2c:	7923      	ldrb	r3, [r4, #4]
 800ba2e:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800ba30:	8922      	ldrh	r2, [r4, #8]
 800ba32:	1d61      	adds	r1, r4, #5
 800ba34:	1970      	adds	r0, r6, r5
 800ba36:	f003 ff54 	bl	800f8e2 <memcpy1>
            itr += curElement->PayloadSize;
 800ba3a:	68a3      	ldr	r3, [r4, #8]
 800ba3c:	441d      	add	r5, r3
 800ba3e:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800ba40:	6824      	ldr	r4, [r4, #0]
 800ba42:	e7eb      	b.n	800ba1c <LoRaMacCommandsSerializeCmds+0x14>
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 800ba44:	b12c      	cbz	r4, 800ba52 <LoRaMacCommandsSerializeCmds+0x4a>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800ba46:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800ba48:	4620      	mov	r0, r4
 800ba4a:	f7ff ff71 	bl	800b930 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 800ba4e:	462c      	mov	r4, r5
 800ba50:	e7f8      	b.n	800ba44 <LoRaMacCommandsSerializeCmds+0x3c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800ba52:	4640      	mov	r0, r8
 800ba54:	f7ff ffcc 	bl	800b9f0 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800ba58:	2000      	movs	r0, #0
}
 800ba5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800ba5e:	2001      	movs	r0, #1
 800ba60:	e7fb      	b.n	800ba5a <LoRaMacCommandsSerializeCmds+0x52>
 800ba62:	2001      	movs	r0, #1
 800ba64:	e7f9      	b.n	800ba5a <LoRaMacCommandsSerializeCmds+0x52>
 800ba66:	bf00      	nop
 800ba68:	20000c44 	.word	0x20000c44

0800ba6c <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800ba6c:	1e83      	subs	r3, r0, #2
 800ba6e:	2b11      	cmp	r3, #17
 800ba70:	d80a      	bhi.n	800ba88 <LoRaMacCommandsGetCmdSize+0x1c>
 800ba72:	e8df f003 	tbb	[pc, r3]
 800ba76:	0b23      	.short	0x0b23
 800ba78:	110f240d 	.word	0x110f240d
 800ba7c:	09171513 	.word	0x09171513
 800ba80:	09091909 	.word	0x09091909
 800ba84:	211f1d1b 	.word	0x211f1d1b
 800ba88:	2000      	movs	r0, #0
 800ba8a:	4770      	bx	lr
            break;
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 800ba8c:	2005      	movs	r0, #5
            break;
 800ba8e:	4770      	bx	lr
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 800ba90:	2002      	movs	r0, #2
            break;
 800ba92:	4770      	bx	lr
            break;
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 800ba94:	2001      	movs	r0, #1
            break;
 800ba96:	4770      	bx	lr
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 800ba98:	2006      	movs	r0, #6
            break;
 800ba9a:	4770      	bx	lr
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 800ba9c:	2002      	movs	r0, #2
            break;
 800ba9e:	4770      	bx	lr
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 800baa0:	2002      	movs	r0, #2
            break;
 800baa2:	4770      	bx	lr
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 800baa4:	2005      	movs	r0, #5
            break;
 800baa6:	4770      	bx	lr
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 800baa8:	2006      	movs	r0, #6
            break;
 800baaa:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 800baac:	2001      	movs	r0, #1
            break;
 800baae:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 800bab0:	2005      	movs	r0, #5
            break;
 800bab2:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 800bab4:	2004      	movs	r0, #4
            break;
 800bab6:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 800bab8:	2004      	movs	r0, #4
            break;
 800baba:	4770      	bx	lr
            cidSize = 3;
 800babc:	2003      	movs	r0, #3
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800babe:	4770      	bx	lr

0800bac0 <IncreaseBufferPointer>:
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800bac0:	4b03      	ldr	r3, [pc, #12]	@ (800bad0 <IncreaseBufferPointer+0x10>)
 800bac2:	4298      	cmp	r0, r3
 800bac4:	d001      	beq.n	800baca <IncreaseBufferPointer+0xa>
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    }
    else
    {
        // Increase
        bufferPointer++;
 800bac6:	3004      	adds	r0, #4
 800bac8:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800baca:	4802      	ldr	r0, [pc, #8]	@ (800bad4 <IncreaseBufferPointer+0x14>)
    }
    return bufferPointer;
}
 800bacc:	4770      	bx	lr
 800bace:	bf00      	nop
 800bad0:	20000e6c 	.word	0x20000e6c
 800bad4:	20000e5c 	.word	0x20000e5c

0800bad8 <IsListEmpty>:
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
    if( count == 0 )
 800bad8:	b108      	cbz	r0, 800bade <IsListEmpty+0x6>
    {
        return true;
    }
    return false;
 800bada:	2000      	movs	r0, #0
 800badc:	4770      	bx	lr
        return true;
 800bade:	2001      	movs	r0, #1
}
 800bae0:	4770      	bx	lr

0800bae2 <IsListFull>:

static bool IsListFull( uint8_t count )
{
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800bae2:	2804      	cmp	r0, #4
 800bae4:	d801      	bhi.n	800baea <IsListFull+0x8>
    {
        return true;
    }
    return false;
 800bae6:	2000      	movs	r0, #0
 800bae8:	4770      	bx	lr
        return true;
 800baea:	2001      	movs	r0, #1
}
 800baec:	4770      	bx	lr
	...

0800baf0 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800baf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baf2:	4606      	mov	r6, r0
 800baf4:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800baf6:	4b0d      	ldr	r3, [pc, #52]	@ (800bb2c <GetElement+0x3c>)
 800baf8:	f893 7020 	ldrb.w	r7, [r3, #32]
 800bafc:	4638      	mov	r0, r7
 800bafe:	f7ff ffeb 	bl	800bad8 <IsListEmpty>
 800bb02:	b970      	cbnz	r0, 800bb22 <GetElement+0x32>
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800bb04:	2500      	movs	r5, #0
 800bb06:	42af      	cmp	r7, r5
 800bb08:	d909      	bls.n	800bb1e <GetElement+0x2e>
    {
        if( element->Request == request )
 800bb0a:	7823      	ldrb	r3, [r4, #0]
 800bb0c:	42b3      	cmp	r3, r6
 800bb0e:	d00a      	beq.n	800bb26 <GetElement+0x36>
        {
            // We have found the element
            return element;
        }
        element = IncreaseBufferPointer( element );
 800bb10:	4620      	mov	r0, r4
 800bb12:	f7ff ffd5 	bl	800bac0 <IncreaseBufferPointer>
 800bb16:	4604      	mov	r4, r0
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800bb18:	3501      	adds	r5, #1
 800bb1a:	b2ed      	uxtb	r5, r5
 800bb1c:	e7f3      	b.n	800bb06 <GetElement+0x16>
    }

    return NULL;
 800bb1e:	2000      	movs	r0, #0
}
 800bb20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 800bb22:	2000      	movs	r0, #0
 800bb24:	e7fc      	b.n	800bb20 <GetElement+0x30>
            return element;
 800bb26:	4620      	mov	r0, r4
 800bb28:	e7fa      	b.n	800bb20 <GetElement+0x30>
 800bb2a:	bf00      	nop
 800bb2c:	20000e50 	.word	0x20000e50

0800bb30 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800bb30:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800bb32:	4c08      	ldr	r4, [pc, #32]	@ (800bb54 <LoRaMacConfirmQueueInit+0x24>)
 800bb34:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800bb36:	2300      	movs	r3, #0
 800bb38:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800bb3c:	f104 000c 	add.w	r0, r4, #12
 800bb40:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800bb42:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800bb44:	2214      	movs	r2, #20
 800bb46:	21ff      	movs	r1, #255	@ 0xff
 800bb48:	f003 fee3 	bl	800f912 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
}
 800bb52:	bd10      	pop	{r4, pc}
 800bb54:	20000e50 	.word	0x20000e50

0800bb58 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800bb58:	b538      	push	{r3, r4, r5, lr}
 800bb5a:	4605      	mov	r5, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800bb5c:	4b0f      	ldr	r3, [pc, #60]	@ (800bb9c <LoRaMacConfirmQueueAdd+0x44>)
 800bb5e:	f893 0020 	ldrb.w	r0, [r3, #32]
 800bb62:	f7ff ffbe 	bl	800bae2 <IsListFull>
 800bb66:	b9b8      	cbnz	r0, 800bb98 <LoRaMacConfirmQueueAdd+0x40>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800bb68:	4c0c      	ldr	r4, [pc, #48]	@ (800bb9c <LoRaMacConfirmQueueAdd+0x44>)
 800bb6a:	68a3      	ldr	r3, [r4, #8]
 800bb6c:	782a      	ldrb	r2, [r5, #0]
 800bb6e:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800bb70:	68a3      	ldr	r3, [r4, #8]
 800bb72:	786a      	ldrb	r2, [r5, #1]
 800bb74:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800bb76:	68a3      	ldr	r3, [r4, #8]
 800bb78:	78ea      	ldrb	r2, [r5, #3]
 800bb7a:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 800bb7c:	68a3      	ldr	r3, [r4, #8]
 800bb7e:	78aa      	ldrb	r2, [r5, #2]
 800bb80:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800bb82:	f894 3020 	ldrb.w	r3, [r4, #32]
 800bb86:	3301      	adds	r3, #1
 800bb88:	f884 3020 	strb.w	r3, [r4, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800bb8c:	68a0      	ldr	r0, [r4, #8]
 800bb8e:	f7ff ff97 	bl	800bac0 <IncreaseBufferPointer>
 800bb92:	60a0      	str	r0, [r4, #8]

    return true;
 800bb94:	2001      	movs	r0, #1
}
 800bb96:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800bb98:	2000      	movs	r0, #0
 800bb9a:	e7fc      	b.n	800bb96 <LoRaMacConfirmQueueAdd+0x3e>
 800bb9c:	20000e50 	.word	0x20000e50

0800bba0 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800bba0:	b538      	push	{r3, r4, r5, lr}
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800bba2:	4b09      	ldr	r3, [pc, #36]	@ (800bbc8 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800bba4:	f893 4020 	ldrb.w	r4, [r3, #32]
 800bba8:	4620      	mov	r0, r4
 800bbaa:	f7ff ff95 	bl	800bad8 <IsListEmpty>
 800bbae:	b948      	cbnz	r0, 800bbc4 <LoRaMacConfirmQueueRemoveFirst+0x24>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800bbb0:	4d05      	ldr	r5, [pc, #20]	@ (800bbc8 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800bbb2:	3c01      	subs	r4, #1
 800bbb4:	f885 4020 	strb.w	r4, [r5, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800bbb8:	6868      	ldr	r0, [r5, #4]
 800bbba:	f7ff ff81 	bl	800bac0 <IncreaseBufferPointer>
 800bbbe:	6068      	str	r0, [r5, #4]

    return true;
 800bbc0:	2001      	movs	r0, #1
}
 800bbc2:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800bbc4:	2000      	movs	r0, #0
 800bbc6:	e7fc      	b.n	800bbc2 <LoRaMacConfirmQueueRemoveFirst+0x22>
 800bbc8:	20000e50 	.word	0x20000e50

0800bbcc <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800bbcc:	b538      	push	{r3, r4, r5, lr}
 800bbce:	4605      	mov	r5, r0
 800bbd0:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800bbd2:	4b08      	ldr	r3, [pc, #32]	@ (800bbf4 <LoRaMacConfirmQueueSetStatus+0x28>)
 800bbd4:	f893 0020 	ldrb.w	r0, [r3, #32]
 800bbd8:	f7ff ff7e 	bl	800bad8 <IsListEmpty>
 800bbdc:	b948      	cbnz	r0, 800bbf2 <LoRaMacConfirmQueueSetStatus+0x26>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800bbde:	4b05      	ldr	r3, [pc, #20]	@ (800bbf4 <LoRaMacConfirmQueueSetStatus+0x28>)
 800bbe0:	689a      	ldr	r2, [r3, #8]
 800bbe2:	6859      	ldr	r1, [r3, #4]
 800bbe4:	4620      	mov	r0, r4
 800bbe6:	f7ff ff83 	bl	800baf0 <GetElement>
        if( element != NULL )
 800bbea:	b110      	cbz	r0, 800bbf2 <LoRaMacConfirmQueueSetStatus+0x26>
        {
            element->Status = status;
 800bbec:	7045      	strb	r5, [r0, #1]
            element->ReadyToHandle = true;
 800bbee:	2201      	movs	r2, #1
 800bbf0:	7082      	strb	r2, [r0, #2]
        }
    }
}
 800bbf2:	bd38      	pop	{r3, r4, r5, pc}
 800bbf4:	20000e50 	.word	0x20000e50

0800bbf8 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800bbf8:	b510      	push	{r4, lr}
 800bbfa:	4604      	mov	r4, r0
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800bbfc:	4b09      	ldr	r3, [pc, #36]	@ (800bc24 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800bbfe:	f893 0020 	ldrb.w	r0, [r3, #32]
 800bc02:	f7ff ff69 	bl	800bad8 <IsListEmpty>
 800bc06:	b940      	cbnz	r0, 800bc1a <LoRaMacConfirmQueueGetStatus+0x22>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800bc08:	4b06      	ldr	r3, [pc, #24]	@ (800bc24 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800bc0a:	689a      	ldr	r2, [r3, #8]
 800bc0c:	6859      	ldr	r1, [r3, #4]
 800bc0e:	4620      	mov	r0, r4
 800bc10:	f7ff ff6e 	bl	800baf0 <GetElement>
        if( element != NULL )
 800bc14:	b118      	cbz	r0, 800bc1e <LoRaMacConfirmQueueGetStatus+0x26>
        {
            return element->Status;
 800bc16:	7840      	ldrb	r0, [r0, #1]
 800bc18:	e000      	b.n	800bc1c <LoRaMacConfirmQueueGetStatus+0x24>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bc1a:	2001      	movs	r0, #1
}
 800bc1c:	bd10      	pop	{r4, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bc1e:	2001      	movs	r0, #1
 800bc20:	e7fc      	b.n	800bc1c <LoRaMacConfirmQueueGetStatus+0x24>
 800bc22:	bf00      	nop
 800bc24:	20000e50 	.word	0x20000e50

0800bc28 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800bc28:	b538      	push	{r3, r4, r5, lr}
 800bc2a:	4605      	mov	r5, r0
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800bc2c:	4b0c      	ldr	r3, [pc, #48]	@ (800bc60 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800bc2e:	685c      	ldr	r4, [r3, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800bc30:	f883 0021 	strb.w	r0, [r3, #33]	@ 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800bc34:	f893 0020 	ldrb.w	r0, [r3, #32]
 800bc38:	f7ff ff4e 	bl	800bad8 <IsListEmpty>
 800bc3c:	b150      	cbz	r0, 800bc54 <LoRaMacConfirmQueueSetStatusCmn+0x2c>
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
    }
}
 800bc3e:	bd38      	pop	{r3, r4, r5, pc}
                element->ReadyToHandle = true;
 800bc40:	2301      	movs	r3, #1
 800bc42:	70a3      	strb	r3, [r4, #2]
            element = IncreaseBufferPointer( element );
 800bc44:	4620      	mov	r0, r4
 800bc46:	f7ff ff3b 	bl	800bac0 <IncreaseBufferPointer>
 800bc4a:	4604      	mov	r4, r0
        }while( element != ConfirmQueueCtx.BufferEnd );
 800bc4c:	4b04      	ldr	r3, [pc, #16]	@ (800bc60 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800bc4e:	689b      	ldr	r3, [r3, #8]
 800bc50:	4283      	cmp	r3, r0
 800bc52:	d0f4      	beq.n	800bc3e <LoRaMacConfirmQueueSetStatusCmn+0x16>
            element->Status = status;
 800bc54:	7065      	strb	r5, [r4, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800bc56:	78e3      	ldrb	r3, [r4, #3]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d1f3      	bne.n	800bc44 <LoRaMacConfirmQueueSetStatusCmn+0x1c>
 800bc5c:	e7f0      	b.n	800bc40 <LoRaMacConfirmQueueSetStatusCmn+0x18>
 800bc5e:	bf00      	nop
 800bc60:	20000e50 	.word	0x20000e50

0800bc64 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800bc64:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800bc66:	4b04      	ldr	r3, [pc, #16]	@ (800bc78 <LoRaMacConfirmQueueIsCmdActive+0x14>)
 800bc68:	689a      	ldr	r2, [r3, #8]
 800bc6a:	6859      	ldr	r1, [r3, #4]
 800bc6c:	f7ff ff40 	bl	800baf0 <GetElement>
 800bc70:	b100      	cbz	r0, 800bc74 <LoRaMacConfirmQueueIsCmdActive+0x10>
    {
        return true;
 800bc72:	2001      	movs	r0, #1
    }
    return false;
}
 800bc74:	bd08      	pop	{r3, pc}
 800bc76:	bf00      	nop
 800bc78:	20000e50 	.word	0x20000e50

0800bc7c <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800bc7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc7e:	b083      	sub	sp, #12
 800bc80:	4606      	mov	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800bc82:	4b19      	ldr	r3, [pc, #100]	@ (800bce8 <LoRaMacConfirmQueueHandleCb+0x6c>)
 800bc84:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 800bc88:	2204      	movs	r2, #4
 800bc8a:	2100      	movs	r1, #0
 800bc8c:	eb0d 0002 	add.w	r0, sp, r2
 800bc90:	f003 fe3f 	bl	800f912 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 800bc94:	2400      	movs	r4, #0
 800bc96:	e00d      	b.n	800bcb4 <LoRaMacConfirmQueueHandleCb+0x38>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800bc98:	781a      	ldrb	r2, [r3, #0]
 800bc9a:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800bc9e:	785a      	ldrb	r2, [r3, #1]
 800bca0:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800bca4:	78db      	ldrb	r3, [r3, #3]
 800bca6:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800bcaa:	f7ff ff79 	bl	800bba0 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800bcae:	b1a5      	cbz	r5, 800bcda <LoRaMacConfirmQueueHandleCb+0x5e>
    for( uint8_t i = 0; i < nbElements; i++ )
 800bcb0:	3401      	adds	r4, #1
 800bcb2:	b2e4      	uxtb	r4, r4
 800bcb4:	42bc      	cmp	r4, r7
 800bcb6:	d214      	bcs.n	800bce2 <LoRaMacConfirmQueueHandleCb+0x66>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800bcb8:	4b0b      	ldr	r3, [pc, #44]	@ (800bce8 <LoRaMacConfirmQueueHandleCb+0x6c>)
 800bcba:	685a      	ldr	r2, [r3, #4]
 800bcbc:	7812      	ldrb	r2, [r2, #0]
 800bcbe:	7032      	strb	r2, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800bcc0:	685a      	ldr	r2, [r3, #4]
 800bcc2:	7852      	ldrb	r2, [r2, #1]
 800bcc4:	7072      	strb	r2, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800bcc6:	685b      	ldr	r3, [r3, #4]
 800bcc8:	789d      	ldrb	r5, [r3, #2]
        if( readyToHandle == true )
 800bcca:	2d00      	cmp	r5, #0
 800bccc:	d0e4      	beq.n	800bc98 <LoRaMacConfirmQueueHandleCb+0x1c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800bcce:	4b06      	ldr	r3, [pc, #24]	@ (800bce8 <LoRaMacConfirmQueueHandleCb+0x6c>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	689b      	ldr	r3, [r3, #8]
 800bcd4:	4630      	mov	r0, r6
 800bcd6:	4798      	blx	r3
 800bcd8:	e7e7      	b.n	800bcaa <LoRaMacConfirmQueueHandleCb+0x2e>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800bcda:	a801      	add	r0, sp, #4
 800bcdc:	f7ff ff3c 	bl	800bb58 <LoRaMacConfirmQueueAdd>
 800bce0:	e7e6      	b.n	800bcb0 <LoRaMacConfirmQueueHandleCb+0x34>
        }
    }
}
 800bce2:	b003      	add	sp, #12
 800bce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bce6:	bf00      	nop
 800bce8:	20000e50 	.word	0x20000e50

0800bcec <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 800bcec:	4b01      	ldr	r3, [pc, #4]	@ (800bcf4 <LoRaMacConfirmQueueGetCnt+0x8>)
 800bcee:	f893 0020 	ldrb.w	r0, [r3, #32]
 800bcf2:	4770      	bx	lr
 800bcf4:	20000e50 	.word	0x20000e50

0800bcf8 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 800bcf8:	b508      	push	{r3, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800bcfa:	4b03      	ldr	r3, [pc, #12]	@ (800bd08 <LoRaMacConfirmQueueIsFull+0x10>)
 800bcfc:	f893 0020 	ldrb.w	r0, [r3, #32]
 800bd00:	f7ff feef 	bl	800bae2 <IsListFull>
    }
    else
    {
        return false;
    }
}
 800bd04:	bd08      	pop	{r3, pc}
 800bd06:	bf00      	nop
 800bd08:	20000e50 	.word	0x20000e50

0800bd0c <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800bd0c:	b410      	push	{r4}
 800bd0e:	9c01      	ldr	r4, [sp, #4]
 800bd10:	9902      	ldr	r1, [sp, #8]
 800bd12:	9a03      	ldr	r2, [sp, #12]
    if( b0 == 0 )
 800bd14:	b1da      	cbz	r2, 800bd4e <PrepareB0+0x42>
 800bd16:	4684      	mov	ip, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 800bd18:	2049      	movs	r0, #73	@ 0x49
 800bd1a:	7010      	strb	r0, [r2, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 800bd1c:	2000      	movs	r0, #0
 800bd1e:	7050      	strb	r0, [r2, #1]
        b0[2] = 0x00;
 800bd20:	7090      	strb	r0, [r2, #2]
    }

    b0[3] = 0x00;
 800bd22:	70d0      	strb	r0, [r2, #3]
    b0[4] = 0x00;
 800bd24:	7110      	strb	r0, [r2, #4]

    b0[5] = dir;
 800bd26:	7153      	strb	r3, [r2, #5]

    b0[6] = devAddr & 0xFF;
 800bd28:	7194      	strb	r4, [r2, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800bd2a:	0a23      	lsrs	r3, r4, #8
 800bd2c:	71d3      	strb	r3, [r2, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800bd2e:	0c23      	lsrs	r3, r4, #16
 800bd30:	7213      	strb	r3, [r2, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800bd32:	0e24      	lsrs	r4, r4, #24
 800bd34:	7254      	strb	r4, [r2, #9]

    b0[10] = fCnt & 0xFF;
 800bd36:	7291      	strb	r1, [r2, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800bd38:	0a0b      	lsrs	r3, r1, #8
 800bd3a:	72d3      	strb	r3, [r2, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800bd3c:	0c0b      	lsrs	r3, r1, #16
 800bd3e:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800bd40:	0e09      	lsrs	r1, r1, #24
 800bd42:	7351      	strb	r1, [r2, #13]

    b0[14] = 0x00;
 800bd44:	7390      	strb	r0, [r2, #14]

    b0[15] = msgLen & 0xFF;
 800bd46:	f882 c00f 	strb.w	ip, [r2, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 800bd4a:	bc10      	pop	{r4}
 800bd4c:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bd4e:	2009      	movs	r0, #9
 800bd50:	e7fb      	b.n	800bd4a <PrepareB0+0x3e>
	...

0800bd54 <GetKeyAddrItem>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800bd54:	2300      	movs	r3, #0
 800bd56:	2b01      	cmp	r3, #1
 800bd58:	d80d      	bhi.n	800bd76 <GetKeyAddrItem+0x22>
    {
        if( KeyAddrList[i].AddrID == addrID )
 800bd5a:	4a08      	ldr	r2, [pc, #32]	@ (800bd7c <GetKeyAddrItem+0x28>)
 800bd5c:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 800bd60:	4282      	cmp	r2, r0
 800bd62:	d002      	beq.n	800bd6a <GetKeyAddrItem+0x16>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800bd64:	3301      	adds	r3, #1
 800bd66:	b2db      	uxtb	r3, r3
 800bd68:	e7f5      	b.n	800bd56 <GetKeyAddrItem+0x2>
        {
            *item = &( KeyAddrList[i] );
 800bd6a:	4a04      	ldr	r2, [pc, #16]	@ (800bd7c <GetKeyAddrItem+0x28>)
 800bd6c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bd70:	600b      	str	r3, [r1, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 800bd72:	2000      	movs	r0, #0
 800bd74:	4770      	bx	lr
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800bd76:	200b      	movs	r0, #11
}
 800bd78:	4770      	bx	lr
 800bd7a:	bf00      	nop
 800bd7c:	200000f0 	.word	0x200000f0

0800bd80 <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 800bd80:	b1f1      	cbz	r1, 800bdc0 <GetLastFcntDown+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800bd82:	3801      	subs	r0, #1
 800bd84:	2803      	cmp	r0, #3
 800bd86:	d81d      	bhi.n	800bdc4 <GetLastFcntDown+0x44>
 800bd88:	e8df f000 	tbb	[pc, r0]
 800bd8c:	140e0802 	.word	0x140e0802
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800bd90:	4a0d      	ldr	r2, [pc, #52]	@ (800bdc8 <GetLastFcntDown+0x48>)
 800bd92:	6812      	ldr	r2, [r2, #0]
 800bd94:	6912      	ldr	r2, [r2, #16]
 800bd96:	600a      	str	r2, [r1, #0]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800bd98:	2000      	movs	r0, #0
            break;
 800bd9a:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800bd9c:	4a0a      	ldr	r2, [pc, #40]	@ (800bdc8 <GetLastFcntDown+0x48>)
 800bd9e:	6812      	ldr	r2, [r2, #0]
 800bda0:	6952      	ldr	r2, [r2, #20]
 800bda2:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800bda4:	2000      	movs	r0, #0
            break;
 800bda6:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800bda8:	4a07      	ldr	r2, [pc, #28]	@ (800bdc8 <GetLastFcntDown+0x48>)
 800bdaa:	6812      	ldr	r2, [r2, #0]
 800bdac:	6992      	ldr	r2, [r2, #24]
 800bdae:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800bdb0:	2000      	movs	r0, #0
            break;
 800bdb2:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800bdb4:	4a04      	ldr	r2, [pc, #16]	@ (800bdc8 <GetLastFcntDown+0x48>)
 800bdb6:	6812      	ldr	r2, [r2, #0]
 800bdb8:	69d2      	ldr	r2, [r2, #28]
 800bdba:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800bdbc:	2000      	movs	r0, #0
            break;
 800bdbe:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bdc0:	2009      	movs	r0, #9
 800bdc2:	4770      	bx	lr
    switch( fCntID )
 800bdc4:	2005      	movs	r0, #5
}
 800bdc6:	4770      	bx	lr
 800bdc8:	20000e74 	.word	0x20000e74

0800bdcc <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800bdcc:	b510      	push	{r4, lr}
 800bdce:	b082      	sub	sp, #8
 800bdd0:	460c      	mov	r4, r1
    uint32_t lastDown = 0;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	9301      	str	r3, [sp, #4]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800bdd6:	a901      	add	r1, sp, #4
 800bdd8:	f7ff ffd2 	bl	800bd80 <GetLastFcntDown>
 800bddc:	b948      	cbnz	r0, 800bdf2 <CheckFCntDown+0x26>
    {
        return false;
    }
    if( ( currentDown > lastDown ) ||
 800bdde:	9b01      	ldr	r3, [sp, #4]
 800bde0:	42a3      	cmp	r3, r4
 800bde2:	d309      	bcc.n	800bdf8 <CheckFCntDown+0x2c>
 800bde4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bde8:	d001      	beq.n	800bdee <CheckFCntDown+0x22>
    {
        return true;
    }
    else
    {
        return false;
 800bdea:	2000      	movs	r0, #0
 800bdec:	e002      	b.n	800bdf4 <CheckFCntDown+0x28>
        return true;
 800bdee:	2001      	movs	r0, #1
 800bdf0:	e000      	b.n	800bdf4 <CheckFCntDown+0x28>
        return false;
 800bdf2:	2000      	movs	r0, #0
    }
}
 800bdf4:	b002      	add	sp, #8
 800bdf6:	bd10      	pop	{r4, pc}
        return true;
 800bdf8:	2001      	movs	r0, #1
 800bdfa:	e7fb      	b.n	800bdf4 <CheckFCntDown+0x28>

0800bdfc <UpdateFCntDown>:
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    switch( fCntID )
 800bdfc:	3801      	subs	r0, #1
 800bdfe:	2803      	cmp	r0, #3
 800be00:	d815      	bhi.n	800be2e <UpdateFCntDown+0x32>
 800be02:	e8df f000 	tbb	[pc, r0]
 800be06:	0702      	.short	0x0702
 800be08:	110c      	.short	0x110c
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800be0a:	4b09      	ldr	r3, [pc, #36]	@ (800be30 <UpdateFCntDown+0x34>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	6119      	str	r1, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 800be10:	6219      	str	r1, [r3, #32]
            break;
 800be12:	4770      	bx	lr
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800be14:	4b06      	ldr	r3, [pc, #24]	@ (800be30 <UpdateFCntDown+0x34>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	6159      	str	r1, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 800be1a:	6219      	str	r1, [r3, #32]
            break;
 800be1c:	4770      	bx	lr
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 800be1e:	4b04      	ldr	r3, [pc, #16]	@ (800be30 <UpdateFCntDown+0x34>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	6199      	str	r1, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 800be24:	6219      	str	r1, [r3, #32]
            break;
 800be26:	4770      	bx	lr
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800be28:	4b01      	ldr	r3, [pc, #4]	@ (800be30 <UpdateFCntDown+0x34>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	61d9      	str	r1, [r3, #28]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
    }
}
 800be2e:	4770      	bx	lr
 800be30:	20000e74 	.word	0x20000e74

0800be34 <ResetFCnts>:
/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
    CryptoNvm->FCntList.FCntUp = 0;
 800be34:	4b0a      	ldr	r3, [pc, #40]	@ (800be60 <ResetFCnts+0x2c>)
 800be36:	681a      	ldr	r2, [r3, #0]
 800be38:	2300      	movs	r3, #0
 800be3a:	60d3      	str	r3, [r2, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800be3c:	f04f 31ff 	mov.w	r1, #4294967295
 800be40:	6111      	str	r1, [r2, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800be42:	6151      	str	r1, [r2, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 800be44:	6191      	str	r1, [r2, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800be46:	6211      	str	r1, [r2, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800be48:	2b00      	cmp	r3, #0
 800be4a:	dd00      	ble.n	800be4e <ResetFCnts+0x1a>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
    }
}
 800be4c:	4770      	bx	lr
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 800be4e:	1d99      	adds	r1, r3, #6
 800be50:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800be54:	f04f 30ff 	mov.w	r0, #4294967295
 800be58:	6048      	str	r0, [r1, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800be5a:	3301      	adds	r3, #1
 800be5c:	e7f4      	b.n	800be48 <ResetFCnts+0x14>
 800be5e:	bf00      	nop
 800be60:	20000e74 	.word	0x20000e74

0800be64 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 800be64:	4b03      	ldr	r3, [pc, #12]	@ (800be74 <IsJoinNonce10xOk+0x10>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	689b      	ldr	r3, [r3, #8]
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 800be6a:	4283      	cmp	r3, r0
 800be6c:	bf2c      	ite	cs
 800be6e:	2000      	movcs	r0, #0
 800be70:	2001      	movcc	r0, #1
 800be72:	4770      	bx	lr
 800be74:	20000e74 	.word	0x20000e74

0800be78 <ComputeCmacB0>:
{
 800be78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be7c:	b088      	sub	sp, #32
 800be7e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800be80:	b1f0      	cbz	r0, 800bec0 <ComputeCmacB0+0x48>
 800be82:	460c      	mov	r4, r1
 800be84:	4615      	mov	r5, r2
 800be86:	461a      	mov	r2, r3
 800be88:	4680      	mov	r8, r0
 800be8a:	b1de      	cbz	r6, 800bec4 <ComputeCmacB0+0x4c>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800be8c:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800be90:	d81a      	bhi.n	800bec8 <ComputeCmacB0+0x50>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800be92:	af04      	add	r7, sp, #16
 800be94:	9702      	str	r7, [sp, #8]
 800be96:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800be98:	9301      	str	r3, [sp, #4]
 800be9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be9c:	9300      	str	r3, [sp, #0]
 800be9e:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
 800bea2:	4629      	mov	r1, r5
 800bea4:	4620      	mov	r0, r4
 800bea6:	f7ff ff31 	bl	800bd0c <PrepareB0>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800beaa:	9600      	str	r6, [sp, #0]
 800beac:	462b      	mov	r3, r5
 800beae:	4622      	mov	r2, r4
 800beb0:	4641      	mov	r1, r8
 800beb2:	4638      	mov	r0, r7
 800beb4:	f003 fad0 	bl	800f458 <SecureElementComputeAesCmac>
 800beb8:	b940      	cbnz	r0, 800becc <ComputeCmacB0+0x54>
}
 800beba:	b008      	add	sp, #32
 800bebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bec0:	2009      	movs	r0, #9
 800bec2:	e7fa      	b.n	800beba <ComputeCmacB0+0x42>
 800bec4:	2009      	movs	r0, #9
 800bec6:	e7f8      	b.n	800beba <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800bec8:	200d      	movs	r0, #13
 800beca:	e7f6      	b.n	800beba <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800becc:	200e      	movs	r0, #14
 800bece:	e7f4      	b.n	800beba <ComputeCmacB0+0x42>

0800bed0 <DeriveSessionKey10x>:
{
 800bed0:	b510      	push	{r4, lr}
 800bed2:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 800bed4:	2400      	movs	r4, #0
 800bed6:	9400      	str	r4, [sp, #0]
 800bed8:	9401      	str	r4, [sp, #4]
 800beda:	9402      	str	r4, [sp, #8]
 800bedc:	9403      	str	r4, [sp, #12]
    switch( keyID )
 800bede:	2808      	cmp	r0, #8
 800bee0:	d003      	beq.n	800beea <DeriveSessionKey10x+0x1a>
 800bee2:	2809      	cmp	r0, #9
 800bee4:	d025      	beq.n	800bf32 <DeriveSessionKey10x+0x62>
 800bee6:	200a      	movs	r0, #10
 800bee8:	e021      	b.n	800bf2e <DeriveSessionKey10x+0x5e>
            compBase[0] = 0x01;
 800beea:	2401      	movs	r4, #1
 800beec:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800bef0:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800bef4:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800bef8:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800befc:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800bf00:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800bf04:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800bf08:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800bf0c:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800bf10:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800bf14:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800bf18:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800bf1c:	0a1b      	lsrs	r3, r3, #8
 800bf1e:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800bf22:	4602      	mov	r2, r0
 800bf24:	2101      	movs	r1, #1
 800bf26:	4668      	mov	r0, sp
 800bf28:	f003 fb34 	bl	800f594 <SecureElementDeriveAndStoreKey>
 800bf2c:	b928      	cbnz	r0, 800bf3a <DeriveSessionKey10x+0x6a>
}
 800bf2e:	b004      	add	sp, #16
 800bf30:	bd10      	pop	{r4, pc}
            compBase[0] = 0x02;
 800bf32:	2402      	movs	r4, #2
 800bf34:	f88d 4000 	strb.w	r4, [sp]
            break;
 800bf38:	e7da      	b.n	800bef0 <DeriveSessionKey10x+0x20>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bf3a:	200e      	movs	r0, #14
 800bf3c:	e7f7      	b.n	800bf2e <DeriveSessionKey10x+0x5e>

0800bf3e <PayloadEncrypt>:
{
 800bf3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf42:	b088      	sub	sp, #32
 800bf44:	4690      	mov	r8, r2
 800bf46:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
    if( buffer == 0 )
 800bf48:	2800      	cmp	r0, #0
 800bf4a:	d052      	beq.n	800bff2 <PayloadEncrypt+0xb4>
 800bf4c:	460d      	mov	r5, r1
 800bf4e:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 800bf50:	2600      	movs	r6, #0
 800bf52:	9604      	str	r6, [sp, #16]
 800bf54:	9605      	str	r6, [sp, #20]
 800bf56:	9606      	str	r6, [sp, #24]
 800bf58:	9607      	str	r6, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 800bf5a:	9600      	str	r6, [sp, #0]
 800bf5c:	9601      	str	r6, [sp, #4]
 800bf5e:	9602      	str	r6, [sp, #8]
 800bf60:	9603      	str	r6, [sp, #12]
    aBlock[0] = 0x01;
 800bf62:	2701      	movs	r7, #1
 800bf64:	f88d 7000 	strb.w	r7, [sp]
    aBlock[5] = dir;
 800bf68:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800bf6c:	f88d 1005 	strb.w	r1, [sp, #5]
    aBlock[6] = address & 0xFF;
 800bf70:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800bf74:	0a19      	lsrs	r1, r3, #8
 800bf76:	f88d 1007 	strb.w	r1, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800bf7a:	0c19      	lsrs	r1, r3, #16
 800bf7c:	f88d 1008 	strb.w	r1, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800bf80:	0e1b      	lsrs	r3, r3, #24
 800bf82:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 800bf86:	f88d 200a 	strb.w	r2, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800bf8a:	0a13      	lsrs	r3, r2, #8
 800bf8c:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800bf90:	0c13      	lsrs	r3, r2, #16
 800bf92:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800bf96:	0e12      	lsrs	r2, r2, #24
 800bf98:	f88d 200d 	strb.w	r2, [sp, #13]
    while( size > 0 )
 800bf9c:	e014      	b.n	800bfc8 <PayloadEncrypt+0x8a>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800bf9e:	18f2      	adds	r2, r6, r3
 800bfa0:	5ca0      	ldrb	r0, [r4, r2]
 800bfa2:	f103 0120 	add.w	r1, r3, #32
 800bfa6:	4469      	add	r1, sp
 800bfa8:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 800bfac:	4048      	eors	r0, r1
 800bfae:	54a0      	strb	r0, [r4, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800bfb0:	3301      	adds	r3, #1
 800bfb2:	b2db      	uxtb	r3, r3
 800bfb4:	462a      	mov	r2, r5
 800bfb6:	2d10      	cmp	r5, #16
 800bfb8:	bfa8      	it	ge
 800bfba:	2210      	movge	r2, #16
 800bfbc:	4293      	cmp	r3, r2
 800bfbe:	dbee      	blt.n	800bf9e <PayloadEncrypt+0x60>
        size -= 16;
 800bfc0:	3d10      	subs	r5, #16
 800bfc2:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 800bfc4:	3610      	adds	r6, #16
 800bfc6:	b2f6      	uxtb	r6, r6
    while( size > 0 )
 800bfc8:	2d00      	cmp	r5, #0
 800bfca:	dd0e      	ble.n	800bfea <PayloadEncrypt+0xac>
        aBlock[15] = ctr & 0xFF;
 800bfcc:	f88d 700f 	strb.w	r7, [sp, #15]
        ctr++;
 800bfd0:	3701      	adds	r7, #1
 800bfd2:	b2bf      	uxth	r7, r7
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800bfd4:	ab04      	add	r3, sp, #16
 800bfd6:	4642      	mov	r2, r8
 800bfd8:	2110      	movs	r1, #16
 800bfda:	4668      	mov	r0, sp
 800bfdc:	f003 fa61 	bl	800f4a2 <SecureElementAesEncrypt>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	2800      	cmp	r0, #0
 800bfe4:	d0e6      	beq.n	800bfb4 <PayloadEncrypt+0x76>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bfe6:	200e      	movs	r0, #14
 800bfe8:	e000      	b.n	800bfec <PayloadEncrypt+0xae>
    return LORAMAC_CRYPTO_SUCCESS;
 800bfea:	2000      	movs	r0, #0
}
 800bfec:	b008      	add	sp, #32
 800bfee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bff2:	2009      	movs	r0, #9
 800bff4:	e7fa      	b.n	800bfec <PayloadEncrypt+0xae>

0800bff6 <VerifyCmacB0>:
    if( msg == 0 )
 800bff6:	b368      	cbz	r0, 800c054 <VerifyCmacB0+0x5e>
{
 800bff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bffc:	b0c8      	sub	sp, #288	@ 0x120
 800bffe:	460c      	mov	r4, r1
 800c000:	4615      	mov	r5, r2
 800c002:	461e      	mov	r6, r3
 800c004:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800c006:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800c00a:	d825      	bhi.n	800c058 <VerifyCmacB0+0x62>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800c00c:	af04      	add	r7, sp, #16
 800c00e:	f44f 7288 	mov.w	r2, #272	@ 0x110
 800c012:	2100      	movs	r1, #0
 800c014:	4638      	mov	r0, r7
 800c016:	f003 fc7c 	bl	800f912 <memset1>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800c01a:	9702      	str	r7, [sp, #8]
 800c01c:	9b50      	ldr	r3, [sp, #320]	@ 0x140
 800c01e:	9301      	str	r3, [sp, #4]
 800c020:	9b4f      	ldr	r3, [sp, #316]	@ 0x13c
 800c022:	9300      	str	r3, [sp, #0]
 800c024:	f89d 3138 	ldrb.w	r3, [sp, #312]	@ 0x138
 800c028:	4632      	mov	r2, r6
 800c02a:	4629      	mov	r1, r5
 800c02c:	4620      	mov	r0, r4
 800c02e:	f7ff fe6d 	bl	800bd0c <PrepareB0>
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800c032:	4622      	mov	r2, r4
 800c034:	4641      	mov	r1, r8
 800c036:	a808      	add	r0, sp, #32
 800c038:	f003 fc53 	bl	800f8e2 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800c03c:	462b      	mov	r3, r5
 800c03e:	9a51      	ldr	r2, [sp, #324]	@ 0x144
 800c040:	f104 0110 	add.w	r1, r4, #16
 800c044:	4638      	mov	r0, r7
 800c046:	f003 fa16 	bl	800f476 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800c04a:	b130      	cbz	r0, 800c05a <VerifyCmacB0+0x64>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800c04c:	2801      	cmp	r0, #1
 800c04e:	d004      	beq.n	800c05a <VerifyCmacB0+0x64>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c050:	200e      	movs	r0, #14
 800c052:	e002      	b.n	800c05a <VerifyCmacB0+0x64>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c054:	2009      	movs	r0, #9
}
 800c056:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800c058:	200d      	movs	r0, #13
}
 800c05a:	b048      	add	sp, #288	@ 0x120
 800c05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c060 <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 800c060:	b188      	cbz	r0, 800c086 <LoRaMacCryptoInit+0x26>
{
 800c062:	b510      	push	{r4, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 800c064:	4c09      	ldr	r4, [pc, #36]	@ (800c08c <LoRaMacCryptoInit+0x2c>)
 800c066:	6020      	str	r0, [r4, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800c068:	2228      	movs	r2, #40	@ 0x28
 800c06a:	2100      	movs	r1, #0
 800c06c:	f003 fc51 	bl	800f912 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800c070:	6823      	ldr	r3, [r4, #0]
 800c072:	2201      	movs	r2, #1
 800c074:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 800c076:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 800c078:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800c07a:	2400      	movs	r4, #0
 800c07c:	701c      	strb	r4, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 800c07e:	f7ff fed9 	bl	800be34 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 800c082:	4620      	mov	r0, r4
}
 800c084:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800c086:	2008      	movs	r0, #8
}
 800c088:	4770      	bx	lr
 800c08a:	bf00      	nop
 800c08c:	20000e74 	.word	0x20000e74

0800c090 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 800c090:	4b02      	ldr	r3, [pc, #8]	@ (800c09c <LoRaMacCryptoSetLrWanVersion+0xc>)
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 800c096:	2000      	movs	r0, #0
 800c098:	4770      	bx	lr
 800c09a:	bf00      	nop
 800c09c:	20000e74 	.word	0x20000e74

0800c0a0 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 800c0a0:	b130      	cbz	r0, 800c0b0 <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800c0a2:	4b04      	ldr	r3, [pc, #16]	@ (800c0b4 <LoRaMacCryptoGetFCntUp+0x14>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	68db      	ldr	r3, [r3, #12]
 800c0a8:	3301      	adds	r3, #1
 800c0aa:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800c0ac:	2000      	movs	r0, #0
 800c0ae:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c0b0:	2009      	movs	r0, #9
}
 800c0b2:	4770      	bx	lr
 800c0b4:	20000e74 	.word	0x20000e74

0800c0b8 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 800c0b8:	b530      	push	{r4, r5, lr}
 800c0ba:	b083      	sub	sp, #12
    uint32_t lastDown = 0;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	9301      	str	r3, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 800c0c0:	b1f2      	cbz	r2, 800c100 <LoRaMacCryptoGetFCntDown+0x48>
 800c0c2:	460c      	mov	r4, r1
 800c0c4:	4615      	mov	r5, r2
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800c0c6:	a901      	add	r1, sp, #4
 800c0c8:	f7ff fe5a 	bl	800bd80 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800c0cc:	b948      	cbnz	r0, 800c0e2 <LoRaMacCryptoGetFCntDown+0x2a>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 800c0ce:	9b01      	ldr	r3, [sp, #4]
 800c0d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0d4:	d007      	beq.n	800c0e6 <LoRaMacCryptoGetFCntDown+0x2e>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800c0d6:	b29a      	uxth	r2, r3
 800c0d8:	1aa2      	subs	r2, r4, r2

        if( fCntDiff > 0 )
 800c0da:	2a00      	cmp	r2, #0
 800c0dc:	dd05      	ble.n	800c0ea <LoRaMacCryptoGetFCntDown+0x32>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 800c0de:	4413      	add	r3, r2
 800c0e0:	602b      	str	r3, [r5, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800c0e2:	b003      	add	sp, #12
 800c0e4:	bd30      	pop	{r4, r5, pc}
        *currentDown = frameFcnt;
 800c0e6:	602c      	str	r4, [r5, #0]
 800c0e8:	e7fb      	b.n	800c0e2 <LoRaMacCryptoGetFCntDown+0x2a>
        else if( fCntDiff == 0 )
 800c0ea:	b132      	cbz	r2, 800c0fa <LoRaMacCryptoGetFCntDown+0x42>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800c0ec:	f36f 030f 	bfc	r3, #0, #16
 800c0f0:	4423      	add	r3, r4
 800c0f2:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800c0f6:	602b      	str	r3, [r5, #0]
 800c0f8:	e7f3      	b.n	800c0e2 <LoRaMacCryptoGetFCntDown+0x2a>
            *currentDown = lastDown;
 800c0fa:	602b      	str	r3, [r5, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800c0fc:	2007      	movs	r0, #7
 800c0fe:	e7f0      	b.n	800c0e2 <LoRaMacCryptoGetFCntDown+0x2a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c100:	2009      	movs	r0, #9
 800c102:	e7ee      	b.n	800c0e2 <LoRaMacCryptoGetFCntDown+0x2a>

0800c104 <LoRaMacCryptoSetMulticastReference>:
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 800c104:	4601      	mov	r1, r0
 800c106:	b908      	cbnz	r0, 800c10c <LoRaMacCryptoSetMulticastReference+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c108:	2009      	movs	r0, #9
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800c10a:	4770      	bx	lr
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800c10c:	2300      	movs	r3, #0
 800c10e:	2b00      	cmp	r3, #0
 800c110:	dd01      	ble.n	800c116 <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 800c112:	2000      	movs	r0, #0
 800c114:	4770      	bx	lr
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800c116:	4a07      	ldr	r2, [pc, #28]	@ (800c134 <LoRaMacCryptoSetMulticastReference+0x30>)
 800c118:	6812      	ldr	r2, [r2, #0]
 800c11a:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800c11e:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800c122:	f103 0c06 	add.w	ip, r3, #6
 800c126:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800c12a:	3204      	adds	r2, #4
 800c12c:	6242      	str	r2, [r0, #36]	@ 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800c12e:	3301      	adds	r3, #1
 800c130:	e7ed      	b.n	800c10e <LoRaMacCryptoSetMulticastReference+0xa>
 800c132:	bf00      	nop
 800c134:	20000e74 	.word	0x20000e74

0800c138 <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 800c138:	b1d8      	cbz	r0, 800c172 <LoRaMacCryptoPrepareJoinRequest+0x3a>
{
 800c13a:	b510      	push	{r4, lr}
 800c13c:	b082      	sub	sp, #8
 800c13e:	4604      	mov	r4, r0
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 800c140:	4b0f      	ldr	r3, [pc, #60]	@ (800c180 <LoRaMacCryptoPrepareJoinRequest+0x48>)
 800c142:	681a      	ldr	r2, [r3, #0]
 800c144:	8893      	ldrh	r3, [r2, #4]
 800c146:	3301      	adds	r3, #1
 800c148:	b29b      	uxth	r3, r3
 800c14a:	8093      	strh	r3, [r2, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800c14c:	82c3      	strh	r3, [r0, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800c14e:	f000 fa36 	bl	800c5be <LoRaMacSerializerJoinRequest>
 800c152:	b980      	cbnz	r0, 800c176 <LoRaMacCryptoPrepareJoinRequest+0x3e>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800c154:	4623      	mov	r3, r4
 800c156:	f853 1b18 	ldr.w	r1, [r3], #24
 800c15a:	9300      	str	r3, [sp, #0]
 800c15c:	2301      	movs	r3, #1
 800c15e:	2213      	movs	r2, #19
 800c160:	f003 f97a 	bl	800f458 <SecureElementComputeAesCmac>
 800c164:	b950      	cbnz	r0, 800c17c <LoRaMacCryptoPrepareJoinRequest+0x44>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800c166:	4620      	mov	r0, r4
 800c168:	f000 fa29 	bl	800c5be <LoRaMacSerializerJoinRequest>
 800c16c:	b120      	cbz	r0, 800c178 <LoRaMacCryptoPrepareJoinRequest+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800c16e:	2010      	movs	r0, #16
 800c170:	e002      	b.n	800c178 <LoRaMacCryptoPrepareJoinRequest+0x40>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c172:	2009      	movs	r0, #9
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800c174:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800c176:	2010      	movs	r0, #16
}
 800c178:	b002      	add	sp, #8
 800c17a:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c17c:	200e      	movs	r0, #14
 800c17e:	e7fb      	b.n	800c178 <LoRaMacCryptoPrepareJoinRequest+0x40>
 800c180:	20000e74 	.word	0x20000e74

0800c184 <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 800c184:	2b00      	cmp	r3, #0
 800c186:	d036      	beq.n	800c1f6 <LoRaMacCryptoSecureMessage+0x72>
{
 800c188:	b530      	push	{r4, r5, lr}
 800c18a:	b085      	sub	sp, #20
 800c18c:	4604      	mov	r4, r0
 800c18e:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800c190:	4b1d      	ldr	r3, [pc, #116]	@ (800c208 <LoRaMacCryptoSecureMessage+0x84>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	68db      	ldr	r3, [r3, #12]
 800c196:	4283      	cmp	r3, r0
 800c198:	d82f      	bhi.n	800c1fa <LoRaMacCryptoSecureMessage+0x76>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800c19a:	f895 2020 	ldrb.w	r2, [r5, #32]
 800c19e:	b342      	cbz	r2, 800c1f2 <LoRaMacCryptoSecureMessage+0x6e>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 800c1a0:	2209      	movs	r2, #9
#else
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800c1a2:	42a3      	cmp	r3, r4
 800c1a4:	d209      	bcs.n	800c1ba <LoRaMacCryptoSecureMessage+0x36>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800c1a6:	9401      	str	r4, [sp, #4]
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	9300      	str	r3, [sp, #0]
 800c1ac:	68ab      	ldr	r3, [r5, #8]
 800c1ae:	f895 1028 	ldrb.w	r1, [r5, #40]	@ 0x28
 800c1b2:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 800c1b4:	f7ff fec3 	bl	800bf3e <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c1b8:	bb10      	cbnz	r0, 800c200 <LoRaMacCryptoSecureMessage+0x7c>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800c1ba:	4628      	mov	r0, r5
 800c1bc:	f000 fa35 	bl	800c62a <LoRaMacSerializerData>
 800c1c0:	b9e8      	cbnz	r0, 800c1fe <LoRaMacCryptoSecureMessage+0x7a>
#else
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800c1c2:	7929      	ldrb	r1, [r5, #4]
 800c1c4:	3904      	subs	r1, #4
 800c1c6:	462b      	mov	r3, r5
 800c1c8:	f853 0b2c 	ldr.w	r0, [r3], #44
 800c1cc:	9303      	str	r3, [sp, #12]
 800c1ce:	9402      	str	r4, [sp, #8]
 800c1d0:	68ab      	ldr	r3, [r5, #8]
 800c1d2:	9301      	str	r3, [sp, #4]
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	9300      	str	r3, [sp, #0]
 800c1d8:	2208      	movs	r2, #8
 800c1da:	b289      	uxth	r1, r1
 800c1dc:	f7ff fe4c 	bl	800be78 <ComputeCmacB0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c1e0:	b970      	cbnz	r0, 800c200 <LoRaMacCryptoSecureMessage+0x7c>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800c1e2:	4628      	mov	r0, r5
 800c1e4:	f000 fa21 	bl	800c62a <LoRaMacSerializerData>
 800c1e8:	b960      	cbnz	r0, 800c204 <LoRaMacCryptoSecureMessage+0x80>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 800c1ea:	4b07      	ldr	r3, [pc, #28]	@ (800c208 <LoRaMacCryptoSecureMessage+0x84>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	60dc      	str	r4, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 800c1f0:	e006      	b.n	800c200 <LoRaMacCryptoSecureMessage+0x7c>
        payloadDecryptionKeyID = NWK_S_KEY;
 800c1f2:	2208      	movs	r2, #8
 800c1f4:	e7d5      	b.n	800c1a2 <LoRaMacCryptoSecureMessage+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c1f6:	2009      	movs	r0, #9
}
 800c1f8:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800c1fa:	2006      	movs	r0, #6
 800c1fc:	e000      	b.n	800c200 <LoRaMacCryptoSecureMessage+0x7c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800c1fe:	2010      	movs	r0, #16
}
 800c200:	b005      	add	sp, #20
 800c202:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800c204:	2010      	movs	r0, #16
 800c206:	e7fb      	b.n	800c200 <LoRaMacCryptoSecureMessage+0x7c>
 800c208:	20000e74 	.word	0x20000e74

0800c20c <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 800c20c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c210:	b087      	sub	sp, #28
 800c212:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
    if( macMsg == 0 )
 800c214:	2e00      	cmp	r6, #0
 800c216:	d049      	beq.n	800c2ac <LoRaMacCryptoUnsecureMessage+0xa0>
 800c218:	4605      	mov	r5, r0
 800c21a:	4688      	mov	r8, r1
 800c21c:	4617      	mov	r7, r2
 800c21e:	461c      	mov	r4, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 800c220:	4619      	mov	r1, r3
 800c222:	4610      	mov	r0, r2
 800c224:	f7ff fdd2 	bl	800bdcc <CheckFCntDown>
 800c228:	2800      	cmp	r0, #0
 800c22a:	d041      	beq.n	800c2b0 <LoRaMacCryptoUnsecureMessage+0xa4>
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800c22c:	4630      	mov	r0, r6
 800c22e:	f000 f967 	bl	800c500 <LoRaMacParserData>
 800c232:	2800      	cmp	r0, #0
 800c234:	d141      	bne.n	800c2ba <LoRaMacCryptoUnsecureMessage+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 800c236:	a905      	add	r1, sp, #20
 800c238:	4628      	mov	r0, r5
 800c23a:	f7ff fd8b 	bl	800bd54 <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c23e:	4605      	mov	r5, r0
 800c240:	2800      	cmp	r0, #0
 800c242:	d136      	bne.n	800c2b2 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 800c244:	9b05      	ldr	r3, [sp, #20]
 800c246:	f893 9001 	ldrb.w	r9, [r3, #1]
    micComputationKeyID = curItem->NwkSkey;
 800c24a:	789a      	ldrb	r2, [r3, #2]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 800c24c:	68b3      	ldr	r3, [r6, #8]
 800c24e:	4543      	cmp	r3, r8
 800c250:	d135      	bne.n	800c2be <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800c252:	7b33      	ldrb	r3, [r6, #12]
 800c254:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800c258:	491a      	ldr	r1, [pc, #104]	@ (800c2c4 <LoRaMacCryptoUnsecureMessage+0xb8>)
 800c25a:	6809      	ldr	r1, [r1, #0]
 800c25c:	7889      	ldrb	r1, [r1, #2]
 800c25e:	b901      	cbnz	r1, 800c262 <LoRaMacCryptoUnsecureMessage+0x56>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 800c260:	2300      	movs	r3, #0
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800c262:	7931      	ldrb	r1, [r6, #4]
 800c264:	3904      	subs	r1, #4
 800c266:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 800c268:	9003      	str	r0, [sp, #12]
 800c26a:	9402      	str	r4, [sp, #8]
 800c26c:	f8cd 8004 	str.w	r8, [sp, #4]
 800c270:	2001      	movs	r0, #1
 800c272:	9000      	str	r0, [sp, #0]
 800c274:	b289      	uxth	r1, r1
 800c276:	6830      	ldr	r0, [r6, #0]
 800c278:	f7ff febd 	bl	800bff6 <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c27c:	4605      	mov	r5, r0
 800c27e:	b9c0      	cbnz	r0, 800c2b2 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 800c280:	f896 3020 	ldrb.w	r3, [r6, #32]
 800c284:	b90b      	cbnz	r3, 800c28a <LoRaMacCryptoUnsecureMessage+0x7e>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 800c286:	f04f 0908 	mov.w	r9, #8
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800c28a:	9401      	str	r4, [sp, #4]
 800c28c:	2301      	movs	r3, #1
 800c28e:	9300      	str	r3, [sp, #0]
 800c290:	4643      	mov	r3, r8
 800c292:	464a      	mov	r2, r9
 800c294:	f896 1028 	ldrb.w	r1, [r6, #40]	@ 0x28
 800c298:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800c29a:	f7ff fe50 	bl	800bf3e <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c29e:	4605      	mov	r5, r0
 800c2a0:	b938      	cbnz	r0, 800c2b2 <LoRaMacCryptoUnsecureMessage+0xa6>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 800c2a2:	4621      	mov	r1, r4
 800c2a4:	4638      	mov	r0, r7
 800c2a6:	f7ff fda9 	bl	800bdfc <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 800c2aa:	e002      	b.n	800c2b2 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c2ac:	2509      	movs	r5, #9
 800c2ae:	e000      	b.n	800c2b2 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800c2b0:	2506      	movs	r5, #6
}
 800c2b2:	4628      	mov	r0, r5
 800c2b4:	b007      	add	sp, #28
 800c2b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800c2ba:	250f      	movs	r5, #15
 800c2bc:	e7f9      	b.n	800c2b2 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800c2be:	2502      	movs	r5, #2
 800c2c0:	e7f7      	b.n	800c2b2 <LoRaMacCryptoUnsecureMessage+0xa6>
 800c2c2:	bf00      	nop
 800c2c4:	20000e74 	.word	0x20000e74

0800c2c8 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 800c2c8:	b500      	push	{lr}
 800c2ca:	b085      	sub	sp, #20
 800c2cc:	460a      	mov	r2, r1
    uint8_t compBase[16] = { 0 };
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	9300      	str	r3, [sp, #0]
 800c2d2:	9301      	str	r3, [sp, #4]
 800c2d4:	9302      	str	r3, [sp, #8]
 800c2d6:	9303      	str	r3, [sp, #12]
    KeyIdentifier_t rootKeyId = APP_KEY;
    switch( keyID )
 800c2d8:	290b      	cmp	r1, #11
 800c2da:	d005      	beq.n	800c2e8 <LoRaMacCryptoDeriveLifeTimeKey+0x20>
 800c2dc:	290c      	cmp	r1, #12
 800c2de:	d011      	beq.n	800c304 <LoRaMacCryptoDeriveLifeTimeKey+0x3c>
 800c2e0:	290a      	cmp	r1, #10
 800c2e2:	d00a      	beq.n	800c2fa <LoRaMacCryptoDeriveLifeTimeKey+0x32>
 800c2e4:	200a      	movs	r0, #10
 800c2e6:	e012      	b.n	800c30e <LoRaMacCryptoDeriveLifeTimeKey+0x46>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 800c2e8:	2801      	cmp	r0, #1
 800c2ea:	d001      	beq.n	800c2f0 <LoRaMacCryptoDeriveLifeTimeKey+0x28>
    KeyIdentifier_t rootKeyId = APP_KEY;
 800c2ec:	2100      	movs	r1, #0
 800c2ee:	e00a      	b.n	800c306 <LoRaMacCryptoDeriveLifeTimeKey+0x3e>
            {
                compBase[0] = 0x20;
 800c2f0:	2320      	movs	r3, #32
 800c2f2:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = APP_KEY;
 800c2f6:	2100      	movs	r1, #0
 800c2f8:	e005      	b.n	800c306 <LoRaMacCryptoDeriveLifeTimeKey+0x3e>
            break;
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
            break;
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 800c2fa:	2330      	movs	r3, #48	@ 0x30
 800c2fc:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = APP_KEY;
 800c300:	2100      	movs	r1, #0
            break;
 800c302:	e000      	b.n	800c306 <LoRaMacCryptoDeriveLifeTimeKey+0x3e>
    switch( keyID )
 800c304:	210b      	movs	r1, #11
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 800c306:	4668      	mov	r0, sp
 800c308:	f003 f944 	bl	800f594 <SecureElementDeriveAndStoreKey>
 800c30c:	b910      	cbnz	r0, 800c314 <LoRaMacCryptoDeriveLifeTimeKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800c30e:	b005      	add	sp, #20
 800c310:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c314:	200e      	movs	r0, #14
 800c316:	e7fa      	b.n	800c30e <LoRaMacCryptoDeriveLifeTimeKey+0x46>

0800c318 <LoRaMacCryptoSetKey>:
{
 800c318:	b510      	push	{r4, lr}
 800c31a:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800c31c:	f003 f8f8 	bl	800f510 <SecureElementSetKey>
 800c320:	b998      	cbnz	r0, 800c34a <LoRaMacCryptoSetKey+0x32>
    if( keyID == APP_KEY )
 800c322:	b104      	cbz	r4, 800c326 <LoRaMacCryptoSetKey+0xe>
}
 800c324:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800c326:	4b0c      	ldr	r3, [pc, #48]	@ (800c358 <LoRaMacCryptoSetKey+0x40>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	210b      	movs	r1, #11
 800c32c:	7898      	ldrb	r0, [r3, #2]
 800c32e:	f7ff ffcb 	bl	800c2c8 <LoRaMacCryptoDeriveLifeTimeKey>
 800c332:	b960      	cbnz	r0, 800c34e <LoRaMacCryptoSetKey+0x36>
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800c334:	210c      	movs	r1, #12
 800c336:	f7ff ffc7 	bl	800c2c8 <LoRaMacCryptoDeriveLifeTimeKey>
 800c33a:	b950      	cbnz	r0, 800c352 <LoRaMacCryptoSetKey+0x3a>
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800c33c:	210a      	movs	r1, #10
 800c33e:	f7ff ffc3 	bl	800c2c8 <LoRaMacCryptoDeriveLifeTimeKey>
 800c342:	2800      	cmp	r0, #0
 800c344:	d0ee      	beq.n	800c324 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c346:	200e      	movs	r0, #14
 800c348:	e7ec      	b.n	800c324 <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c34a:	200e      	movs	r0, #14
 800c34c:	e7ea      	b.n	800c324 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c34e:	200e      	movs	r0, #14
 800c350:	e7e8      	b.n	800c324 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c352:	200e      	movs	r0, #14
 800c354:	e7e6      	b.n	800c324 <LoRaMacCryptoSetKey+0xc>
 800c356:	bf00      	nop
 800c358:	20000e74 	.word	0x20000e74

0800c35c <LoRaMacCryptoHandleJoinAccept>:
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800c35c:	2a00      	cmp	r2, #0
 800c35e:	d06e      	beq.n	800c43e <LoRaMacCryptoHandleJoinAccept+0xe2>
{
 800c360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c364:	b08e      	sub	sp, #56	@ 0x38
 800c366:	4606      	mov	r6, r0
 800c368:	460d      	mov	r5, r1
 800c36a:	4614      	mov	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800c36c:	2900      	cmp	r1, #0
 800c36e:	d068      	beq.n	800c442 <LoRaMacCryptoHandleJoinAccept+0xe6>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800c370:	f10d 0814 	add.w	r8, sp, #20
 800c374:	2221      	movs	r2, #33	@ 0x21
 800c376:	2100      	movs	r1, #0
 800c378:	4640      	mov	r0, r8
 800c37a:	f005 ff41 	bl	8012200 <memset>
    uint8_t versionMinor         = 0;
 800c37e:	2300      	movs	r3, #0
 800c380:	f88d 3013 	strb.w	r3, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800c384:	4b34      	ldr	r3, [pc, #208]	@ (800c458 <LoRaMacCryptoHandleJoinAccept+0xfc>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	889f      	ldrh	r7, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800c38a:	f10d 0313 	add.w	r3, sp, #19
 800c38e:	9302      	str	r3, [sp, #8]
 800c390:	f8cd 8004 	str.w	r8, [sp, #4]
 800c394:	7923      	ldrb	r3, [r4, #4]
 800c396:	9300      	str	r3, [sp, #0]
 800c398:	6823      	ldr	r3, [r4, #0]
 800c39a:	463a      	mov	r2, r7
 800c39c:	4629      	mov	r1, r5
 800c39e:	4630      	mov	r0, r6
 800c3a0:	f003 f918 	bl	800f5d4 <SecureElementProcessJoinAccept>
 800c3a4:	2800      	cmp	r0, #0
 800c3a6:	d14e      	bne.n	800c446 <LoRaMacCryptoHandleJoinAccept+0xea>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800c3a8:	7922      	ldrb	r2, [r4, #4]
 800c3aa:	4641      	mov	r1, r8
 800c3ac:	6820      	ldr	r0, [r4, #0]
 800c3ae:	f003 fa98 	bl	800f8e2 <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800c3b2:	4620      	mov	r0, r4
 800c3b4:	f000 f852 	bl	800c45c <LoRaMacParserJoinAccept>
 800c3b8:	2800      	cmp	r0, #0
 800c3ba:	d148      	bne.n	800c44e <LoRaMacCryptoHandleJoinAccept+0xf2>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800c3bc:	79a5      	ldrb	r5, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800c3be:	79e3      	ldrb	r3, [r4, #7]
 800c3c0:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800c3c4:	7a23      	ldrb	r3, [r4, #8]
 800c3c6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 800c3ca:	4628      	mov	r0, r5
 800c3cc:	f7ff fd4a 	bl	800be64 <IsJoinNonce10xOk>
    if( isJoinNonceOk == true )
 800c3d0:	2800      	cmp	r0, #0
 800c3d2:	d03e      	beq.n	800c452 <LoRaMacCryptoHandleJoinAccept+0xf6>
        CryptoNvm->JoinNonce = currentJoinNonce;
 800c3d4:	4b20      	ldr	r3, [pc, #128]	@ (800c458 <LoRaMacCryptoHandleJoinAccept+0xfc>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 800c3da:	210b      	movs	r1, #11
 800c3dc:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800c3e0:	f7ff ff72 	bl	800c2c8 <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c3e4:	bb80      	cbnz	r0, 800c448 <LoRaMacCryptoHandleJoinAccept+0xec>
    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 800c3e6:	210c      	movs	r1, #12
 800c3e8:	2000      	movs	r0, #0
 800c3ea:	f7ff ff6d 	bl	800c2c8 <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c3ee:	bb58      	cbnz	r0, 800c448 <LoRaMacCryptoHandleJoinAccept+0xec>
    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 800c3f0:	210a      	movs	r1, #10
 800c3f2:	2000      	movs	r0, #0
 800c3f4:	f7ff ff68 	bl	800c2c8 <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c3f8:	bb30      	cbnz	r0, 800c448 <LoRaMacCryptoHandleJoinAccept+0xec>
        netID = ( uint32_t )macMsg->NetID[0];
 800c3fa:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800c3fc:	7aa2      	ldrb	r2, [r4, #10]
 800c3fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800c402:	7ae2      	ldrb	r2, [r4, #11]
 800c404:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800c408:	463b      	mov	r3, r7
 800c40a:	4622      	mov	r2, r4
 800c40c:	4629      	mov	r1, r5
 800c40e:	2009      	movs	r0, #9
 800c410:	f7ff fd5e 	bl	800bed0 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c414:	b9c0      	cbnz	r0, 800c448 <LoRaMacCryptoHandleJoinAccept+0xec>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 800c416:	463b      	mov	r3, r7
 800c418:	4622      	mov	r2, r4
 800c41a:	4629      	mov	r1, r5
 800c41c:	2008      	movs	r0, #8
 800c41e:	f7ff fd57 	bl	800bed0 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c422:	b988      	cbnz	r0, 800c448 <LoRaMacCryptoHandleJoinAccept+0xec>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800c424:	4b0c      	ldr	r3, [pc, #48]	@ (800c458 <LoRaMacCryptoHandleJoinAccept+0xfc>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800c42c:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntUp = 0;
 800c42e:	2200      	movs	r2, #0
 800c430:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 800c432:	f04f 32ff 	mov.w	r2, #4294967295
 800c436:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800c438:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800c43a:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 800c43c:	e004      	b.n	800c448 <LoRaMacCryptoHandleJoinAccept+0xec>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c43e:	2009      	movs	r0, #9
}
 800c440:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c442:	2009      	movs	r0, #9
 800c444:	e000      	b.n	800c448 <LoRaMacCryptoHandleJoinAccept+0xec>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c446:	200e      	movs	r0, #14
}
 800c448:	b00e      	add	sp, #56	@ 0x38
 800c44a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800c44e:	200f      	movs	r0, #15
 800c450:	e7fa      	b.n	800c448 <LoRaMacCryptoHandleJoinAccept+0xec>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800c452:	2003      	movs	r0, #3
 800c454:	e7f8      	b.n	800c448 <LoRaMacCryptoHandleJoinAccept+0xec>
 800c456:	bf00      	nop
 800c458:	20000e74 	.word	0x20000e74

0800c45c <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c45c:	2800      	cmp	r0, #0
 800c45e:	d049      	beq.n	800c4f4 <LoRaMacParserJoinAccept+0x98>
{
 800c460:	b510      	push	{r4, lr}
 800c462:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c464:	6801      	ldr	r1, [r0, #0]
 800c466:	2900      	cmp	r1, #0
 800c468:	d046      	beq.n	800c4f8 <LoRaMacParserJoinAccept+0x9c>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800c46a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c46e:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800c470:	2203      	movs	r2, #3
 800c472:	3006      	adds	r0, #6
 800c474:	f003 fa35 	bl	800f8e2 <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800c478:	4620      	mov	r0, r4
 800c47a:	f850 1b09 	ldr.w	r1, [r0], #9
 800c47e:	2203      	movs	r2, #3
 800c480:	3104      	adds	r1, #4
 800c482:	f003 fa2e 	bl	800f8e2 <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800c486:	6821      	ldr	r1, [r4, #0]
 800c488:	79cb      	ldrb	r3, [r1, #7]
 800c48a:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800c48c:	7a0a      	ldrb	r2, [r1, #8]
 800c48e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c492:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800c494:	7a4a      	ldrb	r2, [r1, #9]
 800c496:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c49a:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800c49c:	7a8a      	ldrb	r2, [r1, #10]
 800c49e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c4a2:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800c4a4:	7acb      	ldrb	r3, [r1, #11]
 800c4a6:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800c4a8:	7b0b      	ldrb	r3, [r1, #12]
 800c4aa:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800c4ac:	7923      	ldrb	r3, [r4, #4]
 800c4ae:	2b21      	cmp	r3, #33	@ 0x21
 800c4b0:	d018      	beq.n	800c4e4 <LoRaMacParserJoinAccept+0x88>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800c4b2:	2b11      	cmp	r3, #17
 800c4b4:	dc22      	bgt.n	800c4fc <LoRaMacParserJoinAccept+0xa0>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800c4b6:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800c4b8:	6821      	ldr	r1, [r4, #0]
 800c4ba:	f102 0c01 	add.w	ip, r2, #1
 800c4be:	5c8b      	ldrb	r3, [r1, r2]
 800c4c0:	6263      	str	r3, [r4, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800c4c2:	1c90      	adds	r0, r2, #2
 800c4c4:	f811 c00c 	ldrb.w	ip, [r1, ip]
 800c4c8:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800c4cc:	6263      	str	r3, [r4, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800c4ce:	3203      	adds	r2, #3
 800c4d0:	5c08      	ldrb	r0, [r1, r0]
 800c4d2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c4d6:	6263      	str	r3, [r4, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800c4d8:	5c8a      	ldrb	r2, [r1, r2]
 800c4da:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c4de:	6263      	str	r3, [r4, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 800c4e0:	2000      	movs	r0, #0
}
 800c4e2:	bd10      	pop	{r4, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800c4e4:	2210      	movs	r2, #16
 800c4e6:	310d      	adds	r1, #13
 800c4e8:	f104 0012 	add.w	r0, r4, #18
 800c4ec:	f003 f9f9 	bl	800f8e2 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800c4f0:	221d      	movs	r2, #29
 800c4f2:	e7e1      	b.n	800c4b8 <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 800c4f4:	2002      	movs	r0, #2
}
 800c4f6:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800c4f8:	2002      	movs	r0, #2
 800c4fa:	e7f2      	b.n	800c4e2 <LoRaMacParserJoinAccept+0x86>
        return LORAMAC_PARSER_FAIL;
 800c4fc:	2001      	movs	r0, #1
 800c4fe:	e7f0      	b.n	800c4e2 <LoRaMacParserJoinAccept+0x86>

0800c500 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c500:	2800      	cmp	r0, #0
 800c502:	d058      	beq.n	800c5b6 <LoRaMacParserData+0xb6>
{
 800c504:	b510      	push	{r4, lr}
 800c506:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c508:	6801      	ldr	r1, [r0, #0]
 800c50a:	2900      	cmp	r1, #0
 800c50c:	d055      	beq.n	800c5ba <LoRaMacParserData+0xba>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800c50e:	780b      	ldrb	r3, [r1, #0]
 800c510:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800c512:	784b      	ldrb	r3, [r1, #1]
 800c514:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800c516:	788a      	ldrb	r2, [r1, #2]
 800c518:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c51c:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800c51e:	78ca      	ldrb	r2, [r1, #3]
 800c520:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c524:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800c526:	790a      	ldrb	r2, [r1, #4]
 800c528:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c52c:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800c52e:	794b      	ldrb	r3, [r1, #5]
 800c530:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800c532:	798b      	ldrb	r3, [r1, #6]
 800c534:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800c536:	79ca      	ldrb	r2, [r1, #7]
 800c538:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c53c:	81c3      	strh	r3, [r0, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c53e:	7b02      	ldrb	r2, [r0, #12]
 800c540:	f002 020f 	and.w	r2, r2, #15
 800c544:	3108      	adds	r1, #8
 800c546:	3010      	adds	r0, #16
 800c548:	f003 f9cb 	bl	800f8e2 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c54c:	7b23      	ldrb	r3, [r4, #12]
 800c54e:	f003 030f 	and.w	r3, r3, #15
 800c552:	f103 0008 	add.w	r0, r3, #8

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800c556:	2200      	movs	r2, #0
 800c558:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 800c55c:	f884 2028 	strb.w	r2, [r4, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800c560:	7922      	ldrb	r2, [r4, #4]
 800c562:	1a11      	subs	r1, r2, r0
 800c564:	2904      	cmp	r1, #4
 800c566:	dc16      	bgt.n	800c596 <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800c568:	6822      	ldr	r2, [r4, #0]
 800c56a:	7923      	ldrb	r3, [r4, #4]
 800c56c:	441a      	add	r2, r3
 800c56e:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800c572:	62e3      	str	r3, [r4, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800c574:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800c578:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c57c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800c57e:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800c582:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c586:	62e3      	str	r3, [r4, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800c588:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800c58c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c590:	62e3      	str	r3, [r4, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 800c592:	2000      	movs	r0, #0
}
 800c594:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800c596:	6821      	ldr	r1, [r4, #0]
 800c598:	3309      	adds	r3, #9
 800c59a:	5c08      	ldrb	r0, [r1, r0]
 800c59c:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800c5a0:	1ad2      	subs	r2, r2, r3
 800c5a2:	b2d2      	uxtb	r2, r2
 800c5a4:	3a04      	subs	r2, #4
 800c5a6:	b2d2      	uxtb	r2, r2
 800c5a8:	f884 2028 	strb.w	r2, [r4, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800c5ac:	4419      	add	r1, r3
 800c5ae:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800c5b0:	f003 f997 	bl	800f8e2 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 800c5b4:	e7d8      	b.n	800c568 <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 800c5b6:	2002      	movs	r0, #2
}
 800c5b8:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800c5ba:	2002      	movs	r0, #2
 800c5bc:	e7ea      	b.n	800c594 <LoRaMacParserData+0x94>

0800c5be <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c5be:	b370      	cbz	r0, 800c61e <LoRaMacSerializerJoinRequest+0x60>
{
 800c5c0:	b510      	push	{r4, lr}
 800c5c2:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c5c4:	6803      	ldr	r3, [r0, #0]
 800c5c6:	b363      	cbz	r3, 800c622 <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800c5c8:	7902      	ldrb	r2, [r0, #4]
 800c5ca:	2a16      	cmp	r2, #22
 800c5cc:	d92b      	bls.n	800c626 <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800c5ce:	7942      	ldrb	r2, [r0, #5]
 800c5d0:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800c5d2:	4601      	mov	r1, r0
 800c5d4:	f851 0b06 	ldr.w	r0, [r1], #6
 800c5d8:	2208      	movs	r2, #8
 800c5da:	3001      	adds	r0, #1
 800c5dc:	f003 f98c 	bl	800f8f8 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800c5e0:	4621      	mov	r1, r4
 800c5e2:	f851 0b0e 	ldr.w	r0, [r1], #14
 800c5e6:	2208      	movs	r2, #8
 800c5e8:	3009      	adds	r0, #9
 800c5ea:	f003 f985 	bl	800f8f8 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800c5ee:	8ae2      	ldrh	r2, [r4, #22]
 800c5f0:	6823      	ldr	r3, [r4, #0]
 800c5f2:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800c5f4:	8ae3      	ldrh	r3, [r4, #22]
 800c5f6:	6822      	ldr	r2, [r4, #0]
 800c5f8:	0a1b      	lsrs	r3, r3, #8
 800c5fa:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800c5fc:	69a2      	ldr	r2, [r4, #24]
 800c5fe:	6823      	ldr	r3, [r4, #0]
 800c600:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800c602:	69a3      	ldr	r3, [r4, #24]
 800c604:	0a1b      	lsrs	r3, r3, #8
 800c606:	6822      	ldr	r2, [r4, #0]
 800c608:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800c60a:	8b62      	ldrh	r2, [r4, #26]
 800c60c:	6823      	ldr	r3, [r4, #0]
 800c60e:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800c610:	7ee2      	ldrb	r2, [r4, #27]
 800c612:	6823      	ldr	r3, [r4, #0]
 800c614:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 800c616:	2317      	movs	r3, #23
 800c618:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800c61a:	2000      	movs	r0, #0
}
 800c61c:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c61e:	2001      	movs	r0, #1
}
 800c620:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c622:	2001      	movs	r0, #1
 800c624:	e7fa      	b.n	800c61c <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800c626:	2002      	movs	r0, #2
 800c628:	e7f8      	b.n	800c61c <LoRaMacSerializerJoinRequest+0x5e>

0800c62a <LoRaMacSerializerData>:
    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c62a:	2800      	cmp	r0, #0
 800c62c:	d066      	beq.n	800c6fc <LoRaMacSerializerData+0xd2>
{
 800c62e:	b538      	push	{r3, r4, r5, lr}
 800c630:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c632:	6801      	ldr	r1, [r0, #0]
 800c634:	2900      	cmp	r1, #0
 800c636:	d063      	beq.n	800c700 <LoRaMacSerializerData+0xd6>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c638:	7b02      	ldrb	r2, [r0, #12]
 800c63a:	f002 020f 	and.w	r2, r2, #15
 800c63e:	f102 0008 	add.w	r0, r2, #8

    if( macMsg->FRMPayloadSize > 0 )
 800c642:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800c646:	b10b      	cbz	r3, 800c64c <LoRaMacSerializerData+0x22>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 800c648:	f102 0009 	add.w	r0, r2, #9
    }

    computedBufSize += macMsg->FRMPayloadSize;
 800c64c:	4403      	add	r3, r0
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800c64e:	3304      	adds	r3, #4
 800c650:	b29b      	uxth	r3, r3

    if( macMsg->BufSize < computedBufSize )
 800c652:	7922      	ldrb	r2, [r4, #4]
 800c654:	429a      	cmp	r2, r3
 800c656:	d355      	bcc.n	800c704 <LoRaMacSerializerData+0xda>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800c658:	7963      	ldrb	r3, [r4, #5]
 800c65a:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800c65c:	68a2      	ldr	r2, [r4, #8]
 800c65e:	6823      	ldr	r3, [r4, #0]
 800c660:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800c662:	68a3      	ldr	r3, [r4, #8]
 800c664:	0a1b      	lsrs	r3, r3, #8
 800c666:	6822      	ldr	r2, [r4, #0]
 800c668:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800c66a:	8962      	ldrh	r2, [r4, #10]
 800c66c:	6823      	ldr	r3, [r4, #0]
 800c66e:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800c670:	7ae2      	ldrb	r2, [r4, #11]
 800c672:	6823      	ldr	r3, [r4, #0]
 800c674:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800c676:	6823      	ldr	r3, [r4, #0]
 800c678:	7b22      	ldrb	r2, [r4, #12]
 800c67a:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800c67c:	89e2      	ldrh	r2, [r4, #14]
 800c67e:	6823      	ldr	r3, [r4, #0]
 800c680:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800c682:	89e3      	ldrh	r3, [r4, #14]
 800c684:	6822      	ldr	r2, [r4, #0]
 800c686:	0a1b      	lsrs	r3, r3, #8
 800c688:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c68a:	4621      	mov	r1, r4
 800c68c:	f851 0b10 	ldr.w	r0, [r1], #16
 800c690:	7b22      	ldrb	r2, [r4, #12]
 800c692:	f002 020f 	and.w	r2, r2, #15
 800c696:	3008      	adds	r0, #8
 800c698:	f003 f923 	bl	800f8e2 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c69c:	7b23      	ldrb	r3, [r4, #12]
 800c69e:	f003 030f 	and.w	r3, r3, #15
 800c6a2:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 800c6a6:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 800c6aa:	b12a      	cbz	r2, 800c6b8 <LoRaMacSerializerData+0x8e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800c6ac:	6822      	ldr	r2, [r4, #0]
 800c6ae:	f894 1020 	ldrb.w	r1, [r4, #32]
 800c6b2:	5551      	strb	r1, [r2, r5]
 800c6b4:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800c6b8:	6820      	ldr	r0, [r4, #0]
 800c6ba:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 800c6be:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800c6c0:	4428      	add	r0, r5
 800c6c2:	f003 f90e 	bl	800f8e2 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800c6c6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800c6ca:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800c6cc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800c6ce:	6821      	ldr	r1, [r4, #0]
 800c6d0:	1c5a      	adds	r2, r3, #1
 800c6d2:	b292      	uxth	r2, r2
 800c6d4:	54c8      	strb	r0, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800c6d6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c6d8:	0a08      	lsrs	r0, r1, #8
 800c6da:	6825      	ldr	r5, [r4, #0]
 800c6dc:	1c99      	adds	r1, r3, #2
 800c6de:	b289      	uxth	r1, r1
 800c6e0:	54a8      	strb	r0, [r5, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800c6e2:	8de5      	ldrh	r5, [r4, #46]	@ 0x2e
 800c6e4:	6820      	ldr	r0, [r4, #0]
 800c6e6:	1cda      	adds	r2, r3, #3
 800c6e8:	b292      	uxth	r2, r2
 800c6ea:	5445      	strb	r5, [r0, r1]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800c6ec:	f894 002f 	ldrb.w	r0, [r4, #47]	@ 0x2f
 800c6f0:	6821      	ldr	r1, [r4, #0]
 800c6f2:	3304      	adds	r3, #4
 800c6f4:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 800c6f6:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800c6f8:	2000      	movs	r0, #0
}
 800c6fa:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c6fc:	2001      	movs	r0, #1
}
 800c6fe:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c700:	2001      	movs	r0, #1
 800c702:	e7fa      	b.n	800c6fa <LoRaMacSerializerData+0xd0>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800c704:	2002      	movs	r0, #2
 800c706:	e7f8      	b.n	800c6fa <LoRaMacSerializerData+0xd0>

0800c708 <NvmDataMgmtEvent>:
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800c708:	4b02      	ldr	r3, [pc, #8]	@ (800c714 <NvmDataMgmtEvent+0xc>)
 800c70a:	881a      	ldrh	r2, [r3, #0]
 800c70c:	4310      	orrs	r0, r2
 800c70e:	8018      	strh	r0, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800c710:	4770      	bx	lr
 800c712:	bf00      	nop
 800c714:	20000e78 	.word	0x20000e78

0800c718 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800c718:	b508      	push	{r3, lr}
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800c71a:	4b06      	ldr	r3, [pc, #24]	@ (800c734 <NvmDataMgmtStoreBegin+0x1c>)
 800c71c:	881b      	ldrh	r3, [r3, #0]
 800c71e:	b11b      	cbz	r3, 800c728 <NvmDataMgmtStoreBegin+0x10>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800c720:	f7fe f874 	bl	800a80c <LoRaMacStop>
 800c724:	b918      	cbnz	r0, 800c72e <NvmDataMgmtStoreBegin+0x16>
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800c726:	bd08      	pop	{r3, pc}
        return NVM_DATA_NO_UPDATED_DATA;
 800c728:	f06f 0001 	mvn.w	r0, #1
 800c72c:	e7fb      	b.n	800c726 <NvmDataMgmtStoreBegin+0xe>
        return NVM_DATA_NOT_AVAILABLE;
 800c72e:	f06f 0002 	mvn.w	r0, #2
 800c732:	e7f8      	b.n	800c726 <NvmDataMgmtStoreBegin+0xe>
 800c734:	20000e78 	.word	0x20000e78

0800c738 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800c738:	b510      	push	{r4, lr}
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800c73a:	2400      	movs	r4, #0
 800c73c:	4b02      	ldr	r3, [pc, #8]	@ (800c748 <NvmDataMgmtStoreEnd+0x10>)
 800c73e:	801c      	strh	r4, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 800c740:	f7fe f858 	bl	800a7f4 <LoRaMacStart>
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800c744:	4620      	mov	r0, r4
 800c746:	bd10      	pop	{r4, pc}
 800c748:	20000e78 	.word	0x20000e78

0800c74c <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800c74c:	2805      	cmp	r0, #5
 800c74e:	d005      	beq.n	800c75c <RegionIsActive+0x10>
 800c750:	2808      	cmp	r0, #8
 800c752:	d001      	beq.n	800c758 <RegionIsActive+0xc>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 800c754:	2000      	movs	r0, #0
        }
    }
}
 800c756:	4770      	bx	lr
    switch( region )
 800c758:	2001      	movs	r0, #1
 800c75a:	4770      	bx	lr
 800c75c:	2001      	movs	r0, #1
 800c75e:	4770      	bx	lr

0800c760 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800c760:	b500      	push	{lr}
 800c762:	b083      	sub	sp, #12
 800c764:	4603      	mov	r3, r0
 800c766:	4608      	mov	r0, r1
    PhyParam_t phyParam = { 0 };
 800c768:	2200      	movs	r2, #0
 800c76a:	9200      	str	r2, [sp, #0]
    switch( region )
 800c76c:	2b05      	cmp	r3, #5
 800c76e:	d004      	beq.n	800c77a <RegionGetPhyParam+0x1a>
 800c770:	2b08      	cmp	r3, #8
 800c772:	d009      	beq.n	800c788 <RegionGetPhyParam+0x28>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 800c774:	9b00      	ldr	r3, [sp, #0]
 800c776:	9301      	str	r3, [sp, #4]
 800c778:	e002      	b.n	800c780 <RegionGetPhyParam+0x20>
        EU868_GET_PHY_PARAM( );
 800c77a:	f000 fded 	bl	800d358 <RegionEU868GetPhyParam>
 800c77e:	9001      	str	r0, [sp, #4]
        }
    }
}
 800c780:	9801      	ldr	r0, [sp, #4]
 800c782:	b003      	add	sp, #12
 800c784:	f85d fb04 	ldr.w	pc, [sp], #4
        US915_GET_PHY_PARAM( );
 800c788:	f001 fbda 	bl	800df40 <RegionUS915GetPhyParam>
 800c78c:	9001      	str	r0, [sp, #4]
 800c78e:	e7f7      	b.n	800c780 <RegionGetPhyParam+0x20>

0800c790 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800c790:	b508      	push	{r3, lr}
 800c792:	4603      	mov	r3, r0
 800c794:	4608      	mov	r0, r1
    switch( region )
 800c796:	2b05      	cmp	r3, #5
 800c798:	d004      	beq.n	800c7a4 <RegionSetBandTxDone+0x14>
 800c79a:	2b08      	cmp	r3, #8
 800c79c:	d104      	bne.n	800c7a8 <RegionSetBandTxDone+0x18>
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
        KR920_SET_BAND_TX_DONE( );
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
 800c79e:	f001 fca5 	bl	800e0ec <RegionUS915SetBandTxDone>
 800c7a2:	e001      	b.n	800c7a8 <RegionSetBandTxDone+0x18>
        EU868_SET_BAND_TX_DONE( );
 800c7a4:	f000 fe94 	bl	800d4d0 <RegionEU868SetBandTxDone>
        default:
        {
            return;
        }
    }
}
 800c7a8:	bd08      	pop	{r3, pc}

0800c7aa <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800c7aa:	b508      	push	{r3, lr}
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	4608      	mov	r0, r1
    switch( region )
 800c7b0:	2b05      	cmp	r3, #5
 800c7b2:	d004      	beq.n	800c7be <RegionInitDefaults+0x14>
 800c7b4:	2b08      	cmp	r3, #8
 800c7b6:	d104      	bne.n	800c7c2 <RegionInitDefaults+0x18>
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
        KR920_INIT_DEFAULTS( );
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
 800c7b8:	f001 fcb6 	bl	800e128 <RegionUS915InitDefaults>
        default:
        {
            break;
        }
    }
}
 800c7bc:	e001      	b.n	800c7c2 <RegionInitDefaults+0x18>
        EU868_INIT_DEFAULTS( );
 800c7be:	f000 fea5 	bl	800d50c <RegionEU868InitDefaults>
}
 800c7c2:	bd08      	pop	{r3, pc}

0800c7c4 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800c7c4:	b508      	push	{r3, lr}
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	4608      	mov	r0, r1
 800c7ca:	4611      	mov	r1, r2
    switch( region )
 800c7cc:	2b05      	cmp	r3, #5
 800c7ce:	d003      	beq.n	800c7d8 <RegionVerify+0x14>
 800c7d0:	2b08      	cmp	r3, #8
 800c7d2:	d004      	beq.n	800c7de <RegionVerify+0x1a>
 800c7d4:	2000      	movs	r0, #0
 800c7d6:	e001      	b.n	800c7dc <RegionVerify+0x18>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 800c7d8:	f000 ff04 	bl	800d5e4 <RegionEU868Verify>
        default:
        {
            return false;
        }
    }
}
 800c7dc:	bd08      	pop	{r3, pc}
        US915_VERIFY( );
 800c7de:	f001 fd47 	bl	800e270 <RegionUS915Verify>
 800c7e2:	e7fb      	b.n	800c7dc <RegionVerify+0x18>

0800c7e4 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 800c7e4:	b508      	push	{r3, lr}
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	4608      	mov	r0, r1
    switch( region )
 800c7ea:	2b05      	cmp	r3, #5
 800c7ec:	d004      	beq.n	800c7f8 <RegionApplyCFList+0x14>
 800c7ee:	2b08      	cmp	r3, #8
 800c7f0:	d104      	bne.n	800c7fc <RegionApplyCFList+0x18>
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
        KR920_APPLY_CF_LIST( );
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
 800c7f2:	f001 fd77 	bl	800e2e4 <RegionUS915ApplyCFList>
        default:
        {
            break;
        }
    }
}
 800c7f6:	e001      	b.n	800c7fc <RegionApplyCFList+0x18>
        EU868_APPLY_CF_LIST( );
 800c7f8:	f001 fac4 	bl	800dd84 <RegionEU868ApplyCFList>
}
 800c7fc:	bd08      	pop	{r3, pc}

0800c7fe <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 800c7fe:	b508      	push	{r3, lr}
 800c800:	4603      	mov	r3, r0
 800c802:	4608      	mov	r0, r1
    switch( region )
 800c804:	2b05      	cmp	r3, #5
 800c806:	d003      	beq.n	800c810 <RegionChanMaskSet+0x12>
 800c808:	2b08      	cmp	r3, #8
 800c80a:	d004      	beq.n	800c816 <RegionChanMaskSet+0x18>
 800c80c:	2000      	movs	r0, #0
 800c80e:	e001      	b.n	800c814 <RegionChanMaskSet+0x16>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 800c810:	f000 ff2e 	bl	800d670 <RegionEU868ChanMaskSet>
        default:
        {
            return false;
        }
    }
}
 800c814:	bd08      	pop	{r3, pc}
        US915_CHAN_MASK_SET( );
 800c816:	f001 fda3 	bl	800e360 <RegionUS915ChanMaskSet>
 800c81a:	e7fb      	b.n	800c814 <RegionChanMaskSet+0x16>

0800c81c <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800c81c:	b508      	push	{r3, lr}
 800c81e:	4684      	mov	ip, r0
 800c820:	4608      	mov	r0, r1
 800c822:	4611      	mov	r1, r2
 800c824:	461a      	mov	r2, r3
    switch( region )
 800c826:	f1bc 0f05 	cmp.w	ip, #5
 800c82a:	d006      	beq.n	800c83a <RegionComputeRxWindowParameters+0x1e>
 800c82c:	f1bc 0f08 	cmp.w	ip, #8
 800c830:	d106      	bne.n	800c840 <RegionComputeRxWindowParameters+0x24>
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
        KR920_COMPUTE_RX_WINDOW_PARAMETERS( );
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 800c832:	9b02      	ldr	r3, [sp, #8]
 800c834:	f001 fdd6 	bl	800e3e4 <RegionUS915ComputeRxWindowParameters>
        default:
        {
            break;
        }
    }
}
 800c838:	e002      	b.n	800c840 <RegionComputeRxWindowParameters+0x24>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 800c83a:	9b02      	ldr	r3, [sp, #8]
 800c83c:	f000 ff36 	bl	800d6ac <RegionEU868ComputeRxWindowParameters>
}
 800c840:	bd08      	pop	{r3, pc}

0800c842 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800c842:	b508      	push	{r3, lr}
 800c844:	4603      	mov	r3, r0
 800c846:	4608      	mov	r0, r1
 800c848:	4611      	mov	r1, r2
    switch( region )
 800c84a:	2b05      	cmp	r3, #5
 800c84c:	d003      	beq.n	800c856 <RegionRxConfig+0x14>
 800c84e:	2b08      	cmp	r3, #8
 800c850:	d004      	beq.n	800c85c <RegionRxConfig+0x1a>
 800c852:	2000      	movs	r0, #0
 800c854:	e001      	b.n	800c85a <RegionRxConfig+0x18>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 800c856:	f000 ff5f 	bl	800d718 <RegionEU868RxConfig>
        default:
        {
            return false;
        }
    }
}
 800c85a:	bd08      	pop	{r3, pc}
        US915_RX_CONFIG( );
 800c85c:	f001 fdf0 	bl	800e440 <RegionUS915RxConfig>
 800c860:	e7fb      	b.n	800c85a <RegionRxConfig+0x18>

0800c862 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800c862:	b508      	push	{r3, lr}
 800c864:	4684      	mov	ip, r0
 800c866:	4608      	mov	r0, r1
 800c868:	4611      	mov	r1, r2
 800c86a:	461a      	mov	r2, r3
    switch( region )
 800c86c:	f1bc 0f05 	cmp.w	ip, #5
 800c870:	d004      	beq.n	800c87c <RegionTxConfig+0x1a>
 800c872:	f1bc 0f08 	cmp.w	ip, #8
 800c876:	d004      	beq.n	800c882 <RegionTxConfig+0x20>
 800c878:	2000      	movs	r0, #0
 800c87a:	e001      	b.n	800c880 <RegionTxConfig+0x1e>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 800c87c:	f000 ffd0 	bl	800d820 <RegionEU868TxConfig>
        default:
        {
            return false;
        }
    }
}
 800c880:	bd08      	pop	{r3, pc}
        US915_TX_CONFIG( );
 800c882:	f001 fe37 	bl	800e4f4 <RegionUS915TxConfig>
 800c886:	e7fb      	b.n	800c880 <RegionTxConfig+0x1e>

0800c888 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800c888:	b500      	push	{lr}
 800c88a:	b083      	sub	sp, #12
 800c88c:	4684      	mov	ip, r0
 800c88e:	4608      	mov	r0, r1
 800c890:	4611      	mov	r1, r2
 800c892:	461a      	mov	r2, r3
    switch( region )
 800c894:	f1bc 0f05 	cmp.w	ip, #5
 800c898:	d004      	beq.n	800c8a4 <RegionLinkAdrReq+0x1c>
 800c89a:	f1bc 0f08 	cmp.w	ip, #8
 800c89e:	d009      	beq.n	800c8b4 <RegionLinkAdrReq+0x2c>
 800c8a0:	2000      	movs	r0, #0
 800c8a2:	e004      	b.n	800c8ae <RegionLinkAdrReq+0x26>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 800c8a4:	9b05      	ldr	r3, [sp, #20]
 800c8a6:	9300      	str	r3, [sp, #0]
 800c8a8:	9b04      	ldr	r3, [sp, #16]
 800c8aa:	f001 f851 	bl	800d950 <RegionEU868LinkAdrReq>
        default:
        {
            return 0;
        }
    }
}
 800c8ae:	b003      	add	sp, #12
 800c8b0:	f85d fb04 	ldr.w	pc, [sp], #4
        US915_LINK_ADR_REQ( );
 800c8b4:	9b05      	ldr	r3, [sp, #20]
 800c8b6:	9300      	str	r3, [sp, #0]
 800c8b8:	9b04      	ldr	r3, [sp, #16]
 800c8ba:	f001 fe95 	bl	800e5e8 <RegionUS915LinkAdrReq>
 800c8be:	e7f6      	b.n	800c8ae <RegionLinkAdrReq+0x26>

0800c8c0 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 800c8c0:	b508      	push	{r3, lr}
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	4608      	mov	r0, r1
    switch( region )
 800c8c6:	2b05      	cmp	r3, #5
 800c8c8:	d003      	beq.n	800c8d2 <RegionRxParamSetupReq+0x12>
 800c8ca:	2b08      	cmp	r3, #8
 800c8cc:	d004      	beq.n	800c8d8 <RegionRxParamSetupReq+0x18>
 800c8ce:	2000      	movs	r0, #0
 800c8d0:	e001      	b.n	800c8d6 <RegionRxParamSetupReq+0x16>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 800c8d2:	f001 f903 	bl	800dadc <RegionEU868RxParamSetupReq>
        default:
        {
            return 0;
        }
    }
}
 800c8d6:	bd08      	pop	{r3, pc}
        US915_RX_PARAM_SETUP_REQ( );
 800c8d8:	f001 ffca 	bl	800e870 <RegionUS915RxParamSetupReq>
 800c8dc:	e7fb      	b.n	800c8d6 <RegionRxParamSetupReq+0x16>

0800c8de <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 800c8de:	b508      	push	{r3, lr}
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	4608      	mov	r0, r1
    switch( region )
 800c8e4:	2b05      	cmp	r3, #5
 800c8e6:	d003      	beq.n	800c8f0 <RegionNewChannelReq+0x12>
 800c8e8:	2b08      	cmp	r3, #8
 800c8ea:	d004      	beq.n	800c8f6 <RegionNewChannelReq+0x18>
 800c8ec:	2000      	movs	r0, #0
 800c8ee:	e001      	b.n	800c8f4 <RegionNewChannelReq+0x16>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 800c8f0:	f001 fa89 	bl	800de06 <RegionEU868NewChannelReq>
        default:
        {
            return 0;
        }
    }
}
 800c8f4:	bd08      	pop	{r3, pc}
        US915_NEW_CHANNEL_REQ( );
 800c8f6:	f001 ffe6 	bl	800e8c6 <RegionUS915NewChannelReq>
 800c8fa:	e7fb      	b.n	800c8f4 <RegionNewChannelReq+0x16>

0800c8fc <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 800c8fc:	b508      	push	{r3, lr}
 800c8fe:	4603      	mov	r3, r0
 800c900:	4608      	mov	r0, r1
    switch( region )
 800c902:	2b05      	cmp	r3, #5
 800c904:	d003      	beq.n	800c90e <RegionTxParamSetupReq+0x12>
 800c906:	2b08      	cmp	r3, #8
 800c908:	d004      	beq.n	800c914 <RegionTxParamSetupReq+0x18>
 800c90a:	2000      	movs	r0, #0
 800c90c:	e001      	b.n	800c912 <RegionTxParamSetupReq+0x16>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 800c90e:	f001 f909 	bl	800db24 <RegionEU868TxParamSetupReq>
        default:
        {
            return 0;
        }
    }
}
 800c912:	bd08      	pop	{r3, pc}
        US915_TX_PARAM_SETUP_REQ( );
 800c914:	f001 ffda 	bl	800e8cc <RegionUS915TxParamSetupReq>
 800c918:	e7fb      	b.n	800c912 <RegionTxParamSetupReq+0x16>

0800c91a <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 800c91a:	b508      	push	{r3, lr}
 800c91c:	4603      	mov	r3, r0
 800c91e:	4608      	mov	r0, r1
    switch( region )
 800c920:	2b05      	cmp	r3, #5
 800c922:	d003      	beq.n	800c92c <RegionDlChannelReq+0x12>
 800c924:	2b08      	cmp	r3, #8
 800c926:	d004      	beq.n	800c932 <RegionDlChannelReq+0x18>
 800c928:	2000      	movs	r0, #0
 800c92a:	e001      	b.n	800c930 <RegionDlChannelReq+0x16>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 800c92c:	f001 f8fe 	bl	800db2c <RegionEU868DlChannelReq>
        default:
        {
            return 0;
        }
    }
}
 800c930:	bd08      	pop	{r3, pc}
        US915_DL_CHANNEL_REQ( );
 800c932:	f001 ffce 	bl	800e8d2 <RegionUS915DlChannelReq>
 800c936:	e7fb      	b.n	800c930 <RegionDlChannelReq+0x16>

0800c938 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 800c938:	b508      	push	{r3, lr}
 800c93a:	4603      	mov	r3, r0
 800c93c:	4608      	mov	r0, r1
 800c93e:	4611      	mov	r1, r2
    switch( region )
 800c940:	2b05      	cmp	r3, #5
 800c942:	d003      	beq.n	800c94c <RegionAlternateDr+0x14>
 800c944:	2b08      	cmp	r3, #8
 800c946:	d004      	beq.n	800c952 <RegionAlternateDr+0x1a>
 800c948:	2000      	movs	r0, #0
 800c94a:	e001      	b.n	800c950 <RegionAlternateDr+0x18>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 800c94c:	f001 f91a 	bl	800db84 <RegionEU868AlternateDr>
        default:
        {
            return 0;
        }
    }
}
 800c950:	bd08      	pop	{r3, pc}
        US915_ALTERNATE_DR( );
 800c952:	f001 ffc1 	bl	800e8d8 <RegionUS915AlternateDr>
 800c956:	e7fb      	b.n	800c950 <RegionAlternateDr+0x18>

0800c958 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800c958:	b508      	push	{r3, lr}
 800c95a:	4684      	mov	ip, r0
 800c95c:	4608      	mov	r0, r1
 800c95e:	4611      	mov	r1, r2
 800c960:	461a      	mov	r2, r3
    switch( region )
 800c962:	f1bc 0f05 	cmp.w	ip, #5
 800c966:	d004      	beq.n	800c972 <RegionNextChannel+0x1a>
 800c968:	f1bc 0f08 	cmp.w	ip, #8
 800c96c:	d005      	beq.n	800c97a <RegionNextChannel+0x22>
 800c96e:	2009      	movs	r0, #9
 800c970:	e002      	b.n	800c978 <RegionNextChannel+0x20>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 800c972:	9b02      	ldr	r3, [sp, #8]
 800c974:	f001 f908 	bl	800db88 <RegionEU868NextChannel>
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 800c978:	bd08      	pop	{r3, pc}
        US915_NEXT_CHANNEL( );
 800c97a:	9b02      	ldr	r3, [sp, #8]
 800c97c:	f001 ffce 	bl	800e91c <RegionUS915NextChannel>
 800c980:	e7fa      	b.n	800c978 <RegionNextChannel+0x20>

0800c982 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800c982:	b508      	push	{r3, lr}
 800c984:	4684      	mov	ip, r0
 800c986:	4608      	mov	r0, r1
 800c988:	4611      	mov	r1, r2
 800c98a:	461a      	mov	r2, r3
    switch( region )
 800c98c:	f1bc 0f05 	cmp.w	ip, #5
 800c990:	d004      	beq.n	800c99c <RegionApplyDrOffset+0x1a>
 800c992:	f1bc 0f08 	cmp.w	ip, #8
 800c996:	d004      	beq.n	800c9a2 <RegionApplyDrOffset+0x20>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800c998:	b2c8      	uxtb	r0, r1
 800c99a:	e001      	b.n	800c9a0 <RegionApplyDrOffset+0x1e>
        EU868_APPLY_DR_OFFSET( );
 800c99c:	f001 fa5e 	bl	800de5c <RegionEU868ApplyDrOffset>
        }
    }
}
 800c9a0:	bd08      	pop	{r3, pc}
        US915_APPLY_DR_OFFSET( );
 800c9a2:	f002 f867 	bl	800ea74 <RegionUS915ApplyDrOffset>
 800c9a6:	e7fb      	b.n	800c9a0 <RegionApplyDrOffset+0x1e>

0800c9a8 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800c9a8:	4800      	ldr	r0, [pc, #0]	@ (800c9ac <RegionGetVersion+0x4>)
 800c9aa:	4770      	bx	lr
 800c9ac:	02010001 	.word	0x02010001

0800c9b0 <FindAvailable125kHzChannels>:
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 800c9b0:	468c      	mov	ip, r1
 800c9b2:	b1a9      	cbz	r1, 800c9e0 <FindAvailable125kHzChannels+0x30>
 800c9b4:	b1b2      	cbz	r2, 800c9e4 <FindAvailable125kHzChannels+0x34>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Initialize counter
    *availableChannels = 0;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	7013      	strb	r3, [r2, #0]
    for( uint8_t i = 0; i < 8; i++ )
 800c9ba:	e001      	b.n	800c9c0 <FindAvailable125kHzChannels+0x10>
 800c9bc:	3301      	adds	r3, #1
 800c9be:	b2db      	uxtb	r3, r3
 800c9c0:	2b07      	cmp	r3, #7
 800c9c2:	d80b      	bhi.n	800c9dc <FindAvailable125kHzChannels+0x2c>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 800c9c4:	fa40 f103 	asr.w	r1, r0, r3
 800c9c8:	f011 0f01 	tst.w	r1, #1
 800c9cc:	d0f6      	beq.n	800c9bc <FindAvailable125kHzChannels+0xc>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 800c9ce:	7811      	ldrb	r1, [r2, #0]
 800c9d0:	f80c 3001 	strb.w	r3, [ip, r1]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 800c9d4:	7811      	ldrb	r1, [r2, #0]
 800c9d6:	3101      	adds	r1, #1
 800c9d8:	7011      	strb	r1, [r2, #0]
 800c9da:	e7ef      	b.n	800c9bc <FindAvailable125kHzChannels+0xc>
        }
    }

    return LORAMAC_STATUS_OK;
 800c9dc:	2000      	movs	r0, #0
 800c9de:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c9e0:	2003      	movs	r0, #3
 800c9e2:	4770      	bx	lr
 800c9e4:	2003      	movs	r0, #3
}
 800c9e6:	4770      	bx	lr

0800c9e8 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 800c9e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9ea:	b085      	sub	sp, #20
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	9302      	str	r3, [sp, #8]
 800c9f0:	9303      	str	r3, [sp, #12]
    uint8_t availableChannels = 0;
 800c9f2:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 800c9f6:	2800      	cmp	r0, #0
 800c9f8:	d03e      	beq.n	800ca78 <RegionBaseUSComputeNext125kHzJoinChannel+0x90>
 800c9fa:	460d      	mov	r5, r1
 800c9fc:	4617      	mov	r7, r2
 800c9fe:	4606      	mov	r6, r0
 800ca00:	2900      	cmp	r1, #0
 800ca02:	d03b      	beq.n	800ca7c <RegionBaseUSComputeNext125kHzJoinChannel+0x94>
 800ca04:	2a00      	cmp	r2, #0
 800ca06:	d03b      	beq.n	800ca80 <RegionBaseUSComputeNext125kHzJoinChannel+0x98>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 800ca08:	780c      	ldrb	r4, [r1, #0]
 800ca0a:	e017      	b.n	800ca3c <RegionBaseUSComputeNext125kHzJoinChannel+0x54>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 800ca0c:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
 800ca10:	0a00      	lsrs	r0, r0, #8
 800ca12:	e019      	b.n	800ca48 <RegionBaseUSComputeNext125kHzJoinChannel+0x60>
        }

        if ( availableChannels > 0 )
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 800ca14:	3901      	subs	r1, #1
 800ca16:	2000      	movs	r0, #0
 800ca18:	f002 ff56 	bl	800f8c8 <randr>
 800ca1c:	f100 0310 	add.w	r3, r0, #16
 800ca20:	eb0d 0003 	add.w	r0, sp, r3
 800ca24:	f810 3c08 	ldrb.w	r3, [r0, #-8]
 800ca28:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ca2c:	703b      	strb	r3, [r7, #0]
 800ca2e:	e016      	b.n	800ca5e <RegionBaseUSComputeNext125kHzJoinChannel+0x76>
        startIndex++;
        if ( startIndex > 7 )
        {
            startIndex = 0;
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 800ca30:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ca34:	b9cb      	cbnz	r3, 800ca6a <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
 800ca36:	782a      	ldrb	r2, [r5, #0]
 800ca38:	42a2      	cmp	r2, r4
 800ca3a:	d016      	beq.n	800ca6a <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 800ca3c:	0863      	lsrs	r3, r4, #1
        if( ( startIndex % 2 ) == 0 )
 800ca3e:	f014 0f01 	tst.w	r4, #1
 800ca42:	d1e3      	bne.n	800ca0c <RegionBaseUSComputeNext125kHzJoinChannel+0x24>
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 800ca44:	f816 0013 	ldrb.w	r0, [r6, r3, lsl #1]
        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 800ca48:	f10d 0207 	add.w	r2, sp, #7
 800ca4c:	a902      	add	r1, sp, #8
 800ca4e:	f7ff ffaf 	bl	800c9b0 <FindAvailable125kHzChannels>
 800ca52:	2803      	cmp	r0, #3
 800ca54:	d00b      	beq.n	800ca6e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        if ( availableChannels > 0 )
 800ca56:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800ca5a:	2900      	cmp	r1, #0
 800ca5c:	d1da      	bne.n	800ca14 <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
        startIndex++;
 800ca5e:	3401      	adds	r4, #1
 800ca60:	b2e4      	uxtb	r4, r4
        if ( startIndex > 7 )
 800ca62:	2c07      	cmp	r4, #7
 800ca64:	d9e4      	bls.n	800ca30 <RegionBaseUSComputeNext125kHzJoinChannel+0x48>
            startIndex = 0;
 800ca66:	2400      	movs	r4, #0
 800ca68:	e7e2      	b.n	800ca30 <RegionBaseUSComputeNext125kHzJoinChannel+0x48>

    if ( availableChannels > 0 )
 800ca6a:	b913      	cbnz	r3, 800ca72 <RegionBaseUSComputeNext125kHzJoinChannel+0x8a>
    {
        *groupsCurrentIndex = startIndex;
        return LORAMAC_STATUS_OK;
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 800ca6c:	2003      	movs	r0, #3
}
 800ca6e:	b005      	add	sp, #20
 800ca70:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *groupsCurrentIndex = startIndex;
 800ca72:	702c      	strb	r4, [r5, #0]
        return LORAMAC_STATUS_OK;
 800ca74:	2000      	movs	r0, #0
 800ca76:	e7fa      	b.n	800ca6e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ca78:	2003      	movs	r0, #3
 800ca7a:	e7f8      	b.n	800ca6e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 800ca7c:	2003      	movs	r0, #3
 800ca7e:	e7f6      	b.n	800ca6e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 800ca80:	2003      	movs	r0, #3
 800ca82:	e7f4      	b.n	800ca6e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>

0800ca84 <RegionBaseUSCalcDownlinkFrequency>:
uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
}
 800ca84:	fb02 1000 	mla	r0, r2, r0, r1
 800ca88:	4770      	bx	lr

0800ca8a <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800ca8a:	b082      	sub	sp, #8
 800ca8c:	f10d 0c08 	add.w	ip, sp, #8
 800ca90:	e90c 000c 	stmdb	ip, {r2, r3}
    uint16_t dutyCycle = band->DCycle;
 800ca94:	8800      	ldrh	r0, [r0, #0]

    if( joined == false )
 800ca96:	b999      	cbnz	r1, 800cac0 <GetDutyCycle+0x36>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800ca98:	4613      	mov	r3, r2
 800ca9a:	f5b2 6f61 	cmp.w	r2, #3600	@ 0xe10
 800ca9e:	d306      	bcc.n	800caae <GetDutyCycle+0x24>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800caa0:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 800caa4:	4293      	cmp	r3, r2
 800caa6:	d808      	bhi.n	800caba <GetDutyCycle+0x30>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 800caa8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800caac:	e000      	b.n	800cab0 <GetDutyCycle+0x26>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800caae:	2364      	movs	r3, #100	@ 0x64
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800cab0:	4298      	cmp	r0, r3
 800cab2:	bf38      	it	cc
 800cab4:	4618      	movcc	r0, r3
    {
        dutyCycle = 1;
    }

    return dutyCycle;
}
 800cab6:	b002      	add	sp, #8
 800cab8:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800caba:	f242 7310 	movw	r3, #10000	@ 0x2710
 800cabe:	e7f7      	b.n	800cab0 <GetDutyCycle+0x26>
    if( dutyCycle == 0 )
 800cac0:	2800      	cmp	r0, #0
 800cac2:	d1f8      	bne.n	800cab6 <GetDutyCycle+0x2c>
        dutyCycle = 1;
 800cac4:	2001      	movs	r0, #1
 800cac6:	e7f6      	b.n	800cab6 <GetDutyCycle+0x2c>

0800cac8 <CountChannels>:

    return dutyCycle;
}

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 800cac8:	4684      	mov	ip, r0
    uint8_t nbActiveBits = 0;

    for( uint8_t j = 0; j < nbBits; j++ )
 800caca:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 800cacc:	4618      	mov	r0, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 800cace:	e001      	b.n	800cad4 <CountChannels+0xc>
 800cad0:	3301      	adds	r3, #1
 800cad2:	b2db      	uxtb	r3, r3
 800cad4:	428b      	cmp	r3, r1
 800cad6:	d207      	bcs.n	800cae8 <CountChannels+0x20>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800cad8:	2201      	movs	r2, #1
 800cada:	409a      	lsls	r2, r3
 800cadc:	ea32 020c 	bics.w	r2, r2, ip
 800cae0:	d1f6      	bne.n	800cad0 <CountChannels+0x8>
        {
            nbActiveBits++;
 800cae2:	3001      	adds	r0, #1
 800cae4:	b2c0      	uxtb	r0, r0
 800cae6:	e7f3      	b.n	800cad0 <CountChannels+0x8>
        }
    }
    return nbActiveBits;
}
 800cae8:	4770      	bx	lr
	...

0800caec <SetMaxTimeCredits>:
{
 800caec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800caf0:	b089      	sub	sp, #36	@ 0x24
 800caf2:	4604      	mov	r4, r0
 800caf4:	460e      	mov	r6, r1
 800caf6:	ad02      	add	r5, sp, #8
 800caf8:	e885 000c 	stmia.w	r5, {r2, r3}
 800cafc:	f89d 8040 	ldrb.w	r8, [sp, #64]	@ 0x40
 800cb00:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800cb04:	e895 0003 	ldmia.w	r5, {r0, r1}
 800cb08:	f005 f862 	bl	8011bd0 <SysTimeToMs>
 800cb0c:	4607      	mov	r7, r0
    SysTime_t timeDiff = { 0 };
 800cb0e:	2300      	movs	r3, #0
 800cb10:	9304      	str	r3, [sp, #16]
 800cb12:	9305      	str	r3, [sp, #20]
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800cb14:	e895 000c 	ldmia.w	r5, {r2, r3}
 800cb18:	4631      	mov	r1, r6
 800cb1a:	4620      	mov	r0, r4
 800cb1c:	f7ff ffb5 	bl	800ca8a <GetDutyCycle>
 800cb20:	4605      	mov	r5, r0
    if( joined == false )
 800cb22:	2e00      	cmp	r6, #0
 800cb24:	d14c      	bne.n	800cbc0 <SetMaxTimeCredits+0xd4>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800cb26:	2864      	cmp	r0, #100	@ 0x64
 800cb28:	d025      	beq.n	800cb76 <SetMaxTimeCredits+0x8a>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800cb2a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800cb2e:	d025      	beq.n	800cb7c <SetMaxTimeCredits+0x90>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800cb30:	4e27      	ldr	r6, [pc, #156]	@ (800cbd0 <SetMaxTimeCredits+0xe4>)
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800cb32:	68a1      	ldr	r1, [r4, #8]
 800cb34:	a806      	add	r0, sp, #24
 800cb36:	f005 f86b 	bl	8011c10 <SysTimeFromMs>
 800cb3a:	9b07      	ldr	r3, [sp, #28]
 800cb3c:	9300      	str	r3, [sp, #0]
 800cb3e:	9b06      	ldr	r3, [sp, #24]
 800cb40:	aa02      	add	r2, sp, #8
 800cb42:	ca06      	ldmia	r2, {r1, r2}
 800cb44:	a804      	add	r0, sp, #16
 800cb46:	f004 ffca 	bl	8011ade <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800cb4a:	f1b8 0f00 	cmp.w	r8, #0
 800cb4e:	d102      	bne.n	800cb56 <SetMaxTimeCredits+0x6a>
 800cb50:	f1b9 0f00 	cmp.w	r9, #0
 800cb54:	d002      	beq.n	800cb5c <SetMaxTimeCredits+0x70>
            ( band->MaxTimeCredits != maxCredits ) ||
 800cb56:	6923      	ldr	r3, [r4, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800cb58:	42b3      	cmp	r3, r6
 800cb5a:	d012      	beq.n	800cb82 <SetMaxTimeCredits+0x96>
            band->TimeCredits = maxCredits;
 800cb5c:	60e6      	str	r6, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800cb5e:	9b02      	ldr	r3, [sp, #8]
 800cb60:	4a1c      	ldr	r2, [pc, #112]	@ (800cbd4 <SetMaxTimeCredits+0xe8>)
 800cb62:	4293      	cmp	r3, r2
 800cb64:	d812      	bhi.n	800cb8c <SetMaxTimeCredits+0xa0>
    if( band->LastBandUpdateTime == 0 )
 800cb66:	6863      	ldr	r3, [r4, #4]
 800cb68:	b903      	cbnz	r3, 800cb6c <SetMaxTimeCredits+0x80>
        band->TimeCredits = maxCredits;
 800cb6a:	60e6      	str	r6, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 800cb6c:	6126      	str	r6, [r4, #16]
}
 800cb6e:	4628      	mov	r0, r5
 800cb70:	b009      	add	sp, #36	@ 0x24
 800cb72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            band->LastMaxCreditAssignTime = elapsedTime;
 800cb76:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800cb78:	4e17      	ldr	r6, [pc, #92]	@ (800cbd8 <SetMaxTimeCredits+0xec>)
 800cb7a:	e7da      	b.n	800cb32 <SetMaxTimeCredits+0x46>
            band->LastMaxCreditAssignTime = elapsedTime;
 800cb7c:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800cb7e:	4e17      	ldr	r6, [pc, #92]	@ (800cbdc <SetMaxTimeCredits+0xf0>)
 800cb80:	e7d7      	b.n	800cb32 <SetMaxTimeCredits+0x46>
            ( band->MaxTimeCredits != maxCredits ) ||
 800cb82:	9a04      	ldr	r2, [sp, #16]
 800cb84:	4b16      	ldr	r3, [pc, #88]	@ (800cbe0 <SetMaxTimeCredits+0xf4>)
 800cb86:	429a      	cmp	r2, r3
 800cb88:	d9ed      	bls.n	800cb66 <SetMaxTimeCredits+0x7a>
 800cb8a:	e7e7      	b.n	800cb5c <SetMaxTimeCredits+0x70>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800cb8c:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 800cb90:	3b30      	subs	r3, #48	@ 0x30
 800cb92:	4a14      	ldr	r2, [pc, #80]	@ (800cbe4 <SetMaxTimeCredits+0xf8>)
 800cb94:	fba2 2303 	umull	r2, r3, r2, r3
 800cb98:	0c1b      	lsrs	r3, r3, #16
 800cb9a:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800cb9c:	4a12      	ldr	r2, [pc, #72]	@ (800cbe8 <SetMaxTimeCredits+0xfc>)
 800cb9e:	fb02 f303 	mul.w	r3, r2, r3
 800cba2:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800cba4:	f503 33f6 	add.w	r3, r3, #125952	@ 0x1ec00
 800cba8:	3330      	adds	r3, #48	@ 0x30
 800cbaa:	9304      	str	r3, [sp, #16]
                timeDiff.SubSeconds = 0;
 800cbac:	2300      	movs	r3, #0
 800cbae:	f8ad 3014 	strh.w	r3, [sp, #20]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800cbb2:	ab04      	add	r3, sp, #16
 800cbb4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cbb8:	f005 f80a 	bl	8011bd0 <SysTimeToMs>
 800cbbc:	60a0      	str	r0, [r4, #8]
 800cbbe:	e7d2      	b.n	800cb66 <SetMaxTimeCredits+0x7a>
        if( dutyCycleEnabled == false )
 800cbc0:	f1b8 0f00 	cmp.w	r8, #0
 800cbc4:	d102      	bne.n	800cbcc <SetMaxTimeCredits+0xe0>
            band->TimeCredits = maxCredits;
 800cbc6:	4e04      	ldr	r6, [pc, #16]	@ (800cbd8 <SetMaxTimeCredits+0xec>)
 800cbc8:	60e6      	str	r6, [r4, #12]
 800cbca:	e7cc      	b.n	800cb66 <SetMaxTimeCredits+0x7a>
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800cbcc:	4e02      	ldr	r6, [pc, #8]	@ (800cbd8 <SetMaxTimeCredits+0xec>)
 800cbce:	e7ca      	b.n	800cb66 <SetMaxTimeCredits+0x7a>
 800cbd0:	02932e00 	.word	0x02932e00
 800cbd4:	0001ec2f 	.word	0x0001ec2f
 800cbd8:	001b7740 	.word	0x001b7740
 800cbdc:	0112a880 	.word	0x0112a880
 800cbe0:	0001517f 	.word	0x0001517f
 800cbe4:	c22e4507 	.word	0xc22e4507
 800cbe8:	00015180 	.word	0x00015180

0800cbec <UpdateTimeCredits>:
{
 800cbec:	b570      	push	{r4, r5, r6, lr}
 800cbee:	b082      	sub	sp, #8
 800cbf0:	4604      	mov	r4, r0
 800cbf2:	460e      	mov	r6, r1
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800cbf4:	9301      	str	r3, [sp, #4]
 800cbf6:	9200      	str	r2, [sp, #0]
 800cbf8:	ab06      	add	r3, sp, #24
 800cbfa:	cb0c      	ldmia	r3, {r2, r3}
 800cbfc:	f7ff ff76 	bl	800caec <SetMaxTimeCredits>
 800cc00:	4605      	mov	r5, r0
    if( joined == true )
 800cc02:	b94e      	cbnz	r6, 800cc18 <UpdateTimeCredits+0x2c>
    if( band->TimeCredits > band->MaxTimeCredits )
 800cc04:	68e2      	ldr	r2, [r4, #12]
 800cc06:	6923      	ldr	r3, [r4, #16]
 800cc08:	429a      	cmp	r2, r3
 800cc0a:	d900      	bls.n	800cc0e <UpdateTimeCredits+0x22>
        band->TimeCredits = band->MaxTimeCredits;
 800cc0c:	60e3      	str	r3, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 800cc0e:	9b08      	ldr	r3, [sp, #32]
 800cc10:	6063      	str	r3, [r4, #4]
}
 800cc12:	4628      	mov	r0, r5
 800cc14:	b002      	add	sp, #8
 800cc16:	bd70      	pop	{r4, r5, r6, pc}
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800cc18:	6860      	ldr	r0, [r4, #4]
 800cc1a:	f005 f859 	bl	8011cd0 <UTIL_TIMER_GetElapsedTime>
 800cc1e:	68e3      	ldr	r3, [r4, #12]
 800cc20:	4403      	add	r3, r0
 800cc22:	60e3      	str	r3, [r4, #12]
 800cc24:	e7ee      	b.n	800cc04 <UpdateTimeCredits+0x18>

0800cc26 <RegionCommonValueInRange>:
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800cc26:	4288      	cmp	r0, r1
 800cc28:	db03      	blt.n	800cc32 <RegionCommonValueInRange+0xc>
 800cc2a:	4290      	cmp	r0, r2
 800cc2c:	dd03      	ble.n	800cc36 <RegionCommonValueInRange+0x10>
    {
        return 1;
    }
    return 0;
 800cc2e:	2000      	movs	r0, #0
 800cc30:	4770      	bx	lr
 800cc32:	2000      	movs	r0, #0
 800cc34:	4770      	bx	lr
        return 1;
 800cc36:	2001      	movs	r0, #1
}
 800cc38:	4770      	bx	lr

0800cc3a <RegionCommonChanVerifyDr>:
{
 800cc3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc3e:	4682      	mov	sl, r0
 800cc40:	460e      	mov	r6, r1
 800cc42:	4690      	mov	r8, r2
 800cc44:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 800cc48:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 800cc4c:	4619      	mov	r1, r3
 800cc4e:	4640      	mov	r0, r8
 800cc50:	f7ff ffe9 	bl	800cc26 <RegionCommonValueInRange>
 800cc54:	b338      	cbz	r0, 800cca6 <RegionCommonChanVerifyDr+0x6c>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800cc56:	2500      	movs	r5, #0
 800cc58:	462f      	mov	r7, r5
 800cc5a:	e01e      	b.n	800cc9a <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 800cc5c:	3401      	adds	r4, #1
 800cc5e:	b2e4      	uxtb	r4, r4
 800cc60:	2c0f      	cmp	r4, #15
 800cc62:	d816      	bhi.n	800cc92 <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800cc64:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 800cc68:	4123      	asrs	r3, r4
 800cc6a:	f013 0f01 	tst.w	r3, #1
 800cc6e:	d0f5      	beq.n	800cc5c <RegionCommonChanVerifyDr+0x22>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800cc70:	193b      	adds	r3, r7, r4
 800cc72:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800cc76:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800cc7a:	7a19      	ldrb	r1, [r3, #8]
 800cc7c:	090a      	lsrs	r2, r1, #4
 800cc7e:	f001 010f 	and.w	r1, r1, #15
 800cc82:	4640      	mov	r0, r8
 800cc84:	f7ff ffcf 	bl	800cc26 <RegionCommonValueInRange>
 800cc88:	2801      	cmp	r0, #1
 800cc8a:	d1e7      	bne.n	800cc5c <RegionCommonChanVerifyDr+0x22>
                    return true;
 800cc8c:	2001      	movs	r0, #1
}
 800cc8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800cc92:	3710      	adds	r7, #16
 800cc94:	b2ff      	uxtb	r7, r7
 800cc96:	3501      	adds	r5, #1
 800cc98:	b2ed      	uxtb	r5, r5
 800cc9a:	4557      	cmp	r7, sl
 800cc9c:	d201      	bcs.n	800cca2 <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 800cc9e:	2400      	movs	r4, #0
 800cca0:	e7de      	b.n	800cc60 <RegionCommonChanVerifyDr+0x26>
    return false;
 800cca2:	2000      	movs	r0, #0
 800cca4:	e7f3      	b.n	800cc8e <RegionCommonChanVerifyDr+0x54>
        return false;
 800cca6:	2000      	movs	r0, #0
 800cca8:	e7f1      	b.n	800cc8e <RegionCommonChanVerifyDr+0x54>

0800ccaa <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800ccaa:	0913      	lsrs	r3, r2, #4
 800ccac:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 800ccb0:	d313      	bcc.n	800ccda <RegionCommonChanDisable+0x30>
{
 800ccb2:	b500      	push	{lr}
 800ccb4:	4684      	mov	ip, r0
 800ccb6:	ea4f 1e11 	mov.w	lr, r1, lsr #4
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800ccba:	4291      	cmp	r1, r2
 800ccbc:	d20f      	bcs.n	800ccde <RegionCommonChanDisable+0x34>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800ccbe:	f830 301e 	ldrh.w	r3, [r0, lr, lsl #1]
 800ccc2:	f001 010f 	and.w	r1, r1, #15
 800ccc6:	2001      	movs	r0, #1
 800ccc8:	fa00 f101 	lsl.w	r1, r0, r1
 800cccc:	43c9      	mvns	r1, r1
 800ccce:	b209      	sxth	r1, r1
 800ccd0:	400b      	ands	r3, r1
 800ccd2:	f82c 301e 	strh.w	r3, [ip, lr, lsl #1]

    return true;
}
 800ccd6:	f85d fb04 	ldr.w	pc, [sp], #4
        return false;
 800ccda:	2000      	movs	r0, #0
}
 800ccdc:	4770      	bx	lr
        return false;
 800ccde:	2000      	movs	r0, #0
 800cce0:	e7f9      	b.n	800ccd6 <RegionCommonChanDisable+0x2c>

0800cce2 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800cce2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800cce4:	b188      	cbz	r0, 800cd0a <RegionCommonCountChannels+0x28>
 800cce6:	460c      	mov	r4, r1
 800cce8:	4616      	mov	r6, r2
 800ccea:	4607      	mov	r7, r0
    uint8_t nbChannels = 0;
 800ccec:	2500      	movs	r5, #0
 800ccee:	e008      	b.n	800cd02 <RegionCommonCountChannels+0x20>
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 800ccf0:	2110      	movs	r1, #16
 800ccf2:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800ccf6:	f7ff fee7 	bl	800cac8 <CountChannels>
 800ccfa:	4405      	add	r5, r0
 800ccfc:	b2ed      	uxtb	r5, r5
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800ccfe:	3401      	adds	r4, #1
 800cd00:	b2e4      	uxtb	r4, r4
 800cd02:	42b4      	cmp	r4, r6
 800cd04:	d3f4      	bcc.n	800ccf0 <RegionCommonCountChannels+0xe>
    }

    return nbChannels;
}
 800cd06:	4628      	mov	r0, r5
 800cd08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 800cd0a:	2500      	movs	r5, #0
 800cd0c:	e7fb      	b.n	800cd06 <RegionCommonCountChannels+0x24>

0800cd0e <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800cd0e:	4684      	mov	ip, r0
 800cd10:	b158      	cbz	r0, 800cd2a <RegionCommonChanMaskCopy+0x1c>
 800cd12:	b109      	cbz	r1, 800cd18 <RegionCommonChanMaskCopy+0xa>
    {
        for( uint8_t i = 0; i < len; i++ )
 800cd14:	2300      	movs	r3, #0
 800cd16:	e006      	b.n	800cd26 <RegionCommonChanMaskCopy+0x18>
 800cd18:	4770      	bx	lr
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 800cd1a:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800cd1e:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 800cd22:	3301      	adds	r3, #1
 800cd24:	b2db      	uxtb	r3, r3
 800cd26:	4293      	cmp	r3, r2
 800cd28:	d3f7      	bcc.n	800cd1a <RegionCommonChanMaskCopy+0xc>
        }
    }
}
 800cd2a:	4770      	bx	lr

0800cd2c <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800cd2c:	b082      	sub	sp, #8
 800cd2e:	b538      	push	{r3, r4, r5, lr}
 800cd30:	4604      	mov	r4, r0
 800cd32:	460d      	mov	r5, r1
 800cd34:	4611      	mov	r1, r2
 800cd36:	aa04      	add	r2, sp, #16
 800cd38:	f842 3f04 	str.w	r3, [r2, #4]!
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800cd3c:	ca0c      	ldmia	r2, {r2, r3}
 800cd3e:	f7ff fea4 	bl	800ca8a <GetDutyCycle>

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800cd42:	68e3      	ldr	r3, [r4, #12]
 800cd44:	fb05 f100 	mul.w	r1, r5, r0
 800cd48:	428b      	cmp	r3, r1
 800cd4a:	d905      	bls.n	800cd58 <RegionCommonSetBandTxDone+0x2c>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800cd4c:	1a5b      	subs	r3, r3, r1
 800cd4e:	60e3      	str	r3, [r4, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 800cd50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd54:	b002      	add	sp, #8
 800cd56:	4770      	bx	lr
        band->TimeCredits = 0;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	60e3      	str	r3, [r4, #12]
}
 800cd5c:	e7f8      	b.n	800cd50 <RegionCommonSetBandTxDone+0x24>
	...

0800cd60 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800cd60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd64:	b089      	sub	sp, #36	@ 0x24
 800cd66:	4607      	mov	r7, r0
 800cd68:	468b      	mov	fp, r1
 800cd6a:	4691      	mov	r9, r2
 800cd6c:	4698      	mov	r8, r3
 800cd6e:	f89d a048 	ldrb.w	sl, [sp, #72]	@ 0x48
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800cd72:	f004 ffa3 	bl	8011cbc <UTIL_TIMER_GetCurrentTime>
 800cd76:	9004      	str	r0, [sp, #16]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 800cd78:	2400      	movs	r4, #0
    uint8_t validBands = 0;
 800cd7a:	4626      	mov	r6, r4
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800cd7c:	f04f 33ff 	mov.w	r3, #4294967295
 800cd80:	9305      	str	r3, [sp, #20]
    for( uint8_t i = 0; i < nbBands; i++ )
 800cd82:	e005      	b.n	800cd90 <RegionCommonUpdateBandTimeOff+0x30>
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
        {
            bands[i].ReadyForTransmission = true;
 800cd84:	2301      	movs	r3, #1
 800cd86:	752b      	strb	r3, [r5, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 800cd88:	441e      	add	r6, r3
 800cd8a:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 800cd8c:	3401      	adds	r4, #1
 800cd8e:	b2e4      	uxtb	r4, r4
 800cd90:	454c      	cmp	r4, r9
 800cd92:	d25d      	bcs.n	800ce50 <RegionCommonUpdateBandTimeOff+0xf0>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800cd94:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800cd98:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 800cd9c:	9b04      	ldr	r3, [sp, #16]
 800cd9e:	9302      	str	r3, [sp, #8]
 800cda0:	ab13      	add	r3, sp, #76	@ 0x4c
 800cda2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cda6:	e88d 0003 	stmia.w	sp, {r0, r1}
 800cdaa:	4653      	mov	r3, sl
 800cdac:	4642      	mov	r2, r8
 800cdae:	4639      	mov	r1, r7
 800cdb0:	4628      	mov	r0, r5
 800cdb2:	f7ff ff1b 	bl	800cbec <UpdateTimeCredits>
        creditCosts = expectedTimeOnAir * dutyCycle;
 800cdb6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800cdb8:	fb03 f300 	mul.w	r3, r3, r0
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 800cdbc:	68ea      	ldr	r2, [r5, #12]
 800cdbe:	429a      	cmp	r2, r3
 800cdc0:	d2e0      	bcs.n	800cd84 <RegionCommonUpdateBandTimeOff+0x24>
 800cdc2:	f1b8 0f00 	cmp.w	r8, #0
 800cdc6:	d101      	bne.n	800cdcc <RegionCommonUpdateBandTimeOff+0x6c>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800cdc8:	2f00      	cmp	r7, #0
 800cdca:	d1db      	bne.n	800cd84 <RegionCommonUpdateBandTimeOff+0x24>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 800cdcc:	2100      	movs	r1, #0
 800cdce:	7529      	strb	r1, [r5, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 800cdd0:	6929      	ldr	r1, [r5, #16]
 800cdd2:	4299      	cmp	r1, r3
 800cdd4:	d307      	bcc.n	800cde6 <RegionCommonUpdateBandTimeOff+0x86>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800cdd6:	1a9b      	subs	r3, r3, r2
 800cdd8:	9a05      	ldr	r2, [sp, #20]
 800cdda:	429a      	cmp	r2, r3
 800cddc:	bf28      	it	cs
 800cdde:	461a      	movcs	r2, r3
 800cde0:	9205      	str	r2, [sp, #20]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 800cde2:	3601      	adds	r6, #1
 800cde4:	b2f6      	uxtb	r6, r6
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 800cde6:	2f00      	cmp	r7, #0
 800cde8:	d1d0      	bne.n	800cd8c <RegionCommonUpdateBandTimeOff+0x2c>
            {
                SysTime_t backoffTimeRange = {
 800cdea:	2300      	movs	r3, #0
 800cdec:	9306      	str	r3, [sp, #24]
 800cdee:	f8ad 301c 	strh.w	r3, [sp, #28]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800cdf2:	2864      	cmp	r0, #100	@ 0x64
 800cdf4:	d024      	beq.n	800ce40 <RegionCommonUpdateBandTimeOff+0xe0>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800cdf6:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800cdfa:	d025      	beq.n	800ce48 <RegionCommonUpdateBandTimeOff+0xe8>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800cdfc:	4b19      	ldr	r3, [pc, #100]	@ (800ce64 <RegionCommonUpdateBandTimeOff+0x104>)
 800cdfe:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800ce00:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ce02:	4a18      	ldr	r2, [pc, #96]	@ (800ce64 <RegionCommonUpdateBandTimeOff+0x104>)
 800ce04:	4293      	cmp	r3, r2
 800ce06:	d90c      	bls.n	800ce22 <RegionCommonUpdateBandTimeOff+0xc2>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800ce08:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 800ce0c:	3b30      	subs	r3, #48	@ 0x30
 800ce0e:	4a16      	ldr	r2, [pc, #88]	@ (800ce68 <RegionCommonUpdateBandTimeOff+0x108>)
 800ce10:	fba2 2303 	umull	r2, r3, r2, r3
 800ce14:	0c1b      	lsrs	r3, r3, #16
 800ce16:	4a15      	ldr	r2, [pc, #84]	@ (800ce6c <RegionCommonUpdateBandTimeOff+0x10c>)
 800ce18:	fb03 2202 	mla	r2, r3, r2, r2
 800ce1c:	9b06      	ldr	r3, [sp, #24]
 800ce1e:	4413      	add	r3, r2
 800ce20:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 800ce22:	ad06      	add	r5, sp, #24
 800ce24:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ce26:	9300      	str	r3, [sp, #0]
 800ce28:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ce2a:	e895 0006 	ldmia.w	r5, {r1, r2}
 800ce2e:	4628      	mov	r0, r5
 800ce30:	f004 fe55 	bl	8011ade <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 800ce34:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ce38:	f004 feca 	bl	8011bd0 <SysTimeToMs>
 800ce3c:	9005      	str	r0, [sp, #20]
 800ce3e:	e7a5      	b.n	800cd8c <RegionCommonUpdateBandTimeOff+0x2c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800ce40:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800ce44:	9306      	str	r3, [sp, #24]
 800ce46:	e7db      	b.n	800ce00 <RegionCommonUpdateBandTimeOff+0xa0>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 800ce48:	f649 23b0 	movw	r3, #39600	@ 0x9ab0
 800ce4c:	9306      	str	r3, [sp, #24]
 800ce4e:	e7d7      	b.n	800ce00 <RegionCommonUpdateBandTimeOff+0xa0>
            }
        }
    }

    if( validBands == 0 )
 800ce50:	b11e      	cbz	r6, 800ce5a <RegionCommonUpdateBandTimeOff+0xfa>
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
    }
    return minTimeToWait;
}
 800ce52:	9805      	ldr	r0, [sp, #20]
 800ce54:	b009      	add	sp, #36	@ 0x24
 800ce56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 800ce5a:	f04f 33ff 	mov.w	r3, #4294967295
 800ce5e:	9305      	str	r3, [sp, #20]
 800ce60:	e7f7      	b.n	800ce52 <RegionCommonUpdateBandTimeOff+0xf2>
 800ce62:	bf00      	nop
 800ce64:	0001ec30 	.word	0x0001ec30
 800ce68:	c22e4507 	.word	0xc22e4507
 800ce6c:	00015180 	.word	0x00015180

0800ce70 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800ce70:	7803      	ldrb	r3, [r0, #0]
 800ce72:	2b03      	cmp	r3, #3
 800ce74:	d001      	beq.n	800ce7a <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 800ce76:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 800ce78:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 800ce7a:	7843      	ldrb	r3, [r0, #1]
 800ce7c:	f990 2001 	ldrsb.w	r2, [r0, #1]
 800ce80:	704a      	strb	r2, [r1, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800ce82:	f003 020f 	and.w	r2, r3, #15
 800ce86:	708a      	strb	r2, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800ce88:	091b      	lsrs	r3, r3, #4
 800ce8a:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800ce8c:	7883      	ldrb	r3, [r0, #2]
 800ce8e:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800ce90:	78c2      	ldrb	r2, [r0, #3]
 800ce92:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ce96:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 800ce98:	7903      	ldrb	r3, [r0, #4]
 800ce9a:	700b      	strb	r3, [r1, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800ce9c:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800cea0:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800cea2:	f003 030f 	and.w	r3, r3, #15
 800cea6:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 800cea8:	2005      	movs	r0, #5
 800ceaa:	4770      	bx	lr

0800ceac <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800ceac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceb0:	b085      	sub	sp, #20
 800ceb2:	4604      	mov	r4, r0
 800ceb4:	460f      	mov	r7, r1
 800ceb6:	4616      	mov	r6, r2
 800ceb8:	461d      	mov	r5, r3
    uint8_t status = verifyParams->Status;
 800ceba:	f890 8004 	ldrb.w	r8, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800cebe:	f990 a006 	ldrsb.w	sl, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 800cec2:	f990 9007 	ldrsb.w	r9, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 800cec6:	f990 b008 	ldrsb.w	fp, [r0, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800ceca:	7943      	ldrb	r3, [r0, #5]
 800cecc:	b92b      	cbnz	r3, 800ceda <RegionCommonLinkAdrReqVerifyParams+0x2e>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 800cece:	f990 b00b 	ldrsb.w	fp, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 800ced2:	f990 a009 	ldrsb.w	sl, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 800ced6:	f990 900a 	ldrsb.w	r9, [r0, #10]
    }

    if( status != 0 )
 800ceda:	f1b8 0f00 	cmp.w	r8, #0
 800cede:	d02d      	beq.n	800cf3c <RegionCommonLinkAdrReqVerifyParams+0x90>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 800cee0:	f1ba 0f0f 	cmp.w	sl, #15
 800cee4:	d114      	bne.n	800cf10 <RegionCommonLinkAdrReqVerifyParams+0x64>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 800cee6:	f994 a009 	ldrsb.w	sl, [r4, #9]
        {
            status &= 0xFD; // Datarate KO
        }

        // Verify tx power
        if( txPower == 0x0F )
 800ceea:	f1b9 0f0f 	cmp.w	r9, #15
 800ceee:	d020      	beq.n	800cf32 <RegionCommonLinkAdrReqVerifyParams+0x86>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800cef0:	f994 301d 	ldrsb.w	r3, [r4, #29]
 800cef4:	9303      	str	r3, [sp, #12]
 800cef6:	f994 201c 	ldrsb.w	r2, [r4, #28]
 800cefa:	461c      	mov	r4, r3
 800cefc:	4619      	mov	r1, r3
 800cefe:	4648      	mov	r0, r9
 800cf00:	f7ff fe91 	bl	800cc26 <RegionCommonValueInRange>
 800cf04:	b9b8      	cbnz	r0, 800cf36 <RegionCommonLinkAdrReqVerifyParams+0x8a>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 800cf06:	454c      	cmp	r4, r9
 800cf08:	dc22      	bgt.n	800cf50 <RegionCommonLinkAdrReqVerifyParams+0xa4>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 800cf0a:	f008 08fb 	and.w	r8, r8, #251	@ 0xfb
 800cf0e:	e012      	b.n	800cf36 <RegionCommonLinkAdrReqVerifyParams+0x8a>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800cf10:	69a3      	ldr	r3, [r4, #24]
 800cf12:	9301      	str	r3, [sp, #4]
 800cf14:	f994 3015 	ldrsb.w	r3, [r4, #21]
 800cf18:	9300      	str	r3, [sp, #0]
 800cf1a:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800cf1e:	4652      	mov	r2, sl
 800cf20:	6921      	ldr	r1, [r4, #16]
 800cf22:	7b20      	ldrb	r0, [r4, #12]
 800cf24:	f7ff fe89 	bl	800cc3a <RegionCommonChanVerifyDr>
 800cf28:	2800      	cmp	r0, #0
 800cf2a:	d1de      	bne.n	800ceea <RegionCommonLinkAdrReqVerifyParams+0x3e>
            status &= 0xFD; // Datarate KO
 800cf2c:	f008 08fd 	and.w	r8, r8, #253	@ 0xfd
 800cf30:	e7db      	b.n	800ceea <RegionCommonLinkAdrReqVerifyParams+0x3e>
            txPower =  verifyParams->CurrentTxPower;
 800cf32:	f994 900a 	ldrsb.w	r9, [r4, #10]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 800cf36:	f1b8 0f07 	cmp.w	r8, #7
 800cf3a:	d00c      	beq.n	800cf56 <RegionCommonLinkAdrReqVerifyParams+0xaa>
            nbRepetitions = 1;
        }
    }

    // Apply changes
    *dr = datarate;
 800cf3c:	f887 a000 	strb.w	sl, [r7]
    *txPow = txPower;
 800cf40:	f886 9000 	strb.w	r9, [r6]
    *nbRep = nbRepetitions;
 800cf44:	f885 b000 	strb.w	fp, [r5]

    return status;
}
 800cf48:	4640      	mov	r0, r8
 800cf4a:	b005      	add	sp, #20
 800cf4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                txPower = verifyParams->MaxTxPower;
 800cf50:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800cf54:	e7ef      	b.n	800cf36 <RegionCommonLinkAdrReqVerifyParams+0x8a>
        if( nbRepetitions == 0 )
 800cf56:	f1bb 0f00 	cmp.w	fp, #0
 800cf5a:	d1ef      	bne.n	800cf3c <RegionCommonLinkAdrReqVerifyParams+0x90>
            nbRepetitions = 1;
 800cf5c:	f04f 0b01 	mov.w	fp, #1
 800cf60:	e7ec      	b.n	800cf3c <RegionCommonLinkAdrReqVerifyParams+0x90>
	...

0800cf64 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800cf64:	4b02      	ldr	r3, [pc, #8]	@ (800cf70 <RegionCommonComputeSymbolTimeLoRa+0xc>)
 800cf66:	fa03 f000 	lsl.w	r0, r3, r0
}
 800cf6a:	fbb0 f0f1 	udiv	r0, r0, r1
 800cf6e:	4770      	bx	lr
 800cf70:	000f4240 	.word	0x000f4240

0800cf74 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}
 800cf74:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800cf78:	fbb3 f0f0 	udiv	r0, r3, r0
 800cf7c:	4770      	bx	lr
	...

0800cf80 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800cf80:	b500      	push	{lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800cf82:	f1a1 0c04 	sub.w	ip, r1, #4
 800cf86:	f44f 7e7a 	mov.w	lr, #1000	@ 0x3e8
 800cf8a:	fb0e f202 	mul.w	r2, lr, r2
 800cf8e:	fb00 220c 	mla	r2, r0, ip, r2
 800cf92:	0052      	lsls	r2, r2, #1
 800cf94:	d021      	beq.n	800cfda <RegionCommonComputeRxWindowParameters+0x5a>
 800cf96:	4402      	add	r2, r0
 800cf98:	3a01      	subs	r2, #1
 800cf9a:	fbb2 f2f0 	udiv	r2, r2, r0
 800cf9e:	4291      	cmp	r1, r2
 800cfa0:	bf38      	it	cc
 800cfa2:	4611      	movcc	r1, r2
 800cfa4:	9a01      	ldr	r2, [sp, #4]
 800cfa6:	6011      	str	r1, [r2, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800cfa8:	0082      	lsls	r2, r0, #2
 800cfaa:	fb01 f000 	mul.w	r0, r1, r0
 800cfae:	b1b8      	cbz	r0, 800cfe0 <RegionCommonComputeRxWindowParameters+0x60>
 800cfb0:	3001      	adds	r0, #1
 800cfb2:	0840      	lsrs	r0, r0, #1
 800cfb4:	1a12      	subs	r2, r2, r0
 800cfb6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800cfba:	fb01 2313 	mls	r3, r1, r3, r2
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	dd10      	ble.n	800cfe4 <RegionCommonComputeRxWindowParameters+0x64>
 800cfc2:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 800cfc6:	4a0b      	ldr	r2, [pc, #44]	@ (800cff4 <RegionCommonComputeRxWindowParameters+0x74>)
 800cfc8:	fb82 1203 	smull	r1, r2, r2, r3
 800cfcc:	17db      	asrs	r3, r3, #31
 800cfce:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800cfd2:	9a02      	ldr	r2, [sp, #8]
 800cfd4:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 800cfd6:	f85d fb04 	ldr.w	pc, [sp], #4
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800cfda:	fbb2 f2f0 	udiv	r2, r2, r0
 800cfde:	e7de      	b.n	800cf9e <RegionCommonComputeRxWindowParameters+0x1e>
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800cfe0:	0840      	lsrs	r0, r0, #1
 800cfe2:	e7e7      	b.n	800cfb4 <RegionCommonComputeRxWindowParameters+0x34>
 800cfe4:	4a03      	ldr	r2, [pc, #12]	@ (800cff4 <RegionCommonComputeRxWindowParameters+0x74>)
 800cfe6:	fb82 1203 	smull	r1, r2, r2, r3
 800cfea:	17db      	asrs	r3, r3, #31
 800cfec:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800cff0:	e7ef      	b.n	800cfd2 <RegionCommonComputeRxWindowParameters+0x52>
 800cff2:	bf00      	nop
 800cff4:	10624dd3 	.word	0x10624dd3

0800cff8 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800cff8:	b538      	push	{r3, r4, r5, lr}
 800cffa:	460d      	mov	r5, r1
 800cffc:	4614      	mov	r4, r2
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800cffe:	0040      	lsls	r0, r0, #1
 800d000:	f7f3 fbe4 	bl	80007cc <__aeabi_ui2f>
 800d004:	4601      	mov	r1, r0
 800d006:	4628      	mov	r0, r5
 800d008:	f7f3 fb2e 	bl	8000668 <__aeabi_fsub>
 800d00c:	4621      	mov	r1, r4
 800d00e:	f7f3 fb2b 	bl	8000668 <__aeabi_fsub>
 800d012:	f7f3 fa1d 	bl	8000450 <__aeabi_f2d>
 800d016:	f005 f937 	bl	8012288 <floor>
 800d01a:	f7f3 faf9 	bl	8000610 <__aeabi_d2iz>

    return phyTxPower;
}
 800d01e:	b240      	sxtb	r0, r0
 800d020:	bd38      	pop	{r3, r4, r5, pc}

0800d022 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800d022:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d026:	b083      	sub	sp, #12
 800d028:	4605      	mov	r5, r0
 800d02a:	468b      	mov	fp, r1
 800d02c:	9300      	str	r3, [sp, #0]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800d02e:	2600      	movs	r6, #0
 800d030:	46b0      	mov	r8, r6
    uint8_t nbRestrictedChannelsCount = 0;
 800d032:	46b2      	mov	sl, r6
    uint8_t nbChannelCount = 0;
 800d034:	46b1      	mov	r9, r6
 800d036:	9201      	str	r2, [sp, #4]
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800d038:	e049      	b.n	800d0ce <RegionCommonCountNbOfEnabledChannels+0xac>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800d03a:	7a3a      	ldrb	r2, [r7, #8]
 800d03c:	f342 0103 	sbfx	r1, r2, #0, #4
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800d040:	f342 1203 	sbfx	r2, r2, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800d044:	b252      	sxtb	r2, r2
 800d046:	b249      	sxtb	r1, r1
 800d048:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800d04c:	f7ff fdeb 	bl	800cc26 <RegionCommonValueInRange>
 800d050:	b178      	cbz	r0, 800d072 <RegionCommonCountNbOfEnabledChannels+0x50>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800d052:	68ea      	ldr	r2, [r5, #12]
 800d054:	7a7b      	ldrb	r3, [r7, #9]
 800d056:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d05a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800d05e:	7d13      	ldrb	r3, [r2, #20]
 800d060:	b353      	cbz	r3, 800d0b8 <RegionCommonCountNbOfEnabledChannels+0x96>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 800d062:	f109 0301 	add.w	r3, r9, #1
 800d066:	eb08 0204 	add.w	r2, r8, r4
 800d06a:	f80b 2009 	strb.w	r2, [fp, r9]
 800d06e:	fa5f f983 	uxtb.w	r9, r3
        for( uint8_t j = 0; j < 16; j++ )
 800d072:	3401      	adds	r4, #1
 800d074:	b2e4      	uxtb	r4, r4
 800d076:	2c0f      	cmp	r4, #15
 800d078:	d823      	bhi.n	800d0c2 <RegionCommonCountNbOfEnabledChannels+0xa0>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800d07a:	686b      	ldr	r3, [r5, #4]
 800d07c:	0072      	lsls	r2, r6, #1
 800d07e:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 800d082:	4123      	asrs	r3, r4
 800d084:	f013 0f01 	tst.w	r3, #1
 800d088:	d0f3      	beq.n	800d072 <RegionCommonCountNbOfEnabledChannels+0x50>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800d08a:	68a8      	ldr	r0, [r5, #8]
 800d08c:	eb08 0304 	add.w	r3, r8, r4
 800d090:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d094:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 800d098:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d0e8      	beq.n	800d072 <RegionCommonCountNbOfEnabledChannels+0x50>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800d0a0:	782b      	ldrb	r3, [r5, #0]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d1c9      	bne.n	800d03a <RegionCommonCountNbOfEnabledChannels+0x18>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 800d0a6:	696b      	ldr	r3, [r5, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d0c6      	beq.n	800d03a <RegionCommonCountNbOfEnabledChannels+0x18>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 800d0ac:	5a9b      	ldrh	r3, [r3, r2]
 800d0ae:	4123      	asrs	r3, r4
 800d0b0:	f013 0f01 	tst.w	r3, #1
 800d0b4:	d1c1      	bne.n	800d03a <RegionCommonCountNbOfEnabledChannels+0x18>
 800d0b6:	e7dc      	b.n	800d072 <RegionCommonCountNbOfEnabledChannels+0x50>
                    nbRestrictedChannelsCount++;
 800d0b8:	f10a 0a01 	add.w	sl, sl, #1
 800d0bc:	fa5f fa8a 	uxtb.w	sl, sl
                    continue;
 800d0c0:	e7d7      	b.n	800d072 <RegionCommonCountNbOfEnabledChannels+0x50>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800d0c2:	f108 0810 	add.w	r8, r8, #16
 800d0c6:	fa5f f888 	uxtb.w	r8, r8
 800d0ca:	3601      	adds	r6, #1
 800d0cc:	b2f6      	uxtb	r6, r6
 800d0ce:	8a2b      	ldrh	r3, [r5, #16]
 800d0d0:	4598      	cmp	r8, r3
 800d0d2:	d201      	bcs.n	800d0d8 <RegionCommonCountNbOfEnabledChannels+0xb6>
        for( uint8_t j = 0; j < 16; j++ )
 800d0d4:	2400      	movs	r4, #0
 800d0d6:	e7ce      	b.n	800d076 <RegionCommonCountNbOfEnabledChannels+0x54>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 800d0d8:	9f01      	ldr	r7, [sp, #4]
 800d0da:	f887 9000 	strb.w	r9, [r7]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800d0de:	9b00      	ldr	r3, [sp, #0]
 800d0e0:	f883 a000 	strb.w	sl, [r3]
}
 800d0e4:	b003      	add	sp, #12
 800d0e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d0ea <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800d0ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d0ee:	b085      	sub	sp, #20
 800d0f0:	4604      	mov	r4, r0
 800d0f2:	460f      	mov	r7, r1
 800d0f4:	4616      	mov	r6, r2
 800d0f6:	461d      	mov	r5, r3
 800d0f8:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 800d0fc:	f8dd 9034 	ldr.w	r9, [sp, #52]	@ 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800d100:	6840      	ldr	r0, [r0, #4]
 800d102:	f004 fde5 	bl	8011cd0 <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800d106:	6823      	ldr	r3, [r4, #0]
 800d108:	1a1b      	subs	r3, r3, r0
 800d10a:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 800d10e:	2301      	movs	r3, #1
 800d110:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 800d114:	2300      	movs	r3, #0
 800d116:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800d118:	6863      	ldr	r3, [r4, #4]
 800d11a:	b113      	cbz	r3, 800d122 <RegionCommonIdentifyChannels+0x38>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 800d11c:	6823      	ldr	r3, [r4, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800d11e:	4283      	cmp	r3, r0
 800d120:	d81e      	bhi.n	800d160 <RegionCommonIdentifyChannels+0x76>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800d122:	2300      	movs	r3, #0
 800d124:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800d126:	69e3      	ldr	r3, [r4, #28]
 800d128:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800d12c:	781f      	ldrb	r7, [r3, #0]
 800d12e:	69a3      	ldr	r3, [r4, #24]
 800d130:	9303      	str	r3, [sp, #12]
 800d132:	ab01      	add	r3, sp, #4
 800d134:	f104 020c 	add.w	r2, r4, #12
 800d138:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d13c:	e883 0003 	stmia.w	r3, {r0, r1}
 800d140:	7d23      	ldrb	r3, [r4, #20]
 800d142:	9300      	str	r3, [sp, #0]
 800d144:	7a23      	ldrb	r3, [r4, #8]
 800d146:	7a62      	ldrb	r2, [r4, #9]
 800d148:	4661      	mov	r1, ip
 800d14a:	4638      	mov	r0, r7
 800d14c:	f7ff fe08 	bl	800cd60 <RegionCommonUpdateBandTimeOff>
 800d150:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800d154:	4643      	mov	r3, r8
 800d156:	462a      	mov	r2, r5
 800d158:	4631      	mov	r1, r6
 800d15a:	69e0      	ldr	r0, [r4, #28]
 800d15c:	f7ff ff61 	bl	800d022 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800d160:	782b      	ldrb	r3, [r5, #0]
 800d162:	b923      	cbnz	r3, 800d16e <RegionCommonIdentifyChannels+0x84>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
    }
    else if( *nbRestrictedChannels > 0 )
 800d164:	f898 3000 	ldrb.w	r3, [r8]
 800d168:	b13b      	cbz	r3, 800d17a <RegionCommonIdentifyChannels+0x90>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800d16a:	200b      	movs	r0, #11
 800d16c:	e002      	b.n	800d174 <RegionCommonIdentifyChannels+0x8a>
        *nextTxDelay = 0;
 800d16e:	2000      	movs	r0, #0
 800d170:	f8c9 0000 	str.w	r0, [r9]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800d174:	b005      	add	sp, #20
 800d176:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800d17a:	200c      	movs	r0, #12
 800d17c:	e7fa      	b.n	800d174 <RegionCommonIdentifyChannels+0x8a>

0800d17e <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 800d17e:	b570      	push	{r4, r5, r6, lr}
 800d180:	b082      	sub	sp, #8
 800d182:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 800d184:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 800d188:	f990 6002 	ldrsb.w	r6, [r0, #2]
 800d18c:	42a6      	cmp	r6, r4
 800d18e:	d011      	beq.n	800d1b4 <RegionCommonGetNextLowerTxDr+0x36>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 800d190:	3c01      	subs	r4, #1
 800d192:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
 800d194:	42a6      	cmp	r6, r4
 800d196:	d00e      	beq.n	800d1b6 <RegionCommonGetNextLowerTxDr+0x38>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800d198:	68ab      	ldr	r3, [r5, #8]
 800d19a:	9301      	str	r3, [sp, #4]
 800d19c:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800d1a0:	9300      	str	r3, [sp, #0]
 800d1a2:	4633      	mov	r3, r6
 800d1a4:	4622      	mov	r2, r4
 800d1a6:	6869      	ldr	r1, [r5, #4]
 800d1a8:	78e8      	ldrb	r0, [r5, #3]
 800d1aa:	f7ff fd46 	bl	800cc3a <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 800d1ae:	2800      	cmp	r0, #0
 800d1b0:	d0ee      	beq.n	800d190 <RegionCommonGetNextLowerTxDr+0x12>
 800d1b2:	e000      	b.n	800d1b6 <RegionCommonGetNextLowerTxDr+0x38>
        return params->MinDr;
 800d1b4:	4634      	mov	r4, r6

        return drLocal;
    }
}
 800d1b6:	4620      	mov	r0, r4
 800d1b8:	b002      	add	sp, #8
 800d1ba:	bd70      	pop	{r4, r5, r6, pc}

0800d1bc <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 800d1bc:	4288      	cmp	r0, r1
 800d1be:	bfb8      	it	lt
 800d1c0:	4608      	movlt	r0, r1
 800d1c2:	4770      	bx	lr

0800d1c4 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 800d1c4:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 800d1c8:	4a05      	ldr	r2, [pc, #20]	@ (800d1e0 <RegionCommonGetBandwidth+0x1c>)
 800d1ca:	4293      	cmp	r3, r2
 800d1cc:	d004      	beq.n	800d1d8 <RegionCommonGetBandwidth+0x14>
 800d1ce:	4a05      	ldr	r2, [pc, #20]	@ (800d1e4 <RegionCommonGetBandwidth+0x20>)
 800d1d0:	4293      	cmp	r3, r2
 800d1d2:	d103      	bne.n	800d1dc <RegionCommonGetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800d1d4:	2002      	movs	r0, #2
 800d1d6:	4770      	bx	lr
            return 1;
 800d1d8:	2001      	movs	r0, #1
 800d1da:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 800d1dc:	2000      	movs	r0, #0
    }
}
 800d1de:	4770      	bx	lr
 800d1e0:	0003d090 	.word	0x0003d090
 800d1e4:	0007a120 	.word	0x0007a120

0800d1e8 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800d1e8:	b500      	push	{lr}
 800d1ea:	b085      	sub	sp, #20
    if ( rxSlot < RX_SLOT_NONE )
 800d1ec:	2805      	cmp	r0, #5
 800d1ee:	d80e      	bhi.n	800d20e <RegionCommonRxConfigPrint+0x26>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 800d1f0:	9202      	str	r2, [sp, #8]
 800d1f2:	9101      	str	r1, [sp, #4]
 800d1f4:	4b0a      	ldr	r3, [pc, #40]	@ (800d220 <RegionCommonRxConfigPrint+0x38>)
 800d1f6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d1fa:	9300      	str	r3, [sp, #0]
 800d1fc:	4b09      	ldr	r3, [pc, #36]	@ (800d224 <RegionCommonRxConfigPrint+0x3c>)
 800d1fe:	2201      	movs	r2, #1
 800d200:	2100      	movs	r1, #0
 800d202:	2002      	movs	r0, #2
 800d204:	f004 fa48 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800d208:	b005      	add	sp, #20
 800d20a:	f85d fb04 	ldr.w	pc, [sp], #4
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800d20e:	9201      	str	r2, [sp, #4]
 800d210:	9100      	str	r1, [sp, #0]
 800d212:	4b05      	ldr	r3, [pc, #20]	@ (800d228 <RegionCommonRxConfigPrint+0x40>)
 800d214:	2201      	movs	r2, #1
 800d216:	2100      	movs	r1, #0
 800d218:	2002      	movs	r0, #2
 800d21a:	f004 fa3d 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
}
 800d21e:	e7f3      	b.n	800d208 <RegionCommonRxConfigPrint+0x20>
 800d220:	08012d14 	.word	0x08012d14
 800d224:	08012910 	.word	0x08012910
 800d228:	08012930 	.word	0x08012930

0800d22c <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800d22c:	b500      	push	{lr}
 800d22e:	b083      	sub	sp, #12
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800d230:	9101      	str	r1, [sp, #4]
 800d232:	9000      	str	r0, [sp, #0]
 800d234:	4b04      	ldr	r3, [pc, #16]	@ (800d248 <RegionCommonTxConfigPrint+0x1c>)
 800d236:	2201      	movs	r2, #1
 800d238:	2100      	movs	r1, #0
 800d23a:	2002      	movs	r0, #2
 800d23c:	f004 fa2c 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
}
 800d240:	b003      	add	sp, #12
 800d242:	f85d fb04 	ldr.w	pc, [sp], #4
 800d246:	bf00      	nop
 800d248:	0801294c 	.word	0x0801294c

0800d24c <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 800d24c:	b538      	push	{r3, r4, r5, lr}
 800d24e:	4604      	mov	r4, r0
 800d250:	460d      	mov	r5, r1
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800d252:	4b1b      	ldr	r3, [pc, #108]	@ (800d2c0 <VerifyRfFreq+0x74>)
 800d254:	6a1b      	ldr	r3, [r3, #32]
 800d256:	4798      	blx	r3
 800d258:	b130      	cbz	r0, 800d268 <VerifyRfFreq+0x1c>
    {
        return false;
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 800d25a:	4b1a      	ldr	r3, [pc, #104]	@ (800d2c4 <VerifyRfFreq+0x78>)
 800d25c:	4423      	add	r3, r4
 800d25e:	4a1a      	ldr	r2, [pc, #104]	@ (800d2c8 <VerifyRfFreq+0x7c>)
 800d260:	4293      	cmp	r3, r2
 800d262:	d802      	bhi.n	800d26a <VerifyRfFreq+0x1e>
    {
        *band = 2;
 800d264:	2302      	movs	r3, #2
 800d266:	702b      	strb	r3, [r5, #0]
    else
    {
        return false;
    }
    return true;
}
 800d268:	bd38      	pop	{r3, r4, r5, pc}
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 800d26a:	4b18      	ldr	r3, [pc, #96]	@ (800d2cc <VerifyRfFreq+0x80>)
 800d26c:	4423      	add	r3, r4
 800d26e:	4a18      	ldr	r2, [pc, #96]	@ (800d2d0 <VerifyRfFreq+0x84>)
 800d270:	4293      	cmp	r3, r2
 800d272:	d802      	bhi.n	800d27a <VerifyRfFreq+0x2e>
        *band = 0;
 800d274:	2300      	movs	r3, #0
 800d276:	702b      	strb	r3, [r5, #0]
 800d278:	e7f6      	b.n	800d268 <VerifyRfFreq+0x1c>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 800d27a:	4b16      	ldr	r3, [pc, #88]	@ (800d2d4 <VerifyRfFreq+0x88>)
 800d27c:	4423      	add	r3, r4
 800d27e:	4a16      	ldr	r2, [pc, #88]	@ (800d2d8 <VerifyRfFreq+0x8c>)
 800d280:	4293      	cmp	r3, r2
 800d282:	d802      	bhi.n	800d28a <VerifyRfFreq+0x3e>
        *band = 1;
 800d284:	2301      	movs	r3, #1
 800d286:	702b      	strb	r3, [r5, #0]
 800d288:	e7ee      	b.n	800d268 <VerifyRfFreq+0x1c>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 800d28a:	4b14      	ldr	r3, [pc, #80]	@ (800d2dc <VerifyRfFreq+0x90>)
 800d28c:	4423      	add	r3, r4
 800d28e:	4a14      	ldr	r2, [pc, #80]	@ (800d2e0 <VerifyRfFreq+0x94>)
 800d290:	4293      	cmp	r3, r2
 800d292:	d802      	bhi.n	800d29a <VerifyRfFreq+0x4e>
        *band = 5;
 800d294:	2305      	movs	r3, #5
 800d296:	702b      	strb	r3, [r5, #0]
 800d298:	e7e6      	b.n	800d268 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 800d29a:	4b12      	ldr	r3, [pc, #72]	@ (800d2e4 <VerifyRfFreq+0x98>)
 800d29c:	4423      	add	r3, r4
 800d29e:	4a12      	ldr	r2, [pc, #72]	@ (800d2e8 <VerifyRfFreq+0x9c>)
 800d2a0:	4293      	cmp	r3, r2
 800d2a2:	d802      	bhi.n	800d2aa <VerifyRfFreq+0x5e>
        *band = 3;
 800d2a4:	2303      	movs	r3, #3
 800d2a6:	702b      	strb	r3, [r5, #0]
 800d2a8:	e7de      	b.n	800d268 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 800d2aa:	4b10      	ldr	r3, [pc, #64]	@ (800d2ec <VerifyRfFreq+0xa0>)
 800d2ac:	4423      	add	r3, r4
 800d2ae:	4a10      	ldr	r2, [pc, #64]	@ (800d2f0 <VerifyRfFreq+0xa4>)
 800d2b0:	4293      	cmp	r3, r2
 800d2b2:	d802      	bhi.n	800d2ba <VerifyRfFreq+0x6e>
        *band = 4;
 800d2b4:	2304      	movs	r3, #4
 800d2b6:	702b      	strb	r3, [r5, #0]
 800d2b8:	e7d6      	b.n	800d268 <VerifyRfFreq+0x1c>
        return false;
 800d2ba:	2000      	movs	r0, #0
 800d2bc:	e7d4      	b.n	800d268 <VerifyRfFreq+0x1c>
 800d2be:	bf00      	nop
 800d2c0:	08013170 	.word	0x08013170
 800d2c4:	cc8faa40 	.word	0xcc8faa40
 800d2c8:	001e847f 	.word	0x001e847f
 800d2cc:	cc7125c0 	.word	0xcc7125c0
 800d2d0:	002dc6c0 	.word	0x002dc6c0
 800d2d4:	cc435eff 	.word	0xcc435eff
 800d2d8:	000927bf 	.word	0x000927bf
 800d2dc:	cc38b0a0 	.word	0xcc38b0a0
 800d2e0:	0007a120 	.word	0x0007a120
 800d2e4:	cc2e0240 	.word	0xcc2e0240
 800d2e8:	0003d090 	.word	0x0003d090
 800d2ec:	cc296e60 	.word	0xcc296e60
 800d2f0:	000493e0 	.word	0x000493e0

0800d2f4 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800d2f4:	b570      	push	{r4, r5, r6, lr}
 800d2f6:	b084      	sub	sp, #16
 800d2f8:	4605      	mov	r5, r0
 800d2fa:	460c      	mov	r4, r1
    int8_t phyDr = DataratesEU868[datarate];
 800d2fc:	4b13      	ldr	r3, [pc, #76]	@ (800d34c <GetTimeOnAir+0x58>)
 800d2fe:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 800d300:	4913      	ldr	r1, [pc, #76]	@ (800d350 <GetTimeOnAir+0x5c>)
 800d302:	f7ff ff5f 	bl	800d1c4 <RegionCommonGetBandwidth>
 800d306:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 800d308:	2d07      	cmp	r5, #7
 800d30a:	d00e      	beq.n	800d32a <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800d30c:	4b11      	ldr	r3, [pc, #68]	@ (800d354 <GetTimeOnAir+0x60>)
 800d30e:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 800d310:	2001      	movs	r0, #1
 800d312:	9003      	str	r0, [sp, #12]
 800d314:	b2e4      	uxtb	r4, r4
 800d316:	9402      	str	r4, [sp, #8]
 800d318:	2300      	movs	r3, #0
 800d31a:	9301      	str	r3, [sp, #4]
 800d31c:	2308      	movs	r3, #8
 800d31e:	9300      	str	r3, [sp, #0]
 800d320:	4603      	mov	r3, r0
 800d322:	4632      	mov	r2, r6
 800d324:	47a8      	blx	r5
    }
    return timeOnAir;
}
 800d326:	b004      	add	sp, #16
 800d328:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800d32a:	4b0a      	ldr	r3, [pc, #40]	@ (800d354 <GetTimeOnAir+0x60>)
 800d32c:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 800d32e:	2301      	movs	r3, #1
 800d330:	9303      	str	r3, [sp, #12]
 800d332:	b2e4      	uxtb	r4, r4
 800d334:	9402      	str	r4, [sp, #8]
 800d336:	2000      	movs	r0, #0
 800d338:	9001      	str	r0, [sp, #4]
 800d33a:	2305      	movs	r3, #5
 800d33c:	9300      	str	r3, [sp, #0]
 800d33e:	4603      	mov	r3, r0
 800d340:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d344:	fb06 f202 	mul.w	r2, r6, r2
 800d348:	47a8      	blx	r5
 800d34a:	e7ec      	b.n	800d326 <GetTimeOnAir+0x32>
 800d34c:	08012d5c 	.word	0x08012d5c
 800d350:	08012d3c 	.word	0x08012d3c
 800d354:	08013170 	.word	0x08013170

0800d358 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 800d358:	b500      	push	{lr}
 800d35a:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800d35c:	2300      	movs	r3, #0
 800d35e:	9304      	str	r3, [sp, #16]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 800d360:	7803      	ldrb	r3, [r0, #0]
 800d362:	3b0b      	subs	r3, #11
 800d364:	2b2d      	cmp	r3, #45	@ 0x2d
 800d366:	d82f      	bhi.n	800d3c8 <RegionEU868GetPhyParam+0x70>
 800d368:	e8df f003 	tbb	[pc, r3]
 800d36c:	3f393633 	.word	0x3f393633
 800d370:	504c4845 	.word	0x504c4845
 800d374:	2e5c5854 	.word	0x2e5c5854
 800d378:	6e682e65 	.word	0x6e682e65
 800d37c:	2e2e7774 	.word	0x2e2e7774
 800d380:	2e177f7b 	.word	0x2e177f7b
 800d384:	2e2e2e2e 	.word	0x2e2e2e2e
 800d388:	2e2e2e2e 	.word	0x2e2e2e2e
 800d38c:	2e2e2e2e 	.word	0x2e2e2e2e
 800d390:	2e8c8582 	.word	0x2e8c8582
 800d394:	2e928f2e 	.word	0x2e928f2e
 800d398:	9b95      	.short	0x9b95
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 800d39a:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800d39e:	f88d 3004 	strb.w	r3, [sp, #4]
 800d3a2:	2307      	movs	r3, #7
 800d3a4:	f88d 3005 	strb.w	r3, [sp, #5]
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	f88d 3006 	strb.w	r3, [sp, #6]
 800d3ae:	2310      	movs	r3, #16
 800d3b0:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800d3b4:	4b3e      	ldr	r3, [pc, #248]	@ (800d4b0 <RegionEU868GetPhyParam+0x158>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	f503 7258 	add.w	r2, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800d3bc:	9202      	str	r2, [sp, #8]
 800d3be:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800d3c0:	a801      	add	r0, sp, #4
 800d3c2:	f7ff fedc 	bl	800d17e <RegionCommonGetNextLowerTxDr>
 800d3c6:	9004      	str	r0, [sp, #16]
            break;
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 800d3c8:	9804      	ldr	r0, [sp, #16]
 800d3ca:	9005      	str	r0, [sp, #20]
}
 800d3cc:	b007      	add	sp, #28
 800d3ce:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800d3d2:	2340      	movs	r3, #64	@ 0x40
 800d3d4:	9304      	str	r3, [sp, #16]
            break;
 800d3d6:	e7f7      	b.n	800d3c8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800d3d8:	2320      	movs	r3, #32
 800d3da:	9304      	str	r3, [sp, #16]
            break;
 800d3dc:	e7f4      	b.n	800d3c8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 800d3de:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d3e2:	4a34      	ldr	r2, [pc, #208]	@ (800d4b4 <RegionEU868GetPhyParam+0x15c>)
 800d3e4:	5cd3      	ldrb	r3, [r2, r3]
 800d3e6:	9304      	str	r3, [sp, #16]
            break;
 800d3e8:	e7ee      	b.n	800d3c8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 800d3ea:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d3ee:	4a32      	ldr	r2, [pc, #200]	@ (800d4b8 <RegionEU868GetPhyParam+0x160>)
 800d3f0:	5cd3      	ldrb	r3, [r2, r3]
 800d3f2:	9304      	str	r3, [sp, #16]
            break;
 800d3f4:	e7e8      	b.n	800d3c8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 800d3f6:	2301      	movs	r3, #1
 800d3f8:	9304      	str	r3, [sp, #16]
            break;
 800d3fa:	e7e5      	b.n	800d3c8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 800d3fc:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800d400:	9304      	str	r3, [sp, #16]
            break;
 800d402:	e7e1      	b.n	800d3c8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800d404:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d408:	9304      	str	r3, [sp, #16]
            break;
 800d40a:	e7dd      	b.n	800d3c8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800d40c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800d410:	9304      	str	r3, [sp, #16]
            break;
 800d412:	e7d9      	b.n	800d3c8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800d414:	f241 3388 	movw	r3, #5000	@ 0x1388
 800d418:	9304      	str	r3, [sp, #16]
            break;
 800d41a:	e7d5      	b.n	800d3c8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800d41c:	f241 7370 	movw	r3, #6000	@ 0x1770
 800d420:	9304      	str	r3, [sp, #16]
            break;
 800d422:	e7d1      	b.n	800d3c8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 800d424:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800d428:	4824      	ldr	r0, [pc, #144]	@ (800d4bc <RegionEU868GetPhyParam+0x164>)
 800d42a:	f002 fa4d 	bl	800f8c8 <randr>
 800d42e:	f500 60fa 	add.w	r0, r0, #2000	@ 0x7d0
 800d432:	9004      	str	r0, [sp, #16]
            break;
 800d434:	e7c8      	b.n	800d3c8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 800d436:	4b22      	ldr	r3, [pc, #136]	@ (800d4c0 <RegionEU868GetPhyParam+0x168>)
 800d438:	9304      	str	r3, [sp, #16]
            break;
 800d43a:	e7c5      	b.n	800d3c8 <RegionEU868GetPhyParam+0x70>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800d43c:	4b1c      	ldr	r3, [pc, #112]	@ (800d4b0 <RegionEU868GetPhyParam+0x158>)
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800d444:	9304      	str	r3, [sp, #16]
            break;
 800d446:	e7bf      	b.n	800d3c8 <RegionEU868GetPhyParam+0x70>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800d448:	4b19      	ldr	r3, [pc, #100]	@ (800d4b0 <RegionEU868GetPhyParam+0x158>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 800d450:	9304      	str	r3, [sp, #16]
            break;
 800d452:	e7b9      	b.n	800d3c8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 800d454:	2310      	movs	r3, #16
 800d456:	9304      	str	r3, [sp, #16]
            break;
 800d458:	e7b6      	b.n	800d3c8 <RegionEU868GetPhyParam+0x70>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800d45a:	4b15      	ldr	r3, [pc, #84]	@ (800d4b0 <RegionEU868GetPhyParam+0x158>)
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	9304      	str	r3, [sp, #16]
            break;
 800d460:	e7b2      	b.n	800d3c8 <RegionEU868GetPhyParam+0x70>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 800d462:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 800d466:	9304      	str	r3, [sp, #16]
            break;
 800d468:	e7ae      	b.n	800d3c8 <RegionEU868GetPhyParam+0x70>
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 800d46a:	4b16      	ldr	r3, [pc, #88]	@ (800d4c4 <RegionEU868GetPhyParam+0x16c>)
 800d46c:	9304      	str	r3, [sp, #16]
            break;
 800d46e:	e7ab      	b.n	800d3c8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 800d470:	4b13      	ldr	r3, [pc, #76]	@ (800d4c0 <RegionEU868GetPhyParam+0x168>)
 800d472:	9304      	str	r3, [sp, #16]
            break;
 800d474:	e7a8      	b.n	800d3c8 <RegionEU868GetPhyParam+0x70>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 800d476:	2311      	movs	r3, #17
 800d478:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 800d47c:	2301      	movs	r3, #1
 800d47e:	f88d 3011 	strb.w	r3, [sp, #17]
            break;
 800d482:	e7a1      	b.n	800d3c8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 800d484:	2303      	movs	r3, #3
 800d486:	9304      	str	r3, [sp, #16]
            break;
 800d488:	e79e      	b.n	800d3c8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 800d48a:	4b0d      	ldr	r3, [pc, #52]	@ (800d4c0 <RegionEU868GetPhyParam+0x168>)
 800d48c:	9304      	str	r3, [sp, #16]
            break;
 800d48e:	e79b      	b.n	800d3c8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 800d490:	2303      	movs	r3, #3
 800d492:	9304      	str	r3, [sp, #16]
            break;
 800d494:	e798      	b.n	800d3c8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 800d496:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d49a:	4a0b      	ldr	r2, [pc, #44]	@ (800d4c8 <RegionEU868GetPhyParam+0x170>)
 800d49c:	5cd3      	ldrb	r3, [r2, r3]
 800d49e:	9304      	str	r3, [sp, #16]
            break;
 800d4a0:	e792      	b.n	800d3c8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 800d4a2:	490a      	ldr	r1, [pc, #40]	@ (800d4cc <RegionEU868GetPhyParam+0x174>)
 800d4a4:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800d4a8:	f7ff fe8c 	bl	800d1c4 <RegionCommonGetBandwidth>
 800d4ac:	9004      	str	r0, [sp, #16]
            break;
 800d4ae:	e78b      	b.n	800d3c8 <RegionEU868GetPhyParam+0x70>
 800d4b0:	20000e80 	.word	0x20000e80
 800d4b4:	08012d34 	.word	0x08012d34
 800d4b8:	08012d2c 	.word	0x08012d2c
 800d4bc:	fffffc18 	.word	0xfffffc18
 800d4c0:	33d3e608 	.word	0x33d3e608
 800d4c4:	4009999a 	.word	0x4009999a
 800d4c8:	08012d5c 	.word	0x08012d5c
 800d4cc:	08012d3c 	.word	0x08012d3c

0800d4d0 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800d4d0:	b510      	push	{r4, lr}
 800d4d2:	b082      	sub	sp, #8
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800d4d4:	4b0b      	ldr	r3, [pc, #44]	@ (800d504 <RegionEU868SetBandTxDone+0x34>)
 800d4d6:	681a      	ldr	r2, [r3, #0]
 800d4d8:	7803      	ldrb	r3, [r0, #0]
 800d4da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d4de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d4e2:	7a5b      	ldrb	r3, [r3, #9]
 800d4e4:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800d4e8:	4b07      	ldr	r3, [pc, #28]	@ (800d508 <RegionEU868SetBandTxDone+0x38>)
 800d4ea:	681c      	ldr	r4, [r3, #0]
 800d4ec:	6903      	ldr	r3, [r0, #16]
 800d4ee:	9300      	str	r3, [sp, #0]
 800d4f0:	68c3      	ldr	r3, [r0, #12]
 800d4f2:	7842      	ldrb	r2, [r0, #1]
 800d4f4:	6881      	ldr	r1, [r0, #8]
 800d4f6:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800d4fa:	f7ff fc17 	bl	800cd2c <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 800d4fe:	b002      	add	sp, #8
 800d500:	bd10      	pop	{r4, pc}
 800d502:	bf00      	nop
 800d504:	20000e80 	.word	0x20000e80
 800d508:	20000e7c 	.word	0x20000e7c

0800d50c <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 800d50c:	b530      	push	{r4, r5, lr}
 800d50e:	b0a5      	sub	sp, #148	@ 0x94
 800d510:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 800d512:	2290      	movs	r2, #144	@ 0x90
 800d514:	2100      	movs	r1, #0
 800d516:	4668      	mov	r0, sp
 800d518:	f004 fe72 	bl	8012200 <memset>
 800d51c:	2364      	movs	r3, #100	@ 0x64
 800d51e:	f8ad 3000 	strh.w	r3, [sp]
 800d522:	f8ad 3018 	strh.w	r3, [sp, #24]
 800d526:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d52a:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 800d52e:	210a      	movs	r1, #10
 800d530:	f8ad 1048 	strh.w	r1, [sp, #72]	@ 0x48
 800d534:	f8ad 3060 	strh.w	r3, [sp, #96]	@ 0x60
 800d538:	f8ad 2078 	strh.w	r2, [sp, #120]	@ 0x78
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 800d53c:	7b23      	ldrb	r3, [r4, #12]
 800d53e:	2b01      	cmp	r3, #1
 800d540:	d031      	beq.n	800d5a6 <RegionEU868InitDefaults+0x9a>
 800d542:	2b02      	cmp	r3, #2
 800d544:	d03e      	beq.n	800d5c4 <RegionEU868InitDefaults+0xb8>
 800d546:	2b00      	cmp	r3, #0
 800d548:	d13a      	bne.n	800d5c0 <RegionEU868InitDefaults+0xb4>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800d54a:	6823      	ldr	r3, [r4, #0]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d037      	beq.n	800d5c0 <RegionEU868InitDefaults+0xb4>
 800d550:	6863      	ldr	r3, [r4, #4]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d034      	beq.n	800d5c0 <RegionEU868InitDefaults+0xb4>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800d556:	4d20      	ldr	r5, [pc, #128]	@ (800d5d8 <RegionEU868InitDefaults+0xcc>)
 800d558:	602b      	str	r3, [r5, #0]
            RegionBands = (Band_t*) params->Bands;
 800d55a:	68a0      	ldr	r0, [r4, #8]
 800d55c:	4b1f      	ldr	r3, [pc, #124]	@ (800d5dc <RegionEU868InitDefaults+0xd0>)
 800d55e:	6018      	str	r0, [r3, #0]

            // Default bands
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 800d560:	2290      	movs	r2, #144	@ 0x90
 800d562:	4669      	mov	r1, sp
 800d564:	f002 f9bd 	bl	800f8e2 <memcpy1>
#endif /* REGION_VERSION */

            // Default channels
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 800d568:	682c      	ldr	r4, [r5, #0]
 800d56a:	4b1d      	ldr	r3, [pc, #116]	@ (800d5e0 <RegionEU868InitDefaults+0xd4>)
 800d56c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d570:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 800d574:	f104 0c0c 	add.w	ip, r4, #12
 800d578:	f103 020c 	add.w	r2, r3, #12
 800d57c:	ca07      	ldmia	r2, {r0, r1, r2}
 800d57e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 800d582:	f104 0c18 	add.w	ip, r4, #24
 800d586:	3318      	adds	r3, #24
 800d588:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d58c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}

            // Default ChannelsMask
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800d590:	2307      	movs	r3, #7
 800d592:	f8a4 336c 	strh.w	r3, [r4, #876]	@ 0x36c

            // Update the channels mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800d596:	2201      	movs	r2, #1
 800d598:	f504 715b 	add.w	r1, r4, #876	@ 0x36c
 800d59c:	f504 7058 	add.w	r0, r4, #864	@ 0x360
 800d5a0:	f7ff fbb5 	bl	800cd0e <RegionCommonChanMaskCopy>
            break;
 800d5a4:	e00c      	b.n	800d5c0 <RegionEU868InitDefaults+0xb4>
        }
        case INIT_TYPE_RESET_TO_DEFAULT_CHANNELS:
        {
            // Reset Channels Rx1Frequency to default 0
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800d5a6:	4b0c      	ldr	r3, [pc, #48]	@ (800d5d8 <RegionEU868InitDefaults+0xcc>)
 800d5a8:	6818      	ldr	r0, [r3, #0]
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800d5ae:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 800d5b0:	61c3      	str	r3, [r0, #28]
            // Update the channels mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800d5b2:	2201      	movs	r2, #1
 800d5b4:	f500 715b 	add.w	r1, r0, #876	@ 0x36c
 800d5b8:	f500 7058 	add.w	r0, r0, #864	@ 0x360
 800d5bc:	f7ff fba7 	bl	800cd0e <RegionCommonChanMaskCopy>
        {
            break;
        }
    }
#endif /* REGION_EU868 */
}
 800d5c0:	b025      	add	sp, #148	@ 0x94
 800d5c2:	bd30      	pop	{r4, r5, pc}
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800d5c4:	4b04      	ldr	r3, [pc, #16]	@ (800d5d8 <RegionEU868InitDefaults+0xcc>)
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 800d5cc:	f8b3 136c 	ldrh.w	r1, [r3, #876]	@ 0x36c
 800d5d0:	430a      	orrs	r2, r1
 800d5d2:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
            break;
 800d5d6:	e7f3      	b.n	800d5c0 <RegionEU868InitDefaults+0xb4>
 800d5d8:	20000e80 	.word	0x20000e80
 800d5dc:	20000e7c 	.word	0x20000e7c
 800d5e0:	080123e8 	.word	0x080123e8

0800d5e4 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800d5e4:	b500      	push	{lr}
 800d5e6:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    switch( phyAttribute )
 800d5e8:	290f      	cmp	r1, #15
 800d5ea:	d83c      	bhi.n	800d666 <RegionEU868Verify+0x82>
 800d5ec:	e8df f001 	tbb	[pc, r1]
 800d5f0:	3b3b3b0a 	.word	0x3b3b3b0a
 800d5f4:	271d133b 	.word	0x271d133b
 800d5f8:	3b31313b 	.word	0x3b31313b
 800d5fc:	083b3b3b 	.word	0x083b3b3b
 800d600:	2001      	movs	r0, #1
 800d602:	e031      	b.n	800d668 <RegionEU868Verify+0x84>
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 800d604:	2300      	movs	r3, #0
 800d606:	f88d 3007 	strb.w	r3, [sp, #7]
            return VerifyRfFreq( verify->Frequency, &band );
 800d60a:	f10d 0107 	add.w	r1, sp, #7
 800d60e:	6800      	ldr	r0, [r0, #0]
 800d610:	f7ff fe1c 	bl	800d24c <VerifyRfFreq>
 800d614:	e028      	b.n	800d668 <RegionEU868Verify+0x84>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 800d616:	2207      	movs	r2, #7
 800d618:	2100      	movs	r1, #0
 800d61a:	f990 0000 	ldrsb.w	r0, [r0]
 800d61e:	f7ff fb02 	bl	800cc26 <RegionCommonValueInRange>
 800d622:	3800      	subs	r0, #0
 800d624:	bf18      	it	ne
 800d626:	2001      	movne	r0, #1
 800d628:	e01e      	b.n	800d668 <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800d62a:	2205      	movs	r2, #5
 800d62c:	2100      	movs	r1, #0
 800d62e:	f990 0000 	ldrsb.w	r0, [r0]
 800d632:	f7ff faf8 	bl	800cc26 <RegionCommonValueInRange>
 800d636:	3800      	subs	r0, #0
 800d638:	bf18      	it	ne
 800d63a:	2001      	movne	r0, #1
 800d63c:	e014      	b.n	800d668 <RegionEU868Verify+0x84>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 800d63e:	2207      	movs	r2, #7
 800d640:	2100      	movs	r1, #0
 800d642:	f990 0000 	ldrsb.w	r0, [r0]
 800d646:	f7ff faee 	bl	800cc26 <RegionCommonValueInRange>
 800d64a:	3800      	subs	r0, #0
 800d64c:	bf18      	it	ne
 800d64e:	2001      	movne	r0, #1
 800d650:	e00a      	b.n	800d668 <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 800d652:	2207      	movs	r2, #7
 800d654:	2100      	movs	r1, #0
 800d656:	f990 0000 	ldrsb.w	r0, [r0]
 800d65a:	f7ff fae4 	bl	800cc26 <RegionCommonValueInRange>
 800d65e:	3800      	subs	r0, #0
 800d660:	bf18      	it	ne
 800d662:	2001      	movne	r0, #1
 800d664:	e000      	b.n	800d668 <RegionEU868Verify+0x84>
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
 800d666:	2000      	movs	r0, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 800d668:	b003      	add	sp, #12
 800d66a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800d670 <RegionEU868ChanMaskSet>:
    }
#endif /* REGION_EU868 */
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800d670:	b508      	push	{r3, lr}
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 800d672:	7903      	ldrb	r3, [r0, #4]
 800d674:	b11b      	cbz	r3, 800d67e <RegionEU868ChanMaskSet+0xe>
 800d676:	2b01      	cmp	r3, #1
 800d678:	d00b      	beq.n	800d692 <RegionEU868ChanMaskSet+0x22>
 800d67a:	2000      	movs	r0, #0
 800d67c:	e008      	b.n	800d690 <RegionEU868ChanMaskSet+0x20>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800d67e:	4b0a      	ldr	r3, [pc, #40]	@ (800d6a8 <RegionEU868ChanMaskSet+0x38>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	2201      	movs	r2, #1
 800d684:	6801      	ldr	r1, [r0, #0]
 800d686:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 800d68a:	f7ff fb40 	bl	800cd0e <RegionCommonChanMaskCopy>
            break;
        }
        default:
            return false;
    }
    return true;
 800d68e:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 800d690:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800d692:	4b05      	ldr	r3, [pc, #20]	@ (800d6a8 <RegionEU868ChanMaskSet+0x38>)
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	2201      	movs	r2, #1
 800d698:	6801      	ldr	r1, [r0, #0]
 800d69a:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 800d69e:	f7ff fb36 	bl	800cd0e <RegionCommonChanMaskCopy>
    return true;
 800d6a2:	2001      	movs	r0, #1
            break;
 800d6a4:	e7f4      	b.n	800d690 <RegionEU868ChanMaskSet+0x20>
 800d6a6:	bf00      	nop
 800d6a8:	20000e80 	.word	0x20000e80

0800d6ac <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800d6ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6ae:	b083      	sub	sp, #12
 800d6b0:	460e      	mov	r6, r1
 800d6b2:	4617      	mov	r7, r2
 800d6b4:	461c      	mov	r4, r3
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800d6b6:	2807      	cmp	r0, #7
 800d6b8:	bfa8      	it	ge
 800d6ba:	2007      	movge	r0, #7
 800d6bc:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 800d6be:	4913      	ldr	r1, [pc, #76]	@ (800d70c <RegionEU868ComputeRxWindowParameters+0x60>)
 800d6c0:	f7ff fd80 	bl	800d1c4 <RegionCommonGetBandwidth>
 800d6c4:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800d6c6:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800d6ca:	2b07      	cmp	r3, #7
 800d6cc:	d017      	beq.n	800d6fe <RegionEU868ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800d6ce:	4a0f      	ldr	r2, [pc, #60]	@ (800d70c <RegionEU868ComputeRxWindowParameters+0x60>)
 800d6d0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d6d4:	4a0e      	ldr	r2, [pc, #56]	@ (800d710 <RegionEU868ComputeRxWindowParameters+0x64>)
 800d6d6:	5cd0      	ldrb	r0, [r2, r3]
 800d6d8:	f7ff fc44 	bl	800cf64 <RegionCommonComputeSymbolTimeLoRa>
 800d6dc:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800d6de:	4b0d      	ldr	r3, [pc, #52]	@ (800d714 <RegionEU868ComputeRxWindowParameters+0x68>)
 800d6e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d6e2:	4798      	blx	r3
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	f104 020c 	add.w	r2, r4, #12
 800d6ea:	9201      	str	r2, [sp, #4]
 800d6ec:	3408      	adds	r4, #8
 800d6ee:	9400      	str	r4, [sp, #0]
 800d6f0:	463a      	mov	r2, r7
 800d6f2:	4631      	mov	r1, r6
 800d6f4:	4628      	mov	r0, r5
 800d6f6:	f7ff fc43 	bl	800cf80 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 800d6fa:	b003      	add	sp, #12
 800d6fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 800d6fe:	4a04      	ldr	r2, [pc, #16]	@ (800d710 <RegionEU868ComputeRxWindowParameters+0x64>)
 800d700:	5cd0      	ldrb	r0, [r2, r3]
 800d702:	f7ff fc37 	bl	800cf74 <RegionCommonComputeSymbolTimeFsk>
 800d706:	4605      	mov	r5, r0
 800d708:	e7e9      	b.n	800d6de <RegionEU868ComputeRxWindowParameters+0x32>
 800d70a:	bf00      	nop
 800d70c:	08012d3c 	.word	0x08012d3c
 800d710:	08012d5c 	.word	0x08012d5c
 800d714:	08013170 	.word	0x08013170

0800d718 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800d718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d71c:	b08a      	sub	sp, #40	@ 0x28
 800d71e:	4604      	mov	r4, r0
 800d720:	460f      	mov	r7, r1
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800d722:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800d726:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800d72a:	4b37      	ldr	r3, [pc, #220]	@ (800d808 <RegionEU868RxConfig+0xf0>)
 800d72c:	685b      	ldr	r3, [r3, #4]
 800d72e:	4798      	blx	r3
 800d730:	2800      	cmp	r0, #0
 800d732:	d167      	bne.n	800d804 <RegionEU868RxConfig+0xec>
 800d734:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800d736:	7ce3      	ldrb	r3, [r4, #19]
 800d738:	b983      	cbnz	r3, 800d75c <RegionEU868RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800d73a:	4b34      	ldr	r3, [pc, #208]	@ (800d80c <RegionEU868RxConfig+0xf4>)
 800d73c:	681a      	ldr	r2, [r3, #0]
 800d73e:	7823      	ldrb	r3, [r4, #0]
 800d740:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800d744:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800d748:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d74c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d750:	f8d2 8004 	ldr.w	r8, [r2, #4]
 800d754:	f1b8 0f00 	cmp.w	r8, #0
 800d758:	d100      	bne.n	800d75c <RegionEU868RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800d75a:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 800d75c:	4b2c      	ldr	r3, [pc, #176]	@ (800d810 <RegionEU868RxConfig+0xf8>)
 800d75e:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 800d762:	4b29      	ldr	r3, [pc, #164]	@ (800d808 <RegionEU868RxConfig+0xf0>)
 800d764:	68db      	ldr	r3, [r3, #12]
 800d766:	4640      	mov	r0, r8
 800d768:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800d76a:	2d07      	cmp	r5, #7
 800d76c:	d02b      	beq.n	800d7c6 <RegionEU868RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800d76e:	4b26      	ldr	r3, [pc, #152]	@ (800d808 <RegionEU868RxConfig+0xf0>)
 800d770:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800d774:	7ca3      	ldrb	r3, [r4, #18]
 800d776:	9309      	str	r3, [sp, #36]	@ 0x24
 800d778:	2601      	movs	r6, #1
 800d77a:	9608      	str	r6, [sp, #32]
 800d77c:	2300      	movs	r3, #0
 800d77e:	9307      	str	r3, [sp, #28]
 800d780:	9306      	str	r3, [sp, #24]
 800d782:	9305      	str	r3, [sp, #20]
 800d784:	9304      	str	r3, [sp, #16]
 800d786:	9303      	str	r3, [sp, #12]
 800d788:	8922      	ldrh	r2, [r4, #8]
 800d78a:	9202      	str	r2, [sp, #8]
 800d78c:	2208      	movs	r2, #8
 800d78e:	9201      	str	r2, [sp, #4]
 800d790:	9300      	str	r3, [sp, #0]
 800d792:	4633      	mov	r3, r6
 800d794:	464a      	mov	r2, r9
 800d796:	78a1      	ldrb	r1, [r4, #2]
 800d798:	4630      	mov	r0, r6
 800d79a:	47d0      	blx	sl
    }

    if( rxConfig->RepeaterSupport == true )
 800d79c:	7c63      	ldrb	r3, [r4, #17]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d02d      	beq.n	800d7fe <RegionEU868RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 800d7a2:	4b1c      	ldr	r3, [pc, #112]	@ (800d814 <RegionEU868RxConfig+0xfc>)
 800d7a4:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800d7a6:	4b18      	ldr	r3, [pc, #96]	@ (800d808 <RegionEU868RxConfig+0xf0>)
 800d7a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d7aa:	310d      	adds	r1, #13
 800d7ac:	b2c9      	uxtb	r1, r1
 800d7ae:	4630      	mov	r0, r6
 800d7b0:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800d7b2:	462a      	mov	r2, r5
 800d7b4:	4641      	mov	r1, r8
 800d7b6:	7ce0      	ldrb	r0, [r4, #19]
 800d7b8:	f7ff fd16 	bl	800d1e8 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 800d7bc:	703d      	strb	r5, [r7, #0]
    return true;
 800d7be:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 800d7c0:	b00a      	add	sp, #40	@ 0x28
 800d7c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800d7c6:	4b10      	ldr	r3, [pc, #64]	@ (800d808 <RegionEU868RxConfig+0xf0>)
 800d7c8:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800d7cc:	7ca3      	ldrb	r3, [r4, #18]
 800d7ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7d0:	2000      	movs	r0, #0
 800d7d2:	9008      	str	r0, [sp, #32]
 800d7d4:	9007      	str	r0, [sp, #28]
 800d7d6:	9006      	str	r0, [sp, #24]
 800d7d8:	2301      	movs	r3, #1
 800d7da:	9305      	str	r3, [sp, #20]
 800d7dc:	9004      	str	r0, [sp, #16]
 800d7de:	9003      	str	r0, [sp, #12]
 800d7e0:	8923      	ldrh	r3, [r4, #8]
 800d7e2:	9302      	str	r3, [sp, #8]
 800d7e4:	2305      	movs	r3, #5
 800d7e6:	9301      	str	r3, [sp, #4]
 800d7e8:	4b0b      	ldr	r3, [pc, #44]	@ (800d818 <RegionEU868RxConfig+0x100>)
 800d7ea:	9300      	str	r3, [sp, #0]
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d7f2:	fb02 f209 	mul.w	r2, r2, r9
 800d7f6:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800d7fa:	47d0      	blx	sl
 800d7fc:	e7ce      	b.n	800d79c <RegionEU868RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 800d7fe:	4b07      	ldr	r3, [pc, #28]	@ (800d81c <RegionEU868RxConfig+0x104>)
 800d800:	5d59      	ldrb	r1, [r3, r5]
 800d802:	e7d0      	b.n	800d7a6 <RegionEU868RxConfig+0x8e>
        return false;
 800d804:	2000      	movs	r0, #0
 800d806:	e7db      	b.n	800d7c0 <RegionEU868RxConfig+0xa8>
 800d808:	08013170 	.word	0x08013170
 800d80c:	20000e80 	.word	0x20000e80
 800d810:	08012d5c 	.word	0x08012d5c
 800d814:	08012d2c 	.word	0x08012d2c
 800d818:	00014585 	.word	0x00014585
 800d81c:	08012d34 	.word	0x08012d34

0800d820 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800d820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d824:	b08d      	sub	sp, #52	@ 0x34
 800d826:	4604      	mov	r4, r0
 800d828:	460f      	mov	r7, r1
 800d82a:	4690      	mov	r8, r2
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800d82c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d830:	4a42      	ldr	r2, [pc, #264]	@ (800d93c <RegionEU868TxConfig+0x11c>)
 800d832:	f912 a003 	ldrsb.w	sl, [r2, r3]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800d836:	4d42      	ldr	r5, [pc, #264]	@ (800d940 <RegionEU868TxConfig+0x120>)
 800d838:	682a      	ldr	r2, [r5, #0]
 800d83a:	7803      	ldrb	r3, [r0, #0]
 800d83c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d840:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d844:	7a53      	ldrb	r3, [r2, #9]
 800d846:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d84a:	4a3e      	ldr	r2, [pc, #248]	@ (800d944 <RegionEU868TxConfig+0x124>)
 800d84c:	6812      	ldr	r2, [r2, #0]
 800d84e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d852:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800d856:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800d85a:	f7ff fcaf 	bl	800d1bc <RegionCommonLimitTxPower>
 800d85e:	4606      	mov	r6, r0
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 800d860:	4939      	ldr	r1, [pc, #228]	@ (800d948 <RegionEU868TxConfig+0x128>)
 800d862:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800d866:	f7ff fcad 	bl	800d1c4 <RegionCommonGetBandwidth>
 800d86a:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800d86c:	68a2      	ldr	r2, [r4, #8]
 800d86e:	6861      	ldr	r1, [r4, #4]
 800d870:	4630      	mov	r0, r6
 800d872:	f7ff fbc1 	bl	800cff8 <RegionCommonComputeTxPower>
 800d876:	900b      	str	r0, [sp, #44]	@ 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800d878:	4b34      	ldr	r3, [pc, #208]	@ (800d94c <RegionEU868TxConfig+0x12c>)
 800d87a:	68da      	ldr	r2, [r3, #12]
 800d87c:	6829      	ldr	r1, [r5, #0]
 800d87e:	7823      	ldrb	r3, [r4, #0]
 800d880:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d884:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800d888:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 800d88a:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800d88e:	2b07      	cmp	r3, #7
 800d890:	d031      	beq.n	800d8f6 <RegionEU868TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800d892:	4b2e      	ldr	r3, [pc, #184]	@ (800d94c <RegionEU868TxConfig+0x12c>)
 800d894:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 800d898:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800d89c:	9308      	str	r3, [sp, #32]
 800d89e:	2200      	movs	r2, #0
 800d8a0:	9207      	str	r2, [sp, #28]
 800d8a2:	9206      	str	r2, [sp, #24]
 800d8a4:	9205      	str	r2, [sp, #20]
 800d8a6:	2501      	movs	r5, #1
 800d8a8:	9504      	str	r5, [sp, #16]
 800d8aa:	9203      	str	r2, [sp, #12]
 800d8ac:	2308      	movs	r3, #8
 800d8ae:	9302      	str	r3, [sp, #8]
 800d8b0:	9501      	str	r5, [sp, #4]
 800d8b2:	f8cd a000 	str.w	sl, [sp]
 800d8b6:	464b      	mov	r3, r9
 800d8b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d8ba:	4628      	mov	r0, r5
 800d8bc:	47d8      	blx	fp
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800d8be:	4b20      	ldr	r3, [pc, #128]	@ (800d940 <RegionEU868TxConfig+0x120>)
 800d8c0:	681a      	ldr	r2, [r3, #0]
 800d8c2:	7823      	ldrb	r3, [r4, #0]
 800d8c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d8c8:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800d8cc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d8d0:	f7ff fcac 	bl	800d22c <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800d8d4:	89a1      	ldrh	r1, [r4, #12]
 800d8d6:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800d8da:	f7ff fd0b 	bl	800d2f4 <GetTimeOnAir>
 800d8de:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800d8e2:	4b1a      	ldr	r3, [pc, #104]	@ (800d94c <RegionEU868TxConfig+0x12c>)
 800d8e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d8e6:	7b21      	ldrb	r1, [r4, #12]
 800d8e8:	4628      	mov	r0, r5
 800d8ea:	4798      	blx	r3

    *txPower = txPowerLimited;
 800d8ec:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800d8ee:	2001      	movs	r0, #1
 800d8f0:	b00d      	add	sp, #52	@ 0x34
 800d8f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800d8f6:	4b15      	ldr	r3, [pc, #84]	@ (800d94c <RegionEU868TxConfig+0x12c>)
 800d8f8:	69dd      	ldr	r5, [r3, #28]
 800d8fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d8fe:	fb03 f30a 	mul.w	r3, r3, sl
 800d902:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800d906:	9208      	str	r2, [sp, #32]
 800d908:	f04f 0a00 	mov.w	sl, #0
 800d90c:	f8cd a01c 	str.w	sl, [sp, #28]
 800d910:	f8cd a018 	str.w	sl, [sp, #24]
 800d914:	f8cd a014 	str.w	sl, [sp, #20]
 800d918:	2201      	movs	r2, #1
 800d91a:	9204      	str	r2, [sp, #16]
 800d91c:	f8cd a00c 	str.w	sl, [sp, #12]
 800d920:	2205      	movs	r2, #5
 800d922:	9202      	str	r2, [sp, #8]
 800d924:	f8cd a004 	str.w	sl, [sp, #4]
 800d928:	9300      	str	r3, [sp, #0]
 800d92a:	464b      	mov	r3, r9
 800d92c:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 800d930:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d932:	4650      	mov	r0, sl
 800d934:	47a8      	blx	r5
        modem = MODEM_FSK;
 800d936:	4655      	mov	r5, sl
 800d938:	e7c1      	b.n	800d8be <RegionEU868TxConfig+0x9e>
 800d93a:	bf00      	nop
 800d93c:	08012d5c 	.word	0x08012d5c
 800d940:	20000e80 	.word	0x20000e80
 800d944:	20000e7c 	.word	0x20000e7c
 800d948:	08012d3c 	.word	0x08012d3c
 800d94c:	08013170 	.word	0x08013170

0800d950 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800d950:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d954:	b08f      	sub	sp, #60	@ 0x3c
 800d956:	4605      	mov	r5, r0
 800d958:	4689      	mov	r9, r1
 800d95a:	4690      	mov	r8, r2
 800d95c:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800d95e:	2400      	movs	r4, #0
 800d960:	940c      	str	r4, [sp, #48]	@ 0x30
 800d962:	f8ad 4034 	strh.w	r4, [sp, #52]	@ 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800d966:	f8ad 402e 	strh.w	r4, [sp, #46]	@ 0x2e
    uint8_t status = 0x07;
 800d96a:	2607      	movs	r6, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800d96c:	e030      	b.n	800d9d0 <RegionEU868LinkAdrReq+0x80>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800d96e:	f04f 0c00 	mov.w	ip, #0
        status = 0x07;
 800d972:	2607      	movs	r6, #7
 800d974:	e012      	b.n	800d99c <RegionEU868LinkAdrReq+0x4c>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 800d976:	4a58      	ldr	r2, [pc, #352]	@ (800dad8 <RegionEU868LinkAdrReq+0x188>)
 800d978:	6812      	ldr	r2, [r2, #0]
 800d97a:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800d97e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800d982:	b13a      	cbz	r2, 800d994 <RegionEU868LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 800d984:	2201      	movs	r2, #1
 800d986:	fa02 f20c 	lsl.w	r2, r2, ip
 800d98a:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 800d98e:	430a      	orrs	r2, r1
 800d990:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800d994:	f10c 0c01 	add.w	ip, ip, #1
 800d998:	fa5f fc8c 	uxtb.w	ip, ip
 800d99c:	f1bc 0f0f 	cmp.w	ip, #15
 800d9a0:	d816      	bhi.n	800d9d0 <RegionEU868LinkAdrReq+0x80>
                if( linkAdrParams.ChMaskCtrl == 6 )
 800d9a2:	2b06      	cmp	r3, #6
 800d9a4:	d0e7      	beq.n	800d976 <RegionEU868LinkAdrReq+0x26>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800d9a6:	f8bd e02e 	ldrh.w	lr, [sp, #46]	@ 0x2e
 800d9aa:	fa4e fe0c 	asr.w	lr, lr, ip
 800d9ae:	f01e 0f01 	tst.w	lr, #1
 800d9b2:	d0ef      	beq.n	800d994 <RegionEU868LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800d9b4:	4a48      	ldr	r2, [pc, #288]	@ (800dad8 <RegionEU868LinkAdrReq+0x188>)
 800d9b6:	6812      	ldr	r2, [r2, #0]
 800d9b8:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800d9bc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800d9c0:	2a00      	cmp	r2, #0
 800d9c2:	d1e7      	bne.n	800d994 <RegionEU868LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 800d9c4:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 800d9c8:	e7e4      	b.n	800d994 <RegionEU868LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 800d9ca:	2606      	movs	r6, #6
 800d9cc:	e000      	b.n	800d9d0 <RegionEU868LinkAdrReq+0x80>
            status &= 0xFE; // Channel mask KO
 800d9ce:	2606      	movs	r6, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800d9d0:	7a2b      	ldrb	r3, [r5, #8]
 800d9d2:	42a3      	cmp	r3, r4
 800d9d4:	d919      	bls.n	800da0a <RegionEU868LinkAdrReq+0xba>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800d9d6:	6868      	ldr	r0, [r5, #4]
 800d9d8:	a90c      	add	r1, sp, #48	@ 0x30
 800d9da:	4420      	add	r0, r4
 800d9dc:	f7ff fa48 	bl	800ce70 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	b190      	cbz	r0, 800da0a <RegionEU868LinkAdrReq+0xba>
        bytesProcessed += nextIndex;
 800d9e4:	4423      	add	r3, r4
 800d9e6:	b2dc      	uxtb	r4, r3
        chMask = linkAdrParams.ChMask;
 800d9e8:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 800d9ec:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800d9f0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800d9f4:	b90b      	cbnz	r3, 800d9fa <RegionEU868LinkAdrReq+0xaa>
 800d9f6:	2a00      	cmp	r2, #0
 800d9f8:	d0e7      	beq.n	800d9ca <RegionEU868LinkAdrReq+0x7a>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800d9fa:	1e5a      	subs	r2, r3, #1
 800d9fc:	b2d2      	uxtb	r2, r2
 800d9fe:	2a04      	cmp	r2, #4
 800da00:	d9e5      	bls.n	800d9ce <RegionEU868LinkAdrReq+0x7e>
 800da02:	2b06      	cmp	r3, #6
 800da04:	d9b3      	bls.n	800d96e <RegionEU868LinkAdrReq+0x1e>
            status &= 0xFE; // Channel mask KO
 800da06:	2606      	movs	r6, #6
 800da08:	e7e2      	b.n	800d9d0 <RegionEU868LinkAdrReq+0x80>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800da0a:	2302      	movs	r3, #2
 800da0c:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800da10:	7a6b      	ldrb	r3, [r5, #9]
 800da12:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
    phyParam = RegionEU868GetPhyParam( &getPhy );
 800da16:	a80a      	add	r0, sp, #40	@ 0x28
 800da18:	f7ff fc9e 	bl	800d358 <RegionEU868GetPhyParam>
 800da1c:	9009      	str	r0, [sp, #36]	@ 0x24

    linkAdrVerifyParams.Status = status;
 800da1e:	f88d 6008 	strb.w	r6, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800da22:	7aab      	ldrb	r3, [r5, #10]
 800da24:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800da28:	f99d 3031 	ldrsb.w	r3, [sp, #49]	@ 0x31
 800da2c:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800da30:	f99d 3032 	ldrsb.w	r3, [sp, #50]	@ 0x32
 800da34:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800da38:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 800da3c:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800da40:	f995 300b 	ldrsb.w	r3, [r5, #11]
 800da44:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800da48:	f995 300c 	ldrsb.w	r3, [r5, #12]
 800da4c:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800da50:	f995 300d 	ldrsb.w	r3, [r5, #13]
 800da54:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 800da58:	2310      	movs	r3, #16
 800da5a:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800da5e:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 800da62:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800da64:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 800da68:	2307      	movs	r3, #7
 800da6a:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800da6e:	4a1a      	ldr	r2, [pc, #104]	@ (800dad8 <RegionEU868LinkAdrReq+0x188>)
 800da70:	6812      	ldr	r2, [r2, #0]
 800da72:	9207      	str	r2, [sp, #28]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 800da74:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 800da78:	2300      	movs	r3, #0
 800da7a:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800da7e:	682b      	ldr	r3, [r5, #0]
 800da80:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800da82:	ab0c      	add	r3, sp, #48	@ 0x30
 800da84:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800da88:	f10d 0131 	add.w	r1, sp, #49	@ 0x31
 800da8c:	a801      	add	r0, sp, #4
 800da8e:	f7ff fa0d 	bl	800ceac <RegionCommonLinkAdrReqVerifyParams>
 800da92:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800da94:	2807      	cmp	r0, #7
 800da96:	d010      	beq.n	800daba <RegionEU868LinkAdrReq+0x16a>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800da98:	f99d 3031 	ldrsb.w	r3, [sp, #49]	@ 0x31
 800da9c:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 800daa0:	f99d 3032 	ldrsb.w	r3, [sp, #50]	@ 0x32
 800daa4:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 800daa8:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 800daac:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 800daae:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800dab0:	701c      	strb	r4, [r3, #0]

#endif /* REGION_EU868 */
    return status;
}
 800dab2:	4628      	mov	r0, r5
 800dab4:	b00f      	add	sp, #60	@ 0x3c
 800dab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 800daba:	4e07      	ldr	r6, [pc, #28]	@ (800dad8 <RegionEU868LinkAdrReq+0x188>)
 800dabc:	6830      	ldr	r0, [r6, #0]
 800dabe:	220c      	movs	r2, #12
 800dac0:	2100      	movs	r1, #0
 800dac2:	f500 7058 	add.w	r0, r0, #864	@ 0x360
 800dac6:	f001 ff24 	bl	800f912 <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 800daca:	6833      	ldr	r3, [r6, #0]
 800dacc:	f8bd 202e 	ldrh.w	r2, [sp, #46]	@ 0x2e
 800dad0:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
 800dad4:	e7e0      	b.n	800da98 <RegionEU868LinkAdrReq+0x148>
 800dad6:	bf00      	nop
 800dad8:	20000e80 	.word	0x20000e80

0800dadc <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800dadc:	b530      	push	{r4, r5, lr}
 800dade:	b083      	sub	sp, #12
 800dae0:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800dae2:	2300      	movs	r3, #0
 800dae4:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 800dae8:	f10d 0107 	add.w	r1, sp, #7
 800daec:	6840      	ldr	r0, [r0, #4]
 800daee:	f7ff fbad 	bl	800d24c <VerifyRfFreq>
 800daf2:	b1a8      	cbz	r0, 800db20 <RegionEU868RxParamSetupReq+0x44>
    uint8_t status = 0x07;
 800daf4:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 800daf6:	2207      	movs	r2, #7
 800daf8:	2100      	movs	r1, #0
 800dafa:	f994 0000 	ldrsb.w	r0, [r4]
 800dafe:	f7ff f892 	bl	800cc26 <RegionCommonValueInRange>
 800db02:	b908      	cbnz	r0, 800db08 <RegionEU868RxParamSetupReq+0x2c>
    {
        status &= 0xFD; // Datarate KO
 800db04:	f005 05fd 	and.w	r5, r5, #253	@ 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 800db08:	2205      	movs	r2, #5
 800db0a:	2100      	movs	r1, #0
 800db0c:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800db10:	f7ff f889 	bl	800cc26 <RegionCommonValueInRange>
 800db14:	b908      	cbnz	r0, 800db1a <RegionEU868RxParamSetupReq+0x3e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800db16:	f005 05fb 	and.w	r5, r5, #251	@ 0xfb
    }

#endif /* REGION_EU868 */
    return status;
}
 800db1a:	4628      	mov	r0, r5
 800db1c:	b003      	add	sp, #12
 800db1e:	bd30      	pop	{r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800db20:	2506      	movs	r5, #6
 800db22:	e7e8      	b.n	800daf6 <RegionEU868RxParamSetupReq+0x1a>

0800db24 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800db24:	f04f 30ff 	mov.w	r0, #4294967295
 800db28:	4770      	bx	lr
	...

0800db2c <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 800db2c:	b510      	push	{r4, lr}
 800db2e:	b082      	sub	sp, #8
    uint8_t status = 0x03;

#if defined( REGION_EU868 )
    uint8_t band = 0;
 800db30:	2300      	movs	r3, #0
 800db32:	f88d 3007 	strb.w	r3, [sp, #7]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 800db36:	7803      	ldrb	r3, [r0, #0]
 800db38:	2b0f      	cmp	r3, #15
 800db3a:	d902      	bls.n	800db42 <RegionEU868DlChannelReq+0x16>
    {
        return 0;
 800db3c:	2000      	movs	r0, #0
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_EU868 */
    return status;
}
 800db3e:	b002      	add	sp, #8
 800db40:	bd10      	pop	{r4, pc}
 800db42:	4604      	mov	r4, r0
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 800db44:	f10d 0107 	add.w	r1, sp, #7
 800db48:	6840      	ldr	r0, [r0, #4]
 800db4a:	f7ff fb7f 	bl	800d24c <VerifyRfFreq>
 800db4e:	b160      	cbz	r0, 800db6a <RegionEU868DlChannelReq+0x3e>
    uint8_t status = 0x03;
 800db50:	2003      	movs	r0, #3
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800db52:	4b0b      	ldr	r3, [pc, #44]	@ (800db80 <RegionEU868DlChannelReq+0x54>)
 800db54:	681a      	ldr	r2, [r3, #0]
 800db56:	7823      	ldrb	r3, [r4, #0]
 800db58:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800db5c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800db60:	b929      	cbnz	r1, 800db6e <RegionEU868DlChannelReq+0x42>
        status &= 0xFD;
 800db62:	f000 00fd 	and.w	r0, r0, #253	@ 0xfd
    return status;
 800db66:	b240      	sxtb	r0, r0
 800db68:	e7e9      	b.n	800db3e <RegionEU868DlChannelReq+0x12>
        status &= 0xFE;
 800db6a:	2002      	movs	r0, #2
 800db6c:	e7f1      	b.n	800db52 <RegionEU868DlChannelReq+0x26>
    if( status == 0x03 )
 800db6e:	2803      	cmp	r0, #3
 800db70:	d1f9      	bne.n	800db66 <RegionEU868DlChannelReq+0x3a>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800db72:	6861      	ldr	r1, [r4, #4]
 800db74:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800db78:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800db7c:	6051      	str	r1, [r2, #4]
 800db7e:	e7f2      	b.n	800db66 <RegionEU868DlChannelReq+0x3a>
 800db80:	20000e80 	.word	0x20000e80

0800db84 <RegionEU868AlternateDr>:
#if defined( REGION_EU868 )
    return currentDr;
#else
    return -1;
#endif /* REGION_EU868 */
}
 800db84:	4770      	bx	lr
	...

0800db88 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800db88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db8a:	b097      	sub	sp, #92	@ 0x5c
 800db8c:	4604      	mov	r4, r0
 800db8e:	460f      	mov	r7, r1
 800db90:	4616      	mov	r6, r2
 800db92:	461d      	mov	r5, r3
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 800db94:	2100      	movs	r1, #0
 800db96:	f88d 1057 	strb.w	r1, [sp, #87]	@ 0x57
    uint8_t nbRestrictedChannels = 0;
 800db9a:	f88d 1056 	strb.w	r1, [sp, #86]	@ 0x56
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800db9e:	9111      	str	r1, [sp, #68]	@ 0x44
 800dba0:	9112      	str	r1, [sp, #72]	@ 0x48
 800dba2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800dba4:	9114      	str	r1, [sp, #80]	@ 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 800dba6:	2307      	movs	r3, #7
 800dba8:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800dbac:	4b34      	ldr	r3, [pc, #208]	@ (800dc80 <RegionEU868NextChannel+0xf8>)
 800dbae:	6818      	ldr	r0, [r3, #0]
 800dbb0:	2201      	movs	r2, #1
 800dbb2:	f500 7058 	add.w	r0, r0, #864	@ 0x360
 800dbb6:	f7ff f894 	bl	800cce2 <RegionCommonCountChannels>
 800dbba:	b938      	cbnz	r0, 800dbcc <RegionEU868NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800dbbc:	4b30      	ldr	r3, [pc, #192]	@ (800dc80 <RegionEU868NextChannel+0xf8>)
 800dbbe:	681a      	ldr	r2, [r3, #0]
 800dbc0:	f8b2 3360 	ldrh.w	r3, [r2, #864]	@ 0x360
 800dbc4:	f043 0307 	orr.w	r3, r3, #7
 800dbc8:	f8a2 3360 	strh.w	r3, [r2, #864]	@ 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800dbcc:	7a63      	ldrb	r3, [r4, #9]
 800dbce:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800dbd2:	7a23      	ldrb	r3, [r4, #8]
 800dbd4:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800dbd8:	4b29      	ldr	r3, [pc, #164]	@ (800dc80 <RegionEU868NextChannel+0xf8>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	f503 7258 	add.w	r2, r3, #864	@ 0x360
 800dbe0:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800dbe2:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 800dbe4:	4b27      	ldr	r3, [pc, #156]	@ (800dc84 <RegionEU868NextChannel+0xfc>)
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	9306      	str	r3, [sp, #24]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 800dbea:	2310      	movs	r3, #16
 800dbec:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 800dbf0:	f10d 030a 	add.w	r3, sp, #10
 800dbf4:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800dbf6:	6823      	ldr	r3, [r4, #0]
 800dbf8:	9309      	str	r3, [sp, #36]	@ 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800dbfa:	6863      	ldr	r3, [r4, #4]
 800dbfc:	930a      	str	r3, [sp, #40]	@ 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800dbfe:	7aa3      	ldrb	r3, [r4, #10]
 800dc00:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 800dc04:	2306      	movs	r3, #6
 800dc06:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800dc0a:	ab0c      	add	r3, sp, #48	@ 0x30
 800dc0c:	f104 020c 	add.w	r2, r4, #12
 800dc10:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dc14:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800dc18:	7d23      	ldrb	r3, [r4, #20]
 800dc1a:	f88d 3038 	strb.w	r3, [sp, #56]	@ 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800dc1e:	8ae1      	ldrh	r1, [r4, #22]
 800dc20:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800dc24:	f7ff fb66 	bl	800d2f4 <GetTimeOnAir>
 800dc28:	900f      	str	r0, [sp, #60]	@ 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800dc2a:	ab03      	add	r3, sp, #12
 800dc2c:	9310      	str	r3, [sp, #64]	@ 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800dc2e:	9601      	str	r6, [sp, #4]
 800dc30:	f10d 0356 	add.w	r3, sp, #86	@ 0x56
 800dc34:	9300      	str	r3, [sp, #0]
 800dc36:	f10d 0357 	add.w	r3, sp, #87	@ 0x57
 800dc3a:	aa11      	add	r2, sp, #68	@ 0x44
 800dc3c:	4629      	mov	r1, r5
 800dc3e:	a809      	add	r0, sp, #36	@ 0x24
 800dc40:	f7ff fa53 	bl	800d0ea <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800dc44:	4604      	mov	r4, r0
 800dc46:	b120      	cbz	r0, 800dc52 <RegionEU868NextChannel+0xca>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800dc48:	280c      	cmp	r0, #12
 800dc4a:	d00f      	beq.n	800dc6c <RegionEU868NextChannel+0xe4>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800dc4c:	4620      	mov	r0, r4
 800dc4e:	b017      	add	sp, #92	@ 0x5c
 800dc50:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800dc52:	f89d 1057 	ldrb.w	r1, [sp, #87]	@ 0x57
 800dc56:	3901      	subs	r1, #1
 800dc58:	f001 fe36 	bl	800f8c8 <randr>
 800dc5c:	f100 0358 	add.w	r3, r0, #88	@ 0x58
 800dc60:	eb0d 0003 	add.w	r0, sp, r3
 800dc64:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 800dc68:	703b      	strb	r3, [r7, #0]
 800dc6a:	e7ef      	b.n	800dc4c <RegionEU868NextChannel+0xc4>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800dc6c:	4b04      	ldr	r3, [pc, #16]	@ (800dc80 <RegionEU868NextChannel+0xf8>)
 800dc6e:	681a      	ldr	r2, [r3, #0]
 800dc70:	f8b2 3360 	ldrh.w	r3, [r2, #864]	@ 0x360
 800dc74:	f043 0307 	orr.w	r3, r3, #7
 800dc78:	f8a2 3360 	strh.w	r3, [r2, #864]	@ 0x360
 800dc7c:	e7e6      	b.n	800dc4c <RegionEU868NextChannel+0xc4>
 800dc7e:	bf00      	nop
 800dc80:	20000e80 	.word	0x20000e80
 800dc84:	20000e7c 	.word	0x20000e7c

0800dc88 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800dc88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc8a:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	f88d 3007 	strb.w	r3, [sp, #7]
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800dc92:	7905      	ldrb	r5, [r0, #4]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800dc94:	2d02      	cmp	r5, #2
 800dc96:	d94e      	bls.n	800dd36 <RegionEU868ChannelAdd+0xae>
 800dc98:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 800dc9a:	2d0f      	cmp	r5, #15
 800dc9c:	d84d      	bhi.n	800dd3a <RegionEU868ChannelAdd+0xb2>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800dc9e:	6803      	ldr	r3, [r0, #0]
 800dca0:	7a18      	ldrb	r0, [r3, #8]
 800dca2:	f340 0003 	sbfx	r0, r0, #0, #4
 800dca6:	2207      	movs	r2, #7
 800dca8:	2100      	movs	r1, #0
 800dcaa:	b240      	sxtb	r0, r0
 800dcac:	f7fe ffbb 	bl	800cc26 <RegionCommonValueInRange>
 800dcb0:	b308      	cbz	r0, 800dcf6 <RegionEU868ChannelAdd+0x6e>
    bool drInvalid = false;
 800dcb2:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800dcb4:	6823      	ldr	r3, [r4, #0]
 800dcb6:	7a18      	ldrb	r0, [r3, #8]
 800dcb8:	f340 1003 	sbfx	r0, r0, #4, #4
 800dcbc:	2207      	movs	r2, #7
 800dcbe:	2100      	movs	r1, #0
 800dcc0:	b240      	sxtb	r0, r0
 800dcc2:	f7fe ffb0 	bl	800cc26 <RegionCommonValueInRange>
 800dcc6:	b900      	cbnz	r0, 800dcca <RegionEU868ChannelAdd+0x42>
    {
        drInvalid = true;
 800dcc8:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800dcca:	6820      	ldr	r0, [r4, #0]
 800dccc:	7a03      	ldrb	r3, [r0, #8]
 800dcce:	f343 0203 	sbfx	r2, r3, #0, #4
 800dcd2:	b252      	sxtb	r2, r2
 800dcd4:	f343 1303 	sbfx	r3, r3, #4, #4
 800dcd8:	b25b      	sxtb	r3, r3
 800dcda:	429a      	cmp	r2, r3
 800dcdc:	dd00      	ble.n	800dce0 <RegionEU868ChannelAdd+0x58>
    {
        drInvalid = true;
 800dcde:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 800dce0:	f10d 0107 	add.w	r1, sp, #7
 800dce4:	6800      	ldr	r0, [r0, #0]
 800dce6:	f7ff fab1 	bl	800d24c <VerifyRfFreq>
 800dcea:	b130      	cbz	r0, 800dcfa <RegionEU868ChannelAdd+0x72>
    bool freqInvalid = false;
 800dcec:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800dcee:	b136      	cbz	r6, 800dcfe <RegionEU868ChannelAdd+0x76>
 800dcf0:	b333      	cbz	r3, 800dd40 <RegionEU868ChannelAdd+0xb8>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800dcf2:	2006      	movs	r0, #6
 800dcf4:	e022      	b.n	800dd3c <RegionEU868ChannelAdd+0xb4>
        drInvalid = true;
 800dcf6:	2601      	movs	r6, #1
 800dcf8:	e7dc      	b.n	800dcb4 <RegionEU868ChannelAdd+0x2c>
            freqInvalid = true;
 800dcfa:	2301      	movs	r3, #1
 800dcfc:	e7f7      	b.n	800dcee <RegionEU868ChannelAdd+0x66>
    }
    if( drInvalid == true )
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 800dcfe:	bb0b      	cbnz	r3, 800dd44 <RegionEU868ChannelAdd+0xbc>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 800dd00:	4f11      	ldr	r7, [pc, #68]	@ (800dd48 <RegionEU868ChannelAdd+0xc0>)
 800dd02:	683b      	ldr	r3, [r7, #0]
 800dd04:	006e      	lsls	r6, r5, #1
 800dd06:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800dd0a:	220c      	movs	r2, #12
 800dd0c:	6821      	ldr	r1, [r4, #0]
 800dd0e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800dd12:	f001 fde6 	bl	800f8e2 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 800dd16:	683b      	ldr	r3, [r7, #0]
 800dd18:	442e      	add	r6, r5
 800dd1a:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800dd1e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800dd22:	7272      	strb	r2, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800dd24:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 800dd28:	2101      	movs	r1, #1
 800dd2a:	40a9      	lsls	r1, r5
 800dd2c:	430a      	orrs	r2, r1
 800dd2e:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    return LORAMAC_STATUS_OK;
 800dd32:	2000      	movs	r0, #0
 800dd34:	e002      	b.n	800dd3c <RegionEU868ChannelAdd+0xb4>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800dd36:	2006      	movs	r0, #6
 800dd38:	e000      	b.n	800dd3c <RegionEU868ChannelAdd+0xb4>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800dd3a:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800dd3c:	b003      	add	sp, #12
 800dd3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_DATARATE_INVALID;
 800dd40:	2005      	movs	r0, #5
 800dd42:	e7fb      	b.n	800dd3c <RegionEU868ChannelAdd+0xb4>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800dd44:	2004      	movs	r0, #4
 800dd46:	e7f9      	b.n	800dd3c <RegionEU868ChannelAdd+0xb4>
 800dd48:	20000e80 	.word	0x20000e80

0800dd4c <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 800dd4c:	7801      	ldrb	r1, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800dd4e:	2902      	cmp	r1, #2
 800dd50:	d801      	bhi.n	800dd56 <RegionEU868ChannelsRemove+0xa>
    {
        return false;
 800dd52:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_EU868 */
}
 800dd54:	4770      	bx	lr
{
 800dd56:	b508      	push	{r3, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800dd58:	4b09      	ldr	r3, [pc, #36]	@ (800dd80 <RegionEU868ChannelsRemove+0x34>)
 800dd5a:	6818      	ldr	r0, [r3, #0]
 800dd5c:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800dd60:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800dd64:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800dd68:	2200      	movs	r2, #0
 800dd6a:	f840 200c 	str.w	r2, [r0, ip]
 800dd6e:	605a      	str	r2, [r3, #4]
 800dd70:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 800dd72:	2210      	movs	r2, #16
 800dd74:	f500 7058 	add.w	r0, r0, #864	@ 0x360
 800dd78:	f7fe ff97 	bl	800ccaa <RegionCommonChanDisable>
}
 800dd7c:	bd08      	pop	{r3, pc}
 800dd7e:	bf00      	nop
 800dd80:	20000e80 	.word	0x20000e80

0800dd84 <RegionEU868ApplyCFList>:
{
 800dd84:	b570      	push	{r4, r5, r6, lr}
 800dd86:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800dd88:	2350      	movs	r3, #80	@ 0x50
 800dd8a:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 800dd8e:	7a03      	ldrb	r3, [r0, #8]
 800dd90:	2b10      	cmp	r3, #16
 800dd92:	d136      	bne.n	800de02 <RegionEU868ApplyCFList+0x7e>
 800dd94:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 800dd96:	6843      	ldr	r3, [r0, #4]
 800dd98:	7bdd      	ldrb	r5, [r3, #15]
 800dd9a:	2d00      	cmp	r5, #0
 800dd9c:	d131      	bne.n	800de02 <RegionEU868ApplyCFList+0x7e>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800dd9e:	2403      	movs	r4, #3
 800dda0:	e01b      	b.n	800ddda <RegionEU868ApplyCFList+0x56>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800dda2:	6872      	ldr	r2, [r6, #4]
 800dda4:	5d53      	ldrb	r3, [r2, r5]
 800dda6:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800dda8:	442a      	add	r2, r5
 800ddaa:	7851      	ldrb	r1, [r2, #1]
 800ddac:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800ddb0:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800ddb2:	7892      	ldrb	r2, [r2, #2]
 800ddb4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ddb8:	9303      	str	r3, [sp, #12]
            newChannel.Frequency *= 100;
 800ddba:	2264      	movs	r2, #100	@ 0x64
 800ddbc:	fb02 f303 	mul.w	r3, r2, r3
 800ddc0:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	9304      	str	r3, [sp, #16]
 800ddc6:	e011      	b.n	800ddec <RegionEU868ApplyCFList+0x68>
            channelRemove.ChannelId = chanIdx;
 800ddc8:	f88d 4000 	strb.w	r4, [sp]
            RegionEU868ChannelsRemove( &channelRemove );
 800ddcc:	4668      	mov	r0, sp
 800ddce:	f7ff ffbd 	bl	800dd4c <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800ddd2:	3503      	adds	r5, #3
 800ddd4:	b2ed      	uxtb	r5, r5
 800ddd6:	3401      	adds	r4, #1
 800ddd8:	b2e4      	uxtb	r4, r4
 800ddda:	2c0f      	cmp	r4, #15
 800dddc:	d811      	bhi.n	800de02 <RegionEU868ApplyCFList+0x7e>
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 800ddde:	2c07      	cmp	r4, #7
 800dde0:	d9df      	bls.n	800dda2 <RegionEU868ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 800dde2:	2300      	movs	r3, #0
 800dde4:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 800dde6:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 800ddea:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 800ddec:	9b03      	ldr	r3, [sp, #12]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d0ea      	beq.n	800ddc8 <RegionEU868ApplyCFList+0x44>
            channelAdd.NewChannel = &newChannel;
 800ddf2:	ab03      	add	r3, sp, #12
 800ddf4:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800ddf6:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionEU868ChannelAdd( &channelAdd );
 800ddfa:	a801      	add	r0, sp, #4
 800ddfc:	f7ff ff44 	bl	800dc88 <RegionEU868ChannelAdd>
 800de00:	e7e7      	b.n	800ddd2 <RegionEU868ApplyCFList+0x4e>
}
 800de02:	b006      	add	sp, #24
 800de04:	bd70      	pop	{r4, r5, r6, pc}

0800de06 <RegionEU868NewChannelReq>:
{
 800de06:	b500      	push	{lr}
 800de08:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 800de0a:	6803      	ldr	r3, [r0, #0]
 800de0c:	681a      	ldr	r2, [r3, #0]
 800de0e:	b952      	cbnz	r2, 800de26 <RegionEU868NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800de10:	7903      	ldrb	r3, [r0, #4]
 800de12:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800de16:	a801      	add	r0, sp, #4
 800de18:	f7ff ff98 	bl	800dd4c <RegionEU868ChannelsRemove>
 800de1c:	b1d0      	cbz	r0, 800de54 <RegionEU868NewChannelReq+0x4e>
    uint8_t status = 0x03;
 800de1e:	2003      	movs	r0, #3
}
 800de20:	b005      	add	sp, #20
 800de22:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800de26:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800de28:	7903      	ldrb	r3, [r0, #4]
 800de2a:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800de2e:	a802      	add	r0, sp, #8
 800de30:	f7ff ff2a 	bl	800dc88 <RegionEU868ChannelAdd>
 800de34:	2806      	cmp	r0, #6
 800de36:	d80b      	bhi.n	800de50 <RegionEU868NewChannelReq+0x4a>
 800de38:	e8df f000 	tbb	[pc, r0]
 800de3c:	0a0a0a04 	.word	0x0a0a0a04
 800de40:	060e      	.short	0x060e
 800de42:	08          	.byte	0x08
 800de43:	00          	.byte	0x00
 800de44:	2003      	movs	r0, #3
 800de46:	e7eb      	b.n	800de20 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFD;
 800de48:	2001      	movs	r0, #1
                break;
 800de4a:	e7e9      	b.n	800de20 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 800de4c:	2000      	movs	r0, #0
                break;
 800de4e:	e7e7      	b.n	800de20 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 800de50:	2000      	movs	r0, #0
                break;
 800de52:	e7e5      	b.n	800de20 <RegionEU868NewChannelReq+0x1a>
            status &= 0xFC;
 800de54:	2000      	movs	r0, #0
 800de56:	e7e3      	b.n	800de20 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFE;
 800de58:	2002      	movs	r0, #2
 800de5a:	e7e1      	b.n	800de20 <RegionEU868NewChannelReq+0x1a>

0800de5c <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 800de5c:	1a88      	subs	r0, r1, r2
 800de5e:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 800de60:	2800      	cmp	r0, #0
 800de62:	db01      	blt.n	800de68 <RegionEU868ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_EU868 */
}
 800de64:	b2c0      	uxtb	r0, r0
 800de66:	4770      	bx	lr
        datarate = DR_0;
 800de68:	2000      	movs	r0, #0
 800de6a:	e7fb      	b.n	800de64 <RegionEU868ApplyDrOffset+0x8>

0800de6c <VerifyRfFreq>:
    }
    return txPowerResult;
}

static bool VerifyRfFreq( uint32_t freq )
{
 800de6c:	b510      	push	{r4, lr}
 800de6e:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800de70:	4b10      	ldr	r3, [pc, #64]	@ (800deb4 <VerifyRfFreq+0x48>)
 800de72:	6a1b      	ldr	r3, [r3, #32]
 800de74:	4798      	blx	r3
 800de76:	b1c8      	cbz	r0, 800deac <VerifyRfFreq+0x40>
    {
        return false;
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 800de78:	4b0f      	ldr	r3, [pc, #60]	@ (800deb8 <VerifyRfFreq+0x4c>)
 800de7a:	4423      	add	r3, r4
 800de7c:	4a0f      	ldr	r2, [pc, #60]	@ (800debc <VerifyRfFreq+0x50>)
 800de7e:	4293      	cmp	r3, r2
 800de80:	d813      	bhi.n	800deaa <VerifyRfFreq+0x3e>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 800de82:	f102 42df 	add.w	r2, r2, #1870659584	@ 0x6f800000
 800de86:	f502 12c8 	add.w	r2, r2, #1638400	@ 0x190000
 800de8a:	f202 7245 	addw	r2, r2, #1861	@ 0x745
 800de8e:	fba2 1203 	umull	r1, r2, r2, r3
 800de92:	0c92      	lsrs	r2, r2, #18
 800de94:	490a      	ldr	r1, [pc, #40]	@ (800dec0 <VerifyRfFreq+0x54>)
 800de96:	fb01 3212 	mls	r2, r1, r2, r3
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 800de9a:	b942      	cbnz	r2, 800deae <VerifyRfFreq+0x42>
    {
        return false;
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 800de9c:	4b09      	ldr	r3, [pc, #36]	@ (800dec4 <VerifyRfFreq+0x58>)
 800de9e:	4423      	add	r3, r4
 800dea0:	4a09      	ldr	r2, [pc, #36]	@ (800dec8 <VerifyRfFreq+0x5c>)
 800dea2:	4293      	cmp	r3, r2
 800dea4:	d902      	bls.n	800deac <VerifyRfFreq+0x40>
    {
        return false;
 800dea6:	2000      	movs	r0, #0
 800dea8:	e000      	b.n	800deac <VerifyRfFreq+0x40>
        return false;
 800deaa:	2000      	movs	r0, #0
    }
    return true;
}
 800deac:	bd10      	pop	{r4, pc}
        return false;
 800deae:	2000      	movs	r0, #0
 800deb0:	e7fc      	b.n	800deac <VerifyRfFreq+0x40>
 800deb2:	bf00      	nop
 800deb4:	08013170 	.word	0x08013170
 800deb8:	c8f78f60 	.word	0xc8f78f60
 800debc:	00401640 	.word	0x00401640
 800dec0:	000927c0 	.word	0x000927c0
 800dec4:	ca37fea0 	.word	0xca37fea0
 800dec8:	01808580 	.word	0x01808580

0800decc <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800decc:	b570      	push	{r4, r5, r6, lr}
 800dece:	b084      	sub	sp, #16
 800ded0:	460c      	mov	r4, r1
    int8_t phyDr = DataratesUS915[datarate];
 800ded2:	4b0a      	ldr	r3, [pc, #40]	@ (800defc <GetTimeOnAir+0x30>)
 800ded4:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 800ded6:	490a      	ldr	r1, [pc, #40]	@ (800df00 <GetTimeOnAir+0x34>)
 800ded8:	f7ff f974 	bl	800d1c4 <RegionCommonGetBandwidth>
 800dedc:	4601      	mov	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800dede:	4b09      	ldr	r3, [pc, #36]	@ (800df04 <GetTimeOnAir+0x38>)
 800dee0:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 800dee2:	2001      	movs	r0, #1
 800dee4:	9003      	str	r0, [sp, #12]
 800dee6:	b2e4      	uxtb	r4, r4
 800dee8:	9402      	str	r4, [sp, #8]
 800deea:	2200      	movs	r2, #0
 800deec:	9201      	str	r2, [sp, #4]
 800deee:	2208      	movs	r2, #8
 800def0:	9200      	str	r2, [sp, #0]
 800def2:	4603      	mov	r3, r0
 800def4:	4632      	mov	r2, r6
 800def6:	47a8      	blx	r5
}
 800def8:	b004      	add	sp, #16
 800defa:	bd70      	pop	{r4, r5, r6, pc}
 800defc:	08012dd8 	.word	0x08012dd8
 800df00:	08012d98 	.word	0x08012d98
 800df04:	08013170 	.word	0x08013170

0800df08 <LimitTxPower>:
{
 800df08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df0a:	4606      	mov	r6, r0
 800df0c:	4615      	mov	r5, r2
 800df0e:	461f      	mov	r7, r3
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 800df10:	f7ff f954 	bl	800d1bc <RegionCommonLimitTxPower>
    if( datarate == DR_4 )
 800df14:	2d04      	cmp	r5, #4
 800df16:	d105      	bne.n	800df24 <LimitTxPower+0x1c>
        txPowerResult = MAX( txPower, TX_POWER_2 );
 800df18:	4634      	mov	r4, r6
 800df1a:	2e02      	cmp	r6, #2
 800df1c:	bfb8      	it	lt
 800df1e:	2402      	movlt	r4, #2
}
 800df20:	4620      	mov	r0, r4
 800df22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df24:	4604      	mov	r4, r0
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 800df26:	2204      	movs	r2, #4
 800df28:	2100      	movs	r1, #0
 800df2a:	4638      	mov	r0, r7
 800df2c:	f7fe fed9 	bl	800cce2 <RegionCommonCountChannels>
 800df30:	2831      	cmp	r0, #49	@ 0x31
 800df32:	d8f5      	bhi.n	800df20 <LimitTxPower+0x18>
            txPowerResult = MAX( txPower, TX_POWER_5 );
 800df34:	4634      	mov	r4, r6
 800df36:	2e05      	cmp	r6, #5
 800df38:	bfb8      	it	lt
 800df3a:	2405      	movlt	r4, #5
 800df3c:	e7f0      	b.n	800df20 <LimitTxPower+0x18>
	...

0800df40 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 800df40:	b500      	push	{lr}
 800df42:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800df44:	2300      	movs	r3, #0
 800df46:	9304      	str	r3, [sp, #16]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 800df48:	7803      	ldrb	r3, [r0, #0]
 800df4a:	3b01      	subs	r3, #1
 800df4c:	2b37      	cmp	r3, #55	@ 0x37
 800df4e:	d81f      	bhi.n	800df90 <RegionUS915GetPhyParam+0x50>
 800df50:	e8df f003 	tbb	[pc, r3]
 800df54:	1e1e1e1c 	.word	0x1e1e1e1c
 800df58:	1e1e1e1e 	.word	0x1e1e1e1e
 800df5c:	3e3b1e1e 	.word	0x3e3b1e1e
 800df60:	4d1e4741 	.word	0x4d1e4741
 800df64:	5d595551 	.word	0x5d595551
 800df68:	6d6a1e61 	.word	0x6d6a1e61
 800df6c:	7f7c7670 	.word	0x7f7c7670
 800df70:	86831e1e 	.word	0x86831e1e
 800df74:	1e1e1e23 	.word	0x1e1e1e23
 800df78:	1e1e1e1e 	.word	0x1e1e1e1e
 800df7c:	1e1e1e1e 	.word	0x1e1e1e1e
 800df80:	90891e1e 	.word	0x90891e1e
 800df84:	a01e9d9a 	.word	0xa01e9d9a
 800df88:	b3adaaa7 	.word	0xb3adaaa7
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 800df8c:	2308      	movs	r3, #8
 800df8e:	9304      	str	r3, [sp, #16]
            break;
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 800df90:	9804      	ldr	r0, [sp, #16]
 800df92:	9005      	str	r0, [sp, #20]
}
 800df94:	b007      	add	sp, #28
 800df96:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 800df9a:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800df9e:	f88d 3004 	strb.w	r3, [sp, #4]
 800dfa2:	2304      	movs	r3, #4
 800dfa4:	f88d 3005 	strb.w	r3, [sp, #5]
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	f88d 3006 	strb.w	r3, [sp, #6]
 800dfae:	2348      	movs	r3, #72	@ 0x48
 800dfb0:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800dfb4:	4b44      	ldr	r3, [pc, #272]	@ (800e0c8 <RegionUS915GetPhyParam+0x188>)
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	f503 7258 	add.w	r2, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800dfbc:	9202      	str	r2, [sp, #8]
 800dfbe:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800dfc0:	a801      	add	r0, sp, #4
 800dfc2:	f7ff f8dc 	bl	800d17e <RegionCommonGetNextLowerTxDr>
 800dfc6:	9004      	str	r0, [sp, #16]
            break;
 800dfc8:	e7e2      	b.n	800df90 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800dfca:	2340      	movs	r3, #64	@ 0x40
 800dfcc:	9304      	str	r3, [sp, #16]
            break;
 800dfce:	e7df      	b.n	800df90 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800dfd0:	2320      	movs	r3, #32
 800dfd2:	9304      	str	r3, [sp, #16]
            break;
 800dfd4:	e7dc      	b.n	800df90 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 800dfd6:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800dfda:	4a3c      	ldr	r2, [pc, #240]	@ (800e0cc <RegionUS915GetPhyParam+0x18c>)
 800dfdc:	5cd3      	ldrb	r3, [r2, r3]
 800dfde:	9304      	str	r3, [sp, #16]
            break;
 800dfe0:	e7d6      	b.n	800df90 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 800dfe2:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800dfe6:	4a3a      	ldr	r2, [pc, #232]	@ (800e0d0 <RegionUS915GetPhyParam+0x190>)
 800dfe8:	5cd3      	ldrb	r3, [r2, r3]
 800dfea:	9304      	str	r3, [sp, #16]
            break;
 800dfec:	e7d0      	b.n	800df90 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_MAX_RX_WINDOW;
 800dfee:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800dff2:	9304      	str	r3, [sp, #16]
            break;
 800dff4:	e7cc      	b.n	800df90 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800dff6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800dffa:	9304      	str	r3, [sp, #16]
            break;
 800dffc:	e7c8      	b.n	800df90 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800dffe:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800e002:	9304      	str	r3, [sp, #16]
            break;
 800e004:	e7c4      	b.n	800df90 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800e006:	f241 3388 	movw	r3, #5000	@ 0x1388
 800e00a:	9304      	str	r3, [sp, #16]
            break;
 800e00c:	e7c0      	b.n	800df90 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800e00e:	f241 7370 	movw	r3, #6000	@ 0x1770
 800e012:	9304      	str	r3, [sp, #16]
            break;
 800e014:	e7bc      	b.n	800df90 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 800e016:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800e01a:	482e      	ldr	r0, [pc, #184]	@ (800e0d4 <RegionUS915GetPhyParam+0x194>)
 800e01c:	f001 fc54 	bl	800f8c8 <randr>
 800e020:	f500 60fa 	add.w	r0, r0, #2000	@ 0x7d0
 800e024:	9004      	str	r0, [sp, #16]
            break;
 800e026:	e7b3      	b.n	800df90 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_RX_WND_2_FREQ;
 800e028:	4b2b      	ldr	r3, [pc, #172]	@ (800e0d8 <RegionUS915GetPhyParam+0x198>)
 800e02a:	9304      	str	r3, [sp, #16]
            break;
 800e02c:	e7b0      	b.n	800df90 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_RX_WND_2_DR;
 800e02e:	2308      	movs	r3, #8
 800e030:	9304      	str	r3, [sp, #16]
            break;
 800e032:	e7ad      	b.n	800df90 <RegionUS915GetPhyParam+0x50>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800e034:	4b24      	ldr	r3, [pc, #144]	@ (800e0c8 <RegionUS915GetPhyParam+0x188>)
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800e03c:	9304      	str	r3, [sp, #16]
            break;
 800e03e:	e7a7      	b.n	800df90 <RegionUS915GetPhyParam+0x50>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800e040:	4b21      	ldr	r3, [pc, #132]	@ (800e0c8 <RegionUS915GetPhyParam+0x188>)
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 800e048:	9304      	str	r3, [sp, #16]
            break;
 800e04a:	e7a1      	b.n	800df90 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_MAX_NB_CHANNELS;
 800e04c:	2348      	movs	r3, #72	@ 0x48
 800e04e:	9304      	str	r3, [sp, #16]
            break;
 800e050:	e79e      	b.n	800df90 <RegionUS915GetPhyParam+0x50>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800e052:	4b1d      	ldr	r3, [pc, #116]	@ (800e0c8 <RegionUS915GetPhyParam+0x188>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	9304      	str	r3, [sp, #16]
            break;
 800e058:	e79a      	b.n	800df90 <RegionUS915GetPhyParam+0x50>
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 800e05a:	4b20      	ldr	r3, [pc, #128]	@ (800e0dc <RegionUS915GetPhyParam+0x19c>)
 800e05c:	9304      	str	r3, [sp, #16]
            break;
 800e05e:	e797      	b.n	800df90 <RegionUS915GetPhyParam+0x50>
            phyParam.fValue = 0;
 800e060:	2300      	movs	r3, #0
 800e062:	9304      	str	r3, [sp, #16]
            break;
 800e064:	e794      	b.n	800df90 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800e066:	4a1e      	ldr	r2, [pc, #120]	@ (800e0e0 <RegionUS915GetPhyParam+0x1a0>)
 800e068:	491b      	ldr	r1, [pc, #108]	@ (800e0d8 <RegionUS915GetPhyParam+0x198>)
 800e06a:	7900      	ldrb	r0, [r0, #4]
 800e06c:	f7fe fd0a 	bl	800ca84 <RegionBaseUSCalcDownlinkFrequency>
 800e070:	9004      	str	r0, [sp, #16]
            break;
 800e072:	e78d      	b.n	800df90 <RegionUS915GetPhyParam+0x50>
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 800e074:	2317      	movs	r3, #23
 800e076:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 800e07a:	2304      	movs	r3, #4
 800e07c:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 800e080:	2303      	movs	r3, #3
 800e082:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 800e086:	e783      	b.n	800df90 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 800e088:	2308      	movs	r3, #8
 800e08a:	9304      	str	r3, [sp, #16]
            break;
 800e08c:	e780      	b.n	800df90 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 800e08e:	2308      	movs	r3, #8
 800e090:	9304      	str	r3, [sp, #16]
            break;
 800e092:	e77d      	b.n	800df90 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800e094:	4a12      	ldr	r2, [pc, #72]	@ (800e0e0 <RegionUS915GetPhyParam+0x1a0>)
 800e096:	4910      	ldr	r1, [pc, #64]	@ (800e0d8 <RegionUS915GetPhyParam+0x198>)
 800e098:	7900      	ldrb	r0, [r0, #4]
 800e09a:	f7fe fcf3 	bl	800ca84 <RegionBaseUSCalcDownlinkFrequency>
 800e09e:	9004      	str	r0, [sp, #16]
            break;
 800e0a0:	e776      	b.n	800df90 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 800e0a2:	2308      	movs	r3, #8
 800e0a4:	9304      	str	r3, [sp, #16]
            break;
 800e0a6:	e773      	b.n	800df90 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 800e0a8:	2308      	movs	r3, #8
 800e0aa:	9304      	str	r3, [sp, #16]
            break;
 800e0ac:	e770      	b.n	800df90 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 800e0ae:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e0b2:	4a0c      	ldr	r2, [pc, #48]	@ (800e0e4 <RegionUS915GetPhyParam+0x1a4>)
 800e0b4:	5cd3      	ldrb	r3, [r2, r3]
 800e0b6:	9304      	str	r3, [sp, #16]
            break;
 800e0b8:	e76a      	b.n	800df90 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 800e0ba:	490b      	ldr	r1, [pc, #44]	@ (800e0e8 <RegionUS915GetPhyParam+0x1a8>)
 800e0bc:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800e0c0:	f7ff f880 	bl	800d1c4 <RegionCommonGetBandwidth>
 800e0c4:	9004      	str	r0, [sp, #16]
            break;
 800e0c6:	e763      	b.n	800df90 <RegionUS915GetPhyParam+0x50>
 800e0c8:	20000e88 	.word	0x20000e88
 800e0cc:	08012d74 	.word	0x08012d74
 800e0d0:	08012d64 	.word	0x08012d64
 800e0d4:	fffffc18 	.word	0xfffffc18
 800e0d8:	370870a0 	.word	0x370870a0
 800e0dc:	4200999a 	.word	0x4200999a
 800e0e0:	000927c0 	.word	0x000927c0
 800e0e4:	08012dd8 	.word	0x08012dd8
 800e0e8:	08012d98 	.word	0x08012d98

0800e0ec <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800e0ec:	b510      	push	{r4, lr}
 800e0ee:	b082      	sub	sp, #8
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800e0f0:	4b0b      	ldr	r3, [pc, #44]	@ (800e120 <RegionUS915SetBandTxDone+0x34>)
 800e0f2:	681a      	ldr	r2, [r3, #0]
 800e0f4:	7803      	ldrb	r3, [r0, #0]
 800e0f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e0fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e0fe:	7a5b      	ldrb	r3, [r3, #9]
 800e100:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800e104:	4b07      	ldr	r3, [pc, #28]	@ (800e124 <RegionUS915SetBandTxDone+0x38>)
 800e106:	681c      	ldr	r4, [r3, #0]
 800e108:	6903      	ldr	r3, [r0, #16]
 800e10a:	9300      	str	r3, [sp, #0]
 800e10c:	68c3      	ldr	r3, [r0, #12]
 800e10e:	7842      	ldrb	r2, [r0, #1]
 800e110:	6881      	ldr	r1, [r0, #8]
 800e112:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800e116:	f7fe fe09 	bl	800cd2c <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 800e11a:	b002      	add	sp, #8
 800e11c:	bd10      	pop	{r4, pc}
 800e11e:	bf00      	nop
 800e120:	20000e88 	.word	0x20000e88
 800e124:	20000e84 	.word	0x20000e84

0800e128 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 800e128:	b510      	push	{r4, lr}
 800e12a:	b086      	sub	sp, #24
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 800e12c:	2301      	movs	r3, #1
 800e12e:	f8ad 3000 	strh.w	r3, [sp]
 800e132:	2300      	movs	r3, #0
 800e134:	f88d 3002 	strb.w	r3, [sp, #2]
 800e138:	9301      	str	r3, [sp, #4]
 800e13a:	9302      	str	r3, [sp, #8]
 800e13c:	9303      	str	r3, [sp, #12]
 800e13e:	9304      	str	r3, [sp, #16]
 800e140:	f88d 3014 	strb.w	r3, [sp, #20]
    {
       US915_BAND0
    };

    switch( params->Type )
 800e144:	7b04      	ldrb	r4, [r0, #12]
 800e146:	b174      	cbz	r4, 800e166 <RegionUS915InitDefaults+0x3e>
 800e148:	3c01      	subs	r4, #1
 800e14a:	b2e4      	uxtb	r4, r4
 800e14c:	2c01      	cmp	r4, #1
 800e14e:	d87e      	bhi.n	800e24e <RegionUS915InitDefaults+0x126>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800e150:	4b40      	ldr	r3, [pc, #256]	@ (800e254 <RegionUS915InitDefaults+0x12c>)
 800e152:	6818      	ldr	r0, [r3, #0]
 800e154:	2206      	movs	r2, #6
 800e156:	f500 715b 	add.w	r1, r0, #876	@ 0x36c
 800e15a:	f500 7058 	add.w	r0, r0, #864	@ 0x360
 800e15e:	f7fe fdd6 	bl	800cd0e <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 800e162:	2300      	movs	r3, #0
 800e164:	e071      	b.n	800e24a <RegionUS915InitDefaults+0x122>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800e166:	6803      	ldr	r3, [r0, #0]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d070      	beq.n	800e24e <RegionUS915InitDefaults+0x126>
 800e16c:	6842      	ldr	r2, [r0, #4]
 800e16e:	2a00      	cmp	r2, #0
 800e170:	d06d      	beq.n	800e24e <RegionUS915InitDefaults+0x126>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800e172:	4939      	ldr	r1, [pc, #228]	@ (800e258 <RegionUS915InitDefaults+0x130>)
 800e174:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800e176:	4937      	ldr	r1, [pc, #220]	@ (800e254 <RegionUS915InitDefaults+0x12c>)
 800e178:	600a      	str	r2, [r1, #0]
            RegionBands = (Band_t*) params->Bands;
 800e17a:	6880      	ldr	r0, [r0, #8]
 800e17c:	4a37      	ldr	r2, [pc, #220]	@ (800e25c <RegionUS915InitDefaults+0x134>)
 800e17e:	6010      	str	r0, [r2, #0]
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800e180:	2200      	movs	r2, #0
 800e182:	731a      	strb	r2, [r3, #12]
            RegionNvmGroup1->JoinTrialsCounter = 0;
 800e184:	735a      	strb	r2, [r3, #13]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 800e186:	2218      	movs	r2, #24
 800e188:	4669      	mov	r1, sp
 800e18a:	f001 fbaa 	bl	800f8e2 <memcpy1>
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800e18e:	e011      	b.n	800e1b4 <RegionUS915InitDefaults+0x8c>
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 800e190:	4b30      	ldr	r3, [pc, #192]	@ (800e254 <RegionUS915InitDefaults+0x12c>)
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	4932      	ldr	r1, [pc, #200]	@ (800e260 <RegionUS915InitDefaults+0x138>)
 800e196:	4a33      	ldr	r2, [pc, #204]	@ (800e264 <RegionUS915InitDefaults+0x13c>)
 800e198:	fb01 2204 	mla	r2, r1, r4, r2
 800e19c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800e1a0:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 800e1a4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 800e1a8:	2230      	movs	r2, #48	@ 0x30
 800e1aa:	7202      	strb	r2, [r0, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	7242      	strb	r2, [r0, #9]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800e1b0:	3401      	adds	r4, #1
 800e1b2:	b2e4      	uxtb	r4, r4
 800e1b4:	2c3f      	cmp	r4, #63	@ 0x3f
 800e1b6:	d9eb      	bls.n	800e190 <RegionUS915InitDefaults+0x68>
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800e1b8:	2340      	movs	r3, #64	@ 0x40
 800e1ba:	2b47      	cmp	r3, #71	@ 0x47
 800e1bc:	d814      	bhi.n	800e1e8 <RegionUS915InitDefaults+0xc0>
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 800e1be:	f1a3 0040 	sub.w	r0, r3, #64	@ 0x40
 800e1c2:	4a24      	ldr	r2, [pc, #144]	@ (800e254 <RegionUS915InitDefaults+0x12c>)
 800e1c4:	6812      	ldr	r2, [r2, #0]
 800e1c6:	4c28      	ldr	r4, [pc, #160]	@ (800e268 <RegionUS915InitDefaults+0x140>)
 800e1c8:	4928      	ldr	r1, [pc, #160]	@ (800e26c <RegionUS915InitDefaults+0x144>)
 800e1ca:	fb04 1100 	mla	r1, r4, r0, r1
 800e1ce:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800e1d2:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 800e1d6:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 800e1da:	2144      	movs	r1, #68	@ 0x44
 800e1dc:	7221      	strb	r1, [r4, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800e1de:	2100      	movs	r1, #0
 800e1e0:	7261      	strb	r1, [r4, #9]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800e1e2:	3301      	adds	r3, #1
 800e1e4:	b2db      	uxtb	r3, r3
 800e1e6:	e7e8      	b.n	800e1ba <RegionUS915InitDefaults+0x92>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 800e1e8:	4c1a      	ldr	r4, [pc, #104]	@ (800e254 <RegionUS915InitDefaults+0x12c>)
 800e1ea:	6820      	ldr	r0, [r4, #0]
 800e1ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e1f0:	f8a0 336c 	strh.w	r3, [r0, #876]	@ 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 800e1f4:	f8a0 336e 	strh.w	r3, [r0, #878]	@ 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 800e1f8:	f8a0 3370 	strh.w	r3, [r0, #880]	@ 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 800e1fc:	f8a0 3372 	strh.w	r3, [r0, #882]	@ 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 800e200:	23ff      	movs	r3, #255	@ 0xff
 800e202:	f8a0 3374 	strh.w	r3, [r0, #884]	@ 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800e206:	2300      	movs	r3, #0
 800e208:	f8a0 3376 	strh.w	r3, [r0, #886]	@ 0x376
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800e20c:	2206      	movs	r2, #6
 800e20e:	f500 715b 	add.w	r1, r0, #876	@ 0x36c
 800e212:	f500 7058 	add.w	r0, r0, #864	@ 0x360
 800e216:	f7fe fd7a 	bl	800cd0e <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800e21a:	6821      	ldr	r1, [r4, #0]
 800e21c:	2206      	movs	r2, #6
 800e21e:	f501 7158 	add.w	r1, r1, #864	@ 0x360
 800e222:	4b0d      	ldr	r3, [pc, #52]	@ (800e258 <RegionUS915InitDefaults+0x130>)
 800e224:	6818      	ldr	r0, [r3, #0]
 800e226:	f7fe fd72 	bl	800cd0e <RegionCommonChanMaskCopy>
            break;
 800e22a:	e010      	b.n	800e24e <RegionUS915InitDefaults+0x126>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800e22c:	4a0a      	ldr	r2, [pc, #40]	@ (800e258 <RegionUS915InitDefaults+0x130>)
 800e22e:	6811      	ldr	r1, [r2, #0]
 800e230:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800e234:	4807      	ldr	r0, [pc, #28]	@ (800e254 <RegionUS915InitDefaults+0x12c>)
 800e236:	6800      	ldr	r0, [r0, #0]
 800e238:	f503 74d8 	add.w	r4, r3, #432	@ 0x1b0
 800e23c:	f830 0014 	ldrh.w	r0, [r0, r4, lsl #1]
 800e240:	4002      	ands	r2, r0
 800e242:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 800e246:	3301      	adds	r3, #1
 800e248:	b2db      	uxtb	r3, r3
 800e24a:	2b05      	cmp	r3, #5
 800e24c:	d9ee      	bls.n	800e22c <RegionUS915InitDefaults+0x104>
        {
            break;
        }
    }
#endif /* REGION_US915 */
}
 800e24e:	b006      	add	sp, #24
 800e250:	bd10      	pop	{r4, pc}
 800e252:	bf00      	nop
 800e254:	20000e88 	.word	0x20000e88
 800e258:	20000e8c 	.word	0x20000e8c
 800e25c:	20000e84 	.word	0x20000e84
 800e260:	00030d40 	.word	0x00030d40
 800e264:	35c80160 	.word	0x35c80160
 800e268:	00186a00 	.word	0x00186a00
 800e26c:	35d2afc0 	.word	0x35d2afc0

0800e270 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800e270:	b508      	push	{r3, lr}
#if defined( REGION_US915 )
    switch( phyAttribute )
 800e272:	290a      	cmp	r1, #10
 800e274:	d833      	bhi.n	800e2de <RegionUS915Verify+0x6e>
 800e276:	e8df f001 	tbb	[pc, r1]
 800e27a:	3206      	.short	0x3206
 800e27c:	0a323232 	.word	0x0a323232
 800e280:	28321e14 	.word	0x28321e14
 800e284:	28          	.byte	0x28
 800e285:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800e286:	6800      	ldr	r0, [r0, #0]
 800e288:	f7ff fdf0 	bl	800de6c <VerifyRfFreq>
 800e28c:	e028      	b.n	800e2e0 <RegionUS915Verify+0x70>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 800e28e:	2204      	movs	r2, #4
 800e290:	2100      	movs	r1, #0
 800e292:	f990 0000 	ldrsb.w	r0, [r0]
 800e296:	f7fe fcc6 	bl	800cc26 <RegionCommonValueInRange>
 800e29a:	3800      	subs	r0, #0
 800e29c:	bf18      	it	ne
 800e29e:	2001      	movne	r0, #1
 800e2a0:	e01e      	b.n	800e2e0 <RegionUS915Verify+0x70>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800e2a2:	2205      	movs	r2, #5
 800e2a4:	2100      	movs	r1, #0
 800e2a6:	f990 0000 	ldrsb.w	r0, [r0]
 800e2aa:	f7fe fcbc 	bl	800cc26 <RegionCommonValueInRange>
 800e2ae:	3800      	subs	r0, #0
 800e2b0:	bf18      	it	ne
 800e2b2:	2001      	movne	r0, #1
 800e2b4:	e014      	b.n	800e2e0 <RegionUS915Verify+0x70>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 800e2b6:	220d      	movs	r2, #13
 800e2b8:	2108      	movs	r1, #8
 800e2ba:	f990 0000 	ldrsb.w	r0, [r0]
 800e2be:	f7fe fcb2 	bl	800cc26 <RegionCommonValueInRange>
 800e2c2:	3800      	subs	r0, #0
 800e2c4:	bf18      	it	ne
 800e2c6:	2001      	movne	r0, #1
 800e2c8:	e00a      	b.n	800e2e0 <RegionUS915Verify+0x70>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 800e2ca:	220e      	movs	r2, #14
 800e2cc:	2100      	movs	r1, #0
 800e2ce:	f990 0000 	ldrsb.w	r0, [r0]
 800e2d2:	f7fe fca8 	bl	800cc26 <RegionCommonValueInRange>
 800e2d6:	3800      	subs	r0, #0
 800e2d8:	bf18      	it	ne
 800e2da:	2001      	movne	r0, #1
 800e2dc:	e000      	b.n	800e2e0 <RegionUS915Verify+0x70>
    switch( phyAttribute )
 800e2de:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_US915 */
}
 800e2e0:	bd08      	pop	{r3, pc}
	...

0800e2e4 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 800e2e4:	7a03      	ldrb	r3, [r0, #8]
 800e2e6:	2b10      	cmp	r3, #16
 800e2e8:	d134      	bne.n	800e354 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 800e2ea:	6843      	ldr	r3, [r0, #4]
 800e2ec:	7bdb      	ldrb	r3, [r3, #15]
 800e2ee:	2b01      	cmp	r3, #1
 800e2f0:	d130      	bne.n	800e354 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	4613      	mov	r3, r2
 800e2f6:	2a04      	cmp	r2, #4
 800e2f8:	d82b      	bhi.n	800e352 <RegionUS915ApplyCFList+0x6e>
{
 800e2fa:	b530      	push	{r4, r5, lr}
 800e2fc:	e010      	b.n	800e320 <RegionUS915ApplyCFList+0x3c>
        if( chMaskItr == 4 )
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 800e2fe:	4916      	ldr	r1, [pc, #88]	@ (800e358 <RegionUS915ApplyCFList+0x74>)
 800e300:	680d      	ldr	r5, [r1, #0]
 800e302:	f835 101c 	ldrh.w	r1, [r5, ip, lsl #1]
 800e306:	f50c 7ed8 	add.w	lr, ip, #432	@ 0x1b0
 800e30a:	f834 401e 	ldrh.w	r4, [r4, lr, lsl #1]
 800e30e:	4021      	ands	r1, r4
 800e310:	f825 101c 	strh.w	r1, [r5, ip, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800e314:	3301      	adds	r3, #1
 800e316:	b2db      	uxtb	r3, r3
 800e318:	3202      	adds	r2, #2
 800e31a:	b2d2      	uxtb	r2, r2
 800e31c:	2b04      	cmp	r3, #4
 800e31e:	d817      	bhi.n	800e350 <RegionUS915ApplyCFList+0x6c>
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 800e320:	6841      	ldr	r1, [r0, #4]
 800e322:	5c89      	ldrb	r1, [r1, r2]
 800e324:	4c0d      	ldr	r4, [pc, #52]	@ (800e35c <RegionUS915ApplyCFList+0x78>)
 800e326:	6824      	ldr	r4, [r4, #0]
 800e328:	469c      	mov	ip, r3
 800e32a:	f503 75d8 	add.w	r5, r3, #432	@ 0x1b0
 800e32e:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 800e332:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800e336:	4496      	add	lr, r2
 800e338:	f89e e001 	ldrb.w	lr, [lr, #1]
 800e33c:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
 800e340:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        if( chMaskItr == 4 )
 800e344:	2b04      	cmp	r3, #4
 800e346:	d1da      	bne.n	800e2fe <RegionUS915ApplyCFList+0x1a>
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 800e348:	b2c9      	uxtb	r1, r1
 800e34a:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
 800e34e:	e7d6      	b.n	800e2fe <RegionUS915ApplyCFList+0x1a>
    }
#endif /* REGION_US915 */
}
 800e350:	bd30      	pop	{r4, r5, pc}
 800e352:	4770      	bx	lr
 800e354:	4770      	bx	lr
 800e356:	bf00      	nop
 800e358:	20000e8c 	.word	0x20000e8c
 800e35c:	20000e88 	.word	0x20000e88

0800e360 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800e360:	b570      	push	{r4, r5, r6, lr}
 800e362:	4605      	mov	r5, r0
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 800e364:	2204      	movs	r2, #4
 800e366:	2100      	movs	r1, #0
 800e368:	6800      	ldr	r0, [r0, #0]
 800e36a:	f7fe fcba 	bl	800cce2 <RegionCommonCountChannels>

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 800e36e:	2801      	cmp	r0, #1
 800e370:	d031      	beq.n	800e3d6 <RegionUS915ChanMaskSet+0x76>
        ( nbChannels > 0 ) )
    {
        return false;
    }

    switch( chanMaskSet->ChannelsMaskType )
 800e372:	792c      	ldrb	r4, [r5, #4]
 800e374:	b11c      	cbz	r4, 800e37e <RegionUS915ChanMaskSet+0x1e>
 800e376:	2c01      	cmp	r4, #1
 800e378:	d023      	beq.n	800e3c2 <RegionUS915ChanMaskSet+0x62>
 800e37a:	2000      	movs	r0, #0
 800e37c:	e020      	b.n	800e3c0 <RegionUS915ChanMaskSet+0x60>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800e37e:	4e17      	ldr	r6, [pc, #92]	@ (800e3dc <RegionUS915ChanMaskSet+0x7c>)
 800e380:	6830      	ldr	r0, [r6, #0]
 800e382:	2206      	movs	r2, #6
 800e384:	6829      	ldr	r1, [r5, #0]
 800e386:	f500 7058 	add.w	r0, r0, #864	@ 0x360
 800e38a:	f7fe fcc0 	bl	800cd0e <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 800e38e:	6830      	ldr	r0, [r6, #0]
 800e390:	f890 3374 	ldrb.w	r3, [r0, #884]	@ 0x374
 800e394:	f8a0 3374 	strh.w	r3, [r0, #884]	@ 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800e398:	2300      	movs	r3, #0
 800e39a:	f8a0 3376 	strh.w	r3, [r0, #886]	@ 0x376

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800e39e:	e00c      	b.n	800e3ba <RegionUS915ChanMaskSet+0x5a>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800e3a0:	4b0f      	ldr	r3, [pc, #60]	@ (800e3e0 <RegionUS915ChanMaskSet+0x80>)
 800e3a2:	681a      	ldr	r2, [r3, #0]
 800e3a4:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 800e3a8:	f504 71d8 	add.w	r1, r4, #432	@ 0x1b0
 800e3ac:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 800e3b0:	400b      	ands	r3, r1
 800e3b2:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800e3b6:	3401      	adds	r4, #1
 800e3b8:	b2e4      	uxtb	r4, r4
 800e3ba:	2c05      	cmp	r4, #5
 800e3bc:	d9f0      	bls.n	800e3a0 <RegionUS915ChanMaskSet+0x40>
            break;
        }
        default:
            return false;
    }
    return true;
 800e3be:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_US915 */
}
 800e3c0:	bd70      	pop	{r4, r5, r6, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800e3c2:	4b06      	ldr	r3, [pc, #24]	@ (800e3dc <RegionUS915ChanMaskSet+0x7c>)
 800e3c4:	6818      	ldr	r0, [r3, #0]
 800e3c6:	2206      	movs	r2, #6
 800e3c8:	6829      	ldr	r1, [r5, #0]
 800e3ca:	f500 705b 	add.w	r0, r0, #876	@ 0x36c
 800e3ce:	f7fe fc9e 	bl	800cd0e <RegionCommonChanMaskCopy>
    return true;
 800e3d2:	2001      	movs	r0, #1
            break;
 800e3d4:	e7f4      	b.n	800e3c0 <RegionUS915ChanMaskSet+0x60>
        return false;
 800e3d6:	2000      	movs	r0, #0
 800e3d8:	e7f2      	b.n	800e3c0 <RegionUS915ChanMaskSet+0x60>
 800e3da:	bf00      	nop
 800e3dc:	20000e88 	.word	0x20000e88
 800e3e0:	20000e8c 	.word	0x20000e8c

0800e3e4 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800e3e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3e6:	b083      	sub	sp, #12
 800e3e8:	460e      	mov	r6, r1
 800e3ea:	4617      	mov	r7, r2
 800e3ec:	461c      	mov	r4, r3
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 800e3ee:	280d      	cmp	r0, #13
 800e3f0:	bfa8      	it	ge
 800e3f2:	200d      	movge	r0, #13
 800e3f4:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 800e3f6:	4d0f      	ldr	r5, [pc, #60]	@ (800e434 <RegionUS915ComputeRxWindowParameters+0x50>)
 800e3f8:	4629      	mov	r1, r5
 800e3fa:	f7fe fee3 	bl	800d1c4 <RegionCommonGetBandwidth>
 800e3fe:	70a0      	strb	r0, [r4, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 800e400:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800e404:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800e408:	4a0b      	ldr	r2, [pc, #44]	@ (800e438 <RegionUS915ComputeRxWindowParameters+0x54>)
 800e40a:	5cd0      	ldrb	r0, [r2, r3]
 800e40c:	f7fe fdaa 	bl	800cf64 <RegionCommonComputeSymbolTimeLoRa>
 800e410:	4605      	mov	r5, r0

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800e412:	4b0a      	ldr	r3, [pc, #40]	@ (800e43c <RegionUS915ComputeRxWindowParameters+0x58>)
 800e414:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e416:	4798      	blx	r3
 800e418:	4603      	mov	r3, r0
 800e41a:	f104 020c 	add.w	r2, r4, #12
 800e41e:	9201      	str	r2, [sp, #4]
 800e420:	3408      	adds	r4, #8
 800e422:	9400      	str	r4, [sp, #0]
 800e424:	463a      	mov	r2, r7
 800e426:	4631      	mov	r1, r6
 800e428:	4628      	mov	r0, r5
 800e42a:	f7fe fda9 	bl	800cf80 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 800e42e:	b003      	add	sp, #12
 800e430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e432:	bf00      	nop
 800e434:	08012d98 	.word	0x08012d98
 800e438:	08012dd8 	.word	0x08012dd8
 800e43c:	08013170 	.word	0x08013170

0800e440 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800e440:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e444:	b08b      	sub	sp, #44	@ 0x2c
 800e446:	4604      	mov	r4, r0
 800e448:	460d      	mov	r5, r1
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 800e44a:	f990 6001 	ldrsb.w	r6, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800e44e:	6847      	ldr	r7, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800e450:	4b22      	ldr	r3, [pc, #136]	@ (800e4dc <RegionUS915RxConfig+0x9c>)
 800e452:	685b      	ldr	r3, [r3, #4]
 800e454:	4798      	blx	r3
 800e456:	2800      	cmp	r0, #0
 800e458:	d13d      	bne.n	800e4d6 <RegionUS915RxConfig+0x96>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800e45a:	7ce3      	ldrb	r3, [r4, #19]
 800e45c:	b933      	cbnz	r3, 800e46c <RegionUS915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 800e45e:	7823      	ldrb	r3, [r4, #0]
 800e460:	f003 0307 	and.w	r3, r3, #7
 800e464:	4a1e      	ldr	r2, [pc, #120]	@ (800e4e0 <RegionUS915RxConfig+0xa0>)
 800e466:	4f1f      	ldr	r7, [pc, #124]	@ (800e4e4 <RegionUS915RxConfig+0xa4>)
 800e468:	fb02 7703 	mla	r7, r2, r3, r7
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 800e46c:	4b1e      	ldr	r3, [pc, #120]	@ (800e4e8 <RegionUS915RxConfig+0xa8>)
 800e46e:	f913 9006 	ldrsb.w	r9, [r3, r6]

    Radio.SetChannel( frequency );
 800e472:	f8df 8068 	ldr.w	r8, [pc, #104]	@ 800e4dc <RegionUS915RxConfig+0x9c>
 800e476:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e47a:	4638      	mov	r0, r7
 800e47c:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800e47e:	f8d8 8018 	ldr.w	r8, [r8, #24]
 800e482:	7ca3      	ldrb	r3, [r4, #18]
 800e484:	9309      	str	r3, [sp, #36]	@ 0x24
 800e486:	2001      	movs	r0, #1
 800e488:	9008      	str	r0, [sp, #32]
 800e48a:	2200      	movs	r2, #0
 800e48c:	9207      	str	r2, [sp, #28]
 800e48e:	9206      	str	r2, [sp, #24]
 800e490:	9205      	str	r2, [sp, #20]
 800e492:	9204      	str	r2, [sp, #16]
 800e494:	9203      	str	r2, [sp, #12]
 800e496:	8923      	ldrh	r3, [r4, #8]
 800e498:	9302      	str	r3, [sp, #8]
 800e49a:	2308      	movs	r3, #8
 800e49c:	9301      	str	r3, [sp, #4]
 800e49e:	9200      	str	r2, [sp, #0]
 800e4a0:	4603      	mov	r3, r0
 800e4a2:	464a      	mov	r2, r9
 800e4a4:	78a1      	ldrb	r1, [r4, #2]
 800e4a6:	47c0      	blx	r8

    if( rxConfig->RepeaterSupport == true )
 800e4a8:	7c63      	ldrb	r3, [r4, #17]
 800e4aa:	b18b      	cbz	r3, 800e4d0 <RegionUS915RxConfig+0x90>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 800e4ac:	4b0f      	ldr	r3, [pc, #60]	@ (800e4ec <RegionUS915RxConfig+0xac>)
 800e4ae:	5d99      	ldrb	r1, [r3, r6]
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800e4b0:	4b0a      	ldr	r3, [pc, #40]	@ (800e4dc <RegionUS915RxConfig+0x9c>)
 800e4b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e4b4:	310d      	adds	r1, #13
 800e4b6:	b2c9      	uxtb	r1, r1
 800e4b8:	2001      	movs	r0, #1
 800e4ba:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800e4bc:	4632      	mov	r2, r6
 800e4be:	4639      	mov	r1, r7
 800e4c0:	7ce0      	ldrb	r0, [r4, #19]
 800e4c2:	f7fe fe91 	bl	800d1e8 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 800e4c6:	702e      	strb	r6, [r5, #0]
    return true;
 800e4c8:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_US915 */
}
 800e4ca:	b00b      	add	sp, #44	@ 0x2c
 800e4cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 800e4d0:	4b07      	ldr	r3, [pc, #28]	@ (800e4f0 <RegionUS915RxConfig+0xb0>)
 800e4d2:	5d99      	ldrb	r1, [r3, r6]
 800e4d4:	e7ec      	b.n	800e4b0 <RegionUS915RxConfig+0x70>
        return false;
 800e4d6:	2000      	movs	r0, #0
 800e4d8:	e7f7      	b.n	800e4ca <RegionUS915RxConfig+0x8a>
 800e4da:	bf00      	nop
 800e4dc:	08013170 	.word	0x08013170
 800e4e0:	000927c0 	.word	0x000927c0
 800e4e4:	370870a0 	.word	0x370870a0
 800e4e8:	08012dd8 	.word	0x08012dd8
 800e4ec:	08012d64 	.word	0x08012d64
 800e4f0:	08012d74 	.word	0x08012d74

0800e4f4 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800e4f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4f8:	b08d      	sub	sp, #52	@ 0x34
 800e4fa:	4604      	mov	r4, r0
 800e4fc:	468b      	mov	fp, r1
 800e4fe:	4617      	mov	r7, r2
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 800e500:	f990 2001 	ldrsb.w	r2, [r0, #1]
 800e504:	4b32      	ldr	r3, [pc, #200]	@ (800e5d0 <RegionUS915TxConfig+0xdc>)
 800e506:	f913 a002 	ldrsb.w	sl, [r3, r2]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 800e50a:	f8df 90c8 	ldr.w	r9, [pc, #200]	@ 800e5d4 <RegionUS915TxConfig+0xe0>
 800e50e:	f8d9 3000 	ldr.w	r3, [r9]
 800e512:	7801      	ldrb	r1, [r0, #0]
 800e514:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800e518:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800e51c:	7a49      	ldrb	r1, [r1, #9]
 800e51e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800e522:	482d      	ldr	r0, [pc, #180]	@ (800e5d8 <RegionUS915TxConfig+0xe4>)
 800e524:	6800      	ldr	r0, [r0, #0]
 800e526:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800e52a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800e52e:	f991 1002 	ldrsb.w	r1, [r1, #2]
 800e532:	f994 0002 	ldrsb.w	r0, [r4, #2]
 800e536:	f7ff fce7 	bl	800df08 <LimitTxPower>
 800e53a:	4606      	mov	r6, r0
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 800e53c:	4927      	ldr	r1, [pc, #156]	@ (800e5dc <RegionUS915TxConfig+0xe8>)
 800e53e:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800e542:	f7fe fe3f 	bl	800d1c4 <RegionCommonGetBandwidth>
 800e546:	900a      	str	r0, [sp, #40]	@ 0x28
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 800e548:	2200      	movs	r2, #0
 800e54a:	4925      	ldr	r1, [pc, #148]	@ (800e5e0 <RegionUS915TxConfig+0xec>)
 800e54c:	4630      	mov	r0, r6
 800e54e:	f7fe fd53 	bl	800cff8 <RegionCommonComputeTxPower>
 800e552:	900b      	str	r0, [sp, #44]	@ 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800e554:	f8df 808c 	ldr.w	r8, [pc, #140]	@ 800e5e4 <RegionUS915TxConfig+0xf0>
 800e558:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800e55c:	f8d9 1000 	ldr.w	r1, [r9]
 800e560:	7823      	ldrb	r3, [r4, #0]
 800e562:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e566:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800e56a:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800e56c:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800e570:	9308      	str	r3, [sp, #32]
 800e572:	2200      	movs	r2, #0
 800e574:	9207      	str	r2, [sp, #28]
 800e576:	9206      	str	r2, [sp, #24]
 800e578:	9205      	str	r2, [sp, #20]
 800e57a:	2501      	movs	r5, #1
 800e57c:	9504      	str	r5, [sp, #16]
 800e57e:	9203      	str	r2, [sp, #12]
 800e580:	2308      	movs	r3, #8
 800e582:	9302      	str	r3, [sp, #8]
 800e584:	9501      	str	r5, [sp, #4]
 800e586:	f8cd a000 	str.w	sl, [sp]
 800e58a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e58c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e58e:	4628      	mov	r0, r5
 800e590:	f8d8 c01c 	ldr.w	ip, [r8, #28]
 800e594:	47e0      	blx	ip
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800e596:	f8d9 2000 	ldr.w	r2, [r9]
 800e59a:	7823      	ldrb	r3, [r4, #0]
 800e59c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e5a0:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800e5a4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e5a8:	f7fe fe40 	bl	800d22c <RegionCommonTxConfigPrint>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 800e5ac:	f8d8 3054 	ldr.w	r3, [r8, #84]	@ 0x54
 800e5b0:	7b21      	ldrb	r1, [r4, #12]
 800e5b2:	4628      	mov	r0, r5
 800e5b4:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800e5b6:	89a1      	ldrh	r1, [r4, #12]
 800e5b8:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800e5bc:	f7ff fc86 	bl	800decc <GetTimeOnAir>
 800e5c0:	6038      	str	r0, [r7, #0]

    *txPower = txPowerLimited;
 800e5c2:	f88b 6000 	strb.w	r6, [fp]
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 800e5c6:	4628      	mov	r0, r5
 800e5c8:	b00d      	add	sp, #52	@ 0x34
 800e5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5ce:	bf00      	nop
 800e5d0:	08012dd8 	.word	0x08012dd8
 800e5d4:	20000e88 	.word	0x20000e88
 800e5d8:	20000e84 	.word	0x20000e84
 800e5dc:	08012d98 	.word	0x08012d98
 800e5e0:	41f00000 	.word	0x41f00000
 800e5e4:	08013170 	.word	0x08013170

0800e5e8 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800e5e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e5ec:	b091      	sub	sp, #68	@ 0x44
 800e5ee:	4605      	mov	r5, r0
 800e5f0:	4688      	mov	r8, r1
 800e5f2:	4617      	mov	r7, r2
 800e5f4:	461e      	mov	r6, r3
    uint8_t status = 0x07;
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800e5f6:	2400      	movs	r4, #0
 800e5f8:	940e      	str	r4, [sp, #56]	@ 0x38
 800e5fa:	f8ad 403c 	strh.w	r4, [sp, #60]	@ 0x3c
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 800e5fe:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e600:	940c      	str	r4, [sp, #48]	@ 0x30
 800e602:	940d      	str	r4, [sp, #52]	@ 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800e604:	4b98      	ldr	r3, [pc, #608]	@ (800e868 <RegionUS915LinkAdrReq+0x280>)
 800e606:	6819      	ldr	r1, [r3, #0]
 800e608:	2206      	movs	r2, #6
 800e60a:	f501 7158 	add.w	r1, r1, #864	@ 0x360
 800e60e:	a80b      	add	r0, sp, #44	@ 0x2c
 800e610:	f7fe fb7d 	bl	800cd0e <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800e614:	e00d      	b.n	800e632 <RegionUS915LinkAdrReq+0x4a>
        status = 0x07;

        if( linkAdrParams.ChMaskCtrl == 6 )
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 800e616:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e61a:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
            channelsMask[1] = 0xFFFF;
 800e61e:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
            channelsMask[2] = 0xFFFF;
 800e622:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
            channelsMask[3] = 0xFFFF;
 800e626:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800e62a:	f89d 303c 	ldrb.w	r3, [sp, #60]	@ 0x3c
 800e62e:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800e632:	7a2b      	ldrb	r3, [r5, #8]
 800e634:	42a3      	cmp	r3, r4
 800e636:	f240 8084 	bls.w	800e742 <RegionUS915LinkAdrReq+0x15a>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800e63a:	6868      	ldr	r0, [r5, #4]
 800e63c:	a90e      	add	r1, sp, #56	@ 0x38
 800e63e:	4420      	add	r0, r4
 800e640:	f7fe fc16 	bl	800ce70 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800e644:	4603      	mov	r3, r0
 800e646:	2800      	cmp	r0, #0
 800e648:	d07b      	beq.n	800e742 <RegionUS915LinkAdrReq+0x15a>
        bytesProcessed += nextIndex;
 800e64a:	4423      	add	r3, r4
 800e64c:	b2dc      	uxtb	r4, r3
        if( linkAdrParams.ChMaskCtrl == 6 )
 800e64e:	f89d c03b 	ldrb.w	ip, [sp, #59]	@ 0x3b
 800e652:	f1bc 0f06 	cmp.w	ip, #6
 800e656:	d0de      	beq.n	800e616 <RegionUS915LinkAdrReq+0x2e>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 800e658:	f1bc 0f07 	cmp.w	ip, #7
 800e65c:	d00a      	beq.n	800e674 <RegionUS915LinkAdrReq+0x8c>
            channelsMask[2] = 0x0000;
            channelsMask[3] = 0x0000;
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 800e65e:	f1bc 0f05 	cmp.w	ip, #5
 800e662:	d06a      	beq.n	800e73a <RegionUS915LinkAdrReq+0x152>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 800e664:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 800e668:	aa10      	add	r2, sp, #64	@ 0x40
 800e66a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 800e66e:	f82c 3c14 	strh.w	r3, [ip, #-20]
 800e672:	e7de      	b.n	800e632 <RegionUS915LinkAdrReq+0x4a>
            channelsMask[0] = 0x0000;
 800e674:	2300      	movs	r3, #0
 800e676:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
            channelsMask[1] = 0x0000;
 800e67a:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
            channelsMask[2] = 0x0000;
 800e67e:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
            channelsMask[3] = 0x0000;
 800e682:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800e686:	f89d 303c 	ldrb.w	r3, [sp, #60]	@ 0x3c
 800e68a:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800e68e:	e7d0      	b.n	800e632 <RegionUS915LinkAdrReq+0x4a>
                        channelsMask[cntChannelMask] |= 0xFF00;
 800e690:	aa10      	add	r2, sp, #64	@ 0x40
 800e692:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800e696:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800e69a:	f062 02ff 	orn	r2, r2, #255	@ 0xff
 800e69e:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 800e6a2:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 800e6a6:	4313      	orrs	r3, r2
 800e6a8:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
                        cntChannelMask++;
 800e6ac:	3101      	adds	r1, #1
 800e6ae:	b2c9      	uxtb	r1, r1
            for( uint8_t i = 0; i <= 7; i++ )
 800e6b0:	f10c 0c01 	add.w	ip, ip, #1
 800e6b4:	fa5f fc8c 	uxtb.w	ip, ip
 800e6b8:	f1bc 0f07 	cmp.w	ip, #7
 800e6bc:	d8b9      	bhi.n	800e632 <RegionUS915LinkAdrReq+0x4a>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800e6be:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 800e6c2:	2301      	movs	r3, #1
 800e6c4:	fa03 f30c 	lsl.w	r3, r3, ip
 800e6c8:	421a      	tst	r2, r3
 800e6ca:	d011      	beq.n	800e6f0 <RegionUS915LinkAdrReq+0x108>
                    if( ( i % 2 ) == 0 )
 800e6cc:	f01c 0f01 	tst.w	ip, #1
 800e6d0:	d1de      	bne.n	800e690 <RegionUS915LinkAdrReq+0xa8>
                        channelsMask[cntChannelMask] |= 0x00FF;
 800e6d2:	aa10      	add	r2, sp, #64	@ 0x40
 800e6d4:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800e6d8:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800e6dc:	f042 02ff 	orr.w	r2, r2, #255	@ 0xff
 800e6e0:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 800e6e4:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 800e6e8:	4313      	orrs	r3, r2
 800e6ea:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800e6ee:	e7df      	b.n	800e6b0 <RegionUS915LinkAdrReq+0xc8>
                    if( ( i % 2 ) == 0 )
 800e6f0:	f01c 0f01 	tst.w	ip, #1
 800e6f4:	d110      	bne.n	800e718 <RegionUS915LinkAdrReq+0x130>
                        channelsMask[cntChannelMask] &= 0xFF00;
 800e6f6:	aa10      	add	r2, sp, #64	@ 0x40
 800e6f8:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800e6fc:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800e700:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800e704:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 800e708:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 800e70c:	43db      	mvns	r3, r3
 800e70e:	b21b      	sxth	r3, r3
 800e710:	4013      	ands	r3, r2
 800e712:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800e716:	e7cb      	b.n	800e6b0 <RegionUS915LinkAdrReq+0xc8>
                        channelsMask[cntChannelMask] &= 0x00FF;
 800e718:	aa10      	add	r2, sp, #64	@ 0x40
 800e71a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 800e71e:	f812 0c14 	ldrb.w	r0, [r2, #-20]
 800e722:	f822 0c14 	strh.w	r0, [r2, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 800e726:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 800e72a:	43db      	mvns	r3, r3
 800e72c:	b21b      	sxth	r3, r3
 800e72e:	4013      	ands	r3, r2
 800e730:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
                        cntChannelMask++;
 800e734:	3101      	adds	r1, #1
 800e736:	b2c9      	uxtb	r1, r1
 800e738:	e7ba      	b.n	800e6b0 <RegionUS915LinkAdrReq+0xc8>
            for( uint8_t i = 0; i <= 7; i++ )
 800e73a:	f04f 0c00 	mov.w	ip, #0
            uint8_t cntChannelMask = 0;
 800e73e:	4661      	mov	r1, ip
 800e740:	e7ba      	b.n	800e6b8 <RegionUS915LinkAdrReq+0xd0>
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800e742:	f99d 3039 	ldrsb.w	r3, [sp, #57]	@ 0x39
 800e746:	2b03      	cmp	r3, #3
 800e748:	dd58      	ble.n	800e7fc <RegionUS915LinkAdrReq+0x214>
 800e74a:	f04f 0907 	mov.w	r9, #7
    {
        status &= 0xFE; // Channel mask KO
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800e74e:	2302      	movs	r3, #2
 800e750:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800e754:	7a6b      	ldrb	r3, [r5, #9]
 800e756:	f88d 3026 	strb.w	r3, [sp, #38]	@ 0x26
    phyParam = RegionUS915GetPhyParam( &getPhy );
 800e75a:	a809      	add	r0, sp, #36	@ 0x24
 800e75c:	f7ff fbf0 	bl	800df40 <RegionUS915GetPhyParam>
 800e760:	9008      	str	r0, [sp, #32]

    linkAdrVerifyParams.Status = status;
 800e762:	f88d 9004 	strb.w	r9, [sp, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800e766:	7aab      	ldrb	r3, [r5, #10]
 800e768:	f88d 3005 	strb.w	r3, [sp, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800e76c:	f99d 3039 	ldrsb.w	r3, [sp, #57]	@ 0x39
 800e770:	f88d 3006 	strb.w	r3, [sp, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800e774:	f99d 303a 	ldrsb.w	r3, [sp, #58]	@ 0x3a
 800e778:	f88d 3007 	strb.w	r3, [sp, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800e77c:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
 800e780:	f88d 3008 	strb.w	r3, [sp, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800e784:	f995 300b 	ldrsb.w	r3, [r5, #11]
 800e788:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800e78c:	f995 300c 	ldrsb.w	r3, [r5, #12]
 800e790:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800e794:	f995 300d 	ldrsb.w	r3, [r5, #13]
 800e798:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 800e79c:	2348      	movs	r3, #72	@ 0x48
 800e79e:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 800e7a2:	ab0b      	add	r3, sp, #44	@ 0x2c
 800e7a4:	9304      	str	r3, [sp, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800e7a6:	f88d 0014 	strb.w	r0, [sp, #20]
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 800e7aa:	2304      	movs	r3, #4
 800e7ac:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800e7b0:	4b2d      	ldr	r3, [pc, #180]	@ (800e868 <RegionUS915LinkAdrReq+0x280>)
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	9306      	str	r3, [sp, #24]
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 800e7b6:	230e      	movs	r3, #14
 800e7b8:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 800e7bc:	2300      	movs	r3, #0
 800e7be:	f88d 301d 	strb.w	r3, [sp, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800e7c2:	682b      	ldr	r3, [r5, #0]
 800e7c4:	9300      	str	r3, [sp, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800e7c6:	ab0e      	add	r3, sp, #56	@ 0x38
 800e7c8:	f10d 023a 	add.w	r2, sp, #58	@ 0x3a
 800e7cc:	f10d 0139 	add.w	r1, sp, #57	@ 0x39
 800e7d0:	4668      	mov	r0, sp
 800e7d2:	f7fe fb6b 	bl	800ceac <RegionCommonLinkAdrReqVerifyParams>
 800e7d6:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800e7d8:	2807      	cmp	r0, #7
 800e7da:	d01c      	beq.n	800e816 <RegionUS915LinkAdrReq+0x22e>
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800e7dc:	f99d 3039 	ldrsb.w	r3, [sp, #57]	@ 0x39
 800e7e0:	f888 3000 	strb.w	r3, [r8]
    *txPowOut = linkAdrParams.TxPower;
 800e7e4:	f99d 303a 	ldrsb.w	r3, [sp, #58]	@ 0x3a
 800e7e8:	703b      	strb	r3, [r7, #0]
    *nbRepOut = linkAdrParams.NbRep;
 800e7ea:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
 800e7ee:	7033      	strb	r3, [r6, #0]
    *nbBytesParsed = bytesProcessed;
 800e7f0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800e7f2:	701c      	strb	r4, [r3, #0]

#endif /* REGION_US915 */
    return status;
}
 800e7f4:	4628      	mov	r0, r5
 800e7f6:	b011      	add	sp, #68	@ 0x44
 800e7f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800e7fc:	2204      	movs	r2, #4
 800e7fe:	2100      	movs	r1, #0
 800e800:	a80b      	add	r0, sp, #44	@ 0x2c
 800e802:	f7fe fa6e 	bl	800cce2 <RegionCommonCountChannels>
 800e806:	2801      	cmp	r0, #1
 800e808:	d902      	bls.n	800e810 <RegionUS915LinkAdrReq+0x228>
 800e80a:	f04f 0907 	mov.w	r9, #7
 800e80e:	e79e      	b.n	800e74e <RegionUS915LinkAdrReq+0x166>
        status &= 0xFE; // Channel mask KO
 800e810:	f04f 0906 	mov.w	r9, #6
 800e814:	e79b      	b.n	800e74e <RegionUS915LinkAdrReq+0x166>
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 800e816:	f8df 9050 	ldr.w	r9, [pc, #80]	@ 800e868 <RegionUS915LinkAdrReq+0x280>
 800e81a:	f8d9 0000 	ldr.w	r0, [r9]
 800e81e:	2206      	movs	r2, #6
 800e820:	a90b      	add	r1, sp, #44	@ 0x2c
 800e822:	f500 7058 	add.w	r0, r0, #864	@ 0x360
 800e826:	f7fe fa72 	bl	800cd0e <RegionCommonChanMaskCopy>
        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 800e82a:	4b10      	ldr	r3, [pc, #64]	@ (800e86c <RegionUS915LinkAdrReq+0x284>)
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	8819      	ldrh	r1, [r3, #0]
 800e830:	f8d9 2000 	ldr.w	r2, [r9]
 800e834:	f8b2 0360 	ldrh.w	r0, [r2, #864]	@ 0x360
 800e838:	4001      	ands	r1, r0
 800e83a:	8019      	strh	r1, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 800e83c:	8859      	ldrh	r1, [r3, #2]
 800e83e:	f8b2 0362 	ldrh.w	r0, [r2, #866]	@ 0x362
 800e842:	4001      	ands	r1, r0
 800e844:	8059      	strh	r1, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 800e846:	8899      	ldrh	r1, [r3, #4]
 800e848:	f8b2 0364 	ldrh.w	r0, [r2, #868]	@ 0x364
 800e84c:	4001      	ands	r1, r0
 800e84e:	8099      	strh	r1, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 800e850:	88d9      	ldrh	r1, [r3, #6]
 800e852:	f8b2 0366 	ldrh.w	r0, [r2, #870]	@ 0x366
 800e856:	4001      	ands	r1, r0
 800e858:	80d9      	strh	r1, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800e85a:	f8b2 1368 	ldrh.w	r1, [r2, #872]	@ 0x368
 800e85e:	8119      	strh	r1, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 800e860:	f8b2 236a 	ldrh.w	r2, [r2, #874]	@ 0x36a
 800e864:	815a      	strh	r2, [r3, #10]
 800e866:	e7b9      	b.n	800e7dc <RegionUS915LinkAdrReq+0x1f4>
 800e868:	20000e88 	.word	0x20000e88
 800e86c:	20000e8c 	.word	0x20000e8c

0800e870 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800e870:	b538      	push	{r3, r4, r5, lr}
 800e872:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 800e874:	6840      	ldr	r0, [r0, #4]
 800e876:	f7ff faf9 	bl	800de6c <VerifyRfFreq>
 800e87a:	b310      	cbz	r0, 800e8c2 <RegionUS915RxParamSetupReq+0x52>
    uint8_t status = 0x07;
 800e87c:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 800e87e:	220d      	movs	r2, #13
 800e880:	2108      	movs	r1, #8
 800e882:	f994 0000 	ldrsb.w	r0, [r4]
 800e886:	f7fe f9ce 	bl	800cc26 <RegionCommonValueInRange>
 800e88a:	b908      	cbnz	r0, 800e890 <RegionUS915RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 800e88c:	f005 05fd 	and.w	r5, r5, #253	@ 0xfd
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 800e890:	2207      	movs	r2, #7
 800e892:	2105      	movs	r1, #5
 800e894:	f994 0000 	ldrsb.w	r0, [r4]
 800e898:	f7fe f9c5 	bl	800cc26 <RegionCommonValueInRange>
 800e89c:	2801      	cmp	r0, #1
 800e89e:	d003      	beq.n	800e8a8 <RegionUS915RxParamSetupReq+0x38>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 800e8a0:	f994 3000 	ldrsb.w	r3, [r4]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 800e8a4:	2b0d      	cmp	r3, #13
 800e8a6:	dd01      	ble.n	800e8ac <RegionUS915RxParamSetupReq+0x3c>
    {
        status &= 0xFD; // Datarate KO
 800e8a8:	f005 05fd 	and.w	r5, r5, #253	@ 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 800e8ac:	2203      	movs	r2, #3
 800e8ae:	2100      	movs	r1, #0
 800e8b0:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800e8b4:	f7fe f9b7 	bl	800cc26 <RegionCommonValueInRange>
 800e8b8:	b908      	cbnz	r0, 800e8be <RegionUS915RxParamSetupReq+0x4e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800e8ba:	f005 05fb 	and.w	r5, r5, #251	@ 0xfb
    }

#endif /* REGION_US915 */
    return status;
}
 800e8be:	4628      	mov	r0, r5
 800e8c0:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800e8c2:	2506      	movs	r5, #6
 800e8c4:	e7db      	b.n	800e87e <RegionUS915RxParamSetupReq+0xe>

0800e8c6 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Do not accept the request
    return -1;
}
 800e8c6:	f04f 30ff 	mov.w	r0, #4294967295
 800e8ca:	4770      	bx	lr

0800e8cc <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800e8cc:	f04f 30ff 	mov.w	r0, #4294967295
 800e8d0:	4770      	bx	lr

0800e8d2 <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    // Do not accept the request
    return -1;
}
 800e8d2:	f04f 30ff 	mov.w	r0, #4294967295
 800e8d6:	4770      	bx	lr

0800e8d8 <RegionUS915AlternateDr>:
int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 800e8d8:	b999      	cbnz	r1, 800e902 <RegionUS915AlternateDr+0x2a>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 800e8da:	4b0e      	ldr	r3, [pc, #56]	@ (800e914 <RegionUS915AlternateDr+0x3c>)
 800e8dc:	681a      	ldr	r2, [r3, #0]
 800e8de:	7b53      	ldrb	r3, [r2, #13]
 800e8e0:	3301      	adds	r3, #1
 800e8e2:	7353      	strb	r3, [r2, #13]
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 800e8e4:	4b0b      	ldr	r3, [pc, #44]	@ (800e914 <RegionUS915AlternateDr+0x3c>)
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	7b5a      	ldrb	r2, [r3, #13]
 800e8ea:	4b0b      	ldr	r3, [pc, #44]	@ (800e918 <RegionUS915AlternateDr+0x40>)
 800e8ec:	fba3 1302 	umull	r1, r3, r3, r2
 800e8f0:	085b      	lsrs	r3, r3, #1
 800e8f2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800e8f6:	1ad2      	subs	r2, r2, r3
 800e8f8:	f012 0fff 	tst.w	r2, #255	@ 0xff
 800e8fc:	d007      	beq.n	800e90e <RegionUS915AlternateDr+0x36>
        // Use DR_4 every 9th times.
        currentDr = DR_4;
    }
    else
    {
        currentDr = DR_0;
 800e8fe:	2000      	movs	r0, #0
    }
    return currentDr;
#else
    return -1;
#endif /* REGION_US915 */
}
 800e900:	4770      	bx	lr
        RegionNvmGroup1->JoinTrialsCounter--;
 800e902:	4b04      	ldr	r3, [pc, #16]	@ (800e914 <RegionUS915AlternateDr+0x3c>)
 800e904:	681a      	ldr	r2, [r3, #0]
 800e906:	7b53      	ldrb	r3, [r2, #13]
 800e908:	3b01      	subs	r3, #1
 800e90a:	7353      	strb	r3, [r2, #13]
 800e90c:	e7ea      	b.n	800e8e4 <RegionUS915AlternateDr+0xc>
        currentDr = DR_4;
 800e90e:	2004      	movs	r0, #4
 800e910:	4770      	bx	lr
 800e912:	bf00      	nop
 800e914:	20000e8c 	.word	0x20000e8c
 800e918:	38e38e39 	.word	0x38e38e39

0800e91c <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800e91c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e920:	b0a4      	sub	sp, #144	@ 0x90
 800e922:	4604      	mov	r4, r0
 800e924:	460e      	mov	r6, r1
 800e926:	4690      	mov	r8, r2
 800e928:	461f      	mov	r7, r3
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 800e92a:	2500      	movs	r5, #0
 800e92c:	f88d 508f 	strb.w	r5, [sp, #143]	@ 0x8f
    uint8_t nbRestrictedChannels = 0;
 800e930:	f88d 508e 	strb.w	r5, [sp, #142]	@ 0x8e
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 800e934:	2248      	movs	r2, #72	@ 0x48
 800e936:	4629      	mov	r1, r5
 800e938:	a811      	add	r0, sp, #68	@ 0x44
 800e93a:	f003 fc61 	bl	8012200 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 800e93e:	2204      	movs	r2, #4
 800e940:	4629      	mov	r1, r5
 800e942:	4b49      	ldr	r3, [pc, #292]	@ (800ea68 <RegionUS915NextChannel+0x14c>)
 800e944:	6818      	ldr	r0, [r3, #0]
 800e946:	f7fe f9cc 	bl	800cce2 <RegionCommonCountChannels>
 800e94a:	2800      	cmp	r0, #0
 800e94c:	d052      	beq.n	800e9f4 <RegionUS915NextChannel+0xd8>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 800e94e:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800e952:	2b03      	cmp	r3, #3
 800e954:	dd08      	ble.n	800e968 <RegionUS915NextChannel+0x4c>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 800e956:	4b44      	ldr	r3, [pc, #272]	@ (800ea68 <RegionUS915NextChannel+0x14c>)
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	7a1a      	ldrb	r2, [r3, #8]
 800e95c:	b922      	cbnz	r2, 800e968 <RegionUS915NextChannel+0x4c>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800e95e:	4a43      	ldr	r2, [pc, #268]	@ (800ea6c <RegionUS915NextChannel+0x150>)
 800e960:	6812      	ldr	r2, [r2, #0]
 800e962:	f8b2 2368 	ldrh.w	r2, [r2, #872]	@ 0x368
 800e966:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800e968:	7a63      	ldrb	r3, [r4, #9]
 800e96a:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800e96e:	7a23      	ldrb	r3, [r4, #8]
 800e970:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 800e974:	4b3c      	ldr	r3, [pc, #240]	@ (800ea68 <RegionUS915NextChannel+0x14c>)
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	9304      	str	r3, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800e97a:	4b3c      	ldr	r3, [pc, #240]	@ (800ea6c <RegionUS915NextChannel+0x150>)
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 800e980:	4b3b      	ldr	r3, [pc, #236]	@ (800ea70 <RegionUS915NextChannel+0x154>)
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	9306      	str	r3, [sp, #24]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 800e986:	2348      	movs	r3, #72	@ 0x48
 800e988:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = NULL;
 800e98c:	2300      	movs	r3, #0
 800e98e:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800e990:	6823      	ldr	r3, [r4, #0]
 800e992:	9309      	str	r3, [sp, #36]	@ 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800e994:	6863      	ldr	r3, [r4, #4]
 800e996:	930a      	str	r3, [sp, #40]	@ 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800e998:	7aa3      	ldrb	r3, [r4, #10]
 800e99a:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 800e99e:	2301      	movs	r3, #1
 800e9a0:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800e9a4:	ab03      	add	r3, sp, #12
 800e9a6:	9310      	str	r3, [sp, #64]	@ 0x40

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800e9a8:	ab0c      	add	r3, sp, #48	@ 0x30
 800e9aa:	f104 020c 	add.w	r2, r4, #12
 800e9ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e9b2:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800e9b6:	7d23      	ldrb	r3, [r4, #20]
 800e9b8:	f88d 3038 	strb.w	r3, [sp, #56]	@ 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800e9bc:	8ae1      	ldrh	r1, [r4, #22]
 800e9be:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800e9c2:	f7ff fa83 	bl	800decc <GetTimeOnAir>
 800e9c6:	900f      	str	r0, [sp, #60]	@ 0x3c
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800e9c8:	f8cd 8004 	str.w	r8, [sp, #4]
 800e9cc:	f10d 038e 	add.w	r3, sp, #142	@ 0x8e
 800e9d0:	9300      	str	r3, [sp, #0]
 800e9d2:	f10d 038f 	add.w	r3, sp, #143	@ 0x8f
 800e9d6:	aa11      	add	r2, sp, #68	@ 0x44
 800e9d8:	4639      	mov	r1, r7
 800e9da:	a809      	add	r0, sp, #36	@ 0x24
 800e9dc:	f7fe fb85 	bl	800d0ea <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800e9e0:	4605      	mov	r5, r0
 800e9e2:	2800      	cmp	r0, #0
 800e9e4:	d13c      	bne.n	800ea60 <RegionUS915NextChannel+0x144>
    {
        if( nextChanParams->Joined == true )
 800e9e6:	7a63      	ldrb	r3, [r4, #9]
 800e9e8:	b98b      	cbnz	r3, 800ea0e <RegionUS915NextChannel+0xf2>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 800e9ea:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800e9ee:	b1db      	cbz	r3, 800ea28 <RegionUS915NextChannel+0x10c>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	e026      	b.n	800ea42 <RegionUS915NextChannel+0x126>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 800e9f4:	4d1c      	ldr	r5, [pc, #112]	@ (800ea68 <RegionUS915NextChannel+0x14c>)
 800e9f6:	4b1d      	ldr	r3, [pc, #116]	@ (800ea6c <RegionUS915NextChannel+0x150>)
 800e9f8:	6819      	ldr	r1, [r3, #0]
 800e9fa:	2204      	movs	r2, #4
 800e9fc:	f501 7158 	add.w	r1, r1, #864	@ 0x360
 800ea00:	6828      	ldr	r0, [r5, #0]
 800ea02:	f7fe f984 	bl	800cd0e <RegionCommonChanMaskCopy>
        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800ea06:	682b      	ldr	r3, [r5, #0]
 800ea08:	2200      	movs	r2, #0
 800ea0a:	731a      	strb	r2, [r3, #12]
 800ea0c:	e79f      	b.n	800e94e <RegionUS915NextChannel+0x32>
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800ea0e:	f89d 108f 	ldrb.w	r1, [sp, #143]	@ 0x8f
 800ea12:	3901      	subs	r1, #1
 800ea14:	f000 ff58 	bl	800f8c8 <randr>
 800ea18:	f100 0390 	add.w	r3, r0, #144	@ 0x90
 800ea1c:	eb0d 0003 	add.w	r0, sp, r3
 800ea20:	f810 3c4c 	ldrb.w	r3, [r0, #-76]
 800ea24:	7033      	strb	r3, [r6, #0]
 800ea26:	e015      	b.n	800ea54 <RegionUS915NextChannel+0x138>
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 800ea28:	4b0f      	ldr	r3, [pc, #60]	@ (800ea68 <RegionUS915NextChannel+0x14c>)
 800ea2a:	6818      	ldr	r0, [r3, #0]
 800ea2c:	4632      	mov	r2, r6
 800ea2e:	f100 010c 	add.w	r1, r0, #12
 800ea32:	f7fd ffd9 	bl	800c9e8 <RegionBaseUSComputeNext125kHzJoinChannel>
 800ea36:	2803      	cmp	r0, #3
 800ea38:	d10c      	bne.n	800ea54 <RegionUS915NextChannel+0x138>
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 800ea3a:	4605      	mov	r5, r0
 800ea3c:	e010      	b.n	800ea60 <RegionUS915NextChannel+0x144>
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
                {
                    i++;
 800ea3e:	3301      	adds	r3, #1
 800ea40:	b2db      	uxtb	r3, r3
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 800ea42:	4a09      	ldr	r2, [pc, #36]	@ (800ea68 <RegionUS915NextChannel+0x14c>)
 800ea44:	6812      	ldr	r2, [r2, #0]
 800ea46:	7a10      	ldrb	r0, [r2, #8]
 800ea48:	4118      	asrs	r0, r3
 800ea4a:	f010 0f01 	tst.w	r0, #1
 800ea4e:	d0f6      	beq.n	800ea3e <RegionUS915NextChannel+0x122>
                }
                *channel = 64 + i;
 800ea50:	3340      	adds	r3, #64	@ 0x40
 800ea52:	7033      	strb	r3, [r6, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 800ea54:	2248      	movs	r2, #72	@ 0x48
 800ea56:	7831      	ldrb	r1, [r6, #0]
 800ea58:	4b03      	ldr	r3, [pc, #12]	@ (800ea68 <RegionUS915NextChannel+0x14c>)
 800ea5a:	6818      	ldr	r0, [r3, #0]
 800ea5c:	f7fe f925 	bl	800ccaa <RegionCommonChanDisable>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 800ea60:	4628      	mov	r0, r5
 800ea62:	b024      	add	sp, #144	@ 0x90
 800ea64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea68:	20000e8c 	.word	0x20000e8c
 800ea6c:	20000e88 	.word	0x20000e88
 800ea70:	20000e84 	.word	0x20000e84

0800ea74 <RegionUS915ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 800ea74:	4b04      	ldr	r3, [pc, #16]	@ (800ea88 <RegionUS915ApplyDrOffset+0x14>)
 800ea76:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800ea7a:	5698      	ldrsb	r0, [r3, r2]

    if( datarate < 0 )
 800ea7c:	2800      	cmp	r0, #0
 800ea7e:	db01      	blt.n	800ea84 <RegionUS915ApplyDrOffset+0x10>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_US915 */
}
 800ea80:	b2c0      	uxtb	r0, r0
 800ea82:	4770      	bx	lr
        datarate = DR_0;
 800ea84:	2000      	movs	r0, #0
 800ea86:	e7fb      	b.n	800ea80 <RegionUS915ApplyDrOffset+0xc>
 800ea88:	08012d84 	.word	0x08012d84

0800ea8c <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800ea8c:	b510      	push	{r4, lr}
 800ea8e:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 800ea90:	2210      	movs	r2, #16
 800ea92:	2100      	movs	r1, #0
 800ea94:	30f1      	adds	r0, #241	@ 0xf1
 800ea96:	f000 ff3c 	bl	800f912 <memset1>
    ctx->M_n = 0;
 800ea9a:	2100      	movs	r1, #0
 800ea9c:	f8c4 1114 	str.w	r1, [r4, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800eaa0:	22f0      	movs	r2, #240	@ 0xf0
 800eaa2:	4620      	mov	r0, r4
 800eaa4:	f000 ff35 	bl	800f912 <memset1>
}
 800eaa8:	bd10      	pop	{r4, pc}

0800eaaa <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800eaaa:	b508      	push	{r3, lr}
 800eaac:	4602      	mov	r2, r0
 800eaae:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800eab0:	2110      	movs	r1, #16
 800eab2:	f000 fb3b 	bl	800f12c <lorawan_aes_set_key>
}
 800eab6:	bd08      	pop	{r3, pc}

0800eab8 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800eab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eabc:	b084      	sub	sp, #16
 800eabe:	4604      	mov	r4, r0
 800eac0:	460d      	mov	r5, r1
 800eac2:	4616      	mov	r6, r2
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800eac4:	f8d0 3114 	ldr.w	r3, [r0, #276]	@ 0x114
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d054      	beq.n	800eb76 <AES_CMAC_Update+0xbe>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800eacc:	f1c3 0810 	rsb	r8, r3, #16
 800ead0:	4647      	mov	r7, r8
 800ead2:	4590      	cmp	r8, r2
 800ead4:	bf28      	it	cs
 800ead6:	4617      	movcs	r7, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800ead8:	f200 1001 	addw	r0, r0, #257	@ 0x101
 800eadc:	b2ba      	uxth	r2, r7
 800eade:	4418      	add	r0, r3
 800eae0:	f000 feff 	bl	800f8e2 <memcpy1>
        ctx->M_n += mlen;
 800eae4:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
 800eae8:	443b      	add	r3, r7
 800eaea:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 800eaee:	2b0f      	cmp	r3, #15
 800eaf0:	d94d      	bls.n	800eb8e <AES_CMAC_Update+0xd6>
 800eaf2:	45b0      	cmp	r8, r6
 800eaf4:	d24b      	bcs.n	800eb8e <AES_CMAC_Update+0xd6>
            return;
        XOR( ctx->M_last, ctx->X );
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	e008      	b.n	800eb0c <AES_CMAC_Update+0x54>
 800eafa:	18e2      	adds	r2, r4, r3
 800eafc:	f892 10f1 	ldrb.w	r1, [r2, #241]	@ 0xf1
 800eb00:	f892 0101 	ldrb.w	r0, [r2, #257]	@ 0x101
 800eb04:	4041      	eors	r1, r0
 800eb06:	f882 10f1 	strb.w	r1, [r2, #241]	@ 0xf1
 800eb0a:	3301      	adds	r3, #1
 800eb0c:	2b0f      	cmp	r3, #15
 800eb0e:	ddf4      	ble.n	800eafa <AES_CMAC_Update+0x42>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800eb10:	f104 08f1 	add.w	r8, r4, #241	@ 0xf1
 800eb14:	2210      	movs	r2, #16
 800eb16:	4641      	mov	r1, r8
 800eb18:	4668      	mov	r0, sp
 800eb1a:	f000 fee2 	bl	800f8e2 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800eb1e:	4622      	mov	r2, r4
 800eb20:	4669      	mov	r1, sp
 800eb22:	4668      	mov	r0, sp
 800eb24:	f000 fb84 	bl	800f230 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800eb28:	2210      	movs	r2, #16
 800eb2a:	4669      	mov	r1, sp
 800eb2c:	4640      	mov	r0, r8
 800eb2e:	f000 fed8 	bl	800f8e2 <memcpy1>

        data += mlen;
 800eb32:	443d      	add	r5, r7
        len -= mlen;
 800eb34:	1bf6      	subs	r6, r6, r7
 800eb36:	e01e      	b.n	800eb76 <AES_CMAC_Update+0xbe>
    }
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );
 800eb38:	eb04 0e03 	add.w	lr, r4, r3
 800eb3c:	f89e c0f1 	ldrb.w	ip, [lr, #241]	@ 0xf1
 800eb40:	5cea      	ldrb	r2, [r5, r3]
 800eb42:	ea8c 0c02 	eor.w	ip, ip, r2
 800eb46:	f88e c0f1 	strb.w	ip, [lr, #241]	@ 0xf1
 800eb4a:	3301      	adds	r3, #1
 800eb4c:	2b0f      	cmp	r3, #15
 800eb4e:	ddf3      	ble.n	800eb38 <AES_CMAC_Update+0x80>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800eb50:	f104 07f1 	add.w	r7, r4, #241	@ 0xf1
 800eb54:	2210      	movs	r2, #16
 800eb56:	4639      	mov	r1, r7
 800eb58:	4668      	mov	r0, sp
 800eb5a:	f000 fec2 	bl	800f8e2 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800eb5e:	4622      	mov	r2, r4
 800eb60:	4669      	mov	r1, sp
 800eb62:	4668      	mov	r0, sp
 800eb64:	f000 fb64 	bl	800f230 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800eb68:	2210      	movs	r2, #16
 800eb6a:	4669      	mov	r1, sp
 800eb6c:	4638      	mov	r0, r7
 800eb6e:	f000 feb8 	bl	800f8e2 <memcpy1>

        data += 16;
 800eb72:	3510      	adds	r5, #16
        len -= 16;
 800eb74:	3e10      	subs	r6, #16
    while( len > 16 )
 800eb76:	2e10      	cmp	r6, #16
 800eb78:	d901      	bls.n	800eb7e <AES_CMAC_Update+0xc6>
        XOR( data, ctx->X );
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	e7e6      	b.n	800eb4c <AES_CMAC_Update+0x94>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800eb7e:	b2b2      	uxth	r2, r6
 800eb80:	4629      	mov	r1, r5
 800eb82:	f204 1001 	addw	r0, r4, #257	@ 0x101
 800eb86:	f000 feac 	bl	800f8e2 <memcpy1>
    ctx->M_n = len;
 800eb8a:	f8c4 6114 	str.w	r6, [r4, #276]	@ 0x114
}
 800eb8e:	b004      	add	sp, #16
 800eb90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800eb94 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800eb94:	b530      	push	{r4, r5, lr}
 800eb96:	b089      	sub	sp, #36	@ 0x24
 800eb98:	4605      	mov	r5, r0
 800eb9a:	460c      	mov	r4, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800eb9c:	2210      	movs	r2, #16
 800eb9e:	2100      	movs	r1, #0
 800eba0:	eb0d 0002 	add.w	r0, sp, r2
 800eba4:	f000 feb5 	bl	800f912 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800eba8:	4622      	mov	r2, r4
 800ebaa:	a904      	add	r1, sp, #16
 800ebac:	4608      	mov	r0, r1
 800ebae:	f000 fb3f 	bl	800f230 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800ebb2:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	db01      	blt.n	800ebbe <AES_CMAC_Final+0x2a>
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 800ebba:	2300      	movs	r3, #0
 800ebbc:	e030      	b.n	800ec20 <AES_CMAC_Final+0x8c>
        LSHIFT( K, K );
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	2b0e      	cmp	r3, #14
 800ebc2:	dc11      	bgt.n	800ebe8 <AES_CMAC_Final+0x54>
 800ebc4:	f103 0220 	add.w	r2, r3, #32
 800ebc8:	eb0d 0102 	add.w	r1, sp, r2
 800ebcc:	f811 2c10 	ldrb.w	r2, [r1, #-16]
 800ebd0:	3301      	adds	r3, #1
 800ebd2:	f103 0020 	add.w	r0, r3, #32
 800ebd6:	4468      	add	r0, sp
 800ebd8:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800ebdc:	0052      	lsls	r2, r2, #1
 800ebde:	ea42 12d0 	orr.w	r2, r2, r0, lsr #7
 800ebe2:	f801 2c10 	strb.w	r2, [r1, #-16]
 800ebe6:	e7eb      	b.n	800ebc0 <AES_CMAC_Final+0x2c>
 800ebe8:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800ebec:	005b      	lsls	r3, r3, #1
 800ebee:	b2db      	uxtb	r3, r3
 800ebf0:	f88d 301f 	strb.w	r3, [sp, #31]
        K[15] ^= 0x87;
 800ebf4:	f083 0387 	eor.w	r3, r3, #135	@ 0x87
 800ebf8:	f88d 301f 	strb.w	r3, [sp, #31]
 800ebfc:	e017      	b.n	800ec2e <AES_CMAC_Final+0x9a>
        LSHIFT( K, K );
 800ebfe:	f103 0220 	add.w	r2, r3, #32
 800ec02:	eb0d 0102 	add.w	r1, sp, r2
 800ec06:	f811 2c10 	ldrb.w	r2, [r1, #-16]
 800ec0a:	3301      	adds	r3, #1
 800ec0c:	f103 0020 	add.w	r0, r3, #32
 800ec10:	4468      	add	r0, sp
 800ec12:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800ec16:	0052      	lsls	r2, r2, #1
 800ec18:	ea42 12d0 	orr.w	r2, r2, r0, lsr #7
 800ec1c:	f801 2c10 	strb.w	r2, [r1, #-16]
 800ec20:	2b0e      	cmp	r3, #14
 800ec22:	ddec      	ble.n	800ebfe <AES_CMAC_Final+0x6a>
 800ec24:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800ec28:	005b      	lsls	r3, r3, #1
 800ec2a:	f88d 301f 	strb.w	r3, [sp, #31]

    if( ctx->M_n == 16 )
 800ec2e:	f8d4 0114 	ldr.w	r0, [r4, #276]	@ 0x114
 800ec32:	2810      	cmp	r0, #16
 800ec34:	d014      	beq.n	800ec60 <AES_CMAC_Final+0xcc>
        XOR( K, ctx->M_last );
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800ec36:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	db30      	blt.n	800eca0 <AES_CMAC_Final+0x10c>
        {
            LSHIFT( K, K );
            K[15] ^= 0x87;
        }
        else
            LSHIFT( K, K );
 800ec3e:	2300      	movs	r3, #0
 800ec40:	e041      	b.n	800ecc6 <AES_CMAC_Final+0x132>
        XOR( K, ctx->M_last );
 800ec42:	18e1      	adds	r1, r4, r3
 800ec44:	f891 2101 	ldrb.w	r2, [r1, #257]	@ 0x101
 800ec48:	f103 0020 	add.w	r0, r3, #32
 800ec4c:	4468      	add	r0, sp
 800ec4e:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800ec52:	4042      	eors	r2, r0
 800ec54:	f881 2101 	strb.w	r2, [r1, #257]	@ 0x101
 800ec58:	3301      	adds	r3, #1
 800ec5a:	2b0f      	cmp	r3, #15
 800ec5c:	ddf1      	ble.n	800ec42 <AES_CMAC_Final+0xae>
 800ec5e:	e059      	b.n	800ed14 <AES_CMAC_Final+0x180>
 800ec60:	2300      	movs	r3, #0
 800ec62:	e7fa      	b.n	800ec5a <AES_CMAC_Final+0xc6>
            LSHIFT( K, K );
 800ec64:	f103 0220 	add.w	r2, r3, #32
 800ec68:	eb0d 0102 	add.w	r1, sp, r2
 800ec6c:	f811 2c10 	ldrb.w	r2, [r1, #-16]
 800ec70:	3301      	adds	r3, #1
 800ec72:	f103 0c20 	add.w	ip, r3, #32
 800ec76:	44ec      	add	ip, sp
 800ec78:	f81c cc10 	ldrb.w	ip, [ip, #-16]
 800ec7c:	0052      	lsls	r2, r2, #1
 800ec7e:	ea42 12dc 	orr.w	r2, r2, ip, lsr #7
 800ec82:	f801 2c10 	strb.w	r2, [r1, #-16]
 800ec86:	2b0e      	cmp	r3, #14
 800ec88:	ddec      	ble.n	800ec64 <AES_CMAC_Final+0xd0>
 800ec8a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800ec8e:	005b      	lsls	r3, r3, #1
 800ec90:	b2db      	uxtb	r3, r3
 800ec92:	f88d 301f 	strb.w	r3, [sp, #31]
            K[15] ^= 0x87;
 800ec96:	f083 0387 	eor.w	r3, r3, #135	@ 0x87
 800ec9a:	f88d 301f 	strb.w	r3, [sp, #31]
 800ec9e:	e019      	b.n	800ecd4 <AES_CMAC_Final+0x140>
            LSHIFT( K, K );
 800eca0:	2300      	movs	r3, #0
 800eca2:	e7f0      	b.n	800ec86 <AES_CMAC_Final+0xf2>
            LSHIFT( K, K );
 800eca4:	f103 0220 	add.w	r2, r3, #32
 800eca8:	eb0d 0102 	add.w	r1, sp, r2
 800ecac:	f811 2c10 	ldrb.w	r2, [r1, #-16]
 800ecb0:	3301      	adds	r3, #1
 800ecb2:	f103 0c20 	add.w	ip, r3, #32
 800ecb6:	44ec      	add	ip, sp
 800ecb8:	f81c cc10 	ldrb.w	ip, [ip, #-16]
 800ecbc:	0052      	lsls	r2, r2, #1
 800ecbe:	ea42 12dc 	orr.w	r2, r2, ip, lsr #7
 800ecc2:	f801 2c10 	strb.w	r2, [r1, #-16]
 800ecc6:	2b0e      	cmp	r3, #14
 800ecc8:	ddec      	ble.n	800eca4 <AES_CMAC_Final+0x110>
 800ecca:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800ecce:	005b      	lsls	r3, r3, #1
 800ecd0:	f88d 301f 	strb.w	r3, [sp, #31]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800ecd4:	4420      	add	r0, r4
 800ecd6:	2380      	movs	r3, #128	@ 0x80
 800ecd8:	f880 3101 	strb.w	r3, [r0, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800ecdc:	e003      	b.n	800ece6 <AES_CMAC_Final+0x152>
            ctx->M_last[ctx->M_n] = 0;
 800ecde:	4423      	add	r3, r4
 800ece0:	2200      	movs	r2, #0
 800ece2:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800ece6:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
 800ecea:	3301      	adds	r3, #1
 800ecec:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
 800ecf0:	2b0f      	cmp	r3, #15
 800ecf2:	d9f4      	bls.n	800ecde <AES_CMAC_Final+0x14a>

        XOR( K, ctx->M_last );
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	e00b      	b.n	800ed10 <AES_CMAC_Final+0x17c>
 800ecf8:	18e1      	adds	r1, r4, r3
 800ecfa:	f891 2101 	ldrb.w	r2, [r1, #257]	@ 0x101
 800ecfe:	f103 0020 	add.w	r0, r3, #32
 800ed02:	4468      	add	r0, sp
 800ed04:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800ed08:	4042      	eors	r2, r0
 800ed0a:	f881 2101 	strb.w	r2, [r1, #257]	@ 0x101
 800ed0e:	3301      	adds	r3, #1
 800ed10:	2b0f      	cmp	r3, #15
 800ed12:	ddf1      	ble.n	800ecf8 <AES_CMAC_Final+0x164>
 800ed14:	2300      	movs	r3, #0
 800ed16:	e009      	b.n	800ed2c <AES_CMAC_Final+0x198>
    }
    XOR( ctx->M_last, ctx->X );
 800ed18:	18e2      	adds	r2, r4, r3
 800ed1a:	f892 c0f1 	ldrb.w	ip, [r2, #241]	@ 0xf1
 800ed1e:	f892 1101 	ldrb.w	r1, [r2, #257]	@ 0x101
 800ed22:	ea8c 0c01 	eor.w	ip, ip, r1
 800ed26:	f882 c0f1 	strb.w	ip, [r2, #241]	@ 0xf1
 800ed2a:	3301      	adds	r3, #1
 800ed2c:	2b0f      	cmp	r3, #15
 800ed2e:	ddf3      	ble.n	800ed18 <AES_CMAC_Final+0x184>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ed30:	2210      	movs	r2, #16
 800ed32:	f104 01f1 	add.w	r1, r4, #241	@ 0xf1
 800ed36:	4668      	mov	r0, sp
 800ed38:	f000 fdd3 	bl	800f8e2 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800ed3c:	4622      	mov	r2, r4
 800ed3e:	4629      	mov	r1, r5
 800ed40:	4668      	mov	r0, sp
 800ed42:	f000 fa75 	bl	800f230 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800ed46:	2210      	movs	r2, #16
 800ed48:	2100      	movs	r1, #0
 800ed4a:	eb0d 0002 	add.w	r0, sp, r2
 800ed4e:	f000 fde0 	bl	800f912 <memset1>
}
 800ed52:	b009      	add	sp, #36	@ 0x24
 800ed54:	bd30      	pop	{r4, r5, pc}

0800ed56 <copy_block>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800ed56:	780b      	ldrb	r3, [r1, #0]
 800ed58:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800ed5a:	784b      	ldrb	r3, [r1, #1]
 800ed5c:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800ed5e:	788b      	ldrb	r3, [r1, #2]
 800ed60:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800ed62:	78cb      	ldrb	r3, [r1, #3]
 800ed64:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800ed66:	790b      	ldrb	r3, [r1, #4]
 800ed68:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800ed6a:	794b      	ldrb	r3, [r1, #5]
 800ed6c:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800ed6e:	798b      	ldrb	r3, [r1, #6]
 800ed70:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800ed72:	79cb      	ldrb	r3, [r1, #7]
 800ed74:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800ed76:	7a0b      	ldrb	r3, [r1, #8]
 800ed78:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800ed7a:	7a4b      	ldrb	r3, [r1, #9]
 800ed7c:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800ed7e:	7a8b      	ldrb	r3, [r1, #10]
 800ed80:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800ed82:	7acb      	ldrb	r3, [r1, #11]
 800ed84:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800ed86:	7b0b      	ldrb	r3, [r1, #12]
 800ed88:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800ed8a:	7b4b      	ldrb	r3, [r1, #13]
 800ed8c:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800ed8e:	7b8b      	ldrb	r3, [r1, #14]
 800ed90:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800ed92:	7bcb      	ldrb	r3, [r1, #15]
 800ed94:	73c3      	strb	r3, [r0, #15]
#endif
}
 800ed96:	4770      	bx	lr

0800ed98 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
    while( nn-- )
 800ed98:	e004      	b.n	800eda4 <copy_block_nn+0xc>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800ed9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ed9e:	f800 2b01 	strb.w	r2, [r0], #1
    while( nn-- )
 800eda2:	461a      	mov	r2, r3
 800eda4:	1e53      	subs	r3, r2, #1
 800eda6:	b2db      	uxtb	r3, r3
 800eda8:	2a00      	cmp	r2, #0
 800edaa:	d1f6      	bne.n	800ed9a <copy_block_nn+0x2>
}
 800edac:	4770      	bx	lr

0800edae <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800edae:	7803      	ldrb	r3, [r0, #0]
 800edb0:	780a      	ldrb	r2, [r1, #0]
 800edb2:	4053      	eors	r3, r2
 800edb4:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800edb6:	7843      	ldrb	r3, [r0, #1]
 800edb8:	784a      	ldrb	r2, [r1, #1]
 800edba:	4053      	eors	r3, r2
 800edbc:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800edbe:	7883      	ldrb	r3, [r0, #2]
 800edc0:	788a      	ldrb	r2, [r1, #2]
 800edc2:	4053      	eors	r3, r2
 800edc4:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800edc6:	78c3      	ldrb	r3, [r0, #3]
 800edc8:	78ca      	ldrb	r2, [r1, #3]
 800edca:	4053      	eors	r3, r2
 800edcc:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800edce:	7903      	ldrb	r3, [r0, #4]
 800edd0:	790a      	ldrb	r2, [r1, #4]
 800edd2:	4053      	eors	r3, r2
 800edd4:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800edd6:	7943      	ldrb	r3, [r0, #5]
 800edd8:	794a      	ldrb	r2, [r1, #5]
 800edda:	4053      	eors	r3, r2
 800eddc:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800edde:	7983      	ldrb	r3, [r0, #6]
 800ede0:	798a      	ldrb	r2, [r1, #6]
 800ede2:	4053      	eors	r3, r2
 800ede4:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800ede6:	79c3      	ldrb	r3, [r0, #7]
 800ede8:	79ca      	ldrb	r2, [r1, #7]
 800edea:	4053      	eors	r3, r2
 800edec:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800edee:	7a03      	ldrb	r3, [r0, #8]
 800edf0:	7a0a      	ldrb	r2, [r1, #8]
 800edf2:	4053      	eors	r3, r2
 800edf4:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800edf6:	7a43      	ldrb	r3, [r0, #9]
 800edf8:	7a4a      	ldrb	r2, [r1, #9]
 800edfa:	4053      	eors	r3, r2
 800edfc:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800edfe:	7a83      	ldrb	r3, [r0, #10]
 800ee00:	7a8a      	ldrb	r2, [r1, #10]
 800ee02:	4053      	eors	r3, r2
 800ee04:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800ee06:	7ac3      	ldrb	r3, [r0, #11]
 800ee08:	7aca      	ldrb	r2, [r1, #11]
 800ee0a:	4053      	eors	r3, r2
 800ee0c:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800ee0e:	7b03      	ldrb	r3, [r0, #12]
 800ee10:	7b0a      	ldrb	r2, [r1, #12]
 800ee12:	4053      	eors	r3, r2
 800ee14:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800ee16:	7b43      	ldrb	r3, [r0, #13]
 800ee18:	7b4a      	ldrb	r2, [r1, #13]
 800ee1a:	4053      	eors	r3, r2
 800ee1c:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800ee1e:	7b83      	ldrb	r3, [r0, #14]
 800ee20:	7b8a      	ldrb	r2, [r1, #14]
 800ee22:	4053      	eors	r3, r2
 800ee24:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800ee26:	7bc3      	ldrb	r3, [r0, #15]
 800ee28:	7bca      	ldrb	r2, [r1, #15]
 800ee2a:	4053      	eors	r3, r2
 800ee2c:	73c3      	strb	r3, [r0, #15]
#endif
}
 800ee2e:	4770      	bx	lr

0800ee30 <copy_and_key>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800ee30:	780b      	ldrb	r3, [r1, #0]
 800ee32:	f892 c000 	ldrb.w	ip, [r2]
 800ee36:	ea83 030c 	eor.w	r3, r3, ip
 800ee3a:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800ee3c:	784b      	ldrb	r3, [r1, #1]
 800ee3e:	f892 c001 	ldrb.w	ip, [r2, #1]
 800ee42:	ea83 030c 	eor.w	r3, r3, ip
 800ee46:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800ee48:	788b      	ldrb	r3, [r1, #2]
 800ee4a:	f892 c002 	ldrb.w	ip, [r2, #2]
 800ee4e:	ea83 030c 	eor.w	r3, r3, ip
 800ee52:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800ee54:	78cb      	ldrb	r3, [r1, #3]
 800ee56:	f892 c003 	ldrb.w	ip, [r2, #3]
 800ee5a:	ea83 030c 	eor.w	r3, r3, ip
 800ee5e:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800ee60:	790b      	ldrb	r3, [r1, #4]
 800ee62:	f892 c004 	ldrb.w	ip, [r2, #4]
 800ee66:	ea83 030c 	eor.w	r3, r3, ip
 800ee6a:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800ee6c:	794b      	ldrb	r3, [r1, #5]
 800ee6e:	f892 c005 	ldrb.w	ip, [r2, #5]
 800ee72:	ea83 030c 	eor.w	r3, r3, ip
 800ee76:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800ee78:	798b      	ldrb	r3, [r1, #6]
 800ee7a:	f892 c006 	ldrb.w	ip, [r2, #6]
 800ee7e:	ea83 030c 	eor.w	r3, r3, ip
 800ee82:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800ee84:	79cb      	ldrb	r3, [r1, #7]
 800ee86:	f892 c007 	ldrb.w	ip, [r2, #7]
 800ee8a:	ea83 030c 	eor.w	r3, r3, ip
 800ee8e:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800ee90:	7a0b      	ldrb	r3, [r1, #8]
 800ee92:	f892 c008 	ldrb.w	ip, [r2, #8]
 800ee96:	ea83 030c 	eor.w	r3, r3, ip
 800ee9a:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800ee9c:	7a4b      	ldrb	r3, [r1, #9]
 800ee9e:	f892 c009 	ldrb.w	ip, [r2, #9]
 800eea2:	ea83 030c 	eor.w	r3, r3, ip
 800eea6:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800eea8:	7a8b      	ldrb	r3, [r1, #10]
 800eeaa:	f892 c00a 	ldrb.w	ip, [r2, #10]
 800eeae:	ea83 030c 	eor.w	r3, r3, ip
 800eeb2:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800eeb4:	7acb      	ldrb	r3, [r1, #11]
 800eeb6:	f892 c00b 	ldrb.w	ip, [r2, #11]
 800eeba:	ea83 030c 	eor.w	r3, r3, ip
 800eebe:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800eec0:	7b0b      	ldrb	r3, [r1, #12]
 800eec2:	f892 c00c 	ldrb.w	ip, [r2, #12]
 800eec6:	ea83 030c 	eor.w	r3, r3, ip
 800eeca:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800eecc:	7b4b      	ldrb	r3, [r1, #13]
 800eece:	f892 c00d 	ldrb.w	ip, [r2, #13]
 800eed2:	ea83 030c 	eor.w	r3, r3, ip
 800eed6:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800eed8:	7b8b      	ldrb	r3, [r1, #14]
 800eeda:	f892 c00e 	ldrb.w	ip, [r2, #14]
 800eede:	ea83 030c 	eor.w	r3, r3, ip
 800eee2:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800eee4:	7bcb      	ldrb	r3, [r1, #15]
 800eee6:	7bd2      	ldrb	r2, [r2, #15]
 800eee8:	4053      	eors	r3, r2
 800eeea:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800eeec:	4770      	bx	lr

0800eeee <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800eeee:	b508      	push	{r3, lr}
    xor_block(d, k);
 800eef0:	f7ff ff5d 	bl	800edae <xor_block>
}
 800eef4:	bd08      	pop	{r3, pc}
	...

0800eef8 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800eef8:	7802      	ldrb	r2, [r0, #0]
 800eefa:	4b18      	ldr	r3, [pc, #96]	@ (800ef5c <shift_sub_rows+0x64>)
 800eefc:	5c9a      	ldrb	r2, [r3, r2]
 800eefe:	7002      	strb	r2, [r0, #0]
 800ef00:	7902      	ldrb	r2, [r0, #4]
 800ef02:	5c9a      	ldrb	r2, [r3, r2]
 800ef04:	7102      	strb	r2, [r0, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800ef06:	7a02      	ldrb	r2, [r0, #8]
 800ef08:	5c9a      	ldrb	r2, [r3, r2]
 800ef0a:	7202      	strb	r2, [r0, #8]
 800ef0c:	7b02      	ldrb	r2, [r0, #12]
 800ef0e:	5c9a      	ldrb	r2, [r3, r2]
 800ef10:	7302      	strb	r2, [r0, #12]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800ef12:	7842      	ldrb	r2, [r0, #1]
 800ef14:	7941      	ldrb	r1, [r0, #5]
 800ef16:	5c59      	ldrb	r1, [r3, r1]
 800ef18:	7041      	strb	r1, [r0, #1]
 800ef1a:	7a41      	ldrb	r1, [r0, #9]
 800ef1c:	5c59      	ldrb	r1, [r3, r1]
 800ef1e:	7141      	strb	r1, [r0, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800ef20:	7b41      	ldrb	r1, [r0, #13]
 800ef22:	5c59      	ldrb	r1, [r3, r1]
 800ef24:	7241      	strb	r1, [r0, #9]
 800ef26:	5c9a      	ldrb	r2, [r3, r2]
 800ef28:	7342      	strb	r2, [r0, #13]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800ef2a:	7882      	ldrb	r2, [r0, #2]
 800ef2c:	7a81      	ldrb	r1, [r0, #10]
 800ef2e:	5c59      	ldrb	r1, [r3, r1]
 800ef30:	7081      	strb	r1, [r0, #2]
 800ef32:	5c9a      	ldrb	r2, [r3, r2]
 800ef34:	7282      	strb	r2, [r0, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800ef36:	7982      	ldrb	r2, [r0, #6]
 800ef38:	7b81      	ldrb	r1, [r0, #14]
 800ef3a:	5c59      	ldrb	r1, [r3, r1]
 800ef3c:	7181      	strb	r1, [r0, #6]
 800ef3e:	5c9a      	ldrb	r2, [r3, r2]
 800ef40:	7382      	strb	r2, [r0, #14]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800ef42:	7bc2      	ldrb	r2, [r0, #15]
 800ef44:	7ac1      	ldrb	r1, [r0, #11]
 800ef46:	5c59      	ldrb	r1, [r3, r1]
 800ef48:	73c1      	strb	r1, [r0, #15]
 800ef4a:	79c1      	ldrb	r1, [r0, #7]
 800ef4c:	5c59      	ldrb	r1, [r3, r1]
 800ef4e:	72c1      	strb	r1, [r0, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800ef50:	78c1      	ldrb	r1, [r0, #3]
 800ef52:	5c59      	ldrb	r1, [r3, r1]
 800ef54:	71c1      	strb	r1, [r0, #7]
 800ef56:	5c9b      	ldrb	r3, [r3, r2]
 800ef58:	70c3      	strb	r3, [r0, #3]
}
 800ef5a:	4770      	bx	lr
 800ef5c:	08012fe8 	.word	0x08012fe8

0800ef60 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800ef60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef64:	b084      	sub	sp, #16
 800ef66:	4604      	mov	r4, r0
    block_copy(st, dt);
 800ef68:	4601      	mov	r1, r0
 800ef6a:	4668      	mov	r0, sp
 800ef6c:	f7ff fef3 	bl	800ed56 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800ef70:	f89d c000 	ldrb.w	ip, [sp]
 800ef74:	4b6a      	ldr	r3, [pc, #424]	@ (800f120 <mix_sub_columns+0x1c0>)
 800ef76:	f813 000c 	ldrb.w	r0, [r3, ip]
 800ef7a:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800ef7e:	4a69      	ldr	r2, [pc, #420]	@ (800f124 <mix_sub_columns+0x1c4>)
 800ef80:	f812 9008 	ldrb.w	r9, [r2, r8]
 800ef84:	f89d e00a 	ldrb.w	lr, [sp, #10]
 800ef88:	4967      	ldr	r1, [pc, #412]	@ (800f128 <mix_sub_columns+0x1c8>)
 800ef8a:	f811 500e 	ldrb.w	r5, [r1, lr]
 800ef8e:	f89d 700f 	ldrb.w	r7, [sp, #15]
 800ef92:	5dce      	ldrb	r6, [r1, r7]
 800ef94:	ea80 0009 	eor.w	r0, r0, r9
 800ef98:	4068      	eors	r0, r5
 800ef9a:	4070      	eors	r0, r6
 800ef9c:	7020      	strb	r0, [r4, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800ef9e:	f811 000c 	ldrb.w	r0, [r1, ip]
 800efa2:	f813 a008 	ldrb.w	sl, [r3, r8]
 800efa6:	f812 900e 	ldrb.w	r9, [r2, lr]
 800efaa:	ea80 0a0a 	eor.w	sl, r0, sl
 800efae:	ea89 090a 	eor.w	r9, r9, sl
 800efb2:	ea86 0609 	eor.w	r6, r6, r9
 800efb6:	7066      	strb	r6, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800efb8:	f811 8008 	ldrb.w	r8, [r1, r8]
 800efbc:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800efc0:	5dd6      	ldrb	r6, [r2, r7]
 800efc2:	ea80 0008 	eor.w	r0, r0, r8
 800efc6:	ea8e 0000 	eor.w	r0, lr, r0
 800efca:	4070      	eors	r0, r6
 800efcc:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800efce:	f812 600c 	ldrb.w	r6, [r2, ip]
 800efd2:	5dd8      	ldrb	r0, [r3, r7]
 800efd4:	ea86 0608 	eor.w	r6, r6, r8
 800efd8:	4075      	eors	r5, r6
 800efda:	4068      	eors	r0, r5
 800efdc:	70e0      	strb	r0, [r4, #3]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800efde:	f89d c004 	ldrb.w	ip, [sp, #4]
 800efe2:	f813 000c 	ldrb.w	r0, [r3, ip]
 800efe6:	f89d 8009 	ldrb.w	r8, [sp, #9]
 800efea:	f812 9008 	ldrb.w	r9, [r2, r8]
 800efee:	f89d e00e 	ldrb.w	lr, [sp, #14]
 800eff2:	f811 500e 	ldrb.w	r5, [r1, lr]
 800eff6:	f89d 7003 	ldrb.w	r7, [sp, #3]
 800effa:	5dce      	ldrb	r6, [r1, r7]
 800effc:	ea80 0009 	eor.w	r0, r0, r9
 800f000:	4068      	eors	r0, r5
 800f002:	4070      	eors	r0, r6
 800f004:	7120      	strb	r0, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800f006:	f811 000c 	ldrb.w	r0, [r1, ip]
 800f00a:	f813 a008 	ldrb.w	sl, [r3, r8]
 800f00e:	f812 900e 	ldrb.w	r9, [r2, lr]
 800f012:	ea80 0a0a 	eor.w	sl, r0, sl
 800f016:	ea89 090a 	eor.w	r9, r9, sl
 800f01a:	ea86 0609 	eor.w	r6, r6, r9
 800f01e:	7166      	strb	r6, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800f020:	f811 8008 	ldrb.w	r8, [r1, r8]
 800f024:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800f028:	5dd6      	ldrb	r6, [r2, r7]
 800f02a:	ea80 0008 	eor.w	r0, r0, r8
 800f02e:	ea8e 0000 	eor.w	r0, lr, r0
 800f032:	4070      	eors	r0, r6
 800f034:	71a0      	strb	r0, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800f036:	f812 600c 	ldrb.w	r6, [r2, ip]
 800f03a:	5dd8      	ldrb	r0, [r3, r7]
 800f03c:	ea86 0608 	eor.w	r6, r6, r8
 800f040:	4075      	eors	r5, r6
 800f042:	4068      	eors	r0, r5
 800f044:	71e0      	strb	r0, [r4, #7]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800f046:	f89d c008 	ldrb.w	ip, [sp, #8]
 800f04a:	f813 000c 	ldrb.w	r0, [r3, ip]
 800f04e:	f89d 800d 	ldrb.w	r8, [sp, #13]
 800f052:	f812 9008 	ldrb.w	r9, [r2, r8]
 800f056:	f89d e002 	ldrb.w	lr, [sp, #2]
 800f05a:	f811 500e 	ldrb.w	r5, [r1, lr]
 800f05e:	f89d 7007 	ldrb.w	r7, [sp, #7]
 800f062:	5dce      	ldrb	r6, [r1, r7]
 800f064:	ea80 0009 	eor.w	r0, r0, r9
 800f068:	4068      	eors	r0, r5
 800f06a:	4070      	eors	r0, r6
 800f06c:	7220      	strb	r0, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800f06e:	f811 000c 	ldrb.w	r0, [r1, ip]
 800f072:	f813 a008 	ldrb.w	sl, [r3, r8]
 800f076:	f812 900e 	ldrb.w	r9, [r2, lr]
 800f07a:	ea80 0a0a 	eor.w	sl, r0, sl
 800f07e:	ea89 090a 	eor.w	r9, r9, sl
 800f082:	ea86 0609 	eor.w	r6, r6, r9
 800f086:	7266      	strb	r6, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800f088:	f811 8008 	ldrb.w	r8, [r1, r8]
 800f08c:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800f090:	5dd6      	ldrb	r6, [r2, r7]
 800f092:	ea80 0008 	eor.w	r0, r0, r8
 800f096:	ea8e 0000 	eor.w	r0, lr, r0
 800f09a:	4070      	eors	r0, r6
 800f09c:	72a0      	strb	r0, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800f09e:	f812 600c 	ldrb.w	r6, [r2, ip]
 800f0a2:	5dd8      	ldrb	r0, [r3, r7]
 800f0a4:	ea86 0608 	eor.w	r6, r6, r8
 800f0a8:	4075      	eors	r5, r6
 800f0aa:	4068      	eors	r0, r5
 800f0ac:	72e0      	strb	r0, [r4, #11]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800f0ae:	f89d 600c 	ldrb.w	r6, [sp, #12]
 800f0b2:	5d98      	ldrb	r0, [r3, r6]
 800f0b4:	f89d 8001 	ldrb.w	r8, [sp, #1]
 800f0b8:	f812 9008 	ldrb.w	r9, [r2, r8]
 800f0bc:	f89d 7006 	ldrb.w	r7, [sp, #6]
 800f0c0:	f811 c007 	ldrb.w	ip, [r1, r7]
 800f0c4:	f89d 500b 	ldrb.w	r5, [sp, #11]
 800f0c8:	f811 e005 	ldrb.w	lr, [r1, r5]
 800f0cc:	ea80 0009 	eor.w	r0, r0, r9
 800f0d0:	ea8c 0000 	eor.w	r0, ip, r0
 800f0d4:	ea8e 0000 	eor.w	r0, lr, r0
 800f0d8:	7320      	strb	r0, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800f0da:	5d88      	ldrb	r0, [r1, r6]
 800f0dc:	f813 a008 	ldrb.w	sl, [r3, r8]
 800f0e0:	f812 9007 	ldrb.w	r9, [r2, r7]
 800f0e4:	ea80 0a0a 	eor.w	sl, r0, sl
 800f0e8:	ea89 090a 	eor.w	r9, r9, sl
 800f0ec:	ea8e 0e09 	eor.w	lr, lr, r9
 800f0f0:	f884 e00d 	strb.w	lr, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800f0f4:	f811 1008 	ldrb.w	r1, [r1, r8]
 800f0f8:	f813 e007 	ldrb.w	lr, [r3, r7]
 800f0fc:	5d57      	ldrb	r7, [r2, r5]
 800f0fe:	4048      	eors	r0, r1
 800f100:	ea8e 0000 	eor.w	r0, lr, r0
 800f104:	4078      	eors	r0, r7
 800f106:	73a0      	strb	r0, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800f108:	5d92      	ldrb	r2, [r2, r6]
 800f10a:	5d5b      	ldrb	r3, [r3, r5]
 800f10c:	4051      	eors	r1, r2
 800f10e:	ea8c 0c01 	eor.w	ip, ip, r1
 800f112:	ea83 030c 	eor.w	r3, r3, ip
 800f116:	73e3      	strb	r3, [r4, #15]
  }
 800f118:	b004      	add	sp, #16
 800f11a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f11e:	bf00      	nop
 800f120:	08012ee8 	.word	0x08012ee8
 800f124:	08012de8 	.word	0x08012de8
 800f128:	08012fe8 	.word	0x08012fe8

0800f12c <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800f12c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f130:	4614      	mov	r4, r2
    uint8_t cc, rc, hi;

    switch( keylen )
 800f132:	f1a1 0310 	sub.w	r3, r1, #16
 800f136:	b2db      	uxtb	r3, r3
 800f138:	2b10      	cmp	r3, #16
 800f13a:	d81a      	bhi.n	800f172 <lorawan_aes_set_key+0x46>
 800f13c:	460d      	mov	r5, r1
 800f13e:	4a3a      	ldr	r2, [pc, #232]	@ (800f228 <lorawan_aes_set_key+0xfc>)
 800f140:	fa22 f303 	lsr.w	r3, r2, r3
 800f144:	f013 0f01 	tst.w	r3, #1
 800f148:	d013      	beq.n	800f172 <lorawan_aes_set_key+0x46>
        break;
    default:
        ctx->rnd = 0;
        return ( uint8_t )-1;
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800f14a:	460a      	mov	r2, r1
 800f14c:	4601      	mov	r1, r0
 800f14e:	4620      	mov	r0, r4
 800f150:	f7ff fe22 	bl	800ed98 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800f154:	f105 031c 	add.w	r3, r5, #28
 800f158:	b2db      	uxtb	r3, r3
 800f15a:	009b      	lsls	r3, r3, #2
 800f15c:	fa5f fe83 	uxtb.w	lr, r3
    ctx->rnd = (hi >> 4) - 1;
 800f160:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800f164:	3b01      	subs	r3, #1
 800f166:	f884 30f0 	strb.w	r3, [r4, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800f16a:	462b      	mov	r3, r5
 800f16c:	f04f 0c01 	mov.w	ip, #1
 800f170:	e029      	b.n	800f1c6 <lorawan_aes_set_key+0x9a>
        ctx->rnd = 0;
 800f172:	2300      	movs	r3, #0
 800f174:	f884 30f0 	strb.w	r3, [r4, #240]	@ 0xf0
        return ( uint8_t )-1;
 800f178:	20ff      	movs	r0, #255	@ 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 800f17a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        else if( keylen > 24 && cc % keylen == 16 )
 800f17e:	2d18      	cmp	r5, #24
 800f180:	d901      	bls.n	800f186 <lorawan_aes_set_key+0x5a>
 800f182:	2a10      	cmp	r2, #16
 800f184:	d047      	beq.n	800f216 <lorawan_aes_set_key+0xea>
        tt = cc - keylen;
 800f186:	1b5a      	subs	r2, r3, r5
 800f188:	b2d2      	uxtb	r2, r2
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800f18a:	f814 9002 	ldrb.w	r9, [r4, r2]
 800f18e:	ea89 0808 	eor.w	r8, r9, r8
 800f192:	f804 8000 	strb.w	r8, [r4, r0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800f196:	f102 0801 	add.w	r8, r2, #1
 800f19a:	f814 8008 	ldrb.w	r8, [r4, r8]
 800f19e:	f100 0901 	add.w	r9, r0, #1
 800f1a2:	ea88 0707 	eor.w	r7, r8, r7
 800f1a6:	f804 7009 	strb.w	r7, [r4, r9]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800f1aa:	1c97      	adds	r7, r2, #2
 800f1ac:	5de7      	ldrb	r7, [r4, r7]
 800f1ae:	f100 0802 	add.w	r8, r0, #2
 800f1b2:	407e      	eors	r6, r7
 800f1b4:	f804 6008 	strb.w	r6, [r4, r8]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800f1b8:	3203      	adds	r2, #3
 800f1ba:	5ca6      	ldrb	r6, [r4, r2]
 800f1bc:	1cc2      	adds	r2, r0, #3
 800f1be:	4071      	eors	r1, r6
 800f1c0:	54a1      	strb	r1, [r4, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800f1c2:	3304      	adds	r3, #4
 800f1c4:	b2db      	uxtb	r3, r3
 800f1c6:	4573      	cmp	r3, lr
 800f1c8:	d22c      	bcs.n	800f224 <lorawan_aes_set_key+0xf8>
        t0 = ctx->ksch[cc - 4];
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	1f1a      	subs	r2, r3, #4
 800f1ce:	f814 8002 	ldrb.w	r8, [r4, r2]
        t1 = ctx->ksch[cc - 3];
 800f1d2:	1eda      	subs	r2, r3, #3
 800f1d4:	5ca7      	ldrb	r7, [r4, r2]
        t2 = ctx->ksch[cc - 2];
 800f1d6:	1e9a      	subs	r2, r3, #2
 800f1d8:	5ca6      	ldrb	r6, [r4, r2]
        t3 = ctx->ksch[cc - 1];
 800f1da:	1e5a      	subs	r2, r3, #1
 800f1dc:	5ca1      	ldrb	r1, [r4, r2]
        if( cc % keylen == 0 )
 800f1de:	fbb3 f2f5 	udiv	r2, r3, r5
 800f1e2:	fb05 3212 	mls	r2, r5, r2, r3
 800f1e6:	f012 02ff 	ands.w	r2, r2, #255	@ 0xff
 800f1ea:	d1c8      	bne.n	800f17e <lorawan_aes_set_key+0x52>
            t0 = s_box(t1) ^ rc;
 800f1ec:	4a0f      	ldr	r2, [pc, #60]	@ (800f22c <lorawan_aes_set_key+0x100>)
 800f1ee:	f812 9007 	ldrb.w	r9, [r2, r7]
 800f1f2:	ea89 090c 	eor.w	r9, r9, ip
            t1 = s_box(t2);
 800f1f6:	5d97      	ldrb	r7, [r2, r6]
            t2 = s_box(t3);
 800f1f8:	5c56      	ldrb	r6, [r2, r1]
            t3 = s_box(tt);
 800f1fa:	f812 1008 	ldrb.w	r1, [r2, r8]
            rc = f2(rc);
 800f1fe:	ea4f 12dc 	mov.w	r2, ip, lsr #7
 800f202:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800f206:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800f20a:	ea82 024c 	eor.w	r2, r2, ip, lsl #1
 800f20e:	fa5f fc82 	uxtb.w	ip, r2
            t0 = s_box(t1) ^ rc;
 800f212:	46c8      	mov	r8, r9
 800f214:	e7b7      	b.n	800f186 <lorawan_aes_set_key+0x5a>
            t0 = s_box(t0);
 800f216:	4a05      	ldr	r2, [pc, #20]	@ (800f22c <lorawan_aes_set_key+0x100>)
 800f218:	f812 8008 	ldrb.w	r8, [r2, r8]
            t1 = s_box(t1);
 800f21c:	5dd7      	ldrb	r7, [r2, r7]
            t2 = s_box(t2);
 800f21e:	5d96      	ldrb	r6, [r2, r6]
            t3 = s_box(t3);
 800f220:	5c51      	ldrb	r1, [r2, r1]
 800f222:	e7b0      	b.n	800f186 <lorawan_aes_set_key+0x5a>
    return 0;
 800f224:	2000      	movs	r0, #0
 800f226:	e7a8      	b.n	800f17a <lorawan_aes_set_key+0x4e>
 800f228:	00010101 	.word	0x00010101
 800f22c:	08012fe8 	.word	0x08012fe8

0800f230 <lorawan_aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
    if( ctx->rnd )
 800f230:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 800f234:	b31b      	cbz	r3, 800f27e <lorawan_aes_encrypt+0x4e>
{
 800f236:	b570      	push	{r4, r5, r6, lr}
 800f238:	b084      	sub	sp, #16
 800f23a:	460e      	mov	r6, r1
 800f23c:	4615      	mov	r5, r2
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800f23e:	4601      	mov	r1, r0
 800f240:	4668      	mov	r0, sp
 800f242:	f7ff fdf5 	bl	800ee30 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800f246:	2401      	movs	r4, #1
 800f248:	e009      	b.n	800f25e <lorawan_aes_encrypt+0x2e>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800f24a:	4668      	mov	r0, sp
 800f24c:	f7ff fe88 	bl	800ef60 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800f250:	eb05 1104 	add.w	r1, r5, r4, lsl #4
 800f254:	4668      	mov	r0, sp
 800f256:	f7ff fe4a 	bl	800eeee <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800f25a:	3401      	adds	r4, #1
 800f25c:	b2e4      	uxtb	r4, r4
 800f25e:	f895 30f0 	ldrb.w	r3, [r5, #240]	@ 0xf0
 800f262:	42a3      	cmp	r3, r4
 800f264:	d8f1      	bhi.n	800f24a <lorawan_aes_encrypt+0x1a>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800f266:	4668      	mov	r0, sp
 800f268:	f7ff fe46 	bl	800eef8 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800f26c:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 800f270:	4669      	mov	r1, sp
 800f272:	4630      	mov	r0, r6
 800f274:	f7ff fddc 	bl	800ee30 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800f278:	2000      	movs	r0, #0
}
 800f27a:	b004      	add	sp, #16
 800f27c:	bd70      	pop	{r4, r5, r6, pc}
        return ( uint8_t )-1;
 800f27e:	20ff      	movs	r0, #255	@ 0xff
}
 800f280:	4770      	bx	lr
	...

0800f284 <GetKeyByID>:
}

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f284:	2300      	movs	r3, #0
 800f286:	2b0a      	cmp	r3, #10
 800f288:	d816      	bhi.n	800f2b8 <GetKeyByID+0x34>
{
 800f28a:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800f28c:	4a0b      	ldr	r2, [pc, #44]	@ (800f2bc <GetKeyByID+0x38>)
 800f28e:	6814      	ldr	r4, [r2, #0]
 800f290:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800f294:	4422      	add	r2, r4
 800f296:	7e12      	ldrb	r2, [r2, #24]
 800f298:	4282      	cmp	r2, r0
 800f29a:	d006      	beq.n	800f2aa <GetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f29c:	3301      	adds	r3, #1
 800f29e:	b2db      	uxtb	r3, r3
 800f2a0:	2b0a      	cmp	r3, #10
 800f2a2:	d9f3      	bls.n	800f28c <GetKeyByID+0x8>
        {
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f2a4:	2003      	movs	r0, #3
}
 800f2a6:	bc10      	pop	{r4}
 800f2a8:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 800f2aa:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 800f2ae:	3318      	adds	r3, #24
 800f2b0:	441c      	add	r4, r3
 800f2b2:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 800f2b4:	2000      	movs	r0, #0
 800f2b6:	e7f6      	b.n	800f2a6 <GetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f2b8:	2003      	movs	r0, #3
}
 800f2ba:	4770      	bx	lr
 800f2bc:	20000e90 	.word	0x20000e90

0800f2c0 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800f2c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2c4:	b0cc      	sub	sp, #304	@ 0x130
 800f2c6:	9d52      	ldr	r5, [sp, #328]	@ 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800f2c8:	b3a9      	cbz	r1, 800f336 <ComputeCmac+0x76>
 800f2ca:	4607      	mov	r7, r0
 800f2cc:	4616      	mov	r6, r2
 800f2ce:	461c      	mov	r4, r3
 800f2d0:	4688      	mov	r8, r1
 800f2d2:	b395      	cbz	r5, 800f33a <ComputeCmac+0x7a>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800f2d4:	a802      	add	r0, sp, #8
 800f2d6:	f7ff fbd9 	bl	800ea8c <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800f2da:	a901      	add	r1, sp, #4
 800f2dc:	4620      	mov	r0, r4
 800f2de:	f7ff ffd1 	bl	800f284 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 800f2e2:	4604      	mov	r4, r0
 800f2e4:	b118      	cbz	r0, 800f2ee <ComputeCmac+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
}
 800f2e6:	4620      	mov	r0, r4
 800f2e8:	b04c      	add	sp, #304	@ 0x130
 800f2ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800f2ee:	9901      	ldr	r1, [sp, #4]
 800f2f0:	3101      	adds	r1, #1
 800f2f2:	a802      	add	r0, sp, #8
 800f2f4:	f7ff fbd9 	bl	800eaaa <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 800f2f8:	b127      	cbz	r7, 800f304 <ComputeCmac+0x44>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800f2fa:	2210      	movs	r2, #16
 800f2fc:	4639      	mov	r1, r7
 800f2fe:	a802      	add	r0, sp, #8
 800f300:	f7ff fbda 	bl	800eab8 <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800f304:	4632      	mov	r2, r6
 800f306:	4641      	mov	r1, r8
 800f308:	a802      	add	r0, sp, #8
 800f30a:	f7ff fbd5 	bl	800eab8 <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 800f30e:	a902      	add	r1, sp, #8
 800f310:	a848      	add	r0, sp, #288	@ 0x120
 800f312:	f7ff fc3f 	bl	800eb94 <AES_CMAC_Final>
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800f316:	f89d 3120 	ldrb.w	r3, [sp, #288]	@ 0x120
 800f31a:	f89d 2121 	ldrb.w	r2, [sp, #289]	@ 0x121
 800f31e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f322:	f89d 2122 	ldrb.w	r2, [sp, #290]	@ 0x122
 800f326:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f32a:	f89d 2123 	ldrb.w	r2, [sp, #291]	@ 0x123
 800f32e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f332:	602b      	str	r3, [r5, #0]
 800f334:	e7d7      	b.n	800f2e6 <ComputeCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 800f336:	2402      	movs	r4, #2
 800f338:	e7d5      	b.n	800f2e6 <ComputeCmac+0x26>
 800f33a:	2402      	movs	r4, #2
 800f33c:	e7d3      	b.n	800f2e6 <ComputeCmac+0x26>
	...

0800f340 <SecureElementInit>:
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
    if( nvm == NULL )
 800f340:	b140      	cbz	r0, 800f354 <SecureElementInit+0x14>
{
 800f342:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800f344:	4a04      	ldr	r2, [pc, #16]	@ (800f358 <SecureElementInit+0x18>)
 800f346:	6010      	str	r0, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800f348:	22d8      	movs	r2, #216	@ 0xd8
 800f34a:	4904      	ldr	r1, [pc, #16]	@ (800f35c <SecureElementInit+0x1c>)
 800f34c:	f000 fac9 	bl	800f8e2 <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800f350:	2000      	movs	r0, #0
}
 800f352:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800f354:	2002      	movs	r0, #2
}
 800f356:	4770      	bx	lr
 800f358:	20000e90 	.word	0x20000e90
 800f35c:	0803e500 	.word	0x0803e500

0800f360 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f360:	2300      	movs	r3, #0
 800f362:	2b0a      	cmp	r3, #10
 800f364:	d816      	bhi.n	800f394 <SecureElementGetKeyByID+0x34>
{
 800f366:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800f368:	4a0b      	ldr	r2, [pc, #44]	@ (800f398 <SecureElementGetKeyByID+0x38>)
 800f36a:	6814      	ldr	r4, [r2, #0]
 800f36c:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800f370:	4422      	add	r2, r4
 800f372:	7e12      	ldrb	r2, [r2, #24]
 800f374:	4282      	cmp	r2, r0
 800f376:	d006      	beq.n	800f386 <SecureElementGetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f378:	3301      	adds	r3, #1
 800f37a:	b2db      	uxtb	r3, r3
 800f37c:	2b0a      	cmp	r3, #10
 800f37e:	d9f3      	bls.n	800f368 <SecureElementGetKeyByID+0x8>
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f380:	2003      	movs	r0, #3
}
 800f382:	bc10      	pop	{r4}
 800f384:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 800f386:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 800f38a:	3318      	adds	r3, #24
 800f38c:	441c      	add	r4, r3
 800f38e:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 800f390:	2000      	movs	r0, #0
 800f392:	e7f6      	b.n	800f382 <SecureElementGetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f394:	2003      	movs	r0, #3
}
 800f396:	4770      	bx	lr
 800f398:	20000e90 	.word	0x20000e90

0800f39c <PrintKey>:
{
 800f39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3a0:	b099      	sub	sp, #100	@ 0x64
 800f3a2:	4604      	mov	r4, r0
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800f3a4:	a917      	add	r1, sp, #92	@ 0x5c
 800f3a6:	f7ff ffdb 	bl	800f360 <SecureElementGetKeyByID>
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	2800      	cmp	r0, #0
 800f3ae:	d042      	beq.n	800f436 <PrintKey+0x9a>
}
 800f3b0:	b019      	add	sp, #100	@ 0x64
 800f3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                MW_LOG( TS_OFF, VLEVEL_M,
 800f3b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f3ba:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800f3be:	689b      	ldr	r3, [r3, #8]
 800f3c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f3c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f3c4:	785a      	ldrb	r2, [r3, #1]
 800f3c6:	9214      	str	r2, [sp, #80]	@ 0x50
 800f3c8:	7899      	ldrb	r1, [r3, #2]
 800f3ca:	9115      	str	r1, [sp, #84]	@ 0x54
 800f3cc:	78da      	ldrb	r2, [r3, #3]
 800f3ce:	7919      	ldrb	r1, [r3, #4]
 800f3d0:	7958      	ldrb	r0, [r3, #5]
 800f3d2:	799c      	ldrb	r4, [r3, #6]
 800f3d4:	79dd      	ldrb	r5, [r3, #7]
 800f3d6:	7a1e      	ldrb	r6, [r3, #8]
 800f3d8:	7a5f      	ldrb	r7, [r3, #9]
 800f3da:	f893 c00a 	ldrb.w	ip, [r3, #10]
 800f3de:	f893 e00b 	ldrb.w	lr, [r3, #11]
 800f3e2:	f893 800c 	ldrb.w	r8, [r3, #12]
 800f3e6:	f893 900d 	ldrb.w	r9, [r3, #13]
 800f3ea:	f893 a00e 	ldrb.w	sl, [r3, #14]
 800f3ee:	f893 b00f 	ldrb.w	fp, [r3, #15]
 800f3f2:	7c1b      	ldrb	r3, [r3, #16]
 800f3f4:	9310      	str	r3, [sp, #64]	@ 0x40
 800f3f6:	f8cd b03c 	str.w	fp, [sp, #60]	@ 0x3c
 800f3fa:	f8cd a038 	str.w	sl, [sp, #56]	@ 0x38
 800f3fe:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 800f402:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
 800f406:	f8cd e02c 	str.w	lr, [sp, #44]	@ 0x2c
 800f40a:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 800f40e:	9709      	str	r7, [sp, #36]	@ 0x24
 800f410:	9608      	str	r6, [sp, #32]
 800f412:	9507      	str	r5, [sp, #28]
 800f414:	9406      	str	r4, [sp, #24]
 800f416:	9005      	str	r0, [sp, #20]
 800f418:	9104      	str	r1, [sp, #16]
 800f41a:	9203      	str	r2, [sp, #12]
 800f41c:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800f41e:	9102      	str	r1, [sp, #8]
 800f420:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f422:	9201      	str	r2, [sp, #4]
 800f424:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f426:	9300      	str	r3, [sp, #0]
 800f428:	4b09      	ldr	r3, [pc, #36]	@ (800f450 <PrintKey+0xb4>)
 800f42a:	2200      	movs	r2, #0
 800f42c:	4611      	mov	r1, r2
 800f42e:	2002      	movs	r0, #2
 800f430:	f002 f932 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
                return;
 800f434:	e7bc      	b.n	800f3b0 <PrintKey+0x14>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f436:	2b0a      	cmp	r3, #10
 800f438:	d8ba      	bhi.n	800f3b0 <PrintKey+0x14>
            if( KeyLabel[i].keyID == keyID )
 800f43a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800f43e:	4905      	ldr	r1, [pc, #20]	@ (800f454 <PrintKey+0xb8>)
 800f440:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
 800f444:	42a2      	cmp	r2, r4
 800f446:	d0b6      	beq.n	800f3b6 <PrintKey+0x1a>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f448:	3301      	adds	r3, #1
 800f44a:	b2db      	uxtb	r3, r3
 800f44c:	e7f3      	b.n	800f436 <PrintKey+0x9a>
 800f44e:	bf00      	nop
 800f450:	08012978 	.word	0x08012978
 800f454:	080130e8 	.word	0x080130e8

0800f458 <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
    if( keyID >= MC_KE_KEY )
 800f458:	2b0b      	cmp	r3, #11
 800f45a:	d80a      	bhi.n	800f472 <SecureElementComputeAesCmac+0x1a>
{
 800f45c:	b500      	push	{lr}
 800f45e:	b083      	sub	sp, #12
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800f460:	f8dd c010 	ldr.w	ip, [sp, #16]
 800f464:	f8cd c000 	str.w	ip, [sp]
 800f468:	f7ff ff2a 	bl	800f2c0 <ComputeCmac>
}
 800f46c:	b003      	add	sp, #12
 800f46e:	f85d fb04 	ldr.w	pc, [sp], #4
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f472:	2003      	movs	r0, #3
}
 800f474:	4770      	bx	lr

0800f476 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
    if( buffer == NULL )
 800f476:	b190      	cbz	r0, 800f49e <SecureElementVerifyAesCmac+0x28>
{
 800f478:	b510      	push	{r4, lr}
 800f47a:	b084      	sub	sp, #16
 800f47c:	468c      	mov	ip, r1
 800f47e:	4614      	mov	r4, r2
 800f480:	4601      	mov	r1, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800f482:	2000      	movs	r0, #0
 800f484:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800f486:	aa03      	add	r2, sp, #12
 800f488:	9200      	str	r2, [sp, #0]
 800f48a:	4662      	mov	r2, ip
 800f48c:	f7ff ff18 	bl	800f2c0 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f490:	b918      	cbnz	r0, 800f49a <SecureElementVerifyAesCmac+0x24>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 800f492:	9b03      	ldr	r3, [sp, #12]
 800f494:	42a3      	cmp	r3, r4
 800f496:	d000      	beq.n	800f49a <SecureElementVerifyAesCmac+0x24>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800f498:	2001      	movs	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 800f49a:	b004      	add	sp, #16
 800f49c:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800f49e:	2002      	movs	r0, #2
}
 800f4a0:	4770      	bx	lr

0800f4a2 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800f4a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4a6:	b0be      	sub	sp, #248	@ 0xf8
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800f4a8:	b348      	cbz	r0, 800f4fe <SecureElementAesEncrypt+0x5c>
 800f4aa:	460d      	mov	r5, r1
 800f4ac:	4614      	mov	r4, r2
 800f4ae:	461e      	mov	r6, r3
 800f4b0:	4607      	mov	r7, r0
 800f4b2:	b33b      	cbz	r3, 800f504 <SecureElementAesEncrypt+0x62>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800f4b4:	f011 0f0f 	tst.w	r1, #15
 800f4b8:	d127      	bne.n	800f50a <SecureElementAesEncrypt+0x68>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800f4ba:	22f0      	movs	r2, #240	@ 0xf0
 800f4bc:	2100      	movs	r1, #0
 800f4be:	a801      	add	r0, sp, #4
 800f4c0:	f000 fa27 	bl	800f912 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800f4c4:	4669      	mov	r1, sp
 800f4c6:	4620      	mov	r0, r4
 800f4c8:	f7ff fedc 	bl	800f284 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 800f4cc:	4680      	mov	r8, r0
 800f4ce:	b118      	cbz	r0, 800f4d8 <SecureElementAesEncrypt+0x36>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 800f4d0:	4640      	mov	r0, r8
 800f4d2:	b03e      	add	sp, #248	@ 0xf8
 800f4d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800f4d8:	aa01      	add	r2, sp, #4
 800f4da:	2110      	movs	r1, #16
 800f4dc:	9800      	ldr	r0, [sp, #0]
 800f4de:	3001      	adds	r0, #1
 800f4e0:	f7ff fe24 	bl	800f12c <lorawan_aes_set_key>
        uint8_t block = 0;
 800f4e4:	4644      	mov	r4, r8
        while( size != 0 )
 800f4e6:	e007      	b.n	800f4f8 <SecureElementAesEncrypt+0x56>
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800f4e8:	aa01      	add	r2, sp, #4
 800f4ea:	1931      	adds	r1, r6, r4
 800f4ec:	1938      	adds	r0, r7, r4
 800f4ee:	f7ff fe9f 	bl	800f230 <lorawan_aes_encrypt>
            block = block + 16;
 800f4f2:	3410      	adds	r4, #16
 800f4f4:	b2e4      	uxtb	r4, r4
            size  = size - 16;
 800f4f6:	3d10      	subs	r5, #16
        while( size != 0 )
 800f4f8:	2d00      	cmp	r5, #0
 800f4fa:	d1f5      	bne.n	800f4e8 <SecureElementAesEncrypt+0x46>
 800f4fc:	e7e8      	b.n	800f4d0 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_NPE;
 800f4fe:	f04f 0802 	mov.w	r8, #2
 800f502:	e7e5      	b.n	800f4d0 <SecureElementAesEncrypt+0x2e>
 800f504:	f04f 0802 	mov.w	r8, #2
 800f508:	e7e2      	b.n	800f4d0 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800f50a:	f04f 0805 	mov.w	r8, #5
 800f50e:	e7df      	b.n	800f4d0 <SecureElementAesEncrypt+0x2e>

0800f510 <SecureElementSetKey>:
{
 800f510:	b530      	push	{r4, r5, lr}
 800f512:	b085      	sub	sp, #20
    if( key == NULL )
 800f514:	2900      	cmp	r1, #0
 800f516:	d038      	beq.n	800f58a <SecureElementSetKey+0x7a>
 800f518:	468c      	mov	ip, r1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f51a:	2300      	movs	r3, #0
 800f51c:	2b0a      	cmp	r3, #10
 800f51e:	d830      	bhi.n	800f582 <SecureElementSetKey+0x72>
        if( SeNvm->KeyList[i].KeyID == keyID )
 800f520:	4a1b      	ldr	r2, [pc, #108]	@ (800f590 <SecureElementSetKey+0x80>)
 800f522:	6811      	ldr	r1, [r2, #0]
 800f524:	461c      	mov	r4, r3
 800f526:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800f52a:	440a      	add	r2, r1
 800f52c:	7e12      	ldrb	r2, [r2, #24]
 800f52e:	4282      	cmp	r2, r0
 800f530:	d002      	beq.n	800f538 <SecureElementSetKey+0x28>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f532:	3301      	adds	r3, #1
 800f534:	b2db      	uxtb	r3, r3
 800f536:	e7f1      	b.n	800f51c <SecureElementSetKey+0xc>
            if( keyID == MC_KEY_0 )
 800f538:	280d      	cmp	r0, #13
 800f53a:	d00a      	beq.n	800f552 <SecureElementSetKey+0x42>
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800f53c:	eb03 1403 	add.w	r4, r3, r3, lsl #4
 800f540:	3418      	adds	r4, #24
 800f542:	1908      	adds	r0, r1, r4
 800f544:	2210      	movs	r2, #16
 800f546:	4661      	mov	r1, ip
 800f548:	3001      	adds	r0, #1
 800f54a:	f000 f9ca 	bl	800f8e2 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800f54e:	2500      	movs	r5, #0
 800f550:	e018      	b.n	800f584 <SecureElementSetKey+0x74>
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800f552:	2300      	movs	r3, #0
 800f554:	9300      	str	r3, [sp, #0]
 800f556:	9301      	str	r3, [sp, #4]
 800f558:	9302      	str	r3, [sp, #8]
 800f55a:	9303      	str	r3, [sp, #12]
                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800f55c:	466b      	mov	r3, sp
 800f55e:	220c      	movs	r2, #12
 800f560:	2110      	movs	r1, #16
 800f562:	4660      	mov	r0, ip
 800f564:	f7ff ff9d 	bl	800f4a2 <SecureElementAesEncrypt>
 800f568:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800f56a:	4b09      	ldr	r3, [pc, #36]	@ (800f590 <SecureElementSetKey+0x80>)
 800f56c:	6818      	ldr	r0, [r3, #0]
 800f56e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 800f572:	3418      	adds	r4, #24
 800f574:	4420      	add	r0, r4
 800f576:	2210      	movs	r2, #16
 800f578:	4669      	mov	r1, sp
 800f57a:	3001      	adds	r0, #1
 800f57c:	f000 f9b1 	bl	800f8e2 <memcpy1>
                return retval;
 800f580:	e000      	b.n	800f584 <SecureElementSetKey+0x74>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f582:	2503      	movs	r5, #3
}
 800f584:	4628      	mov	r0, r5
 800f586:	b005      	add	sp, #20
 800f588:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800f58a:	2502      	movs	r5, #2
 800f58c:	e7fa      	b.n	800f584 <SecureElementSetKey+0x74>
 800f58e:	bf00      	nop
 800f590:	20000e90 	.word	0x20000e90

0800f594 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
    if( input == NULL )
 800f594:	b1d0      	cbz	r0, 800f5cc <SecureElementDeriveAndStoreKey+0x38>
{
 800f596:	b510      	push	{r4, lr}
 800f598:	b084      	sub	sp, #16
 800f59a:	4614      	mov	r4, r2
 800f59c:	4684      	mov	ip, r0
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800f59e:	2a0c      	cmp	r2, #12
 800f5a0:	d101      	bne.n	800f5a6 <SecureElementDeriveAndStoreKey+0x12>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800f5a2:	290b      	cmp	r1, #11
 800f5a4:	d114      	bne.n	800f5d0 <SecureElementDeriveAndStoreKey+0x3c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	9300      	str	r3, [sp, #0]
 800f5aa:	9301      	str	r3, [sp, #4]
 800f5ac:	9302      	str	r3, [sp, #8]
 800f5ae:	9303      	str	r3, [sp, #12]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800f5b0:	466b      	mov	r3, sp
 800f5b2:	460a      	mov	r2, r1
 800f5b4:	2110      	movs	r1, #16
 800f5b6:	4660      	mov	r0, ip
 800f5b8:	f7ff ff73 	bl	800f4a2 <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f5bc:	b108      	cbz	r0, 800f5c2 <SecureElementDeriveAndStoreKey+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800f5be:	b004      	add	sp, #16
 800f5c0:	bd10      	pop	{r4, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 800f5c2:	4669      	mov	r1, sp
 800f5c4:	4620      	mov	r0, r4
 800f5c6:	f7ff ffa3 	bl	800f510 <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f5ca:	e7f8      	b.n	800f5be <SecureElementDeriveAndStoreKey+0x2a>
        return SECURE_ELEMENT_ERROR_NPE;
 800f5cc:	2002      	movs	r0, #2
}
 800f5ce:	4770      	bx	lr
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f5d0:	2003      	movs	r0, #3
 800f5d2:	e7f4      	b.n	800f5be <SecureElementDeriveAndStoreKey+0x2a>

0800f5d4 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800f5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5d6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 800f5da:	9c07      	ldr	r4, [sp, #28]
 800f5dc:	9e08      	ldr	r6, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800f5de:	b35b      	cbz	r3, 800f638 <SecureElementProcessJoinAccept+0x64>
 800f5e0:	461f      	mov	r7, r3
 800f5e2:	b35c      	cbz	r4, 800f63c <SecureElementProcessJoinAccept+0x68>
 800f5e4:	b366      	cbz	r6, 800f640 <SecureElementProcessJoinAccept+0x6c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800f5e6:	2d21      	cmp	r5, #33	@ 0x21
 800f5e8:	d82c      	bhi.n	800f644 <SecureElementProcessJoinAccept+0x70>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800f5ea:	462a      	mov	r2, r5
 800f5ec:	4619      	mov	r1, r3
 800f5ee:	4620      	mov	r0, r4
 800f5f0:	f000 f977 	bl	800f8e2 <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800f5f4:	1c63      	adds	r3, r4, #1
 800f5f6:	2201      	movs	r2, #1
 800f5f8:	1e69      	subs	r1, r5, #1
 800f5fa:	18b8      	adds	r0, r7, r2
 800f5fc:	f7ff ff51 	bl	800f4a2 <SecureElementAesEncrypt>
 800f600:	bb10      	cbnz	r0, 800f648 <SecureElementProcessJoinAccept+0x74>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800f602:	7ae3      	ldrb	r3, [r4, #11]
 800f604:	09db      	lsrs	r3, r3, #7
 800f606:	7033      	strb	r3, [r6, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800f608:	1961      	adds	r1, r4, r5
 800f60a:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 800f60e:	f811 0c03 	ldrb.w	r0, [r1, #-3]
 800f612:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800f616:	f811 0c02 	ldrb.w	r0, [r1, #-2]
 800f61a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800f61e:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 800f622:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800f626:	b98b      	cbnz	r3, 800f64c <SecureElementProcessJoinAccept+0x78>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800f628:	2301      	movs	r3, #1
 800f62a:	1f29      	subs	r1, r5, #4
 800f62c:	4620      	mov	r0, r4
 800f62e:	f7ff ff22 	bl	800f476 <SecureElementVerifyAesCmac>
 800f632:	b140      	cbz	r0, 800f646 <SecureElementProcessJoinAccept+0x72>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800f634:	2001      	movs	r0, #1
 800f636:	e006      	b.n	800f646 <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_NPE;
 800f638:	2002      	movs	r0, #2
 800f63a:	e004      	b.n	800f646 <SecureElementProcessJoinAccept+0x72>
 800f63c:	2002      	movs	r0, #2
 800f63e:	e002      	b.n	800f646 <SecureElementProcessJoinAccept+0x72>
 800f640:	2002      	movs	r0, #2
 800f642:	e000      	b.n	800f646 <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800f644:	2005      	movs	r0, #5
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 800f646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800f648:	2007      	movs	r0, #7
 800f64a:	e7fc      	b.n	800f646 <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800f64c:	2004      	movs	r0, #4
 800f64e:	e7fa      	b.n	800f646 <SecureElementProcessJoinAccept+0x72>

0800f650 <SecureElementSetDevEui>:
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
    if( devEui == NULL )
 800f650:	b140      	cbz	r0, 800f664 <SecureElementSetDevEui+0x14>
{
 800f652:	b508      	push	{r3, lr}
 800f654:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800f656:	2208      	movs	r2, #8
 800f658:	4b03      	ldr	r3, [pc, #12]	@ (800f668 <SecureElementSetDevEui+0x18>)
 800f65a:	6818      	ldr	r0, [r3, #0]
 800f65c:	f000 f941 	bl	800f8e2 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f660:	2000      	movs	r0, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f662:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800f664:	2002      	movs	r0, #2
}
 800f666:	4770      	bx	lr
 800f668:	20000e90 	.word	0x20000e90

0800f66c <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
    if( devEui == NULL )
 800f66c:	b138      	cbz	r0, 800f67e <SecureElementGetDevEui+0x12>
{
 800f66e:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800f670:	2208      	movs	r2, #8
 800f672:	4904      	ldr	r1, [pc, #16]	@ (800f684 <SecureElementGetDevEui+0x18>)
 800f674:	6809      	ldr	r1, [r1, #0]
 800f676:	f000 f934 	bl	800f8e2 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f67a:	2000      	movs	r0, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f67c:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800f67e:	2002      	movs	r0, #2
}
 800f680:	4770      	bx	lr
 800f682:	bf00      	nop
 800f684:	20000e90 	.word	0x20000e90

0800f688 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
    if( joinEui == NULL )
 800f688:	b148      	cbz	r0, 800f69e <SecureElementSetJoinEui+0x16>
{
 800f68a:	b508      	push	{r3, lr}
 800f68c:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800f68e:	4b05      	ldr	r3, [pc, #20]	@ (800f6a4 <SecureElementSetJoinEui+0x1c>)
 800f690:	6818      	ldr	r0, [r3, #0]
 800f692:	2208      	movs	r2, #8
 800f694:	4410      	add	r0, r2
 800f696:	f000 f924 	bl	800f8e2 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f69a:	2000      	movs	r0, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f69c:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800f69e:	2002      	movs	r0, #2
}
 800f6a0:	4770      	bx	lr
 800f6a2:	bf00      	nop
 800f6a4:	20000e90 	.word	0x20000e90

0800f6a8 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
    if( joinEui == NULL )
 800f6a8:	b140      	cbz	r0, 800f6bc <SecureElementGetJoinEui+0x14>
{
 800f6aa:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800f6ac:	4a04      	ldr	r2, [pc, #16]	@ (800f6c0 <SecureElementGetJoinEui+0x18>)
 800f6ae:	6811      	ldr	r1, [r2, #0]
 800f6b0:	2208      	movs	r2, #8
 800f6b2:	4411      	add	r1, r2
 800f6b4:	f000 f915 	bl	800f8e2 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f6b8:	2000      	movs	r0, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f6ba:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800f6bc:	2002      	movs	r0, #2
}
 800f6be:	4770      	bx	lr
 800f6c0:	20000e90 	.word	0x20000e90

0800f6c4 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800f6c4:	2802      	cmp	r0, #2
 800f6c6:	d004      	beq.n	800f6d2 <SecureElementSetDevAddr+0xe>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800f6c8:	4b04      	ldr	r3, [pc, #16]	@ (800f6dc <SecureElementSetDevAddr+0x18>)
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	6159      	str	r1, [r3, #20]
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800f6ce:	2000      	movs	r0, #0
 800f6d0:	4770      	bx	lr
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800f6d2:	4b02      	ldr	r3, [pc, #8]	@ (800f6dc <SecureElementSetDevAddr+0x18>)
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	6119      	str	r1, [r3, #16]
 800f6d8:	e7f9      	b.n	800f6ce <SecureElementSetDevAddr+0xa>
 800f6da:	bf00      	nop
 800f6dc:	20000e90 	.word	0x20000e90

0800f6e0 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
    if( devAddr == NULL )
 800f6e0:	b169      	cbz	r1, 800f6fe <SecureElementGetDevAddr+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800f6e2:	2802      	cmp	r0, #2
 800f6e4:	d005      	beq.n	800f6f2 <SecureElementGetDevAddr+0x12>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800f6e6:	4a07      	ldr	r2, [pc, #28]	@ (800f704 <SecureElementGetDevAddr+0x24>)
 800f6e8:	6812      	ldr	r2, [r2, #0]
 800f6ea:	6952      	ldr	r2, [r2, #20]
 800f6ec:	600a      	str	r2, [r1, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800f6ee:	2000      	movs	r0, #0
 800f6f0:	4770      	bx	lr
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800f6f2:	4a04      	ldr	r2, [pc, #16]	@ (800f704 <SecureElementGetDevAddr+0x24>)
 800f6f4:	6812      	ldr	r2, [r2, #0]
 800f6f6:	6912      	ldr	r2, [r2, #16]
 800f6f8:	600a      	str	r2, [r1, #0]
    return SECURE_ELEMENT_SUCCESS;
 800f6fa:	2000      	movs	r0, #0
 800f6fc:	4770      	bx	lr
        return SECURE_ELEMENT_ERROR_NPE;
 800f6fe:	2002      	movs	r0, #2
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800f700:	4770      	bx	lr
 800f702:	bf00      	nop
 800f704:	20000e90 	.word	0x20000e90

0800f708 <SecureElementInitMcuID>:
{
 800f708:	b530      	push	{r4, r5, lr}
 800f70a:	b085      	sub	sp, #20
 800f70c:	4605      	mov	r5, r0
 800f70e:	460c      	mov	r4, r1
    uint32_t devAddrABP = 0;
 800f710:	2300      	movs	r3, #0
 800f712:	9301      	str	r3, [sp, #4]
    SecureElementGetDevEui( devEui );
 800f714:	a802      	add	r0, sp, #8
 800f716:	f7ff ffa9 	bl	800f66c <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800f71a:	a901      	add	r1, sp, #4
 800f71c:	2001      	movs	r0, #1
 800f71e:	f7ff ffdf 	bl	800f6e0 <SecureElementGetDevAddr>
    if( seGetUniqueId != NULL )
 800f722:	b195      	cbz	r5, 800f74a <SecureElementInitMcuID+0x42>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800f724:	2300      	movs	r3, #0
 800f726:	2b07      	cmp	r3, #7
 800f728:	d808      	bhi.n	800f73c <SecureElementInitMcuID+0x34>
            if( devEui[index] != 0 )
 800f72a:	f103 0210 	add.w	r2, r3, #16
 800f72e:	446a      	add	r2, sp
 800f730:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 800f734:	b9aa      	cbnz	r2, 800f762 <SecureElementInitMcuID+0x5a>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800f736:	3301      	adds	r3, #1
 800f738:	b2db      	uxtb	r3, r3
 800f73a:	e7f4      	b.n	800f726 <SecureElementInitMcuID+0x1e>
        bool id_init = false;
 800f73c:	2300      	movs	r3, #0
        if( id_init == false )
 800f73e:	b923      	cbnz	r3, 800f74a <SecureElementInitMcuID+0x42>
            seGetUniqueId( devEui );
 800f740:	a802      	add	r0, sp, #8
 800f742:	47a8      	blx	r5
            SecureElementSetDevEui( devEui );
 800f744:	a802      	add	r0, sp, #8
 800f746:	f7ff ff83 	bl	800f650 <SecureElementSetDevEui>
    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800f74a:	b13c      	cbz	r4, 800f75c <SecureElementInitMcuID+0x54>
 800f74c:	9b01      	ldr	r3, [sp, #4]
 800f74e:	b92b      	cbnz	r3, 800f75c <SecureElementInitMcuID+0x54>
        seGetDevAddr( &devAddrABP );
 800f750:	a801      	add	r0, sp, #4
 800f752:	47a0      	blx	r4
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800f754:	9901      	ldr	r1, [sp, #4]
 800f756:	2001      	movs	r0, #1
 800f758:	f7ff ffb4 	bl	800f6c4 <SecureElementSetDevAddr>
}
 800f75c:	2000      	movs	r0, #0
 800f75e:	b005      	add	sp, #20
 800f760:	bd30      	pop	{r4, r5, pc}
                id_init = true;
 800f762:	2301      	movs	r3, #1
 800f764:	e7eb      	b.n	800f73e <SecureElementInitMcuID+0x36>
	...

0800f768 <PrintIds>:
{
 800f768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f76a:	b08f      	sub	sp, #60	@ 0x3c
 800f76c:	4605      	mov	r5, r0
    uint32_t devAddr = 0;
 800f76e:	2400      	movs	r4, #0
 800f770:	9409      	str	r4, [sp, #36]	@ 0x24
    SecureElementGetDevEui( devEui );
 800f772:	a80a      	add	r0, sp, #40	@ 0x28
 800f774:	f7ff ff7a 	bl	800f66c <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800f778:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800f77c:	f89d 2029 	ldrb.w	r2, [sp, #41]	@ 0x29
 800f780:	f89d 102a 	ldrb.w	r1, [sp, #42]	@ 0x2a
 800f784:	f89d 002b 	ldrb.w	r0, [sp, #43]	@ 0x2b
 800f788:	f89d 602c 	ldrb.w	r6, [sp, #44]	@ 0x2c
 800f78c:	f89d 702d 	ldrb.w	r7, [sp, #45]	@ 0x2d
 800f790:	f89d c02e 	ldrb.w	ip, [sp, #46]	@ 0x2e
 800f794:	f89d e02f 	ldrb.w	lr, [sp, #47]	@ 0x2f
 800f798:	f8cd e01c 	str.w	lr, [sp, #28]
 800f79c:	f8cd c018 	str.w	ip, [sp, #24]
 800f7a0:	9705      	str	r7, [sp, #20]
 800f7a2:	9604      	str	r6, [sp, #16]
 800f7a4:	9003      	str	r0, [sp, #12]
 800f7a6:	9102      	str	r1, [sp, #8]
 800f7a8:	9201      	str	r2, [sp, #4]
 800f7aa:	9300      	str	r3, [sp, #0]
 800f7ac:	4b20      	ldr	r3, [pc, #128]	@ (800f830 <PrintIds+0xc8>)
 800f7ae:	4622      	mov	r2, r4
 800f7b0:	4621      	mov	r1, r4
 800f7b2:	2002      	movs	r0, #2
 800f7b4:	f001 ff70 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
    SecureElementGetJoinEui( joinEui );
 800f7b8:	a80c      	add	r0, sp, #48	@ 0x30
 800f7ba:	f7ff ff75 	bl	800f6a8 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800f7be:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 800f7c2:	f89d 2031 	ldrb.w	r2, [sp, #49]	@ 0x31
 800f7c6:	f89d 1032 	ldrb.w	r1, [sp, #50]	@ 0x32
 800f7ca:	f89d 0033 	ldrb.w	r0, [sp, #51]	@ 0x33
 800f7ce:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 800f7d2:	f89d 7035 	ldrb.w	r7, [sp, #53]	@ 0x35
 800f7d6:	f89d c036 	ldrb.w	ip, [sp, #54]	@ 0x36
 800f7da:	f89d e037 	ldrb.w	lr, [sp, #55]	@ 0x37
 800f7de:	f8cd e01c 	str.w	lr, [sp, #28]
 800f7e2:	f8cd c018 	str.w	ip, [sp, #24]
 800f7e6:	9705      	str	r7, [sp, #20]
 800f7e8:	9604      	str	r6, [sp, #16]
 800f7ea:	9003      	str	r0, [sp, #12]
 800f7ec:	9102      	str	r1, [sp, #8]
 800f7ee:	9201      	str	r2, [sp, #4]
 800f7f0:	9300      	str	r3, [sp, #0]
 800f7f2:	4b10      	ldr	r3, [pc, #64]	@ (800f834 <PrintIds+0xcc>)
 800f7f4:	4622      	mov	r2, r4
 800f7f6:	4621      	mov	r1, r4
 800f7f8:	2002      	movs	r0, #2
 800f7fa:	f001 ff4d 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
    SecureElementGetDevAddr( mode, &devAddr );
 800f7fe:	a909      	add	r1, sp, #36	@ 0x24
 800f800:	4628      	mov	r0, r5
 800f802:	f7ff ff6d 	bl	800f6e0 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800f806:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800f80a:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800f80e:	f89d 1025 	ldrb.w	r1, [sp, #37]	@ 0x25
 800f812:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 800f816:	9003      	str	r0, [sp, #12]
 800f818:	9102      	str	r1, [sp, #8]
 800f81a:	9201      	str	r2, [sp, #4]
 800f81c:	9300      	str	r3, [sp, #0]
 800f81e:	4b06      	ldr	r3, [pc, #24]	@ (800f838 <PrintIds+0xd0>)
 800f820:	4622      	mov	r2, r4
 800f822:	4621      	mov	r1, r4
 800f824:	2002      	movs	r0, #2
 800f826:	f001 ff37 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
}
 800f82a:	b00f      	add	sp, #60	@ 0x3c
 800f82c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f82e:	bf00      	nop
 800f830:	080129d4 	.word	0x080129d4
 800f834:	08012a14 	.word	0x08012a14
 800f838:	08012a54 	.word	0x08012a54

0800f83c <SecureElementPrintKeys>:
{
 800f83c:	b508      	push	{r3, lr}
    PrintKey( APP_KEY );
 800f83e:	2000      	movs	r0, #0
 800f840:	f7ff fdac 	bl	800f39c <PrintKey>
    PrintKey( NWK_KEY );
 800f844:	2001      	movs	r0, #1
 800f846:	f7ff fda9 	bl	800f39c <PrintKey>
    PrintKey( APP_S_KEY );
 800f84a:	2009      	movs	r0, #9
 800f84c:	f7ff fda6 	bl	800f39c <PrintKey>
    PrintKey( NWK_S_KEY );
 800f850:	2008      	movs	r0, #8
 800f852:	f7ff fda3 	bl	800f39c <PrintKey>
    PrintIds( ACTIVATION_TYPE_NONE );
 800f856:	2000      	movs	r0, #0
 800f858:	f7ff ff86 	bl	800f768 <PrintIds>
}
 800f85c:	2000      	movs	r0, #0
 800f85e:	bd08      	pop	{r3, pc}

0800f860 <SecureElementPrintSessionKeys>:
{
 800f860:	b510      	push	{r4, lr}
 800f862:	4604      	mov	r4, r0
    PrintKey( MC_ROOT_KEY );
 800f864:	200b      	movs	r0, #11
 800f866:	f7ff fd99 	bl	800f39c <PrintKey>
    PrintKey( MC_KE_KEY );
 800f86a:	200c      	movs	r0, #12
 800f86c:	f7ff fd96 	bl	800f39c <PrintKey>
    PrintKey( APP_S_KEY );
 800f870:	2009      	movs	r0, #9
 800f872:	f7ff fd93 	bl	800f39c <PrintKey>
    PrintKey( NWK_S_KEY );
 800f876:	2008      	movs	r0, #8
 800f878:	f7ff fd90 	bl	800f39c <PrintKey>
    PrintKey( DATABLOCK_INT_KEY );
 800f87c:	200a      	movs	r0, #10
 800f87e:	f7ff fd8d 	bl	800f39c <PrintKey>
    PrintIds( mode );
 800f882:	4620      	mov	r0, r4
 800f884:	f7ff ff70 	bl	800f768 <PrintIds>
}
 800f888:	2000      	movs	r0, #0
 800f88a:	bd10      	pop	{r4, pc}

0800f88c <rand1>:

static int32_t rand1( void );

static int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800f88c:	4b09      	ldr	r3, [pc, #36]	@ (800f8b4 <rand1+0x28>)
 800f88e:	681a      	ldr	r2, [r3, #0]
 800f890:	4909      	ldr	r1, [pc, #36]	@ (800f8b8 <rand1+0x2c>)
 800f892:	f243 0039 	movw	r0, #12345	@ 0x3039
 800f896:	fb01 0002 	mla	r0, r1, r2, r0
 800f89a:	6018      	str	r0, [r3, #0]
 800f89c:	2303      	movs	r3, #3
 800f89e:	fba3 2300 	umull	r2, r3, r3, r0
 800f8a2:	1ac2      	subs	r2, r0, r3
 800f8a4:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800f8a8:	0f9b      	lsrs	r3, r3, #30
 800f8aa:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 800f8ae:	1ac0      	subs	r0, r0, r3
 800f8b0:	4770      	bx	lr
 800f8b2:	bf00      	nop
 800f8b4:	200000f8 	.word	0x200000f8
 800f8b8:	41c64e6d 	.word	0x41c64e6d

0800f8bc <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 800f8bc:	4b01      	ldr	r3, [pc, #4]	@ (800f8c4 <srand1+0x8>)
 800f8be:	6018      	str	r0, [r3, #0]
}
 800f8c0:	4770      	bx	lr
 800f8c2:	bf00      	nop
 800f8c4:	200000f8 	.word	0x200000f8

0800f8c8 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 800f8c8:	b538      	push	{r3, r4, r5, lr}
 800f8ca:	4605      	mov	r5, r0
 800f8cc:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 800f8ce:	f7ff ffdd 	bl	800f88c <rand1>
 800f8d2:	1b61      	subs	r1, r4, r5
 800f8d4:	3101      	adds	r1, #1
 800f8d6:	fb90 f3f1 	sdiv	r3, r0, r1
 800f8da:	fb01 0013 	mls	r0, r1, r3, r0
}
 800f8de:	4428      	add	r0, r5
 800f8e0:	bd38      	pop	{r3, r4, r5, pc}

0800f8e2 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800f8e2:	e004      	b.n	800f8ee <memcpy1+0xc>
    {
        *dst++ = *src++;
 800f8e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f8e8:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 800f8ec:	461a      	mov	r2, r3
 800f8ee:	1e53      	subs	r3, r2, #1
 800f8f0:	b29b      	uxth	r3, r3
 800f8f2:	2a00      	cmp	r2, #0
 800f8f4:	d1f6      	bne.n	800f8e4 <memcpy1+0x2>
    }
}
 800f8f6:	4770      	bx	lr

0800f8f8 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 800f8f8:	1e53      	subs	r3, r2, #1
 800f8fa:	4418      	add	r0, r3
    while( size-- )
 800f8fc:	e004      	b.n	800f908 <memcpyr+0x10>
    {
        *dst-- = *src++;
 800f8fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f902:	f800 2901 	strb.w	r2, [r0], #-1
    while( size-- )
 800f906:	461a      	mov	r2, r3
 800f908:	1e53      	subs	r3, r2, #1
 800f90a:	b29b      	uxth	r3, r3
 800f90c:	2a00      	cmp	r2, #0
 800f90e:	d1f6      	bne.n	800f8fe <memcpyr+0x6>
    }
}
 800f910:	4770      	bx	lr

0800f912 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 800f912:	e002      	b.n	800f91a <memset1+0x8>
    {
        *dst++ = value;
 800f914:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 800f918:	461a      	mov	r2, r3
 800f91a:	1e53      	subs	r3, r2, #1
 800f91c:	b29b      	uxth	r3, r3
 800f91e:	2a00      	cmp	r2, #0
 800f920:	d1f8      	bne.n	800f914 <memset1+0x2>
    }
}
 800f922:	4770      	bx	lr

0800f924 <Crc32>:
uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 800f924:	b1f0      	cbz	r0, 800f964 <Crc32+0x40>
{
 800f926:	b510      	push	{r4, lr}
 800f928:	4604      	mov	r4, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 800f92a:	f04f 0e00 	mov.w	lr, #0
    uint32_t crc = 0xFFFFFFFF;
 800f92e:	f04f 30ff 	mov.w	r0, #4294967295
 800f932:	e00e      	b.n	800f952 <Crc32+0x2e>
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800f934:	f340 0c00 	sbfx	ip, r0, #0, #1
 800f938:	4a0b      	ldr	r2, [pc, #44]	@ (800f968 <Crc32+0x44>)
 800f93a:	ea0c 0202 	and.w	r2, ip, r2
 800f93e:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 800f942:	3301      	adds	r3, #1
 800f944:	b29b      	uxth	r3, r3
 800f946:	2b07      	cmp	r3, #7
 800f948:	d9f4      	bls.n	800f934 <Crc32+0x10>
    for( uint16_t i = 0; i < length; ++i )
 800f94a:	f10e 0e01 	add.w	lr, lr, #1
 800f94e:	fa1f fe8e 	uxth.w	lr, lr
 800f952:	458e      	cmp	lr, r1
 800f954:	d204      	bcs.n	800f960 <Crc32+0x3c>
        crc ^= ( uint32_t )buffer[i];
 800f956:	f814 300e 	ldrb.w	r3, [r4, lr]
 800f95a:	4058      	eors	r0, r3
        for( uint16_t i = 0; i < 8; i++ )
 800f95c:	2300      	movs	r3, #0
 800f95e:	e7f2      	b.n	800f946 <Crc32+0x22>
        }
    }

    return ~crc;
 800f960:	43c0      	mvns	r0, r0
}
 800f962:	bd10      	pop	{r4, pc}
        return 0;
 800f964:	2000      	movs	r0, #0
}
 800f966:	4770      	bx	lr
 800f968:	edb88320 	.word	0xedb88320

0800f96c <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 800f96c:	2001      	movs	r0, #1
 800f96e:	4770      	bx	lr

0800f970 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 800f970:	280a      	cmp	r0, #10
 800f972:	d807      	bhi.n	800f984 <RadioGetLoRaBandwidthInHz+0x14>
 800f974:	e8df f000 	tbb	[pc, r0]
 800f978:	17110b20 	.word	0x17110b20
 800f97c:	061e1c1a 	.word	0x061e1c1a
 800f980:	0e08      	.short	0x0e08
 800f982:	14          	.byte	0x14
 800f983:	00          	.byte	0x00
 800f984:	2000      	movs	r0, #0
 800f986:	4770      	bx	lr
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
        break;
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 800f988:	f642 00b1 	movw	r0, #10417	@ 0x28b1
        break;
 800f98c:	4770      	bx	lr
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 800f98e:	f643 5009 	movw	r0, #15625	@ 0x3d09
        break;
 800f992:	4770      	bx	lr
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 800f994:	f245 1061 	movw	r0, #20833	@ 0x5161
        break;
 800f998:	4770      	bx	lr
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 800f99a:	f647 2012 	movw	r0, #31250	@ 0x7a12
        break;
 800f99e:	4770      	bx	lr
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 800f9a0:	f24a 20c3 	movw	r0, #41667	@ 0xa2c3
        break;
 800f9a4:	4770      	bx	lr
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 800f9a6:	f24f 4024 	movw	r0, #62500	@ 0xf424
        break;
 800f9aa:	4770      	bx	lr
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 800f9ac:	4804      	ldr	r0, [pc, #16]	@ (800f9c0 <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 800f9ae:	4770      	bx	lr
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 800f9b0:	4804      	ldr	r0, [pc, #16]	@ (800f9c4 <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 800f9b2:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 800f9b4:	4804      	ldr	r0, [pc, #16]	@ (800f9c8 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 800f9b6:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 800f9b8:	f641 6084 	movw	r0, #7812	@ 0x1e84
    }

    return bandwidthInHz;
}
 800f9bc:	4770      	bx	lr
 800f9be:	bf00      	nop
 800f9c0:	0001e848 	.word	0x0001e848
 800f9c4:	0003d090 	.word	0x0003d090
 800f9c8:	0007a120 	.word	0x0007a120

0800f9cc <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800f9cc:	f89d 1004 	ldrb.w	r1, [sp, #4]
    return ( preambleLen << 3 ) +
 800f9d0:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800f9d2:	b953      	cbnz	r3, 800f9ea <RadioGetGfskTimeOnAirNumerator+0x1e>
 800f9d4:	2308      	movs	r3, #8
    return ( preambleLen << 3 ) +
 800f9d6:	441a      	add	r2, r3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800f9d8:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800f9da:	b141      	cbz	r1, 800f9ee <RadioGetGfskTimeOnAirNumerator+0x22>
 800f9dc:	2302      	movs	r3, #2
 800f9de:	f89d 0000 	ldrb.w	r0, [sp]
 800f9e2:	4418      	add	r0, r3
}
 800f9e4:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800f9e8:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	e7f3      	b.n	800f9d6 <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	e7f5      	b.n	800f9de <RadioGetGfskTimeOnAirNumerator+0x12>

0800f9f2 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800f9f2:	b570      	push	{r4, r5, r6, lr}
 800f9f4:	f89d 4010 	ldrb.w	r4, [sp, #16]
 800f9f8:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 800f9fc:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800f9fe:	f1a1 0c05 	sub.w	ip, r1, #5
 800fa02:	f1bc 0f01 	cmp.w	ip, #1
 800fa06:	d931      	bls.n	800fa6c <RadioGetLoRaTimeOnAirNumerator+0x7a>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800fa08:	b918      	cbnz	r0, 800fa12 <RadioGetLoRaTimeOnAirNumerator+0x20>
 800fa0a:	f1a1 060b 	sub.w	r6, r1, #11
 800fa0e:	2e01      	cmp	r6, #1
 800fa10:	d934      	bls.n	800fa7c <RadioGetLoRaTimeOnAirNumerator+0x8a>
 800fa12:	2801      	cmp	r0, #1
 800fa14:	d02e      	beq.n	800fa74 <RadioGetLoRaTimeOnAirNumerator+0x82>
    bool    lowDatareOptimize = false;
 800fa16:	2600      	movs	r6, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800fa18:	f89d c014 	ldrb.w	ip, [sp, #20]
 800fa1c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
                            ( crcOn ? 16 : 0 ) -
 800fa20:	b385      	cbz	r5, 800fa84 <RadioGetLoRaTimeOnAirNumerator+0x92>
 800fa22:	2010      	movs	r0, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800fa24:	4484      	add	ip, r0
                            ( 4 * datarate ) +
 800fa26:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 800fa28:	ebac 0c81 	sub.w	ip, ip, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 800fa2c:	b364      	cbz	r4, 800fa88 <RadioGetLoRaTimeOnAirNumerator+0x96>
 800fa2e:	f04f 0e00 	mov.w	lr, #0
                            ( 4 * datarate ) +
 800fa32:	44f4      	add	ip, lr

    if( datarate <= 6 )
 800fa34:	2906      	cmp	r1, #6
 800fa36:	d904      	bls.n	800fa42 <RadioGetLoRaTimeOnAirNumerator+0x50>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 800fa38:	f10c 0c08 	add.w	ip, ip, #8

        if( lowDatareOptimize == true )
 800fa3c:	b10e      	cbz	r6, 800fa42 <RadioGetLoRaTimeOnAirNumerator+0x50>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 800fa3e:	1e88      	subs	r0, r1, #2
 800fa40:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 800fa42:	f1bc 0f00 	cmp.w	ip, #0
 800fa46:	db22      	blt.n	800fa8e <RadioGetLoRaTimeOnAirNumerator+0x9c>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800fa48:	4484      	add	ip, r0
 800fa4a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800fa4e:	fb9c fcf0 	sdiv	ip, ip, r0
 800fa52:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 800fa56:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 800fa5a:	2906      	cmp	r1, #6
 800fa5c:	d801      	bhi.n	800fa62 <RadioGetLoRaTimeOnAirNumerator+0x70>
    {
        intermediate += 2;
 800fa5e:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800fa62:	0080      	lsls	r0, r0, #2
 800fa64:	3001      	adds	r0, #1
 800fa66:	3902      	subs	r1, #2
}
 800fa68:	4088      	lsls	r0, r1
 800fa6a:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 800fa6c:	2b0b      	cmp	r3, #11
 800fa6e:	d8cb      	bhi.n	800fa08 <RadioGetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 800fa70:	230c      	movs	r3, #12
 800fa72:	e7c9      	b.n	800fa08 <RadioGetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800fa74:	290c      	cmp	r1, #12
 800fa76:	d003      	beq.n	800fa80 <RadioGetLoRaTimeOnAirNumerator+0x8e>
    bool    lowDatareOptimize = false;
 800fa78:	2600      	movs	r6, #0
 800fa7a:	e7cd      	b.n	800fa18 <RadioGetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 800fa7c:	2601      	movs	r6, #1
 800fa7e:	e7cb      	b.n	800fa18 <RadioGetLoRaTimeOnAirNumerator+0x26>
 800fa80:	2601      	movs	r6, #1
 800fa82:	e7c9      	b.n	800fa18 <RadioGetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 800fa84:	2000      	movs	r0, #0
 800fa86:	e7cd      	b.n	800fa24 <RadioGetLoRaTimeOnAirNumerator+0x32>
                            ( fixLen ? 0 : 20 );
 800fa88:	f04f 0e14 	mov.w	lr, #20
 800fa8c:	e7d1      	b.n	800fa32 <RadioGetLoRaTimeOnAirNumerator+0x40>
        ceilNumerator = 0;
 800fa8e:	f04f 0c00 	mov.w	ip, #0
 800fa92:	e7d9      	b.n	800fa48 <RadioGetLoRaTimeOnAirNumerator+0x56>

0800fa94 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 800fa94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa96:	b085      	sub	sp, #20
 800fa98:	460e      	mov	r6, r1
 800fa9a:	4615      	mov	r5, r2
 800fa9c:	4619      	mov	r1, r3
 800fa9e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 800faa2:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 800faa6:	f89d 4030 	ldrb.w	r4, [sp, #48]	@ 0x30
 800faaa:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 800faae:	b120      	cbz	r0, 800faba <RadioTimeOnAir+0x26>
 800fab0:	2801      	cmp	r0, #1
 800fab2:	d011      	beq.n	800fad8 <RadioTimeOnAir+0x44>
 800fab4:	2501      	movs	r5, #1
 800fab6:	2400      	movs	r4, #0
 800fab8:	e008      	b.n	800facc <RadioTimeOnAir+0x38>
    {
    case MODEM_FSK:
        {
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800faba:	9701      	str	r7, [sp, #4]
 800fabc:	9400      	str	r4, [sp, #0]
 800fabe:	4628      	mov	r0, r5
 800fac0:	f7ff ff84 	bl	800f9cc <RadioGetGfskTimeOnAirNumerator>
 800fac4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fac8:	fb03 f400 	mul.w	r4, r3, r0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 800facc:	1960      	adds	r0, r4, r5
 800face:	3801      	subs	r0, #1
}
 800fad0:	fbb0 f0f5 	udiv	r0, r0, r5
 800fad4:	b005      	add	sp, #20
 800fad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800fad8:	9702      	str	r7, [sp, #8]
 800fada:	9401      	str	r4, [sp, #4]
 800fadc:	9300      	str	r3, [sp, #0]
 800fade:	4613      	mov	r3, r2
 800fae0:	460a      	mov	r2, r1
 800fae2:	4629      	mov	r1, r5
 800fae4:	4630      	mov	r0, r6
 800fae6:	f7ff ff84 	bl	800f9f2 <RadioGetLoRaTimeOnAirNumerator>
 800faea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800faee:	fb03 f400 	mul.w	r4, r3, r0
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800faf2:	4b03      	ldr	r3, [pc, #12]	@ (800fb00 <RadioTimeOnAir+0x6c>)
 800faf4:	5d98      	ldrb	r0, [r3, r6]
 800faf6:	f7ff ff3b 	bl	800f970 <RadioGetLoRaBandwidthInHz>
 800fafa:	4605      	mov	r5, r0
        break;
 800fafc:	e7e6      	b.n	800facc <RadioTimeOnAir+0x38>
 800fafe:	bf00      	nop
 800fb00:	0801316c 	.word	0x0801316c

0800fb04 <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 800fb04:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 800fb06:	4b05      	ldr	r3, [pc, #20]	@ (800fb1c <RadioOnTxTimeoutProcess+0x18>)
 800fb08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800fb0c:	629a      	str	r2, [r3, #40]	@ 0x28
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800fb0e:	4b04      	ldr	r3, [pc, #16]	@ (800fb20 <RadioOnTxTimeoutProcess+0x1c>)
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	b113      	cbz	r3, 800fb1a <RadioOnTxTimeoutProcess+0x16>
 800fb14:	685b      	ldr	r3, [r3, #4]
 800fb16:	b103      	cbz	r3, 800fb1a <RadioOnTxTimeoutProcess+0x16>
    {
        RadioEvents->TxTimeout( );
 800fb18:	4798      	blx	r3
    }
}
 800fb1a:	bd08      	pop	{r3, pc}
 800fb1c:	48000400 	.word	0x48000400
 800fb20:	20000f20 	.word	0x20000f20

0800fb24 <RadioOnTxTimeoutIrq>:
{
 800fb24:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 800fb26:	f7ff ffed 	bl	800fb04 <RadioOnTxTimeoutProcess>
}
 800fb2a:	bd08      	pop	{r3, pc}

0800fb2c <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 800fb2c:	b508      	push	{r3, lr}
 800fb2e:	4b05      	ldr	r3, [pc, #20]	@ (800fb44 <RadioOnRxTimeoutProcess+0x18>)
 800fb30:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800fb34:	629a      	str	r2, [r3, #40]	@ 0x28
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800fb36:	4b04      	ldr	r3, [pc, #16]	@ (800fb48 <RadioOnRxTimeoutProcess+0x1c>)
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	b113      	cbz	r3, 800fb42 <RadioOnRxTimeoutProcess+0x16>
 800fb3c:	68db      	ldr	r3, [r3, #12]
 800fb3e:	b103      	cbz	r3, 800fb42 <RadioOnRxTimeoutProcess+0x16>
    {
        RadioEvents->RxTimeout( );
 800fb40:	4798      	blx	r3
    }
}
 800fb42:	bd08      	pop	{r3, pc}
 800fb44:	48000400 	.word	0x48000400
 800fb48:	20000f20 	.word	0x20000f20

0800fb4c <RadioOnRxTimeoutIrq>:
{
 800fb4c:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 800fb4e:	f7ff ffed 	bl	800fb2c <RadioOnRxTimeoutProcess>
}
 800fb52:	bd08      	pop	{r3, pc}

0800fb54 <RadioSetRxGenericConfig>:
    }
    return status;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800fb54:	f04f 30ff 	mov.w	r0, #4294967295
 800fb58:	4770      	bx	lr

0800fb5a <RadioSetTxGenericConfig>:
    SubgRf.TxTimeout = timeout;
    return 0;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800fb5a:	f04f 30ff 	mov.w	r0, #4294967295
 800fb5e:	4770      	bx	lr

0800fb60 <RadioLrFhssSetCfg>:
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
}
 800fb60:	2001      	movs	r0, #1
 800fb62:	4770      	bx	lr

0800fb64 <RadioLrFhssGetTimeOnAirInMs>:

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
#endif /* RADIO_LR_FHSS_IS_ON */
 800fb64:	2001      	movs	r0, #1
 800fb66:	4770      	bx	lr

0800fb68 <RadioWrite>:
{
 800fb68:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 800fb6a:	f000 fe3f 	bl	80107ec <SUBGRF_WriteRegister>
}
 800fb6e:	bd08      	pop	{r3, pc}

0800fb70 <RadioTxCw>:
{
 800fb70:	b510      	push	{r4, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800fb72:	f001 fbcf 	bl	8011314 <SUBGRF_SetRfTxPower>
 800fb76:	4604      	mov	r4, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800fb78:	210e      	movs	r1, #14
 800fb7a:	f640 101f 	movw	r0, #2335	@ 0x91f
 800fb7e:	f000 fe35 	bl	80107ec <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800fb82:	2101      	movs	r1, #1
 800fb84:	4620      	mov	r0, r4
 800fb86:	f001 fbb1 	bl	80112ec <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800fb8a:	f000 ffff 	bl	8010b8c <SUBGRF_SetTxContinuousWave>
}
 800fb8e:	bd10      	pop	{r4, pc}

0800fb90 <RadioTxPrbs>:
{
 800fb90:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800fb92:	2101      	movs	r1, #1
 800fb94:	4b07      	ldr	r3, [pc, #28]	@ (800fbb4 <RadioTxPrbs+0x24>)
 800fb96:	f893 0056 	ldrb.w	r0, [r3, #86]	@ 0x56
 800fb9a:	f001 fba7 	bl	80112ec <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 800fb9e:	212d      	movs	r1, #45	@ 0x2d
 800fba0:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800fba4:	f7ff ffe0 	bl	800fb68 <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 800fba8:	f000 fff7 	bl	8010b9a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800fbac:	4802      	ldr	r0, [pc, #8]	@ (800fbb8 <RadioTxPrbs+0x28>)
 800fbae:	f000 ff2d 	bl	8010a0c <SUBGRF_SetTx>
}
 800fbb2:	bd08      	pop	{r3, pc}
 800fbb4:	20000ec4 	.word	0x20000ec4
 800fbb8:	000fffff 	.word	0x000fffff

0800fbbc <RadioSetRxDutyCycle>:
{
 800fbbc:	b570      	push	{r4, r5, r6, lr}
 800fbbe:	4604      	mov	r4, r0
 800fbc0:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 800fbc2:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 800fbc6:	4e09      	ldr	r6, [pc, #36]	@ (800fbec <RadioSetRxDutyCycle+0x30>)
 800fbc8:	65b3      	str	r3, [r6, #88]	@ 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800fbca:	2300      	movs	r3, #0
 800fbcc:	461a      	mov	r2, r3
 800fbce:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800fbd2:	4608      	mov	r0, r1
 800fbd4:	f001 f8ad 	bl	8010d32 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800fbd8:	2100      	movs	r1, #0
 800fbda:	f896 0056 	ldrb.w	r0, [r6, #86]	@ 0x56
 800fbde:	f001 fb85 	bl	80112ec <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 800fbe2:	4629      	mov	r1, r5
 800fbe4:	4620      	mov	r0, r4
 800fbe6:	f000 ffa1 	bl	8010b2c <SUBGRF_SetRxDutyCycle>
}
 800fbea:	bd70      	pop	{r4, r5, r6, pc}
 800fbec:	20000ec4 	.word	0x20000ec4

0800fbf0 <RadioRxBoosted>:
{
 800fbf0:	b538      	push	{r3, r4, r5, lr}
 800fbf2:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 800fbf4:	f001 fc69 	bl	80114ca <RFW_Is_Init>
 800fbf8:	2801      	cmp	r0, #1
 800fbfa:	d019      	beq.n	800fc30 <RadioRxBoosted+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	461a      	mov	r2, r3
 800fc00:	f240 2162 	movw	r1, #610	@ 0x262
 800fc04:	4608      	mov	r0, r1
 800fc06:	f001 f894 	bl	8010d32 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 800fc0a:	b9a4      	cbnz	r4, 800fc36 <RadioRxBoosted+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800fc0c:	4c11      	ldr	r4, [pc, #68]	@ (800fc54 <RadioRxBoosted+0x64>)
 800fc0e:	2100      	movs	r1, #0
 800fc10:	65a1      	str	r1, [r4, #88]	@ 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 800fc12:	4b11      	ldr	r3, [pc, #68]	@ (800fc58 <RadioRxBoosted+0x68>)
 800fc14:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800fc18:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800fc1a:	f894 0056 	ldrb.w	r0, [r4, #86]	@ 0x56
 800fc1e:	f001 fb65 	bl	80112ec <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 800fc22:	7863      	ldrb	r3, [r4, #1]
 800fc24:	b183      	cbz	r3, 800fc48 <RadioRxBoosted+0x58>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800fc26:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800fc2a:	f000 ff61 	bl	8010af0 <SUBGRF_SetRxBoosted>
}
 800fc2e:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 800fc30:	f001 fc53 	bl	80114da <RFW_ReceiveInit>
 800fc34:	e7e9      	b.n	800fc0a <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800fc36:	4d09      	ldr	r5, [pc, #36]	@ (800fc5c <RadioRxBoosted+0x6c>)
 800fc38:	4621      	mov	r1, r4
 800fc3a:	4628      	mov	r0, r5
 800fc3c:	f002 f91e 	bl	8011e7c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800fc40:	4628      	mov	r0, r5
 800fc42:	f002 f8d5 	bl	8011df0 <UTIL_TIMER_Start>
 800fc46:	e7e1      	b.n	800fc0c <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 800fc48:	4b02      	ldr	r3, [pc, #8]	@ (800fc54 <RadioRxBoosted+0x64>)
 800fc4a:	6898      	ldr	r0, [r3, #8]
 800fc4c:	0180      	lsls	r0, r0, #6
 800fc4e:	f000 ff4f 	bl	8010af0 <SUBGRF_SetRxBoosted>
}
 800fc52:	e7ec      	b.n	800fc2e <RadioRxBoosted+0x3e>
 800fc54:	20000ec4 	.word	0x20000ec4
 800fc58:	48000400 	.word	0x48000400
 800fc5c:	20000e94 	.word	0x20000e94

0800fc60 <RadioStandby>:
{
 800fc60:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 800fc62:	2000      	movs	r0, #0
 800fc64:	f000 feb8 	bl	80109d8 <SUBGRF_SetStandby>
}
 800fc68:	bd08      	pop	{r3, pc}

0800fc6a <RadioRead>:
{
 800fc6a:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 800fc6c:	f000 fdce 	bl	801080c <SUBGRF_ReadRegister>
}
 800fc70:	bd08      	pop	{r3, pc}

0800fc72 <RadioGetStatus>:
{
 800fc72:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 800fc74:	f000 fdae 	bl	80107d4 <SUBGRF_GetOperatingMode>
 800fc78:	2805      	cmp	r0, #5
 800fc7a:	d005      	beq.n	800fc88 <RadioGetStatus+0x16>
 800fc7c:	2807      	cmp	r0, #7
 800fc7e:	d005      	beq.n	800fc8c <RadioGetStatus+0x1a>
 800fc80:	2804      	cmp	r0, #4
 800fc82:	d105      	bne.n	800fc90 <RadioGetStatus+0x1e>
 800fc84:	2002      	movs	r0, #2
 800fc86:	e002      	b.n	800fc8e <RadioGetStatus+0x1c>
            return RF_RX_RUNNING;
 800fc88:	2001      	movs	r0, #1
 800fc8a:	e000      	b.n	800fc8e <RadioGetStatus+0x1c>
            return RF_CAD;
 800fc8c:	2003      	movs	r0, #3
}
 800fc8e:	bd08      	pop	{r3, pc}
            return RF_IDLE;
 800fc90:	2000      	movs	r0, #0
 800fc92:	e7fc      	b.n	800fc8e <RadioGetStatus+0x1c>

0800fc94 <RadioIrqProcess>:
{
 800fc94:	b530      	push	{r4, r5, lr}
 800fc96:	b083      	sub	sp, #12
    uint8_t size = 0;
 800fc98:	2300      	movs	r3, #0
 800fc9a:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 800fc9e:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 800fca0:	4ba5      	ldr	r3, [pc, #660]	@ (800ff38 <RadioIrqProcess+0x2a4>)
 800fca2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800fca6:	2b20      	cmp	r3, #32
 800fca8:	d829      	bhi.n	800fcfe <RadioIrqProcess+0x6a>
 800fcaa:	b21a      	sxth	r2, r3
 800fcac:	2a00      	cmp	r2, #0
 800fcae:	f000 8140 	beq.w	800ff32 <RadioIrqProcess+0x29e>
 800fcb2:	3b01      	subs	r3, #1
 800fcb4:	2b1f      	cmp	r3, #31
 800fcb6:	f200 813c 	bhi.w	800ff32 <RadioIrqProcess+0x29e>
 800fcba:	e8df f013 	tbh	[pc, r3, lsl #1]
 800fcbe:	0063      	.short	0x0063
 800fcc0:	013a007f 	.word	0x013a007f
 800fcc4:	013a00f7 	.word	0x013a00f7
 800fcc8:	013a013a 	.word	0x013a013a
 800fccc:	013a0127 	.word	0x013a0127
 800fcd0:	013a013a 	.word	0x013a013a
 800fcd4:	013a013a 	.word	0x013a013a
 800fcd8:	013a013a 	.word	0x013a013a
 800fcdc:	013a0134 	.word	0x013a0134
 800fce0:	013a013a 	.word	0x013a013a
 800fce4:	013a013a 	.word	0x013a013a
 800fce8:	013a013a 	.word	0x013a013a
 800fcec:	013a013a 	.word	0x013a013a
 800fcf0:	013a013a 	.word	0x013a013a
 800fcf4:	013a013a 	.word	0x013a013a
 800fcf8:	013a013a 	.word	0x013a013a
 800fcfc:	0155      	.short	0x0155
 800fcfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fd02:	f000 80b3 	beq.w	800fe6c <RadioIrqProcess+0x1d8>
 800fd06:	d814      	bhi.n	800fd32 <RadioIrqProcess+0x9e>
 800fd08:	2b40      	cmp	r3, #64	@ 0x40
 800fd0a:	f000 8146 	beq.w	800ff9a <RadioIrqProcess+0x306>
 800fd0e:	2b80      	cmp	r3, #128	@ 0x80
 800fd10:	f040 810f 	bne.w	800ff32 <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 800fd14:	2000      	movs	r0, #0
 800fd16:	f000 fe5f 	bl	80109d8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800fd1a:	4b88      	ldr	r3, [pc, #544]	@ (800ff3c <RadioIrqProcess+0x2a8>)
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	f000 8107 	beq.w	800ff32 <RadioIrqProcess+0x29e>
 800fd24:	699b      	ldr	r3, [r3, #24]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	f000 8103 	beq.w	800ff32 <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( false );
 800fd2c:	2000      	movs	r0, #0
 800fd2e:	4798      	blx	r3
 800fd30:	e0ff      	b.n	800ff32 <RadioIrqProcess+0x29e>
    switch( SubgRf.RadioIrq )
 800fd32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fd36:	f040 80fc 	bne.w	800ff32 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 800fd3a:	4b81      	ldr	r3, [pc, #516]	@ (800ff40 <RadioIrqProcess+0x2ac>)
 800fd3c:	2201      	movs	r2, #1
 800fd3e:	2100      	movs	r1, #0
 800fd40:	2002      	movs	r0, #2
 800fd42:	f001 fca9 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800fd46:	f000 fd45 	bl	80107d4 <SUBGRF_GetOperatingMode>
 800fd4a:	2804      	cmp	r0, #4
 800fd4c:	f000 809b 	beq.w	800fe86 <RadioIrqProcess+0x1f2>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800fd50:	f000 fd40 	bl	80107d4 <SUBGRF_GetOperatingMode>
 800fd54:	2805      	cmp	r0, #5
 800fd56:	f040 80ec 	bne.w	800ff32 <RadioIrqProcess+0x29e>
  WRITE_REG(GPIOx->BRR, PinMask);
 800fd5a:	4b7a      	ldr	r3, [pc, #488]	@ (800ff44 <RadioIrqProcess+0x2b0>)
 800fd5c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800fd60:	629a      	str	r2, [r3, #40]	@ 0x28
            TimerStop( &RxTimeoutTimer );
 800fd62:	4879      	ldr	r0, [pc, #484]	@ (800ff48 <RadioIrqProcess+0x2b4>)
 800fd64:	f001 ffea 	bl	8011d3c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800fd68:	2000      	movs	r0, #0
 800fd6a:	f000 fe35 	bl	80109d8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800fd6e:	4b73      	ldr	r3, [pc, #460]	@ (800ff3c <RadioIrqProcess+0x2a8>)
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	f000 80dd 	beq.w	800ff32 <RadioIrqProcess+0x29e>
 800fd78:	68db      	ldr	r3, [r3, #12]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	f000 80d9 	beq.w	800ff32 <RadioIrqProcess+0x29e>
                RadioEvents->RxTimeout( );
 800fd80:	4798      	blx	r3
 800fd82:	e0d6      	b.n	800ff32 <RadioIrqProcess+0x29e>
 800fd84:	4b6f      	ldr	r3, [pc, #444]	@ (800ff44 <RadioIrqProcess+0x2b0>)
 800fd86:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800fd8a:	629a      	str	r2, [r3, #40]	@ 0x28
        TimerStop( &TxTimeoutTimer );
 800fd8c:	486f      	ldr	r0, [pc, #444]	@ (800ff4c <RadioIrqProcess+0x2b8>)
 800fd8e:	f001 ffd5 	bl	8011d3c <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800fd92:	2000      	movs	r0, #0
 800fd94:	f000 fe20 	bl	80109d8 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 800fd98:	f001 fb99 	bl	80114ce <RFW_Is_LongPacketModeEnabled>
 800fd9c:	2801      	cmp	r0, #1
 800fd9e:	d00a      	beq.n	800fdb6 <RadioIrqProcess+0x122>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800fda0:	4b66      	ldr	r3, [pc, #408]	@ (800ff3c <RadioIrqProcess+0x2a8>)
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	f000 80c4 	beq.w	800ff32 <RadioIrqProcess+0x29e>
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	f000 80c0 	beq.w	800ff32 <RadioIrqProcess+0x29e>
            RadioEvents->TxDone( );
 800fdb2:	4798      	blx	r3
 800fdb4:	e0bd      	b.n	800ff32 <RadioIrqProcess+0x29e>
            RFW_DeInit_TxLongPacket( );
 800fdb6:	f001 fb93 	bl	80114e0 <RFW_DeInit_TxLongPacket>
 800fdba:	e7f1      	b.n	800fda0 <RadioIrqProcess+0x10c>
 800fdbc:	4b61      	ldr	r3, [pc, #388]	@ (800ff44 <RadioIrqProcess+0x2b0>)
 800fdbe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800fdc2:	629a      	str	r2, [r3, #40]	@ 0x28
        TimerStop( &RxTimeoutTimer );
 800fdc4:	4860      	ldr	r0, [pc, #384]	@ (800ff48 <RadioIrqProcess+0x2b4>)
 800fdc6:	f001 ffb9 	bl	8011d3c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800fdca:	4b5b      	ldr	r3, [pc, #364]	@ (800ff38 <RadioIrqProcess+0x2a4>)
 800fdcc:	785b      	ldrb	r3, [r3, #1]
 800fdce:	b303      	cbz	r3, 800fe12 <RadioIrqProcess+0x17e>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 800fdd0:	22ff      	movs	r2, #255	@ 0xff
 800fdd2:	f10d 0107 	add.w	r1, sp, #7
 800fdd6:	485e      	ldr	r0, [pc, #376]	@ (800ff50 <RadioIrqProcess+0x2bc>)
 800fdd8:	f001 fa32 	bl	8011240 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 800fddc:	485d      	ldr	r0, [pc, #372]	@ (800ff54 <RadioIrqProcess+0x2c0>)
 800fdde:	f001 fa49 	bl	8011274 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800fde2:	4b56      	ldr	r3, [pc, #344]	@ (800ff3c <RadioIrqProcess+0x2a8>)
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	f000 80a3 	beq.w	800ff32 <RadioIrqProcess+0x29e>
 800fdec:	689c      	ldr	r4, [r3, #8]
 800fdee:	2c00      	cmp	r4, #0
 800fdf0:	f000 809f 	beq.w	800ff32 <RadioIrqProcess+0x29e>
            switch( SubgRf.PacketStatus.packetType )
 800fdf4:	4b50      	ldr	r3, [pc, #320]	@ (800ff38 <RadioIrqProcess+0x2a4>)
 800fdf6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800fdfa:	2b01      	cmp	r3, #1
 800fdfc:	d11d      	bne.n	800fe3a <RadioIrqProcess+0x1a6>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 800fdfe:	4a4e      	ldr	r2, [pc, #312]	@ (800ff38 <RadioIrqProcess+0x2a4>)
 800fe00:	f992 3031 	ldrsb.w	r3, [r2, #49]	@ 0x31
 800fe04:	f992 2030 	ldrsb.w	r2, [r2, #48]	@ 0x30
 800fe08:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800fe0c:	4850      	ldr	r0, [pc, #320]	@ (800ff50 <RadioIrqProcess+0x2bc>)
 800fe0e:	47a0      	blx	r4
                break;
 800fe10:	e08f      	b.n	800ff32 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 800fe12:	2000      	movs	r0, #0
 800fe14:	f000 fde0 	bl	80109d8 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 800fe18:	2100      	movs	r1, #0
 800fe1a:	f640 1002 	movw	r0, #2306	@ 0x902
 800fe1e:	f000 fce5 	bl	80107ec <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 800fe22:	f640 1044 	movw	r0, #2372	@ 0x944
 800fe26:	f000 fcf1 	bl	801080c <SUBGRF_ReadRegister>
 800fe2a:	f040 0102 	orr.w	r1, r0, #2
 800fe2e:	b2c9      	uxtb	r1, r1
 800fe30:	f640 1044 	movw	r0, #2372	@ 0x944
 800fe34:	f000 fcda 	bl	80107ec <SUBGRF_WriteRegister>
 800fe38:	e7ca      	b.n	800fdd0 <RadioIrqProcess+0x13c>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800fe3a:	4c3f      	ldr	r4, [pc, #252]	@ (800ff38 <RadioIrqProcess+0x2a4>)
 800fe3c:	4669      	mov	r1, sp
 800fe3e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800fe40:	f001 faf8 	bl	8011434 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 800fe44:	4b3d      	ldr	r3, [pc, #244]	@ (800ff3c <RadioIrqProcess+0x2a8>)
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	689d      	ldr	r5, [r3, #8]
 800fe4a:	9b00      	ldr	r3, [sp, #0]
 800fe4c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800fe50:	4a41      	ldr	r2, [pc, #260]	@ (800ff58 <RadioIrqProcess+0x2c4>)
 800fe52:	fb82 1203 	smull	r1, r2, r2, r3
 800fe56:	17db      	asrs	r3, r3, #31
 800fe58:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800fe5c:	b25b      	sxtb	r3, r3
 800fe5e:	f994 2029 	ldrsb.w	r2, [r4, #41]	@ 0x29
 800fe62:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800fe66:	483a      	ldr	r0, [pc, #232]	@ (800ff50 <RadioIrqProcess+0x2bc>)
 800fe68:	47a8      	blx	r5
                break;
 800fe6a:	e062      	b.n	800ff32 <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 800fe6c:	2000      	movs	r0, #0
 800fe6e:	f000 fdb3 	bl	80109d8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800fe72:	4b32      	ldr	r3, [pc, #200]	@ (800ff3c <RadioIrqProcess+0x2a8>)
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d05b      	beq.n	800ff32 <RadioIrqProcess+0x29e>
 800fe7a:	699b      	ldr	r3, [r3, #24]
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d058      	beq.n	800ff32 <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( true );
 800fe80:	2001      	movs	r0, #1
 800fe82:	4798      	blx	r3
 800fe84:	e055      	b.n	800ff32 <RadioIrqProcess+0x29e>
 800fe86:	4b2f      	ldr	r3, [pc, #188]	@ (800ff44 <RadioIrqProcess+0x2b0>)
 800fe88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800fe8c:	629a      	str	r2, [r3, #40]	@ 0x28
            TimerStop( &TxTimeoutTimer );
 800fe8e:	482f      	ldr	r0, [pc, #188]	@ (800ff4c <RadioIrqProcess+0x2b8>)
 800fe90:	f001 ff54 	bl	8011d3c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800fe94:	2000      	movs	r0, #0
 800fe96:	f000 fd9f 	bl	80109d8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800fe9a:	4b28      	ldr	r3, [pc, #160]	@ (800ff3c <RadioIrqProcess+0x2a8>)
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d047      	beq.n	800ff32 <RadioIrqProcess+0x29e>
 800fea2:	685b      	ldr	r3, [r3, #4]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d044      	beq.n	800ff32 <RadioIrqProcess+0x29e>
                RadioEvents->TxTimeout( );
 800fea8:	4798      	blx	r3
 800feaa:	e042      	b.n	800ff32 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 800feac:	4b2b      	ldr	r3, [pc, #172]	@ (800ff5c <RadioIrqProcess+0x2c8>)
 800feae:	2201      	movs	r2, #1
 800feb0:	2100      	movs	r1, #0
 800feb2:	2002      	movs	r0, #2
 800feb4:	f001 fbf0 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 800feb8:	4b1f      	ldr	r3, [pc, #124]	@ (800ff38 <RadioIrqProcess+0x2a4>)
 800feba:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800febc:	b3c9      	cbz	r1, 800ff32 <RadioIrqProcess+0x29e>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 800febe:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800fec2:	f640 1003 	movw	r0, #2307	@ 0x903
 800fec6:	f7ff fe4f 	bl	800fb68 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 800feca:	4c1b      	ldr	r4, [pc, #108]	@ (800ff38 <RadioIrqProcess+0x2a4>)
 800fecc:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 800fed0:	f640 1004 	movw	r0, #2308	@ 0x904
 800fed4:	f7ff fe48 	bl	800fb68 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 800fed8:	f894 1058 	ldrb.w	r1, [r4, #88]	@ 0x58
 800fedc:	f640 1005 	movw	r0, #2309	@ 0x905
 800fee0:	f7ff fe42 	bl	800fb68 <RadioWrite>
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 800fee4:	f640 1002 	movw	r0, #2306	@ 0x902
 800fee8:	f7ff febf 	bl	800fc6a <RadioRead>
 800feec:	f040 0101 	orr.w	r1, r0, #1
 800fef0:	b2c9      	uxtb	r1, r1
 800fef2:	f640 1002 	movw	r0, #2306	@ 0x902
 800fef6:	f7ff fe37 	bl	800fb68 <RadioWrite>
            SubgRf.RxDcPreambleDetectTimeout = 0;
 800fefa:	2200      	movs	r2, #0
 800fefc:	65a2      	str	r2, [r4, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800fefe:	4613      	mov	r3, r2
 800ff00:	f240 2162 	movw	r1, #610	@ 0x262
 800ff04:	4608      	mov	r0, r1
 800ff06:	f000 ff14 	bl	8010d32 <SUBGRF_SetDioIrqParams>
 800ff0a:	e012      	b.n	800ff32 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 800ff0c:	4b14      	ldr	r3, [pc, #80]	@ (800ff60 <RadioIrqProcess+0x2cc>)
 800ff0e:	2201      	movs	r2, #1
 800ff10:	2100      	movs	r1, #0
 800ff12:	2002      	movs	r0, #2
 800ff14:	f001 fbc0 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 800ff18:	f001 fad7 	bl	80114ca <RFW_Is_Init>
 800ff1c:	2801      	cmp	r0, #1
 800ff1e:	d108      	bne.n	800ff32 <RadioIrqProcess+0x29e>
            RFW_ReceivePayload( );
 800ff20:	f001 fadf 	bl	80114e2 <RFW_ReceivePayload>
 800ff24:	e005      	b.n	800ff32 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 800ff26:	4b0f      	ldr	r3, [pc, #60]	@ (800ff64 <RadioIrqProcess+0x2d0>)
 800ff28:	2201      	movs	r2, #1
 800ff2a:	2100      	movs	r1, #0
 800ff2c:	2002      	movs	r0, #2
 800ff2e:	f001 fbb3 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
}
 800ff32:	b003      	add	sp, #12
 800ff34:	bd30      	pop	{r4, r5, pc}
 800ff36:	bf00      	nop
 800ff38:	20000ec4 	.word	0x20000ec4
 800ff3c:	20000f20 	.word	0x20000f20
 800ff40:	08012b10 	.word	0x08012b10
 800ff44:	48000400 	.word	0x48000400
 800ff48:	20000e94 	.word	0x20000e94
 800ff4c:	20000eac 	.word	0x20000eac
 800ff50:	20000f24 	.word	0x20000f24
 800ff54:	20000ee8 	.word	0x20000ee8
 800ff58:	10624dd3 	.word	0x10624dd3
 800ff5c:	08012b24 	.word	0x08012b24
 800ff60:	08012b30 	.word	0x08012b30
 800ff64:	08012b3c 	.word	0x08012b3c
        TimerStop( &RxTimeoutTimer );
 800ff68:	4817      	ldr	r0, [pc, #92]	@ (800ffc8 <RadioIrqProcess+0x334>)
 800ff6a:	f001 fee7 	bl	8011d3c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800ff6e:	4b17      	ldr	r3, [pc, #92]	@ (800ffcc <RadioIrqProcess+0x338>)
 800ff70:	785b      	ldrb	r3, [r3, #1]
 800ff72:	b173      	cbz	r3, 800ff92 <RadioIrqProcess+0x2fe>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800ff74:	4b16      	ldr	r3, [pc, #88]	@ (800ffd0 <RadioIrqProcess+0x33c>)
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d0da      	beq.n	800ff32 <RadioIrqProcess+0x29e>
 800ff7c:	68db      	ldr	r3, [r3, #12]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d0d7      	beq.n	800ff32 <RadioIrqProcess+0x29e>
            RadioEvents->RxTimeout( );
 800ff82:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 800ff84:	4b13      	ldr	r3, [pc, #76]	@ (800ffd4 <RadioIrqProcess+0x340>)
 800ff86:	2201      	movs	r2, #1
 800ff88:	2100      	movs	r1, #0
 800ff8a:	2002      	movs	r0, #2
 800ff8c:	f001 fb84 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
 800ff90:	e7cf      	b.n	800ff32 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 800ff92:	2000      	movs	r0, #0
 800ff94:	f000 fd20 	bl	80109d8 <SUBGRF_SetStandby>
 800ff98:	e7ec      	b.n	800ff74 <RadioIrqProcess+0x2e0>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 800ff9a:	4b0f      	ldr	r3, [pc, #60]	@ (800ffd8 <RadioIrqProcess+0x344>)
 800ff9c:	2201      	movs	r2, #1
 800ff9e:	2100      	movs	r1, #0
 800ffa0:	2002      	movs	r0, #2
 800ffa2:	f001 fb79 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 800ffa6:	4b09      	ldr	r3, [pc, #36]	@ (800ffcc <RadioIrqProcess+0x338>)
 800ffa8:	785b      	ldrb	r3, [r3, #1]
 800ffaa:	b143      	cbz	r3, 800ffbe <RadioIrqProcess+0x32a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800ffac:	4b08      	ldr	r3, [pc, #32]	@ (800ffd0 <RadioIrqProcess+0x33c>)
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d0be      	beq.n	800ff32 <RadioIrqProcess+0x29e>
 800ffb4:	691b      	ldr	r3, [r3, #16]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d0bb      	beq.n	800ff32 <RadioIrqProcess+0x29e>
            RadioEvents->RxError( );
 800ffba:	4798      	blx	r3
}
 800ffbc:	e7b9      	b.n	800ff32 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 800ffbe:	2000      	movs	r0, #0
 800ffc0:	f000 fd0a 	bl	80109d8 <SUBGRF_SetStandby>
 800ffc4:	e7f2      	b.n	800ffac <RadioIrqProcess+0x318>
 800ffc6:	bf00      	nop
 800ffc8:	20000e94 	.word	0x20000e94
 800ffcc:	20000ec4 	.word	0x20000ec4
 800ffd0:	20000f20 	.word	0x20000f20
 800ffd4:	08012b48 	.word	0x08012b48
 800ffd8:	08012b54 	.word	0x08012b54

0800ffdc <RadioOnDioIrq>:
{
 800ffdc:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 800ffde:	4b03      	ldr	r3, [pc, #12]	@ (800ffec <RadioOnDioIrq+0x10>)
 800ffe0:	f8a3 0054 	strh.w	r0, [r3, #84]	@ 0x54
    RADIO_IRQ_PROCESS();
 800ffe4:	f7ff fe56 	bl	800fc94 <RadioIrqProcess>
}
 800ffe8:	bd08      	pop	{r3, pc}
 800ffea:	bf00      	nop
 800ffec:	20000ec4 	.word	0x20000ec4

0800fff0 <RadioGetWakeupTime>:
{
 800fff0:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 800fff2:	f001 f9a6 	bl	8011342 <SUBGRF_GetRadioWakeUpTime>
}
 800fff6:	3003      	adds	r0, #3
 800fff8:	bd08      	pop	{r3, pc}
	...

0800fffc <RadioSetMaxPayloadLength>:
{
 800fffc:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 800fffe:	2801      	cmp	r0, #1
 8010000:	d004      	beq.n	801000c <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8010002:	4b0a      	ldr	r3, [pc, #40]	@ (801002c <RadioSetMaxPayloadLength+0x30>)
 8010004:	7d5b      	ldrb	r3, [r3, #21]
 8010006:	2b01      	cmp	r3, #1
 8010008:	d008      	beq.n	801001c <RadioSetMaxPayloadLength+0x20>
}
 801000a:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801000c:	4b08      	ldr	r3, [pc, #32]	@ (8010030 <RadioSetMaxPayloadLength+0x34>)
 801000e:	7019      	strb	r1, [r3, #0]
 8010010:	4806      	ldr	r0, [pc, #24]	@ (801002c <RadioSetMaxPayloadLength+0x30>)
 8010012:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010014:	300e      	adds	r0, #14
 8010016:	f001 f855 	bl	80110c4 <SUBGRF_SetPacketParams>
 801001a:	e7f6      	b.n	801000a <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801001c:	4b04      	ldr	r3, [pc, #16]	@ (8010030 <RadioSetMaxPayloadLength+0x34>)
 801001e:	7019      	strb	r1, [r3, #0]
 8010020:	4802      	ldr	r0, [pc, #8]	@ (801002c <RadioSetMaxPayloadLength+0x30>)
 8010022:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010024:	300e      	adds	r0, #14
 8010026:	f001 f84d 	bl	80110c4 <SUBGRF_SetPacketParams>
}
 801002a:	e7ee      	b.n	801000a <RadioSetMaxPayloadLength+0xe>
 801002c:	20000ec4 	.word	0x20000ec4
 8010030:	200000fc 	.word	0x200000fc

08010034 <RadioReadRegisters>:
{
 8010034:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 8010036:	f000 fc67 	bl	8010908 <SUBGRF_ReadRegisters>
}
 801003a:	bd08      	pop	{r3, pc}

0801003c <RadioWriteRegisters>:
{
 801003c:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 801003e:	f000 fc21 	bl	8010884 <SUBGRF_WriteRegisters>
}
 8010042:	bd08      	pop	{r3, pc}

08010044 <RadioRssi>:
{
 8010044:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 8010046:	f001 f8cb 	bl	80111e0 <SUBGRF_GetRssiInst>
}
 801004a:	bd08      	pop	{r3, pc}

0801004c <RadioSetTxContinuousWave>:
{
 801004c:	b538      	push	{r3, r4, r5, lr}
 801004e:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 8010050:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010054:	fb03 f402 	mul.w	r4, r3, r2
    SUBGRF_SetRfFrequency( freq );
 8010058:	f000 fede 	bl	8010e18 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 801005c:	4628      	mov	r0, r5
 801005e:	f001 f959 	bl	8011314 <SUBGRF_SetRfTxPower>
 8010062:	4605      	mov	r5, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8010064:	210e      	movs	r1, #14
 8010066:	f640 101f 	movw	r0, #2335	@ 0x91f
 801006a:	f000 fbbf 	bl	80107ec <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 801006e:	2101      	movs	r1, #1
 8010070:	4628      	mov	r0, r5
 8010072:	f001 f93b 	bl	80112ec <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8010076:	f000 fd89 	bl	8010b8c <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 801007a:	4d04      	ldr	r5, [pc, #16]	@ (801008c <RadioSetTxContinuousWave+0x40>)
 801007c:	4621      	mov	r1, r4
 801007e:	4628      	mov	r0, r5
 8010080:	f001 fefc 	bl	8011e7c <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8010084:	4628      	mov	r0, r5
 8010086:	f001 feb3 	bl	8011df0 <UTIL_TIMER_Start>
}
 801008a:	bd38      	pop	{r3, r4, r5, pc}
 801008c:	20000eac 	.word	0x20000eac

08010090 <RadioSetChannel>:
{
 8010090:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 8010092:	f000 fec1 	bl	8010e18 <SUBGRF_SetRfFrequency>
}
 8010096:	bd08      	pop	{r3, pc}

08010098 <RadioStartCad>:
{
 8010098:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801009a:	2100      	movs	r1, #0
 801009c:	4b07      	ldr	r3, [pc, #28]	@ (80100bc <RadioStartCad+0x24>)
 801009e:	f893 0056 	ldrb.w	r0, [r3, #86]	@ 0x56
 80100a2:	f001 f923 	bl	80112ec <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 80100a6:	2300      	movs	r3, #0
 80100a8:	461a      	mov	r2, r3
 80100aa:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 80100ae:	4608      	mov	r0, r1
 80100b0:	f000 fe3f 	bl	8010d32 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 80100b4:	f000 fd5e 	bl	8010b74 <SUBGRF_SetCad>
}
 80100b8:	bd08      	pop	{r3, pc}
 80100ba:	bf00      	nop
 80100bc:	20000ec4 	.word	0x20000ec4

080100c0 <RadioRx>:
{
 80100c0:	b538      	push	{r3, r4, r5, lr}
 80100c2:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 80100c4:	f001 fa01 	bl	80114ca <RFW_Is_Init>
 80100c8:	2801      	cmp	r0, #1
 80100ca:	d019      	beq.n	8010100 <RadioRx+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80100cc:	2300      	movs	r3, #0
 80100ce:	461a      	mov	r2, r3
 80100d0:	f240 2162 	movw	r1, #610	@ 0x262
 80100d4:	4608      	mov	r0, r1
 80100d6:	f000 fe2c 	bl	8010d32 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 80100da:	b9a4      	cbnz	r4, 8010106 <RadioRx+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80100dc:	4c11      	ldr	r4, [pc, #68]	@ (8010124 <RadioRx+0x64>)
 80100de:	2100      	movs	r1, #0
 80100e0:	65a1      	str	r1, [r4, #88]	@ 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 80100e2:	4b11      	ldr	r3, [pc, #68]	@ (8010128 <RadioRx+0x68>)
 80100e4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80100e8:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80100ea:	f894 0056 	ldrb.w	r0, [r4, #86]	@ 0x56
 80100ee:	f001 f8fd 	bl	80112ec <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 80100f2:	7863      	ldrb	r3, [r4, #1]
 80100f4:	b183      	cbz	r3, 8010118 <RadioRx+0x58>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80100f6:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 80100fa:	f000 fca9 	bl	8010a50 <SUBGRF_SetRx>
}
 80100fe:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 8010100:	f001 f9eb 	bl	80114da <RFW_ReceiveInit>
 8010104:	e7e9      	b.n	80100da <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8010106:	4d09      	ldr	r5, [pc, #36]	@ (801012c <RadioRx+0x6c>)
 8010108:	4621      	mov	r1, r4
 801010a:	4628      	mov	r0, r5
 801010c:	f001 feb6 	bl	8011e7c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8010110:	4628      	mov	r0, r5
 8010112:	f001 fe6d 	bl	8011df0 <UTIL_TIMER_Start>
 8010116:	e7e1      	b.n	80100dc <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8010118:	4b02      	ldr	r3, [pc, #8]	@ (8010124 <RadioRx+0x64>)
 801011a:	6898      	ldr	r0, [r3, #8]
 801011c:	0180      	lsls	r0, r0, #6
 801011e:	f000 fc97 	bl	8010a50 <SUBGRF_SetRx>
}
 8010122:	e7ec      	b.n	80100fe <RadioRx+0x3e>
 8010124:	20000ec4 	.word	0x20000ec4
 8010128:	48000400 	.word	0x48000400
 801012c:	20000e94 	.word	0x20000e94

08010130 <RadioSleep>:
{
 8010130:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 8010132:	f04f 0004 	mov.w	r0, #4
 8010136:	f000 fc2f 	bl	8010998 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 801013a:	2002      	movs	r0, #2
 801013c:	f7f1 fc3a 	bl	80019b4 <HAL_Delay>
}
 8010140:	bd08      	pop	{r3, pc}
	...

08010144 <RadioSend>:
{
 8010144:	b570      	push	{r4, r5, r6, lr}
 8010146:	b082      	sub	sp, #8
 8010148:	4605      	mov	r5, r0
 801014a:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 801014c:	2300      	movs	r3, #0
 801014e:	461a      	mov	r2, r3
 8010150:	f240 2101 	movw	r1, #513	@ 0x201
 8010154:	4608      	mov	r0, r1
 8010156:	f000 fdec 	bl	8010d32 <SUBGRF_SetDioIrqParams>
 801015a:	4b3f      	ldr	r3, [pc, #252]	@ (8010258 <RadioSend+0x114>)
 801015c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8010160:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8010162:	4e3e      	ldr	r6, [pc, #248]	@ (801025c <RadioSend+0x118>)
 8010164:	2101      	movs	r1, #1
 8010166:	f896 0056 	ldrb.w	r0, [r6, #86]	@ 0x56
 801016a:	f001 f8bf 	bl	80112ec <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 801016e:	7833      	ldrb	r3, [r6, #0]
 8010170:	2b01      	cmp	r3, #1
 8010172:	d103      	bne.n	801017c <RadioSend+0x38>
 8010174:	f896 3051 	ldrb.w	r3, [r6, #81]	@ 0x51
 8010178:	2b06      	cmp	r3, #6
 801017a:	d012      	beq.n	80101a2 <RadioSend+0x5e>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801017c:	f640 0089 	movw	r0, #2185	@ 0x889
 8010180:	f000 fb44 	bl	801080c <SUBGRF_ReadRegister>
 8010184:	f040 0104 	orr.w	r1, r0, #4
 8010188:	b2c9      	uxtb	r1, r1
 801018a:	f640 0089 	movw	r0, #2185	@ 0x889
 801018e:	f000 fb2d 	bl	80107ec <SUBGRF_WriteRegister>
        switch( SubgRf.Modem )
 8010192:	4b32      	ldr	r3, [pc, #200]	@ (801025c <RadioSend+0x118>)
 8010194:	781b      	ldrb	r3, [r3, #0]
 8010196:	2b03      	cmp	r3, #3
 8010198:	d818      	bhi.n	80101cc <RadioSend+0x88>
 801019a:	e8df f003 	tbb	[pc, r3]
 801019e:	0d23      	.short	0x0d23
 80101a0:	4f23      	.short	0x4f23
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 80101a2:	f640 0089 	movw	r0, #2185	@ 0x889
 80101a6:	f000 fb31 	bl	801080c <SUBGRF_ReadRegister>
 80101aa:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 80101ae:	f640 0089 	movw	r0, #2185	@ 0x889
 80101b2:	f000 fb1b 	bl	80107ec <SUBGRF_WriteRegister>
 80101b6:	e7ec      	b.n	8010192 <RadioSend+0x4e>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 80101b8:	4828      	ldr	r0, [pc, #160]	@ (801025c <RadioSend+0x118>)
 80101ba:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80101bc:	300e      	adds	r0, #14
 80101be:	f000 ff81 	bl	80110c4 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80101c2:	2200      	movs	r2, #0
 80101c4:	4621      	mov	r1, r4
 80101c6:	4628      	mov	r0, r5
 80101c8:	f000 fc3a 	bl	8010a40 <SUBGRF_SendPayload>
        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 80101cc:	4c24      	ldr	r4, [pc, #144]	@ (8010260 <RadioSend+0x11c>)
 80101ce:	4b23      	ldr	r3, [pc, #140]	@ (801025c <RadioSend+0x118>)
 80101d0:	6859      	ldr	r1, [r3, #4]
 80101d2:	4620      	mov	r0, r4
 80101d4:	f001 fe52 	bl	8011e7c <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 80101d8:	4620      	mov	r0, r4
 80101da:	f001 fe09 	bl	8011df0 <UTIL_TIMER_Start>
    return RADIO_STATUS_OK;
 80101de:	2000      	movs	r0, #0
}
 80101e0:	b002      	add	sp, #8
 80101e2:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 80101e4:	f001 f971 	bl	80114ca <RFW_Is_Init>
 80101e8:	2801      	cmp	r0, #1
 80101ea:	d00a      	beq.n	8010202 <RadioSend+0xbe>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80101ec:	481b      	ldr	r0, [pc, #108]	@ (801025c <RadioSend+0x118>)
 80101ee:	7584      	strb	r4, [r0, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80101f0:	300e      	adds	r0, #14
 80101f2:	f000 ff67 	bl	80110c4 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 80101f6:	2200      	movs	r2, #0
 80101f8:	4621      	mov	r1, r4
 80101fa:	4628      	mov	r0, r5
 80101fc:	f000 fc20 	bl	8010a40 <SUBGRF_SendPayload>
 8010200:	e7e4      	b.n	80101cc <RadioSend+0x88>
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8010202:	f10d 0207 	add.w	r2, sp, #7
 8010206:	4621      	mov	r1, r4
 8010208:	4628      	mov	r0, r5
 801020a:	f001 f963 	bl	80114d4 <RFW_TransmitInit>
 801020e:	b968      	cbnz	r0, 801022c <RadioSend+0xe8>
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8010210:	4812      	ldr	r0, [pc, #72]	@ (801025c <RadioSend+0x118>)
 8010212:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010216:	7583      	strb	r3, [r0, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010218:	300e      	adds	r0, #14
 801021a:	f000 ff53 	bl	80110c4 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 801021e:	2200      	movs	r2, #0
 8010220:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010224:	4628      	mov	r0, r5
 8010226:	f000 fc0b 	bl	8010a40 <SUBGRF_SendPayload>
 801022a:	e7cf      	b.n	80101cc <RadioSend+0x88>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 801022c:	4b0d      	ldr	r3, [pc, #52]	@ (8010264 <RadioSend+0x120>)
 801022e:	2201      	movs	r2, #1
 8010230:	2100      	movs	r1, #0
 8010232:	2002      	movs	r0, #2
 8010234:	f001 fa30 	bl	8011698 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 8010238:	2003      	movs	r0, #3
 801023a:	e7d1      	b.n	80101e0 <RadioSend+0x9c>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801023c:	4807      	ldr	r0, [pc, #28]	@ (801025c <RadioSend+0x118>)
 801023e:	2302      	movs	r3, #2
 8010240:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8010242:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010244:	300e      	adds	r0, #14
 8010246:	f000 ff3d 	bl	80110c4 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801024a:	2200      	movs	r2, #0
 801024c:	4621      	mov	r1, r4
 801024e:	4628      	mov	r0, r5
 8010250:	f000 fbf6 	bl	8010a40 <SUBGRF_SendPayload>
            break;
 8010254:	e7ba      	b.n	80101cc <RadioSend+0x88>
 8010256:	bf00      	nop
 8010258:	48000400 	.word	0x48000400
 801025c:	20000ec4 	.word	0x20000ec4
 8010260:	20000eac 	.word	0x20000eac
 8010264:	08012b64 	.word	0x08012b64

08010268 <RadioRandom>:
{
 8010268:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801026a:	2300      	movs	r3, #0
 801026c:	461a      	mov	r2, r3
 801026e:	4619      	mov	r1, r3
 8010270:	4618      	mov	r0, r3
 8010272:	f000 fd5e 	bl	8010d32 <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 8010276:	f000 fc05 	bl	8010a84 <SUBGRF_GetRandom>
}
 801027a:	bd08      	pop	{r3, pc}

0801027c <RadioSetModem>:
{
 801027c:	b510      	push	{r4, lr}
 801027e:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 8010280:	4b14      	ldr	r3, [pc, #80]	@ (80102d4 <RadioSetModem+0x58>)
 8010282:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 8010284:	f001 f92e 	bl	80114e4 <RFW_SetRadioModem>
    switch( modem )
 8010288:	2c01      	cmp	r4, #1
 801028a:	d010      	beq.n	80102ae <RadioSetModem+0x32>
 801028c:	2c03      	cmp	r4, #3
 801028e:	d01a      	beq.n	80102c6 <RadioSetModem+0x4a>
 8010290:	b134      	cbz	r4, 80102a0 <RadioSetModem+0x24>
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8010292:	2003      	movs	r0, #3
 8010294:	f000 fdec 	bl	8010e70 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8010298:	4b0e      	ldr	r3, [pc, #56]	@ (80102d4 <RadioSetModem+0x58>)
 801029a:	2200      	movs	r2, #0
 801029c:	735a      	strb	r2, [r3, #13]
}
 801029e:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80102a0:	2000      	movs	r0, #0
 80102a2:	f000 fde5 	bl	8010e70 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 80102a6:	4b0b      	ldr	r3, [pc, #44]	@ (80102d4 <RadioSetModem+0x58>)
 80102a8:	2200      	movs	r2, #0
 80102aa:	735a      	strb	r2, [r3, #13]
        break;
 80102ac:	e7f7      	b.n	801029e <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80102ae:	2001      	movs	r0, #1
 80102b0:	f000 fdde 	bl	8010e70 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80102b4:	4b07      	ldr	r3, [pc, #28]	@ (80102d4 <RadioSetModem+0x58>)
 80102b6:	7b5a      	ldrb	r2, [r3, #13]
 80102b8:	7b18      	ldrb	r0, [r3, #12]
 80102ba:	4282      	cmp	r2, r0
 80102bc:	d0ef      	beq.n	801029e <RadioSetModem+0x22>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80102be:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80102c0:	f000 f80a 	bl	80102d8 <RadioSetPublicNetwork>
 80102c4:	e7eb      	b.n	801029e <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80102c6:	2002      	movs	r0, #2
 80102c8:	f000 fdd2 	bl	8010e70 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 80102cc:	4b01      	ldr	r3, [pc, #4]	@ (80102d4 <RadioSetModem+0x58>)
 80102ce:	2200      	movs	r2, #0
 80102d0:	735a      	strb	r2, [r3, #13]
}
 80102d2:	e7e4      	b.n	801029e <RadioSetModem+0x22>
 80102d4:	20000ec4 	.word	0x20000ec4

080102d8 <RadioSetPublicNetwork>:
{
 80102d8:	b510      	push	{r4, lr}
 80102da:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80102dc:	4b0e      	ldr	r3, [pc, #56]	@ (8010318 <RadioSetPublicNetwork+0x40>)
 80102de:	7318      	strb	r0, [r3, #12]
 80102e0:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 80102e2:	2001      	movs	r0, #1
 80102e4:	f7ff ffca 	bl	801027c <RadioSetModem>
    if( enable == true )
 80102e8:	b154      	cbz	r4, 8010300 <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80102ea:	2134      	movs	r1, #52	@ 0x34
 80102ec:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 80102f0:	f000 fa7c 	bl	80107ec <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80102f4:	2144      	movs	r1, #68	@ 0x44
 80102f6:	f240 7041 	movw	r0, #1857	@ 0x741
 80102fa:	f000 fa77 	bl	80107ec <SUBGRF_WriteRegister>
}
 80102fe:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8010300:	2114      	movs	r1, #20
 8010302:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8010306:	f000 fa71 	bl	80107ec <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801030a:	2124      	movs	r1, #36	@ 0x24
 801030c:	f240 7041 	movw	r0, #1857	@ 0x741
 8010310:	f000 fa6c 	bl	80107ec <SUBGRF_WriteRegister>
}
 8010314:	e7f3      	b.n	80102fe <RadioSetPublicNetwork+0x26>
 8010316:	bf00      	nop
 8010318:	20000ec4 	.word	0x20000ec4

0801031c <RadioSetTxConfig>:
{
 801031c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010320:	b083      	sub	sp, #12
 8010322:	4604      	mov	r4, r0
 8010324:	460e      	mov	r6, r1
 8010326:	4617      	mov	r7, r2
 8010328:	461d      	mov	r5, r3
 801032a:	f8bd 8038 	ldrh.w	r8, [sp, #56]	@ 0x38
 801032e:	f89d 903c 	ldrb.w	r9, [sp, #60]	@ 0x3c
 8010332:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
    RFW_DeInit();
 8010336:	f001 f8c7 	bl	80114c8 <RFW_DeInit>
    switch( modem )
 801033a:	2c00      	cmp	r4, #0
 801033c:	d043      	beq.n	80103c6 <RadioSetTxConfig+0xaa>
 801033e:	2c01      	cmp	r4, #1
 8010340:	f040 8083 	bne.w	801044a <RadioSetTxConfig+0x12e>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8010344:	4a57      	ldr	r2, [pc, #348]	@ (80104a4 <RadioSetTxConfig+0x188>)
 8010346:	2301      	movs	r3, #1
 8010348:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 801034c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801034e:	b2db      	uxtb	r3, r3
 8010350:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8010354:	4954      	ldr	r1, [pc, #336]	@ (80104a8 <RadioSetTxConfig+0x18c>)
 8010356:	5d49      	ldrb	r1, [r1, r5]
 8010358:	f882 1051 	strb.w	r1, [r2, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 801035c:	f89d 1034 	ldrb.w	r1, [sp, #52]	@ 0x34
 8010360:	f882 1052 	strb.w	r1, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8010364:	b925      	cbnz	r5, 8010370 <RadioSetTxConfig+0x54>
 8010366:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010368:	3a0b      	subs	r2, #11
 801036a:	2a01      	cmp	r2, #1
 801036c:	f240 8089 	bls.w	8010482 <RadioSetTxConfig+0x166>
 8010370:	2d01      	cmp	r5, #1
 8010372:	f000 8082 	beq.w	801047a <RadioSetTxConfig+0x15e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8010376:	4a4b      	ldr	r2, [pc, #300]	@ (80104a4 <RadioSetTxConfig+0x188>)
 8010378:	2100      	movs	r1, #0
 801037a:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801037e:	4a49      	ldr	r2, [pc, #292]	@ (80104a4 <RadioSetTxConfig+0x188>)
 8010380:	2101      	movs	r1, #1
 8010382:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8010384:	3b05      	subs	r3, #5
 8010386:	b2db      	uxtb	r3, r3
 8010388:	428b      	cmp	r3, r1
 801038a:	d97f      	bls.n	801048c <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801038c:	4b45      	ldr	r3, [pc, #276]	@ (80104a4 <RadioSetTxConfig+0x188>)
 801038e:	f8a3 801c 	strh.w	r8, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8010392:	4c44      	ldr	r4, [pc, #272]	@ (80104a4 <RadioSetTxConfig+0x188>)
 8010394:	f884 901e 	strb.w	r9, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8010398:	4b44      	ldr	r3, [pc, #272]	@ (80104ac <RadioSetTxConfig+0x190>)
 801039a:	781b      	ldrb	r3, [r3, #0]
 801039c:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801039e:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80103a2:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 80103a6:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
            RadioStandby( );
 80103aa:	f7ff fc59 	bl	800fc60 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80103ae:	2001      	movs	r0, #1
 80103b0:	f7ff ff64 	bl	801027c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80103b4:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 80103b8:	f000 fe02 	bl	8010fc0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80103bc:	f104 000e 	add.w	r0, r4, #14
 80103c0:	f000 fe80 	bl	80110c4 <SUBGRF_SetPacketParams>
            break;
 80103c4:	e041      	b.n	801044a <RadioSetTxConfig+0x12e>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80103c6:	4c37      	ldr	r4, [pc, #220]	@ (80104a4 <RadioSetTxConfig+0x188>)
 80103c8:	f04f 0b00 	mov.w	fp, #0
 80103cc:	f884 b038 	strb.w	fp, [r4, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80103d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80103d2:	63e3      	str	r3, [r4, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80103d4:	230b      	movs	r3, #11
 80103d6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80103da:	4628      	mov	r0, r5
 80103dc:	f001 f812 	bl	8011404 <SUBGRF_GetFskBandwidthRegValue>
 80103e0:	f884 0045 	strb.w	r0, [r4, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 80103e4:	6427      	str	r7, [r4, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80103e6:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80103ea:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80103ee:	f8a4 8010 	strh.w	r8, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80103f2:	2304      	movs	r3, #4
 80103f4:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 80103f6:	2318      	movs	r3, #24
 80103f8:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80103fa:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80103fe:	f089 0901 	eor.w	r9, r9, #1
 8010402:	f884 9015 	strb.w	r9, [r4, #21]
            if( crcOn == true )
 8010406:	f1ba 0f00 	cmp.w	sl, #0
 801040a:	d032      	beq.n	8010472 <RadioSetTxConfig+0x156>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801040c:	22f2      	movs	r2, #242	@ 0xf2
 801040e:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8010410:	4c24      	ldr	r4, [pc, #144]	@ (80104a4 <RadioSetTxConfig+0x188>)
 8010412:	2301      	movs	r3, #1
 8010414:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8010416:	f7ff fc23 	bl	800fc60 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 801041a:	2000      	movs	r0, #0
 801041c:	f7ff ff2e 	bl	801027c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8010420:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8010424:	f000 fdcc 	bl	8010fc0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010428:	f104 000e 	add.w	r0, r4, #14
 801042c:	f000 fe4a 	bl	80110c4 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8010430:	4a1f      	ldr	r2, [pc, #124]	@ (80104b0 <RadioSetTxConfig+0x194>)
 8010432:	466b      	mov	r3, sp
 8010434:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010438:	e883 0003 	stmia.w	r3, {r0, r1}
 801043c:	4618      	mov	r0, r3
 801043e:	f000 fa31 	bl	80108a4 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8010442:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8010446:	f000 fa04 	bl	8010852 <SUBGRF_SetWhiteningSeed>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801044a:	4630      	mov	r0, r6
 801044c:	f000 ff62 	bl	8011314 <SUBGRF_SetRfTxPower>
 8010450:	4c14      	ldr	r4, [pc, #80]	@ (80104a4 <RadioSetTxConfig+0x188>)
 8010452:	f884 0056 	strb.w	r0, [r4, #86]	@ 0x56
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8010456:	210e      	movs	r1, #14
 8010458:	f640 101f 	movw	r0, #2335	@ 0x91f
 801045c:	f000 f9c6 	bl	80107ec <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8010460:	f894 0056 	ldrb.w	r0, [r4, #86]	@ 0x56
 8010464:	f001 f835 	bl	80114d2 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8010468:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801046a:	6063      	str	r3, [r4, #4]
}
 801046c:	b003      	add	sp, #12
 801046e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8010472:	4b0c      	ldr	r3, [pc, #48]	@ (80104a4 <RadioSetTxConfig+0x188>)
 8010474:	2201      	movs	r2, #1
 8010476:	75da      	strb	r2, [r3, #23]
 8010478:	e7ca      	b.n	8010410 <RadioSetTxConfig+0xf4>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801047a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801047c:	2a0c      	cmp	r2, #12
 801047e:	f47f af7a 	bne.w	8010376 <RadioSetTxConfig+0x5a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8010482:	4a08      	ldr	r2, [pc, #32]	@ (80104a4 <RadioSetTxConfig+0x188>)
 8010484:	2101      	movs	r1, #1
 8010486:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
 801048a:	e778      	b.n	801037e <RadioSetTxConfig+0x62>
                if( preambleLen < 12 )
 801048c:	f1b8 0f0b 	cmp.w	r8, #11
 8010490:	d803      	bhi.n	801049a <RadioSetTxConfig+0x17e>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8010492:	4613      	mov	r3, r2
 8010494:	220c      	movs	r2, #12
 8010496:	839a      	strh	r2, [r3, #28]
 8010498:	e77b      	b.n	8010392 <RadioSetTxConfig+0x76>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801049a:	4b02      	ldr	r3, [pc, #8]	@ (80104a4 <RadioSetTxConfig+0x188>)
 801049c:	f8a3 801c 	strh.w	r8, [r3, #28]
 80104a0:	e777      	b.n	8010392 <RadioSetTxConfig+0x76>
 80104a2:	bf00      	nop
 80104a4:	20000ec4 	.word	0x20000ec4
 80104a8:	0801316c 	.word	0x0801316c
 80104ac:	200000fc 	.word	0x200000fc
 80104b0:	0801240c 	.word	0x0801240c

080104b4 <RadioSetRxConfig>:
{
 80104b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104b8:	b085      	sub	sp, #20
 80104ba:	4604      	mov	r4, r0
 80104bc:	460d      	mov	r5, r1
 80104be:	4616      	mov	r6, r2
 80104c0:	9301      	str	r3, [sp, #4]
 80104c2:	f8bd 903c 	ldrh.w	r9, [sp, #60]	@ 0x3c
 80104c6:	f8bd a040 	ldrh.w	sl, [sp, #64]	@ 0x40
 80104ca:	f89d 7044 	ldrb.w	r7, [sp, #68]	@ 0x44
 80104ce:	f89d b04c 	ldrb.w	fp, [sp, #76]	@ 0x4c
 80104d2:	f89d 805c 	ldrb.w	r8, [sp, #92]	@ 0x5c
    SubgRf.RxContinuous = rxContinuous;
 80104d6:	4b76      	ldr	r3, [pc, #472]	@ (80106b0 <RadioSetRxConfig+0x1fc>)
 80104d8:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit();
 80104dc:	f000 fff4 	bl	80114c8 <RFW_DeInit>
    if( rxContinuous == true )
 80104e0:	f1b8 0f00 	cmp.w	r8, #0
 80104e4:	d001      	beq.n	80104ea <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 80104e6:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 80104ea:	2f00      	cmp	r7, #0
 80104ec:	d06b      	beq.n	80105c6 <RadioSetRxConfig+0x112>
        MaxPayloadLength = payloadLen;
 80104ee:	f89d 2048 	ldrb.w	r2, [sp, #72]	@ 0x48
 80104f2:	4b70      	ldr	r3, [pc, #448]	@ (80106b4 <RadioSetRxConfig+0x200>)
 80104f4:	701a      	strb	r2, [r3, #0]
    switch( modem )
 80104f6:	2c00      	cmp	r4, #0
 80104f8:	d069      	beq.n	80105ce <RadioSetRxConfig+0x11a>
 80104fa:	2c01      	cmp	r4, #1
 80104fc:	f040 80b3 	bne.w	8010666 <RadioSetRxConfig+0x1b2>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8010500:	2000      	movs	r0, #0
 8010502:	f000 fb51 	bl	8010ba8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8010506:	4a6a      	ldr	r2, [pc, #424]	@ (80106b0 <RadioSetRxConfig+0x1fc>)
 8010508:	2301      	movs	r3, #1
 801050a:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 801050e:	b2f3      	uxtb	r3, r6
 8010510:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8010514:	4968      	ldr	r1, [pc, #416]	@ (80106b8 <RadioSetRxConfig+0x204>)
 8010516:	5d49      	ldrb	r1, [r1, r5]
 8010518:	f882 1051 	strb.w	r1, [r2, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801051c:	9901      	ldr	r1, [sp, #4]
 801051e:	f882 1052 	strb.w	r1, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8010522:	b925      	cbnz	r5, 801052e <RadioSetRxConfig+0x7a>
 8010524:	f1a6 020b 	sub.w	r2, r6, #11
 8010528:	2a01      	cmp	r2, #1
 801052a:	f240 80a6 	bls.w	801067a <RadioSetRxConfig+0x1c6>
 801052e:	2d01      	cmp	r5, #1
 8010530:	f000 80a0 	beq.w	8010674 <RadioSetRxConfig+0x1c0>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8010534:	4a5e      	ldr	r2, [pc, #376]	@ (80106b0 <RadioSetRxConfig+0x1fc>)
 8010536:	2100      	movs	r1, #0
 8010538:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801053c:	4a5c      	ldr	r2, [pc, #368]	@ (80106b0 <RadioSetRxConfig+0x1fc>)
 801053e:	2101      	movs	r1, #1
 8010540:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8010542:	3b05      	subs	r3, #5
 8010544:	b2db      	uxtb	r3, r3
 8010546:	428b      	cmp	r3, r1
 8010548:	f240 809c 	bls.w	8010684 <RadioSetRxConfig+0x1d0>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801054c:	4b58      	ldr	r3, [pc, #352]	@ (80106b0 <RadioSetRxConfig+0x1fc>)
 801054e:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8010552:	4c57      	ldr	r4, [pc, #348]	@ (80106b0 <RadioSetRxConfig+0x1fc>)
 8010554:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8010556:	4b57      	ldr	r3, [pc, #348]	@ (80106b4 <RadioSetRxConfig+0x200>)
 8010558:	781b      	ldrb	r3, [r3, #0]
 801055a:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801055c:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8010560:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8010564:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
            RadioStandby( );
 8010568:	f7ff fb7a 	bl	800fc60 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801056c:	2001      	movs	r0, #1
 801056e:	f7ff fe85 	bl	801027c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8010572:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8010576:	f000 fd23 	bl	8010fc0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801057a:	f104 000e 	add.w	r0, r4, #14
 801057e:	f000 fda1 	bl	80110c4 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8010582:	fa5f f08a 	uxtb.w	r0, sl
 8010586:	f000 fb1c 	bl	8010bc2 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 801058a:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 801058e:	f000 f93d 	bl	801080c <SUBGRF_ReadRegister>
 8010592:	f000 0101 	and.w	r1, r0, #1
 8010596:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 801059a:	f000 f927 	bl	80107ec <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801059e:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 80105a2:	2b01      	cmp	r3, #1
 80105a4:	d079      	beq.n	801069a <RadioSetRxConfig+0x1e6>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80105a6:	f240 7036 	movw	r0, #1846	@ 0x736
 80105aa:	f000 f92f 	bl	801080c <SUBGRF_ReadRegister>
 80105ae:	f040 0104 	orr.w	r1, r0, #4
 80105b2:	b2c9      	uxtb	r1, r1
 80105b4:	f240 7036 	movw	r0, #1846	@ 0x736
 80105b8:	f000 f918 	bl	80107ec <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80105bc:	4b3c      	ldr	r3, [pc, #240]	@ (80106b0 <RadioSetRxConfig+0x1fc>)
 80105be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80105c2:	609a      	str	r2, [r3, #8]
}
 80105c4:	e04f      	b.n	8010666 <RadioSetRxConfig+0x1b2>
        MaxPayloadLength = 0xFF;
 80105c6:	4b3b      	ldr	r3, [pc, #236]	@ (80106b4 <RadioSetRxConfig+0x200>)
 80105c8:	22ff      	movs	r2, #255	@ 0xff
 80105ca:	701a      	strb	r2, [r3, #0]
 80105cc:	e793      	b.n	80104f6 <RadioSetRxConfig+0x42>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80105ce:	2000      	movs	r0, #0
 80105d0:	f000 faea 	bl	8010ba8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80105d4:	4c36      	ldr	r4, [pc, #216]	@ (80106b0 <RadioSetRxConfig+0x1fc>)
 80105d6:	f04f 0800 	mov.w	r8, #0
 80105da:	f884 8038 	strb.w	r8, [r4, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80105de:	63e6      	str	r6, [r4, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80105e0:	230b      	movs	r3, #11
 80105e2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80105e6:	4628      	mov	r0, r5
 80105e8:	f000 ff0c 	bl	8011404 <SUBGRF_GetFskBandwidthRegValue>
 80105ec:	f884 0045 	strb.w	r0, [r4, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80105f0:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80105f4:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80105f8:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80105fc:	2304      	movs	r3, #4
 80105fe:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8010600:	2318      	movs	r3, #24
 8010602:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8010604:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8010608:	f087 0701 	eor.w	r7, r7, #1
 801060c:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801060e:	4b29      	ldr	r3, [pc, #164]	@ (80106b4 <RadioSetRxConfig+0x200>)
 8010610:	781b      	ldrb	r3, [r3, #0]
 8010612:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 8010614:	f1bb 0f00 	cmp.w	fp, #0
 8010618:	d028      	beq.n	801066c <RadioSetRxConfig+0x1b8>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801061a:	22f2      	movs	r2, #242	@ 0xf2
 801061c:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801061e:	4c24      	ldr	r4, [pc, #144]	@ (80106b0 <RadioSetRxConfig+0x1fc>)
 8010620:	2301      	movs	r3, #1
 8010622:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8010624:	f7ff fb1c 	bl	800fc60 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8010628:	2000      	movs	r0, #0
 801062a:	f7ff fe27 	bl	801027c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801062e:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8010632:	f000 fcc5 	bl	8010fc0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010636:	f104 000e 	add.w	r0, r4, #14
 801063a:	f000 fd43 	bl	80110c4 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801063e:	4a1f      	ldr	r2, [pc, #124]	@ (80106bc <RadioSetRxConfig+0x208>)
 8010640:	ab02      	add	r3, sp, #8
 8010642:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010646:	e883 0003 	stmia.w	r3, {r0, r1}
 801064a:	4618      	mov	r0, r3
 801064c:	f000 f92a 	bl	80108a4 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8010650:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8010654:	f000 f8fd 	bl	8010852 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8010658:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 801065c:	fb03 f30a 	mul.w	r3, r3, sl
 8010660:	fbb3 f3f6 	udiv	r3, r3, r6
 8010664:	60a3      	str	r3, [r4, #8]
}
 8010666:	b005      	add	sp, #20
 8010668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801066c:	4b10      	ldr	r3, [pc, #64]	@ (80106b0 <RadioSetRxConfig+0x1fc>)
 801066e:	2201      	movs	r2, #1
 8010670:	75da      	strb	r2, [r3, #23]
 8010672:	e7d4      	b.n	801061e <RadioSetRxConfig+0x16a>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8010674:	2e0c      	cmp	r6, #12
 8010676:	f47f af5d 	bne.w	8010534 <RadioSetRxConfig+0x80>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801067a:	4a0d      	ldr	r2, [pc, #52]	@ (80106b0 <RadioSetRxConfig+0x1fc>)
 801067c:	2101      	movs	r1, #1
 801067e:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
 8010682:	e75b      	b.n	801053c <RadioSetRxConfig+0x88>
                if( preambleLen < 12 )
 8010684:	f1b9 0f0b 	cmp.w	r9, #11
 8010688:	d803      	bhi.n	8010692 <RadioSetRxConfig+0x1de>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801068a:	4613      	mov	r3, r2
 801068c:	220c      	movs	r2, #12
 801068e:	839a      	strh	r2, [r3, #28]
 8010690:	e75f      	b.n	8010552 <RadioSetRxConfig+0x9e>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8010692:	4b07      	ldr	r3, [pc, #28]	@ (80106b0 <RadioSetRxConfig+0x1fc>)
 8010694:	f8a3 901c 	strh.w	r9, [r3, #28]
 8010698:	e75b      	b.n	8010552 <RadioSetRxConfig+0x9e>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801069a:	f240 7036 	movw	r0, #1846	@ 0x736
 801069e:	f000 f8b5 	bl	801080c <SUBGRF_ReadRegister>
 80106a2:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 80106a6:	f240 7036 	movw	r0, #1846	@ 0x736
 80106aa:	f000 f89f 	bl	80107ec <SUBGRF_WriteRegister>
 80106ae:	e785      	b.n	80105bc <RadioSetRxConfig+0x108>
 80106b0:	20000ec4 	.word	0x20000ec4
 80106b4:	200000fc 	.word	0x200000fc
 80106b8:	0801316c 	.word	0x0801316c
 80106bc:	0801240c 	.word	0x0801240c

080106c0 <RadioIsChannelFree>:
{
 80106c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106c2:	b08b      	sub	sp, #44	@ 0x2c
 80106c4:	4604      	mov	r4, r0
 80106c6:	460f      	mov	r7, r1
 80106c8:	4616      	mov	r6, r2
 80106ca:	461d      	mov	r5, r3
    RadioStandby( );
 80106cc:	f7ff fac8 	bl	800fc60 <RadioStandby>
    RadioSetModem( MODEM_FSK );
 80106d0:	2000      	movs	r0, #0
 80106d2:	f7ff fdd3 	bl	801027c <RadioSetModem>
    RadioSetChannel( freq );
 80106d6:	4620      	mov	r0, r4
 80106d8:	f7ff fcda 	bl	8010090 <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 80106dc:	2301      	movs	r3, #1
 80106de:	9309      	str	r3, [sp, #36]	@ 0x24
 80106e0:	2400      	movs	r4, #0
 80106e2:	9408      	str	r4, [sp, #32]
 80106e4:	9407      	str	r4, [sp, #28]
 80106e6:	9406      	str	r4, [sp, #24]
 80106e8:	9405      	str	r4, [sp, #20]
 80106ea:	9404      	str	r4, [sp, #16]
 80106ec:	9403      	str	r4, [sp, #12]
 80106ee:	9402      	str	r4, [sp, #8]
 80106f0:	2303      	movs	r3, #3
 80106f2:	9301      	str	r3, [sp, #4]
 80106f4:	9700      	str	r7, [sp, #0]
 80106f6:	4623      	mov	r3, r4
 80106f8:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80106fc:	4639      	mov	r1, r7
 80106fe:	4620      	mov	r0, r4
 8010700:	f7ff fed8 	bl	80104b4 <RadioSetRxConfig>
    RadioRx( 0 );
 8010704:	4620      	mov	r0, r4
 8010706:	f7ff fcdb 	bl	80100c0 <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801070a:	f7ff fc71 	bl	800fff0 <RadioGetWakeupTime>
 801070e:	f7f1 f951 	bl	80019b4 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 8010712:	f001 fad3 	bl	8011cbc <UTIL_TIMER_GetCurrentTime>
 8010716:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8010718:	4620      	mov	r0, r4
 801071a:	f001 fad9 	bl	8011cd0 <UTIL_TIMER_GetElapsedTime>
 801071e:	42a8      	cmp	r0, r5
 8010720:	d206      	bcs.n	8010730 <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 8010722:	2000      	movs	r0, #0
 8010724:	f7ff fc8e 	bl	8010044 <RadioRssi>
        if( rssi > rssiThresh )
 8010728:	42b0      	cmp	r0, r6
 801072a:	ddf5      	ble.n	8010718 <RadioIsChannelFree+0x58>
            status = false;
 801072c:	2400      	movs	r4, #0
 801072e:	e000      	b.n	8010732 <RadioIsChannelFree+0x72>
    bool status = true;
 8010730:	2401      	movs	r4, #1
    RadioStandby( );
 8010732:	f7ff fa95 	bl	800fc60 <RadioStandby>
}
 8010736:	4620      	mov	r0, r4
 8010738:	b00b      	add	sp, #44	@ 0x2c
 801073a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801073c <RadioInit>:
{
 801073c:	b570      	push	{r4, r5, r6, lr}
 801073e:	b082      	sub	sp, #8
    RadioEvents = events;
 8010740:	4b1d      	ldr	r3, [pc, #116]	@ (80107b8 <RadioInit+0x7c>)
 8010742:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 8010744:	4d1d      	ldr	r5, [pc, #116]	@ (80107bc <RadioInit+0x80>)
 8010746:	2400      	movs	r4, #0
 8010748:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 801074a:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 801074c:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801074e:	65ac      	str	r4, [r5, #88]	@ 0x58
    SUBGRF_Init( RadioOnDioIrq );
 8010750:	481b      	ldr	r0, [pc, #108]	@ (80107c0 <RadioInit+0x84>)
 8010752:	f000 fb27 	bl	8010da4 <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 8010756:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 8010758:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 801075a:	f000 fa53 	bl	8010c04 <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 801075e:	4621      	mov	r1, r4
 8010760:	4620      	mov	r0, r4
 8010762:	f000 fd1f 	bl	80111a4 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8010766:	2204      	movs	r2, #4
 8010768:	4621      	mov	r1, r4
 801076a:	2001      	movs	r0, #1
 801076c:	f000 fb9a 	bl	8010ea4 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8010770:	4623      	mov	r3, r4
 8010772:	4622      	mov	r2, r4
 8010774:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8010778:	4608      	mov	r0, r1
 801077a:	f000 fada 	bl	8010d32 <SUBGRF_SetDioIrqParams>
    RadioSleep();
 801077e:	f7ff fcd7 	bl	8010130 <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8010782:	4e10      	ldr	r6, [pc, #64]	@ (80107c4 <RadioInit+0x88>)
 8010784:	9400      	str	r4, [sp, #0]
 8010786:	4b10      	ldr	r3, [pc, #64]	@ (80107c8 <RadioInit+0x8c>)
 8010788:	4622      	mov	r2, r4
 801078a:	f04f 31ff 	mov.w	r1, #4294967295
 801078e:	4630      	mov	r0, r6
 8010790:	f001 fa76 	bl	8011c80 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8010794:	4d0d      	ldr	r5, [pc, #52]	@ (80107cc <RadioInit+0x90>)
 8010796:	9400      	str	r4, [sp, #0]
 8010798:	4b0d      	ldr	r3, [pc, #52]	@ (80107d0 <RadioInit+0x94>)
 801079a:	4622      	mov	r2, r4
 801079c:	f04f 31ff 	mov.w	r1, #4294967295
 80107a0:	4628      	mov	r0, r5
 80107a2:	f001 fa6d 	bl	8011c80 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80107a6:	4630      	mov	r0, r6
 80107a8:	f001 fac8 	bl	8011d3c <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 80107ac:	4628      	mov	r0, r5
 80107ae:	f001 fac5 	bl	8011d3c <UTIL_TIMER_Stop>
}
 80107b2:	b002      	add	sp, #8
 80107b4:	bd70      	pop	{r4, r5, r6, pc}
 80107b6:	bf00      	nop
 80107b8:	20000f20 	.word	0x20000f20
 80107bc:	20000ec4 	.word	0x20000ec4
 80107c0:	0800ffdd 	.word	0x0800ffdd
 80107c4:	20000eac 	.word	0x20000eac
 80107c8:	0800fb25 	.word	0x0800fb25
 80107cc:	20000e94 	.word	0x20000e94
 80107d0:	0800fb4d 	.word	0x0800fb4d

080107d4 <SUBGRF_GetOperatingMode>:
}

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
    return OperatingMode;
}
 80107d4:	4b01      	ldr	r3, [pc, #4]	@ (80107dc <SUBGRF_GetOperatingMode+0x8>)
 80107d6:	7818      	ldrb	r0, [r3, #0]
 80107d8:	4770      	bx	lr
 80107da:	bf00      	nop
 80107dc:	20001032 	.word	0x20001032

080107e0 <SUBGRF_GetPacketType>:
}

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
    return PacketType;
}
 80107e0:	4b01      	ldr	r3, [pc, #4]	@ (80107e8 <SUBGRF_GetPacketType+0x8>)
 80107e2:	7818      	ldrb	r0, [r3, #0]
 80107e4:	4770      	bx	lr
 80107e6:	bf00      	nop
 80107e8:	20001031 	.word	0x20001031

080107ec <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 80107ec:	b500      	push	{lr}
 80107ee:	b083      	sub	sp, #12
 80107f0:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 80107f4:	2301      	movs	r3, #1
 80107f6:	f10d 0207 	add.w	r2, sp, #7
 80107fa:	4601      	mov	r1, r0
 80107fc:	4802      	ldr	r0, [pc, #8]	@ (8010808 <SUBGRF_WriteRegister+0x1c>)
 80107fe:	f7f4 ff5b 	bl	80056b8 <HAL_SUBGHZ_WriteRegisters>
}
 8010802:	b003      	add	sp, #12
 8010804:	f85d fb04 	ldr.w	pc, [sp], #4
 8010808:	200001c4 	.word	0x200001c4

0801080c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801080c:	b500      	push	{lr}
 801080e:	b083      	sub	sp, #12
 8010810:	4601      	mov	r1, r0
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8010812:	2301      	movs	r3, #1
 8010814:	f10d 0207 	add.w	r2, sp, #7
 8010818:	4803      	ldr	r0, [pc, #12]	@ (8010828 <SUBGRF_ReadRegister+0x1c>)
 801081a:	f7f4 ff9d 	bl	8005758 <HAL_SUBGHZ_ReadRegisters>
    return data;
}
 801081e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8010822:	b003      	add	sp, #12
 8010824:	f85d fb04 	ldr.w	pc, [sp], #4
 8010828:	200001c4 	.word	0x200001c4

0801082c <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
}

static void Radio_SMPS_Set(uint8_t level)
{
 801082c:	b510      	push	{r4, lr}
 801082e:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 8010830:	f7f2 f890 	bl	8002954 <RBI_IsDCDC>
 8010834:	2801      	cmp	r0, #1
 8010836:	d000      	beq.n	801083a <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 8010838:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801083a:	f640 1023 	movw	r0, #2339	@ 0x923
 801083e:	f7ff ffe5 	bl	801080c <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 8010842:	f000 01f9 	and.w	r1, r0, #249	@ 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8010846:	4321      	orrs	r1, r4
 8010848:	f640 1023 	movw	r0, #2339	@ 0x923
 801084c:	f7ff ffce 	bl	80107ec <SUBGRF_WriteRegister>
}
 8010850:	e7f2      	b.n	8010838 <Radio_SMPS_Set+0xc>

08010852 <SUBGRF_SetWhiteningSeed>:
{
 8010852:	b510      	push	{r4, lr}
 8010854:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 8010856:	f7ff ffc3 	bl	80107e0 <SUBGRF_GetPacketType>
 801085a:	b100      	cbz	r0, 801085e <SUBGRF_SetWhiteningSeed+0xc>
}
 801085c:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801085e:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8010862:	f7ff ffd3 	bl	801080c <SUBGRF_ReadRegister>
 8010866:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801086a:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801086e:	4301      	orrs	r1, r0
 8010870:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8010874:	f7ff ffba 	bl	80107ec <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8010878:	b2e1      	uxtb	r1, r4
 801087a:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 801087e:	f7ff ffb5 	bl	80107ec <SUBGRF_WriteRegister>
}
 8010882:	e7eb      	b.n	801085c <SUBGRF_SetWhiteningSeed+0xa>

08010884 <SUBGRF_WriteRegisters>:
{
 8010884:	b510      	push	{r4, lr}
 8010886:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010888:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801088c:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801088e:	460a      	mov	r2, r1
 8010890:	4601      	mov	r1, r0
 8010892:	4803      	ldr	r0, [pc, #12]	@ (80108a0 <SUBGRF_WriteRegisters+0x1c>)
 8010894:	f7f4 ff10 	bl	80056b8 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010898:	f384 8810 	msr	PRIMASK, r4
}
 801089c:	bd10      	pop	{r4, pc}
 801089e:	bf00      	nop
 80108a0:	200001c4 	.word	0x200001c4

080108a4 <SUBGRF_SetSyncWord>:
{
 80108a4:	b508      	push	{r3, lr}
 80108a6:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 80108a8:	2208      	movs	r2, #8
 80108aa:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 80108ae:	f7ff ffe9 	bl	8010884 <SUBGRF_WriteRegisters>
}
 80108b2:	2000      	movs	r0, #0
 80108b4:	bd08      	pop	{r3, pc}

080108b6 <SUBGRF_SetCrcSeed>:
{
 80108b6:	b500      	push	{lr}
 80108b8:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80108ba:	0a03      	lsrs	r3, r0, #8
 80108bc:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80108c0:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 80108c4:	f7ff ff8c 	bl	80107e0 <SUBGRF_GetPacketType>
 80108c8:	b110      	cbz	r0, 80108d0 <SUBGRF_SetCrcSeed+0x1a>
}
 80108ca:	b003      	add	sp, #12
 80108cc:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80108d0:	2202      	movs	r2, #2
 80108d2:	a901      	add	r1, sp, #4
 80108d4:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 80108d8:	f7ff ffd4 	bl	8010884 <SUBGRF_WriteRegisters>
}
 80108dc:	e7f5      	b.n	80108ca <SUBGRF_SetCrcSeed+0x14>

080108de <SUBGRF_SetCrcPolynomial>:
{
 80108de:	b500      	push	{lr}
 80108e0:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80108e2:	0a03      	lsrs	r3, r0, #8
 80108e4:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 80108e8:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 80108ec:	f7ff ff78 	bl	80107e0 <SUBGRF_GetPacketType>
 80108f0:	b110      	cbz	r0, 80108f8 <SUBGRF_SetCrcPolynomial+0x1a>
}
 80108f2:	b003      	add	sp, #12
 80108f4:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 80108f8:	2202      	movs	r2, #2
 80108fa:	a901      	add	r1, sp, #4
 80108fc:	f240 60be 	movw	r0, #1726	@ 0x6be
 8010900:	f7ff ffc0 	bl	8010884 <SUBGRF_WriteRegisters>
}
 8010904:	e7f5      	b.n	80108f2 <SUBGRF_SetCrcPolynomial+0x14>
	...

08010908 <SUBGRF_ReadRegisters>:
{
 8010908:	b510      	push	{r4, lr}
 801090a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801090c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010910:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8010912:	460a      	mov	r2, r1
 8010914:	4601      	mov	r1, r0
 8010916:	4803      	ldr	r0, [pc, #12]	@ (8010924 <SUBGRF_ReadRegisters+0x1c>)
 8010918:	f7f4 ff1e 	bl	8005758 <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801091c:	f384 8810 	msr	PRIMASK, r4
}
 8010920:	bd10      	pop	{r4, pc}
 8010922:	bf00      	nop
 8010924:	200001c4 	.word	0x200001c4

08010928 <SUBGRF_WriteBuffer>:
{
 8010928:	b510      	push	{r4, lr}
 801092a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801092c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010930:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8010932:	460a      	mov	r2, r1
 8010934:	4601      	mov	r1, r0
 8010936:	4803      	ldr	r0, [pc, #12]	@ (8010944 <SUBGRF_WriteBuffer+0x1c>)
 8010938:	f7f5 f86c 	bl	8005a14 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801093c:	f384 8810 	msr	PRIMASK, r4
}
 8010940:	bd10      	pop	{r4, pc}
 8010942:	bf00      	nop
 8010944:	200001c4 	.word	0x200001c4

08010948 <SUBGRF_SetPayload>:
{
 8010948:	b508      	push	{r3, lr}
 801094a:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801094c:	4601      	mov	r1, r0
 801094e:	2000      	movs	r0, #0
 8010950:	f7ff ffea 	bl	8010928 <SUBGRF_WriteBuffer>
}
 8010954:	bd08      	pop	{r3, pc}
	...

08010958 <SUBGRF_ReadBuffer>:
{
 8010958:	b510      	push	{r4, lr}
 801095a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801095c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010960:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8010962:	460a      	mov	r2, r1
 8010964:	4601      	mov	r1, r0
 8010966:	4803      	ldr	r0, [pc, #12]	@ (8010974 <SUBGRF_ReadBuffer+0x1c>)
 8010968:	f7f5 f89e 	bl	8005aa8 <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801096c:	f384 8810 	msr	PRIMASK, r4
}
 8010970:	bd10      	pop	{r4, pc}
 8010972:	bf00      	nop
 8010974:	200001c4 	.word	0x200001c4

08010978 <SUBGRF_WriteCommand>:
{
 8010978:	b510      	push	{r4, lr}
 801097a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801097c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010980:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8010982:	460a      	mov	r2, r1
 8010984:	4601      	mov	r1, r0
 8010986:	4803      	ldr	r0, [pc, #12]	@ (8010994 <SUBGRF_WriteCommand+0x1c>)
 8010988:	f7f4 ff3a 	bl	8005800 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801098c:	f384 8810 	msr	PRIMASK, r4
}
 8010990:	bd10      	pop	{r4, pc}
 8010992:	bf00      	nop
 8010994:	200001c4 	.word	0x200001c4

08010998 <SUBGRF_SetSleep>:
{
 8010998:	b510      	push	{r4, lr}
 801099a:	b082      	sub	sp, #8
 801099c:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801099e:	2000      	movs	r0, #0
 80109a0:	f7f1 ffcc 	bl	800293c <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80109a4:	2002      	movs	r0, #2
 80109a6:	f7ff ff41 	bl	801082c <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80109aa:	f004 0304 	and.w	r3, r4, #4
 80109ae:	f004 0202 	and.w	r2, r4, #2
 80109b2:	4313      	orrs	r3, r2
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 80109b4:	f004 0401 	and.w	r4, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80109b8:	4323      	orrs	r3, r4
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80109ba:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 80109be:	2201      	movs	r2, #1
 80109c0:	f10d 0107 	add.w	r1, sp, #7
 80109c4:	2084      	movs	r0, #132	@ 0x84
 80109c6:	f7ff ffd7 	bl	8010978 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 80109ca:	4b02      	ldr	r3, [pc, #8]	@ (80109d4 <SUBGRF_SetSleep+0x3c>)
 80109cc:	2200      	movs	r2, #0
 80109ce:	701a      	strb	r2, [r3, #0]
}
 80109d0:	b002      	add	sp, #8
 80109d2:	bd10      	pop	{r4, pc}
 80109d4:	20001032 	.word	0x20001032

080109d8 <SUBGRF_SetStandby>:
{
 80109d8:	b500      	push	{lr}
 80109da:	b083      	sub	sp, #12
 80109dc:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80109e0:	2201      	movs	r2, #1
 80109e2:	f10d 0107 	add.w	r1, sp, #7
 80109e6:	2080      	movs	r0, #128	@ 0x80
 80109e8:	f7ff ffc6 	bl	8010978 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80109ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80109f0:	b92b      	cbnz	r3, 80109fe <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 80109f2:	4b05      	ldr	r3, [pc, #20]	@ (8010a08 <SUBGRF_SetStandby+0x30>)
 80109f4:	2201      	movs	r2, #1
 80109f6:	701a      	strb	r2, [r3, #0]
}
 80109f8:	b003      	add	sp, #12
 80109fa:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 80109fe:	4b02      	ldr	r3, [pc, #8]	@ (8010a08 <SUBGRF_SetStandby+0x30>)
 8010a00:	2202      	movs	r2, #2
 8010a02:	701a      	strb	r2, [r3, #0]
}
 8010a04:	e7f8      	b.n	80109f8 <SUBGRF_SetStandby+0x20>
 8010a06:	bf00      	nop
 8010a08:	20001032 	.word	0x20001032

08010a0c <SUBGRF_SetTx>:
{
 8010a0c:	b500      	push	{lr}
 8010a0e:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 8010a10:	4b0a      	ldr	r3, [pc, #40]	@ (8010a3c <SUBGRF_SetTx+0x30>)
 8010a12:	2204      	movs	r2, #4
 8010a14:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8010a16:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010a1a:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8010a1e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010a22:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8010a26:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8010a2a:	2203      	movs	r2, #3
 8010a2c:	a901      	add	r1, sp, #4
 8010a2e:	2083      	movs	r0, #131	@ 0x83
 8010a30:	f7ff ffa2 	bl	8010978 <SUBGRF_WriteCommand>
}
 8010a34:	b003      	add	sp, #12
 8010a36:	f85d fb04 	ldr.w	pc, [sp], #4
 8010a3a:	bf00      	nop
 8010a3c:	20001032 	.word	0x20001032

08010a40 <SUBGRF_SendPayload>:
{
 8010a40:	b510      	push	{r4, lr}
 8010a42:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 8010a44:	f7ff ff80 	bl	8010948 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8010a48:	4620      	mov	r0, r4
 8010a4a:	f7ff ffdf 	bl	8010a0c <SUBGRF_SetTx>
}
 8010a4e:	bd10      	pop	{r4, pc}

08010a50 <SUBGRF_SetRx>:
{
 8010a50:	b500      	push	{lr}
 8010a52:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 8010a54:	4b0a      	ldr	r3, [pc, #40]	@ (8010a80 <SUBGRF_SetRx+0x30>)
 8010a56:	2205      	movs	r2, #5
 8010a58:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8010a5a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010a5e:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8010a62:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010a66:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8010a6a:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8010a6e:	2203      	movs	r2, #3
 8010a70:	a901      	add	r1, sp, #4
 8010a72:	2082      	movs	r0, #130	@ 0x82
 8010a74:	f7ff ff80 	bl	8010978 <SUBGRF_WriteCommand>
}
 8010a78:	b003      	add	sp, #12
 8010a7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8010a7e:	bf00      	nop
 8010a80:	20001032 	.word	0x20001032

08010a84 <SUBGRF_GetRandom>:
{
 8010a84:	b570      	push	{r4, r5, r6, lr}
 8010a86:	b082      	sub	sp, #8
    uint32_t number = 0;
 8010a88:	2600      	movs	r6, #0
 8010a8a:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8010a8c:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8010a90:	f7ff febc 	bl	801080c <SUBGRF_ReadRegister>
 8010a94:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8010a96:	f000 01fe 	and.w	r1, r0, #254	@ 0xfe
 8010a9a:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8010a9e:	f7ff fea5 	bl	80107ec <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8010aa2:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8010aa6:	f7ff feb1 	bl	801080c <SUBGRF_ReadRegister>
 8010aaa:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8010aac:	f000 017f 	and.w	r1, r0, #127	@ 0x7f
 8010ab0:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8010ab4:	f7ff fe9a 	bl	80107ec <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8010ab8:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8010abc:	f7ff ffc8 	bl	8010a50 <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8010ac0:	2204      	movs	r2, #4
 8010ac2:	eb0d 0102 	add.w	r1, sp, r2
 8010ac6:	f640 0019 	movw	r0, #2073	@ 0x819
 8010aca:	f7ff ff1d 	bl	8010908 <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 8010ace:	4630      	mov	r0, r6
 8010ad0:	f7ff ff82 	bl	80109d8 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8010ad4:	4629      	mov	r1, r5
 8010ad6:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8010ada:	f7ff fe87 	bl	80107ec <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8010ade:	4621      	mov	r1, r4
 8010ae0:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8010ae4:	f7ff fe82 	bl	80107ec <SUBGRF_WriteRegister>
}
 8010ae8:	9801      	ldr	r0, [sp, #4]
 8010aea:	b002      	add	sp, #8
 8010aec:	bd70      	pop	{r4, r5, r6, pc}
	...

08010af0 <SUBGRF_SetRxBoosted>:
{
 8010af0:	b510      	push	{r4, lr}
 8010af2:	b082      	sub	sp, #8
 8010af4:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 8010af6:	4b0c      	ldr	r3, [pc, #48]	@ (8010b28 <SUBGRF_SetRxBoosted+0x38>)
 8010af8:	2205      	movs	r2, #5
 8010afa:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8010afc:	2197      	movs	r1, #151	@ 0x97
 8010afe:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 8010b02:	f7ff fe73 	bl	80107ec <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8010b06:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8010b0a:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8010b0e:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8010b12:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8010b16:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8010b1a:	2203      	movs	r2, #3
 8010b1c:	a901      	add	r1, sp, #4
 8010b1e:	2082      	movs	r0, #130	@ 0x82
 8010b20:	f7ff ff2a 	bl	8010978 <SUBGRF_WriteCommand>
}
 8010b24:	b002      	add	sp, #8
 8010b26:	bd10      	pop	{r4, pc}
 8010b28:	20001032 	.word	0x20001032

08010b2c <SUBGRF_SetRxDutyCycle>:
{
 8010b2c:	b500      	push	{lr}
 8010b2e:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8010b30:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010b34:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8010b38:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010b3c:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8010b40:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8010b44:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8010b48:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8010b4c:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8010b50:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8010b54:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8010b58:	2206      	movs	r2, #6
 8010b5a:	4669      	mov	r1, sp
 8010b5c:	2094      	movs	r0, #148	@ 0x94
 8010b5e:	f7ff ff0b 	bl	8010978 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8010b62:	4b03      	ldr	r3, [pc, #12]	@ (8010b70 <SUBGRF_SetRxDutyCycle+0x44>)
 8010b64:	2206      	movs	r2, #6
 8010b66:	701a      	strb	r2, [r3, #0]
}
 8010b68:	b003      	add	sp, #12
 8010b6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8010b6e:	bf00      	nop
 8010b70:	20001032 	.word	0x20001032

08010b74 <SUBGRF_SetCad>:
{
 8010b74:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8010b76:	2200      	movs	r2, #0
 8010b78:	4611      	mov	r1, r2
 8010b7a:	20c5      	movs	r0, #197	@ 0xc5
 8010b7c:	f7ff fefc 	bl	8010978 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8010b80:	4b01      	ldr	r3, [pc, #4]	@ (8010b88 <SUBGRF_SetCad+0x14>)
 8010b82:	2207      	movs	r2, #7
 8010b84:	701a      	strb	r2, [r3, #0]
}
 8010b86:	bd08      	pop	{r3, pc}
 8010b88:	20001032 	.word	0x20001032

08010b8c <SUBGRF_SetTxContinuousWave>:
{
 8010b8c:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8010b8e:	2200      	movs	r2, #0
 8010b90:	4611      	mov	r1, r2
 8010b92:	20d1      	movs	r0, #209	@ 0xd1
 8010b94:	f7ff fef0 	bl	8010978 <SUBGRF_WriteCommand>
}
 8010b98:	bd08      	pop	{r3, pc}

08010b9a <SUBGRF_SetTxInfinitePreamble>:
{
 8010b9a:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8010b9c:	2200      	movs	r2, #0
 8010b9e:	4611      	mov	r1, r2
 8010ba0:	20d2      	movs	r0, #210	@ 0xd2
 8010ba2:	f7ff fee9 	bl	8010978 <SUBGRF_WriteCommand>
}
 8010ba6:	bd08      	pop	{r3, pc}

08010ba8 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 8010ba8:	b500      	push	{lr}
 8010baa:	b083      	sub	sp, #12
 8010bac:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8010bb0:	2201      	movs	r2, #1
 8010bb2:	f10d 0107 	add.w	r1, sp, #7
 8010bb6:	209f      	movs	r0, #159	@ 0x9f
 8010bb8:	f7ff fede 	bl	8010978 <SUBGRF_WriteCommand>
}
 8010bbc:	b003      	add	sp, #12
 8010bbe:	f85d fb04 	ldr.w	pc, [sp], #4

08010bc2 <SUBGRF_SetLoRaSymbNumTimeout>:
{
 8010bc2:	b500      	push	{lr}
 8010bc4:	b083      	sub	sp, #12
 8010bc6:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8010bca:	2201      	movs	r2, #1
 8010bcc:	f10d 0107 	add.w	r1, sp, #7
 8010bd0:	20a0      	movs	r0, #160	@ 0xa0
 8010bd2:	f7ff fed1 	bl	8010978 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 8010bd6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010bda:	2b3f      	cmp	r3, #63	@ 0x3f
 8010bdc:	d90f      	bls.n	8010bfe <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 8010bde:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 8010be0:	2200      	movs	r2, #0
        while( mant > 31 )
 8010be2:	e002      	b.n	8010bea <SUBGRF_SetLoRaSymbNumTimeout+0x28>
            mant >>= 2;
 8010be4:	089b      	lsrs	r3, r3, #2
            exp++;
 8010be6:	3201      	adds	r2, #1
 8010be8:	b2d2      	uxtb	r2, r2
        while( mant > 31 )
 8010bea:	2b1f      	cmp	r3, #31
 8010bec:	d8fa      	bhi.n	8010be4 <SUBGRF_SetLoRaSymbNumTimeout+0x22>
        reg = exp + ( mant << 3 );
 8010bee:	00d9      	lsls	r1, r3, #3
 8010bf0:	b2c9      	uxtb	r1, r1
 8010bf2:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8010bf4:	b2c9      	uxtb	r1, r1
 8010bf6:	f240 7006 	movw	r0, #1798	@ 0x706
 8010bfa:	f7ff fdf7 	bl	80107ec <SUBGRF_WriteRegister>
}
 8010bfe:	b003      	add	sp, #12
 8010c00:	f85d fb04 	ldr.w	pc, [sp], #4

08010c04 <SUBGRF_SetRegulatorMode>:
{
 8010c04:	b500      	push	{lr}
 8010c06:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8010c08:	f7f1 fea4 	bl	8002954 <RBI_IsDCDC>
 8010c0c:	2801      	cmp	r0, #1
 8010c0e:	d00b      	beq.n	8010c28 <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 8010c10:	2300      	movs	r3, #0
 8010c12:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8010c16:	2201      	movs	r2, #1
 8010c18:	f10d 0107 	add.w	r1, sp, #7
 8010c1c:	2096      	movs	r0, #150	@ 0x96
 8010c1e:	f7ff feab 	bl	8010978 <SUBGRF_WriteCommand>
}
 8010c22:	b003      	add	sp, #12
 8010c24:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 8010c28:	2301      	movs	r3, #1
 8010c2a:	f88d 3007 	strb.w	r3, [sp, #7]
 8010c2e:	e7f2      	b.n	8010c16 <SUBGRF_SetRegulatorMode+0x12>

08010c30 <SUBGRF_Calibrate>:
{
 8010c30:	b500      	push	{lr}
 8010c32:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8010c34:	f000 0340 	and.w	r3, r0, #64	@ 0x40
 8010c38:	f000 0220 	and.w	r2, r0, #32
 8010c3c:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8010c3e:	f000 0210 	and.w	r2, r0, #16
 8010c42:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8010c44:	f000 0208 	and.w	r2, r0, #8
 8010c48:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8010c4a:	f000 0204 	and.w	r2, r0, #4
 8010c4e:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8010c50:	f000 0202 	and.w	r2, r0, #2
 8010c54:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8010c56:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8010c5a:	4303      	orrs	r3, r0
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8010c5c:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8010c60:	2201      	movs	r2, #1
 8010c62:	f10d 0107 	add.w	r1, sp, #7
 8010c66:	2089      	movs	r0, #137	@ 0x89
 8010c68:	f7ff fe86 	bl	8010978 <SUBGRF_WriteCommand>
}
 8010c6c:	b003      	add	sp, #12
 8010c6e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08010c74 <SUBGRF_CalibrateImage>:
{
 8010c74:	b500      	push	{lr}
 8010c76:	b083      	sub	sp, #12
    if( freq > 900000000 )
 8010c78:	4b1f      	ldr	r3, [pc, #124]	@ (8010cf8 <SUBGRF_CalibrateImage+0x84>)
 8010c7a:	4298      	cmp	r0, r3
 8010c7c:	d90d      	bls.n	8010c9a <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 8010c7e:	23e1      	movs	r3, #225	@ 0xe1
 8010c80:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 8010c84:	23e9      	movs	r3, #233	@ 0xe9
 8010c86:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8010c8a:	2202      	movs	r2, #2
 8010c8c:	a901      	add	r1, sp, #4
 8010c8e:	2098      	movs	r0, #152	@ 0x98
 8010c90:	f7ff fe72 	bl	8010978 <SUBGRF_WriteCommand>
}
 8010c94:	b003      	add	sp, #12
 8010c96:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 8010c9a:	4b18      	ldr	r3, [pc, #96]	@ (8010cfc <SUBGRF_CalibrateImage+0x88>)
 8010c9c:	4298      	cmp	r0, r3
 8010c9e:	d906      	bls.n	8010cae <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 8010ca0:	23d7      	movs	r3, #215	@ 0xd7
 8010ca2:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 8010ca6:	23db      	movs	r3, #219	@ 0xdb
 8010ca8:	f88d 3005 	strb.w	r3, [sp, #5]
 8010cac:	e7ed      	b.n	8010c8a <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 8010cae:	4b14      	ldr	r3, [pc, #80]	@ (8010d00 <SUBGRF_CalibrateImage+0x8c>)
 8010cb0:	4298      	cmp	r0, r3
 8010cb2:	d906      	bls.n	8010cc2 <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 8010cb4:	23c1      	movs	r3, #193	@ 0xc1
 8010cb6:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 8010cba:	23c5      	movs	r3, #197	@ 0xc5
 8010cbc:	f88d 3005 	strb.w	r3, [sp, #5]
 8010cc0:	e7e3      	b.n	8010c8a <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 8010cc2:	4b10      	ldr	r3, [pc, #64]	@ (8010d04 <SUBGRF_CalibrateImage+0x90>)
 8010cc4:	4298      	cmp	r0, r3
 8010cc6:	d906      	bls.n	8010cd6 <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 8010cc8:	2375      	movs	r3, #117	@ 0x75
 8010cca:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 8010cce:	2381      	movs	r3, #129	@ 0x81
 8010cd0:	f88d 3005 	strb.w	r3, [sp, #5]
 8010cd4:	e7d9      	b.n	8010c8a <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 8010cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8010d08 <SUBGRF_CalibrateImage+0x94>)
 8010cd8:	4298      	cmp	r0, r3
 8010cda:	d906      	bls.n	8010cea <SUBGRF_CalibrateImage+0x76>
        calFreq[0] = 0x6B;
 8010cdc:	236b      	movs	r3, #107	@ 0x6b
 8010cde:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 8010ce2:	236f      	movs	r3, #111	@ 0x6f
 8010ce4:	f88d 3005 	strb.w	r3, [sp, #5]
 8010ce8:	e7cf      	b.n	8010c8a <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x29;
 8010cea:	2329      	movs	r3, #41	@ 0x29
 8010cec:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x2B ;
 8010cf0:	232b      	movs	r3, #43	@ 0x2b
 8010cf2:	f88d 3005 	strb.w	r3, [sp, #5]
 8010cf6:	e7c8      	b.n	8010c8a <SUBGRF_CalibrateImage+0x16>
 8010cf8:	35a4e900 	.word	0x35a4e900
 8010cfc:	32a9f880 	.word	0x32a9f880
 8010d00:	2de54480 	.word	0x2de54480
 8010d04:	1b6b0b00 	.word	0x1b6b0b00
 8010d08:	1954fc40 	.word	0x1954fc40

08010d0c <SUBGRF_SetPaConfig>:
{
 8010d0c:	b500      	push	{lr}
 8010d0e:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 8010d10:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 8010d14:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 8010d18:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 8010d1c:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8010d20:	2204      	movs	r2, #4
 8010d22:	eb0d 0102 	add.w	r1, sp, r2
 8010d26:	2095      	movs	r0, #149	@ 0x95
 8010d28:	f7ff fe26 	bl	8010978 <SUBGRF_WriteCommand>
}
 8010d2c:	b003      	add	sp, #12
 8010d2e:	f85d fb04 	ldr.w	pc, [sp], #4

08010d32 <SUBGRF_SetDioIrqParams>:
{
 8010d32:	b500      	push	{lr}
 8010d34:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8010d36:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 8010d3a:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8010d3e:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8010d42:	0a08      	lsrs	r0, r1, #8
 8010d44:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8010d48:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8010d4c:	0a11      	lsrs	r1, r2, #8
 8010d4e:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8010d52:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8010d56:	0a1a      	lsrs	r2, r3, #8
 8010d58:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8010d5c:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8010d60:	2208      	movs	r2, #8
 8010d62:	4669      	mov	r1, sp
 8010d64:	4610      	mov	r0, r2
 8010d66:	f7ff fe07 	bl	8010978 <SUBGRF_WriteCommand>
}
 8010d6a:	b003      	add	sp, #12
 8010d6c:	f85d fb04 	ldr.w	pc, [sp], #4

08010d70 <SUBGRF_SetTcxoMode>:
{
 8010d70:	b500      	push	{lr}
 8010d72:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 8010d74:	f000 0007 	and.w	r0, r0, #7
 8010d78:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8010d7c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8010d80:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8010d84:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8010d88:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8010d8c:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8010d90:	2204      	movs	r2, #4
 8010d92:	eb0d 0102 	add.w	r1, sp, r2
 8010d96:	2097      	movs	r0, #151	@ 0x97
 8010d98:	f7ff fdee 	bl	8010978 <SUBGRF_WriteCommand>
}
 8010d9c:	b003      	add	sp, #12
 8010d9e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08010da4 <SUBGRF_Init>:
{
 8010da4:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 8010da6:	b108      	cbz	r0, 8010dac <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 8010da8:	4a18      	ldr	r2, [pc, #96]	@ (8010e0c <SUBGRF_Init+0x68>)
 8010daa:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 8010dac:	f7f0 fcf6 	bl	800179c <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8010db0:	2002      	movs	r0, #2
 8010db2:	f7ff fd3b 	bl	801082c <Radio_SMPS_Set>
    ImageCalibrated = false;
 8010db6:	2000      	movs	r0, #0
 8010db8:	4b15      	ldr	r3, [pc, #84]	@ (8010e10 <SUBGRF_Init+0x6c>)
 8010dba:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 8010dbc:	f7ff fe0c 	bl	80109d8 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 8010dc0:	f7f1 fdc4 	bl	800294c <RBI_IsTCXO>
 8010dc4:	2801      	cmp	r0, #1
 8010dc6:	d014      	beq.n	8010df2 <SUBGRF_Init+0x4e>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8010dc8:	2120      	movs	r1, #32
 8010dca:	f640 1011 	movw	r0, #2321	@ 0x911
 8010dce:	f7ff fd0d 	bl	80107ec <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8010dd2:	2120      	movs	r1, #32
 8010dd4:	f640 1012 	movw	r0, #2322	@ 0x912
 8010dd8:	f7ff fd08 	bl	80107ec <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8010ddc:	210e      	movs	r1, #14
 8010dde:	f640 101f 	movw	r0, #2335	@ 0x91f
 8010de2:	f7ff fd03 	bl	80107ec <SUBGRF_WriteRegister>
    RBI_Init();
 8010de6:	f7f1 fda5 	bl	8002934 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 8010dea:	4b0a      	ldr	r3, [pc, #40]	@ (8010e14 <SUBGRF_Init+0x70>)
 8010dec:	2201      	movs	r2, #1
 8010dee:	701a      	strb	r2, [r3, #0]
}
 8010df0:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8010df2:	2140      	movs	r1, #64	@ 0x40
 8010df4:	f7ff ffbc 	bl	8010d70 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8010df8:	2100      	movs	r1, #0
 8010dfa:	f640 1011 	movw	r0, #2321	@ 0x911
 8010dfe:	f7ff fcf5 	bl	80107ec <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 8010e02:	f04f 007f 	mov.w	r0, #127	@ 0x7f
 8010e06:	f7ff ff13 	bl	8010c30 <SUBGRF_Calibrate>
 8010e0a:	e7e7      	b.n	8010ddc <SUBGRF_Init+0x38>
 8010e0c:	20001024 	.word	0x20001024
 8010e10:	20001028 	.word	0x20001028
 8010e14:	20001032 	.word	0x20001032

08010e18 <SUBGRF_SetRfFrequency>:
{
 8010e18:	b510      	push	{r4, lr}
 8010e1a:	b082      	sub	sp, #8
 8010e1c:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 8010e1e:	4b12      	ldr	r3, [pc, #72]	@ (8010e68 <SUBGRF_SetRfFrequency+0x50>)
 8010e20:	781b      	ldrb	r3, [r3, #0]
 8010e22:	b1d3      	cbz	r3, 8010e5a <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8010e24:	4a11      	ldr	r2, [pc, #68]	@ (8010e6c <SUBGRF_SetRfFrequency+0x54>)
 8010e26:	2300      	movs	r3, #0
 8010e28:	0660      	lsls	r0, r4, #25
 8010e2a:	09e1      	lsrs	r1, r4, #7
 8010e2c:	f7ef febc 	bl	8000ba8 <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8010e30:	0e03      	lsrs	r3, r0, #24
 8010e32:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8010e36:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010e3a:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8010e3e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010e42:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8010e46:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8010e4a:	2204      	movs	r2, #4
 8010e4c:	eb0d 0102 	add.w	r1, sp, r2
 8010e50:	2086      	movs	r0, #134	@ 0x86
 8010e52:	f7ff fd91 	bl	8010978 <SUBGRF_WriteCommand>
}
 8010e56:	b002      	add	sp, #8
 8010e58:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 8010e5a:	f7ff ff0b 	bl	8010c74 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8010e5e:	4b02      	ldr	r3, [pc, #8]	@ (8010e68 <SUBGRF_SetRfFrequency+0x50>)
 8010e60:	2201      	movs	r2, #1
 8010e62:	701a      	strb	r2, [r3, #0]
 8010e64:	e7de      	b.n	8010e24 <SUBGRF_SetRfFrequency+0xc>
 8010e66:	bf00      	nop
 8010e68:	20001028 	.word	0x20001028
 8010e6c:	01e84800 	.word	0x01e84800

08010e70 <SUBGRF_SetPacketType>:
{
 8010e70:	b500      	push	{lr}
 8010e72:	b083      	sub	sp, #12
 8010e74:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 8010e78:	b2c3      	uxtb	r3, r0
 8010e7a:	4a09      	ldr	r2, [pc, #36]	@ (8010ea0 <SUBGRF_SetPacketType+0x30>)
 8010e7c:	7013      	strb	r3, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 8010e7e:	b143      	cbz	r3, 8010e92 <SUBGRF_SetPacketType+0x22>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8010e80:	2201      	movs	r2, #1
 8010e82:	f10d 0107 	add.w	r1, sp, #7
 8010e86:	208a      	movs	r0, #138	@ 0x8a
 8010e88:	f7ff fd76 	bl	8010978 <SUBGRF_WriteCommand>
}
 8010e8c:	b003      	add	sp, #12
 8010e8e:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8010e92:	2100      	movs	r1, #0
 8010e94:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8010e98:	f7ff fca8 	bl	80107ec <SUBGRF_WriteRegister>
 8010e9c:	e7f0      	b.n	8010e80 <SUBGRF_SetPacketType+0x10>
 8010e9e:	bf00      	nop
 8010ea0:	20001031 	.word	0x20001031

08010ea4 <SUBGRF_SetTxParams>:
{
 8010ea4:	b570      	push	{r4, r5, r6, lr}
 8010ea6:	b082      	sub	sp, #8
 8010ea8:	460c      	mov	r4, r1
 8010eaa:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 8010eac:	2801      	cmp	r0, #1
 8010eae:	d035      	beq.n	8010f1c <SUBGRF_SetTxParams+0x78>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8010eb0:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8010eb4:	f7ff fcaa 	bl	801080c <SUBGRF_ReadRegister>
 8010eb8:	f040 011e 	orr.w	r1, r0, #30
 8010ebc:	b2c9      	uxtb	r1, r1
 8010ebe:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8010ec2:	f7ff fc93 	bl	80107ec <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8010ec6:	2001      	movs	r0, #1
 8010ec8:	f7f1 fd48 	bl	800295c <RBI_GetRFOMaxPowerConfig>
 8010ecc:	4605      	mov	r5, r0
        if (power > max_power)
 8010ece:	4284      	cmp	r4, r0
 8010ed0:	dd00      	ble.n	8010ed4 <SUBGRF_SetTxParams+0x30>
            power = max_power;
 8010ed2:	b244      	sxtb	r4, r0
        if (max_power == 20)
 8010ed4:	2d14      	cmp	r5, #20
 8010ed6:	d054      	beq.n	8010f82 <SUBGRF_SetTxParams+0xde>
        else if (max_power == 17)
 8010ed8:	2d11      	cmp	r5, #17
 8010eda:	d05c      	beq.n	8010f96 <SUBGRF_SetTxParams+0xf2>
        else if (max_power == 14)
 8010edc:	2d0e      	cmp	r5, #14
 8010ede:	d064      	beq.n	8010faa <SUBGRF_SetTxParams+0x106>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8010ee0:	2301      	movs	r3, #1
 8010ee2:	2200      	movs	r2, #0
 8010ee4:	2107      	movs	r1, #7
 8010ee6:	2004      	movs	r0, #4
 8010ee8:	f7ff ff10 	bl	8010d0c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8010eec:	1b64      	subs	r4, r4, r5
 8010eee:	3416      	adds	r4, #22
 8010ef0:	b265      	sxtb	r5, r4
        if (power < -9)
 8010ef2:	f115 0f09 	cmn.w	r5, #9
 8010ef6:	da01      	bge.n	8010efc <SUBGRF_SetTxParams+0x58>
            power = -9;
 8010ef8:	f06f 0508 	mvn.w	r5, #8
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8010efc:	2138      	movs	r1, #56	@ 0x38
 8010efe:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8010f02:	f7ff fc73 	bl	80107ec <SUBGRF_WriteRegister>
    buf[0] = power;
 8010f06:	f88d 5004 	strb.w	r5, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 8010f0a:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8010f0e:	2202      	movs	r2, #2
 8010f10:	a901      	add	r1, sp, #4
 8010f12:	208e      	movs	r0, #142	@ 0x8e
 8010f14:	f7ff fd30 	bl	8010978 <SUBGRF_WriteCommand>
}
 8010f18:	b002      	add	sp, #8
 8010f1a:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8010f1c:	2000      	movs	r0, #0
 8010f1e:	f7f1 fd1d 	bl	800295c <RBI_GetRFOMaxPowerConfig>
 8010f22:	4605      	mov	r5, r0
        if (power >  max_power)
 8010f24:	4284      	cmp	r4, r0
 8010f26:	dd00      	ble.n	8010f2a <SUBGRF_SetTxParams+0x86>
          power = max_power;
 8010f28:	b244      	sxtb	r4, r0
        if (max_power == 14)
 8010f2a:	2d0e      	cmp	r5, #14
 8010f2c:	d015      	beq.n	8010f5a <SUBGRF_SetTxParams+0xb6>
        else if (max_power == 10)
 8010f2e:	2d0a      	cmp	r5, #10
 8010f30:	d01d      	beq.n	8010f6e <SUBGRF_SetTxParams+0xca>
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8010f32:	2301      	movs	r3, #1
 8010f34:	461a      	mov	r2, r3
 8010f36:	2100      	movs	r1, #0
 8010f38:	2007      	movs	r0, #7
 8010f3a:	f7ff fee7 	bl	8010d0c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8010f3e:	1b65      	subs	r5, r4, r5
 8010f40:	350e      	adds	r5, #14
 8010f42:	b26d      	sxtb	r5, r5
        if (power < -17)
 8010f44:	f115 0f11 	cmn.w	r5, #17
 8010f48:	da01      	bge.n	8010f4e <SUBGRF_SetTxParams+0xaa>
            power = -17;
 8010f4a:	f06f 0510 	mvn.w	r5, #16
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8010f4e:	2118      	movs	r1, #24
 8010f50:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8010f54:	f7ff fc4a 	bl	80107ec <SUBGRF_WriteRegister>
 8010f58:	e7d5      	b.n	8010f06 <SUBGRF_SetTxParams+0x62>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8010f5a:	2301      	movs	r3, #1
 8010f5c:	461a      	mov	r2, r3
 8010f5e:	2100      	movs	r1, #0
 8010f60:	2004      	movs	r0, #4
 8010f62:	f7ff fed3 	bl	8010d0c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8010f66:	1b65      	subs	r5, r4, r5
 8010f68:	350e      	adds	r5, #14
 8010f6a:	b26d      	sxtb	r5, r5
 8010f6c:	e7ea      	b.n	8010f44 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8010f6e:	2301      	movs	r3, #1
 8010f70:	461a      	mov	r2, r3
 8010f72:	2100      	movs	r1, #0
 8010f74:	4618      	mov	r0, r3
 8010f76:	f7ff fec9 	bl	8010d0c <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8010f7a:	1b65      	subs	r5, r4, r5
 8010f7c:	350d      	adds	r5, #13
 8010f7e:	b26d      	sxtb	r5, r5
 8010f80:	e7e0      	b.n	8010f44 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8010f82:	2301      	movs	r3, #1
 8010f84:	2200      	movs	r2, #0
 8010f86:	2105      	movs	r1, #5
 8010f88:	2003      	movs	r0, #3
 8010f8a:	f7ff febf 	bl	8010d0c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8010f8e:	1b65      	subs	r5, r4, r5
 8010f90:	3516      	adds	r5, #22
 8010f92:	b26d      	sxtb	r5, r5
 8010f94:	e7ad      	b.n	8010ef2 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8010f96:	2301      	movs	r3, #1
 8010f98:	2200      	movs	r2, #0
 8010f9a:	2103      	movs	r1, #3
 8010f9c:	2002      	movs	r0, #2
 8010f9e:	f7ff feb5 	bl	8010d0c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8010fa2:	1b65      	subs	r5, r4, r5
 8010fa4:	3516      	adds	r5, #22
 8010fa6:	b26d      	sxtb	r5, r5
 8010fa8:	e7a3      	b.n	8010ef2 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8010faa:	2301      	movs	r3, #1
 8010fac:	2200      	movs	r2, #0
 8010fae:	2102      	movs	r1, #2
 8010fb0:	4608      	mov	r0, r1
 8010fb2:	f7ff feab 	bl	8010d0c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8010fb6:	1b65      	subs	r5, r4, r5
 8010fb8:	350e      	adds	r5, #14
 8010fba:	b26d      	sxtb	r5, r5
 8010fbc:	e799      	b.n	8010ef2 <SUBGRF_SetTxParams+0x4e>
	...

08010fc0 <SUBGRF_SetModulationParams>:
{
 8010fc0:	b510      	push	{r4, lr}
 8010fc2:	b082      	sub	sp, #8
 8010fc4:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	9300      	str	r3, [sp, #0]
 8010fca:	9301      	str	r3, [sp, #4]
    if( PacketType != modulationParams->PacketType )
 8010fcc:	7800      	ldrb	r0, [r0, #0]
 8010fce:	4b3a      	ldr	r3, [pc, #232]	@ (80110b8 <SUBGRF_SetModulationParams+0xf8>)
 8010fd0:	781b      	ldrb	r3, [r3, #0]
 8010fd2:	4298      	cmp	r0, r3
 8010fd4:	d106      	bne.n	8010fe4 <SUBGRF_SetModulationParams+0x24>
    switch( modulationParams->PacketType )
 8010fd6:	7823      	ldrb	r3, [r4, #0]
 8010fd8:	2b03      	cmp	r3, #3
 8010fda:	d82c      	bhi.n	8011036 <SUBGRF_SetModulationParams+0x76>
 8010fdc:	e8df f003 	tbb	[pc, r3]
 8010fe0:	542d4205 	.word	0x542d4205
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8010fe4:	f7ff ff44 	bl	8010e70 <SUBGRF_SetPacketType>
 8010fe8:	e7f5      	b.n	8010fd6 <SUBGRF_SetModulationParams+0x16>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8010fea:	6862      	ldr	r2, [r4, #4]
 8010fec:	4b33      	ldr	r3, [pc, #204]	@ (80110bc <SUBGRF_SetModulationParams+0xfc>)
 8010fee:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8010ff2:	0c1a      	lsrs	r2, r3, #16
 8010ff4:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8010ff8:	0a1a      	lsrs	r2, r3, #8
 8010ffa:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8010ffe:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8011002:	7b23      	ldrb	r3, [r4, #12]
 8011004:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8011008:	7b63      	ldrb	r3, [r4, #13]
 801100a:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801100e:	68a1      	ldr	r1, [r4, #8]
 8011010:	4a2b      	ldr	r2, [pc, #172]	@ (80110c0 <SUBGRF_SetModulationParams+0x100>)
 8011012:	2300      	movs	r3, #0
 8011014:	0648      	lsls	r0, r1, #25
 8011016:	09c9      	lsrs	r1, r1, #7
 8011018:	f7ef fdc6 	bl	8000ba8 <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801101c:	0c03      	lsrs	r3, r0, #16
 801101e:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8011022:	0a03      	lsrs	r3, r0, #8
 8011024:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 8011028:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801102c:	2208      	movs	r2, #8
 801102e:	4669      	mov	r1, sp
 8011030:	208b      	movs	r0, #139	@ 0x8b
 8011032:	f7ff fca1 	bl	8010978 <SUBGRF_WriteCommand>
}
 8011036:	b002      	add	sp, #8
 8011038:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801103a:	6922      	ldr	r2, [r4, #16]
 801103c:	4b1f      	ldr	r3, [pc, #124]	@ (80110bc <SUBGRF_SetModulationParams+0xfc>)
 801103e:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8011042:	0c1a      	lsrs	r2, r3, #16
 8011044:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8011048:	0a1a      	lsrs	r2, r3, #8
 801104a:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 801104e:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8011052:	7d23      	ldrb	r3, [r4, #20]
 8011054:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8011058:	2204      	movs	r2, #4
 801105a:	4669      	mov	r1, sp
 801105c:	208b      	movs	r0, #139	@ 0x8b
 801105e:	f7ff fc8b 	bl	8010978 <SUBGRF_WriteCommand>
        break;
 8011062:	e7e8      	b.n	8011036 <SUBGRF_SetModulationParams+0x76>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8011064:	7e23      	ldrb	r3, [r4, #24]
 8011066:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801106a:	7e63      	ldrb	r3, [r4, #25]
 801106c:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8011070:	7ea3      	ldrb	r3, [r4, #26]
 8011072:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8011076:	7ee3      	ldrb	r3, [r4, #27]
 8011078:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801107c:	2204      	movs	r2, #4
 801107e:	4669      	mov	r1, sp
 8011080:	208b      	movs	r0, #139	@ 0x8b
 8011082:	f7ff fc79 	bl	8010978 <SUBGRF_WriteCommand>
        break;
 8011086:	e7d6      	b.n	8011036 <SUBGRF_SetModulationParams+0x76>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8011088:	6862      	ldr	r2, [r4, #4]
 801108a:	4b0c      	ldr	r3, [pc, #48]	@ (80110bc <SUBGRF_SetModulationParams+0xfc>)
 801108c:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8011090:	0c1a      	lsrs	r2, r3, #16
 8011092:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8011096:	0a1a      	lsrs	r2, r3, #8
 8011098:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 801109c:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80110a0:	7b23      	ldrb	r3, [r4, #12]
 80110a2:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80110a6:	7b63      	ldrb	r3, [r4, #13]
 80110a8:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80110ac:	2205      	movs	r2, #5
 80110ae:	4669      	mov	r1, sp
 80110b0:	208b      	movs	r0, #139	@ 0x8b
 80110b2:	f7ff fc61 	bl	8010978 <SUBGRF_WriteCommand>
}
 80110b6:	e7be      	b.n	8011036 <SUBGRF_SetModulationParams+0x76>
 80110b8:	20001031 	.word	0x20001031
 80110bc:	3d090000 	.word	0x3d090000
 80110c0:	01e84800 	.word	0x01e84800

080110c4 <SUBGRF_SetPacketParams>:
{
 80110c4:	b510      	push	{r4, lr}
 80110c6:	b084      	sub	sp, #16
 80110c8:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80110ca:	2300      	movs	r3, #0
 80110cc:	9301      	str	r3, [sp, #4]
 80110ce:	9302      	str	r3, [sp, #8]
 80110d0:	f88d 300c 	strb.w	r3, [sp, #12]
    if( PacketType != packetParams->PacketType )
 80110d4:	7800      	ldrb	r0, [r0, #0]
 80110d6:	4b31      	ldr	r3, [pc, #196]	@ (801119c <SUBGRF_SetPacketParams+0xd8>)
 80110d8:	781b      	ldrb	r3, [r3, #0]
 80110da:	4298      	cmp	r0, r3
 80110dc:	d106      	bne.n	80110ec <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 80110de:	7823      	ldrb	r3, [r4, #0]
 80110e0:	2b03      	cmp	r3, #3
 80110e2:	d82a      	bhi.n	801113a <SUBGRF_SetPacketParams+0x76>
 80110e4:	e8df f003 	tbb	[pc, r3]
 80110e8:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 80110ec:	f7ff fec0 	bl	8010e70 <SUBGRF_SetPacketType>
 80110f0:	e7f5      	b.n	80110de <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 80110f2:	7a63      	ldrb	r3, [r4, #9]
 80110f4:	2bf1      	cmp	r3, #241	@ 0xf1
 80110f6:	d022      	beq.n	801113e <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 80110f8:	2bf2      	cmp	r3, #242	@ 0xf2
 80110fa:	d02a      	beq.n	8011152 <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 80110fc:	8862      	ldrh	r2, [r4, #2]
 80110fe:	0a11      	lsrs	r1, r2, #8
 8011100:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8011104:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8011108:	7922      	ldrb	r2, [r4, #4]
 801110a:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801110e:	7962      	ldrb	r2, [r4, #5]
 8011110:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8011114:	79a2      	ldrb	r2, [r4, #6]
 8011116:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801111a:	79e2      	ldrb	r2, [r4, #7]
 801111c:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8011120:	7a22      	ldrb	r2, [r4, #8]
 8011122:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 8011126:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801112a:	7aa3      	ldrb	r3, [r4, #10]
 801112c:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 8011130:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8011132:	a901      	add	r1, sp, #4
 8011134:	208c      	movs	r0, #140	@ 0x8c
 8011136:	f7ff fc1f 	bl	8010978 <SUBGRF_WriteCommand>
}
 801113a:	b004      	add	sp, #16
 801113c:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801113e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8011142:	f7ff fbb8 	bl	80108b6 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8011146:	f248 0005 	movw	r0, #32773	@ 0x8005
 801114a:	f7ff fbc8 	bl	80108de <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801114e:	2302      	movs	r3, #2
 8011150:	e7d4      	b.n	80110fc <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8011152:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 8011156:	f7ff fbae 	bl	80108b6 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801115a:	f241 0021 	movw	r0, #4129	@ 0x1021
 801115e:	f7ff fbbe 	bl	80108de <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8011162:	2306      	movs	r3, #6
 8011164:	e7ca      	b.n	80110fc <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8011166:	7b23      	ldrb	r3, [r4, #12]
 8011168:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 801116c:	2201      	movs	r2, #1
        break;
 801116e:	e7e0      	b.n	8011132 <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8011170:	89e3      	ldrh	r3, [r4, #14]
 8011172:	0a1a      	lsrs	r2, r3, #8
 8011174:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8011178:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801117c:	7c23      	ldrb	r3, [r4, #16]
 801117e:	4a08      	ldr	r2, [pc, #32]	@ (80111a0 <SUBGRF_SetPacketParams+0xdc>)
 8011180:	7013      	strb	r3, [r2, #0]
 8011182:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8011186:	7c63      	ldrb	r3, [r4, #17]
 8011188:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801118c:	7ca3      	ldrb	r3, [r4, #18]
 801118e:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8011192:	7ce3      	ldrb	r3, [r4, #19]
 8011194:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 8011198:	2206      	movs	r2, #6
        break;
 801119a:	e7ca      	b.n	8011132 <SUBGRF_SetPacketParams+0x6e>
 801119c:	20001031 	.word	0x20001031
 80111a0:	20001030 	.word	0x20001030

080111a4 <SUBGRF_SetBufferBaseAddress>:
{
 80111a4:	b500      	push	{lr}
 80111a6:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 80111a8:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 80111ac:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 80111b0:	2202      	movs	r2, #2
 80111b2:	a901      	add	r1, sp, #4
 80111b4:	208f      	movs	r0, #143	@ 0x8f
 80111b6:	f7ff fbdf 	bl	8010978 <SUBGRF_WriteCommand>
}
 80111ba:	b003      	add	sp, #12
 80111bc:	f85d fb04 	ldr.w	pc, [sp], #4

080111c0 <SUBGRF_ReadCommand>:
{
 80111c0:	b510      	push	{r4, lr}
 80111c2:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80111c4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80111c8:	b672      	cpsid	i
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 80111ca:	460a      	mov	r2, r1
 80111cc:	4601      	mov	r1, r0
 80111ce:	4803      	ldr	r0, [pc, #12]	@ (80111dc <SUBGRF_ReadCommand+0x1c>)
 80111d0:	f7f4 fb6c 	bl	80058ac <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80111d4:	f384 8810 	msr	PRIMASK, r4
}
 80111d8:	bd10      	pop	{r4, pc}
 80111da:	bf00      	nop
 80111dc:	200001c4 	.word	0x200001c4

080111e0 <SUBGRF_GetRssiInst>:
{
 80111e0:	b500      	push	{lr}
 80111e2:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 80111e4:	2201      	movs	r2, #1
 80111e6:	a901      	add	r1, sp, #4
 80111e8:	2015      	movs	r0, #21
 80111ea:	f7ff ffe9 	bl	80111c0 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 80111ee:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80111f2:	4240      	negs	r0, r0
}
 80111f4:	1040      	asrs	r0, r0, #1
 80111f6:	b003      	add	sp, #12
 80111f8:	f85d fb04 	ldr.w	pc, [sp], #4

080111fc <SUBGRF_GetRxBufferStatus>:
{
 80111fc:	b530      	push	{r4, r5, lr}
 80111fe:	b083      	sub	sp, #12
 8011200:	4605      	mov	r5, r0
 8011202:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8011204:	2202      	movs	r2, #2
 8011206:	a901      	add	r1, sp, #4
 8011208:	2013      	movs	r0, #19
 801120a:	f7ff ffd9 	bl	80111c0 <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801120e:	f7ff fae7 	bl	80107e0 <SUBGRF_GetPacketType>
 8011212:	2801      	cmp	r0, #1
 8011214:	d007      	beq.n	8011226 <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 8011216:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801121a:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 801121c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011220:	7023      	strb	r3, [r4, #0]
}
 8011222:	b003      	add	sp, #12
 8011224:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8011226:	4b05      	ldr	r3, [pc, #20]	@ (801123c <SUBGRF_GetRxBufferStatus+0x40>)
 8011228:	781b      	ldrb	r3, [r3, #0]
 801122a:	b2db      	uxtb	r3, r3
 801122c:	2b01      	cmp	r3, #1
 801122e:	d1f2      	bne.n	8011216 <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8011230:	f240 7002 	movw	r0, #1794	@ 0x702
 8011234:	f7ff faea 	bl	801080c <SUBGRF_ReadRegister>
 8011238:	7028      	strb	r0, [r5, #0]
 801123a:	e7ef      	b.n	801121c <SUBGRF_GetRxBufferStatus+0x20>
 801123c:	20001030 	.word	0x20001030

08011240 <SUBGRF_GetPayload>:
{
 8011240:	b570      	push	{r4, r5, r6, lr}
 8011242:	b082      	sub	sp, #8
 8011244:	4606      	mov	r6, r0
 8011246:	460c      	mov	r4, r1
 8011248:	4615      	mov	r5, r2
    uint8_t offset = 0;
 801124a:	2300      	movs	r3, #0
 801124c:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 8011250:	f10d 0107 	add.w	r1, sp, #7
 8011254:	4620      	mov	r0, r4
 8011256:	f7ff ffd1 	bl	80111fc <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801125a:	7822      	ldrb	r2, [r4, #0]
 801125c:	42aa      	cmp	r2, r5
 801125e:	d902      	bls.n	8011266 <SUBGRF_GetPayload+0x26>
        return 1;
 8011260:	2001      	movs	r0, #1
}
 8011262:	b002      	add	sp, #8
 8011264:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8011266:	4631      	mov	r1, r6
 8011268:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801126c:	f7ff fb74 	bl	8010958 <SUBGRF_ReadBuffer>
    return 0;
 8011270:	2000      	movs	r0, #0
 8011272:	e7f6      	b.n	8011262 <SUBGRF_GetPayload+0x22>

08011274 <SUBGRF_GetPacketStatus>:
{
 8011274:	b510      	push	{r4, lr}
 8011276:	b082      	sub	sp, #8
 8011278:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801127a:	2203      	movs	r2, #3
 801127c:	a901      	add	r1, sp, #4
 801127e:	2014      	movs	r0, #20
 8011280:	f7ff ff9e 	bl	80111c0 <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 8011284:	f7ff faac 	bl	80107e0 <SUBGRF_GetPacketType>
 8011288:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 801128a:	b148      	cbz	r0, 80112a0 <SUBGRF_GetPacketStatus+0x2c>
 801128c:	2801      	cmp	r0, #1
 801128e:	d018      	beq.n	80112c2 <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8011290:	2214      	movs	r2, #20
 8011292:	2100      	movs	r1, #0
 8011294:	4620      	mov	r0, r4
 8011296:	f000 fb20 	bl	80118da <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801129a:	230f      	movs	r3, #15
 801129c:	7023      	strb	r3, [r4, #0]
}
 801129e:	e00e      	b.n	80112be <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 80112a0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80112a4:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 80112a6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80112aa:	425b      	negs	r3, r3
 80112ac:	105b      	asrs	r3, r3, #1
 80112ae:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 80112b0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80112b4:	425b      	negs	r3, r3
 80112b6:	105b      	asrs	r3, r3, #1
 80112b8:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 80112ba:	2300      	movs	r3, #0
 80112bc:	60a3      	str	r3, [r4, #8]
}
 80112be:	b002      	add	sp, #8
 80112c0:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 80112c2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80112c6:	425b      	negs	r3, r3
 80112c8:	105b      	asrs	r3, r3, #1
 80112ca:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 80112cc:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 80112d0:	3302      	adds	r3, #2
 80112d2:	109b      	asrs	r3, r3, #2
 80112d4:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 80112d6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80112da:	425b      	negs	r3, r3
 80112dc:	105b      	asrs	r3, r3, #1
 80112de:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 80112e0:	4b01      	ldr	r3, [pc, #4]	@ (80112e8 <SUBGRF_GetPacketStatus+0x74>)
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	6123      	str	r3, [r4, #16]
            break;
 80112e6:	e7ea      	b.n	80112be <SUBGRF_GetPacketStatus+0x4a>
 80112e8:	2000102c 	.word	0x2000102c

080112ec <SUBGRF_SetSwitch>:
{
 80112ec:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 80112ee:	2901      	cmp	r1, #1
 80112f0:	d003      	beq.n	80112fa <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 80112f2:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 80112f4:	f7f1 fb22 	bl	800293c <RBI_ConfigRFSwitch>
}
 80112f8:	bd10      	pop	{r4, pc}
 80112fa:	4604      	mov	r4, r0
 80112fc:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 80112fe:	2c01      	cmp	r4, #1
 8011300:	d003      	beq.n	801130a <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 8011302:	2c02      	cmp	r4, #2
 8011304:	d1f6      	bne.n	80112f4 <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 8011306:	2003      	movs	r0, #3
 8011308:	e7f4      	b.n	80112f4 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801130a:	2004      	movs	r0, #4
 801130c:	f7ff fa8e 	bl	801082c <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 8011310:	2002      	movs	r0, #2
 8011312:	e7f6      	b.n	8011302 <SUBGRF_SetSwitch+0x16>

08011314 <SUBGRF_SetRfTxPower>:
{
 8011314:	b538      	push	{r3, r4, r5, lr}
 8011316:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 8011318:	f7f1 fb14 	bl	8002944 <RBI_GetTxConfig>
    switch (TxConfig)
 801131c:	b148      	cbz	r0, 8011332 <SUBGRF_SetRfTxPower+0x1e>
 801131e:	2802      	cmp	r0, #2
 8011320:	d10d      	bne.n	801133e <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 8011322:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8011324:	2202      	movs	r2, #2
 8011326:	4621      	mov	r1, r4
 8011328:	4628      	mov	r0, r5
 801132a:	f7ff fdbb 	bl	8010ea4 <SUBGRF_SetTxParams>
}
 801132e:	4628      	mov	r0, r5
 8011330:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 8011332:	2c0f      	cmp	r4, #15
 8011334:	dc01      	bgt.n	801133a <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 8011336:	2501      	movs	r5, #1
 8011338:	e7f4      	b.n	8011324 <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 801133a:	2502      	movs	r5, #2
 801133c:	e7f2      	b.n	8011324 <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 801133e:	2501      	movs	r5, #1
 8011340:	e7f0      	b.n	8011324 <SUBGRF_SetRfTxPower+0x10>

08011342 <SUBGRF_GetRadioWakeUpTime>:
}
 8011342:	2001      	movs	r0, #1
 8011344:	4770      	bx	lr
	...

08011348 <HAL_SUBGHZ_TxCpltCallback>:
{
 8011348:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801134a:	4b02      	ldr	r3, [pc, #8]	@ (8011354 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	2001      	movs	r0, #1
 8011350:	4798      	blx	r3
}
 8011352:	bd08      	pop	{r3, pc}
 8011354:	20001024 	.word	0x20001024

08011358 <HAL_SUBGHZ_RxCpltCallback>:
{
 8011358:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801135a:	4b02      	ldr	r3, [pc, #8]	@ (8011364 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	2002      	movs	r0, #2
 8011360:	4798      	blx	r3
}
 8011362:	bd08      	pop	{r3, pc}
 8011364:	20001024 	.word	0x20001024

08011368 <HAL_SUBGHZ_CRCErrorCallback>:
{
 8011368:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801136a:	4b02      	ldr	r3, [pc, #8]	@ (8011374 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	2040      	movs	r0, #64	@ 0x40
 8011370:	4798      	blx	r3
}
 8011372:	bd08      	pop	{r3, pc}
 8011374:	20001024 	.word	0x20001024

08011378 <HAL_SUBGHZ_CADStatusCallback>:
{
 8011378:	b508      	push	{r3, lr}
    switch (cadstatus)
 801137a:	b139      	cbz	r1, 801138c <HAL_SUBGHZ_CADStatusCallback+0x14>
 801137c:	2901      	cmp	r1, #1
 801137e:	d109      	bne.n	8011394 <HAL_SUBGHZ_CADStatusCallback+0x1c>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8011380:	4b05      	ldr	r3, [pc, #20]	@ (8011398 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8011388:	4798      	blx	r3
}
 801138a:	e003      	b.n	8011394 <HAL_SUBGHZ_CADStatusCallback+0x1c>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801138c:	4b02      	ldr	r3, [pc, #8]	@ (8011398 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	2080      	movs	r0, #128	@ 0x80
 8011392:	4798      	blx	r3
}
 8011394:	bd08      	pop	{r3, pc}
 8011396:	bf00      	nop
 8011398:	20001024 	.word	0x20001024

0801139c <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 801139c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801139e:	4b03      	ldr	r3, [pc, #12]	@ (80113ac <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80113a6:	4798      	blx	r3
}
 80113a8:	bd08      	pop	{r3, pc}
 80113aa:	bf00      	nop
 80113ac:	20001024 	.word	0x20001024

080113b0 <HAL_SUBGHZ_HeaderErrorCallback>:
{
 80113b0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 80113b2:	4b02      	ldr	r3, [pc, #8]	@ (80113bc <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	2020      	movs	r0, #32
 80113b8:	4798      	blx	r3
}
 80113ba:	bd08      	pop	{r3, pc}
 80113bc:	20001024 	.word	0x20001024

080113c0 <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 80113c0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 80113c2:	4b02      	ldr	r3, [pc, #8]	@ (80113cc <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	2004      	movs	r0, #4
 80113c8:	4798      	blx	r3
}
 80113ca:	bd08      	pop	{r3, pc}
 80113cc:	20001024 	.word	0x20001024

080113d0 <HAL_SUBGHZ_SyncWordValidCallback>:
{
 80113d0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 80113d2:	4b02      	ldr	r3, [pc, #8]	@ (80113dc <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	2008      	movs	r0, #8
 80113d8:	4798      	blx	r3
}
 80113da:	bd08      	pop	{r3, pc}
 80113dc:	20001024 	.word	0x20001024

080113e0 <HAL_SUBGHZ_HeaderValidCallback>:
{
 80113e0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 80113e2:	4b02      	ldr	r3, [pc, #8]	@ (80113ec <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	2010      	movs	r0, #16
 80113e8:	4798      	blx	r3
}
 80113ea:	bd08      	pop	{r3, pc}
 80113ec:	20001024 	.word	0x20001024

080113f0 <HAL_SUBGHZ_LrFhssHopCallback>:
{
 80113f0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 80113f2:	4b03      	ldr	r3, [pc, #12]	@ (8011400 <HAL_SUBGHZ_LrFhssHopCallback+0x10>)
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80113fa:	4798      	blx	r3
}
 80113fc:	bd08      	pop	{r3, pc}
 80113fe:	bf00      	nop
 8011400:	20001024 	.word	0x20001024

08011404 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 8011404:	4601      	mov	r1, r0
 8011406:	b180      	cbz	r0, 801142a <SUBGRF_GetFskBandwidthRegValue+0x26>
    {
        return( 0x1F );
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8011408:	2300      	movs	r3, #0
 801140a:	2b15      	cmp	r3, #21
 801140c:	d80c      	bhi.n	8011428 <SUBGRF_GetFskBandwidthRegValue+0x24>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801140e:	4a08      	ldr	r2, [pc, #32]	@ (8011430 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8011410:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011414:	428a      	cmp	r2, r1
 8011416:	d802      	bhi.n	801141e <SUBGRF_GetFskBandwidthRegValue+0x1a>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8011418:	3301      	adds	r3, #1
 801141a:	b2db      	uxtb	r3, r3
 801141c:	e7f5      	b.n	801140a <SUBGRF_GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 801141e:	4a04      	ldr	r2, [pc, #16]	@ (8011430 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8011420:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011424:	7918      	ldrb	r0, [r3, #4]
 8011426:	4770      	bx	lr
        }
    }
    // ERROR: Value not found
    while( 1 );
 8011428:	e7fe      	b.n	8011428 <SUBGRF_GetFskBandwidthRegValue+0x24>
        return( 0x1F );
 801142a:	201f      	movs	r0, #31
}
 801142c:	4770      	bx	lr
 801142e:	bf00      	nop
 8011430:	080131fc 	.word	0x080131fc

08011434 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8011434:	b570      	push	{r4, r5, r6, lr}
 8011436:	b082      	sub	sp, #8
 8011438:	4605      	mov	r5, r0
 801143a:	460c      	mov	r4, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 801143c:	4b1d      	ldr	r3, [pc, #116]	@ (80114b4 <SUBGRF_GetCFO+0x80>)
 801143e:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8011440:	f640 0007 	movw	r0, #2055	@ 0x807
 8011444:	f7ff f9e2 	bl	801080c <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8011448:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 801144c:	3308      	adds	r3, #8
 801144e:	446b      	add	r3, sp
 8011450:	f813 2c04 	ldrb.w	r2, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 8011454:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 8011458:	3301      	adds	r3, #1
 801145a:	409a      	lsls	r2, r3
 801145c:	4b16      	ldr	r3, [pc, #88]	@ (80114b8 <SUBGRF_GetCFO+0x84>)
 801145e:	fbb3 f3f2 	udiv	r3, r3, r2
  uint32_t cf_osr = cf_fs / bitRate;
 8011462:	fbb3 f0f5 	udiv	r0, r3, r5
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8011466:	2807      	cmp	r0, #7
 8011468:	d804      	bhi.n	8011474 <SUBGRF_GetCFO+0x40>
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 801146a:	0040      	lsls	r0, r0, #1
 801146c:	2803      	cmp	r0, #3
 801146e:	d91e      	bls.n	80114ae <SUBGRF_GetCFO+0x7a>
 8011470:	2502      	movs	r5, #2
 8011472:	e000      	b.n	8011476 <SUBGRF_GetCFO+0x42>
  uint8_t interp = 1;
 8011474:	2501      	movs	r5, #1
  {
    interp = 4;
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8011476:	fb03 f505 	mul.w	r5, r3, r5
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801147a:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 801147e:	f7ff f9c5 	bl	801080c <SUBGRF_ReadRegister>
 8011482:	0206      	lsls	r6, r0, #8
 8011484:	f406 6670 	and.w	r6, r6, #3840	@ 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8011488:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 801148c:	f7ff f9be 	bl	801080c <SUBGRF_ReadRegister>
 8011490:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8011492:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 8011496:	d003      	beq.n	80114a0 <SUBGRF_GetCFO+0x6c>
  {
    cfo_bin |= 0xFFFFF000;
 8011498:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 801149c:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 80114a0:	096d      	lsrs	r5, r5, #5
 80114a2:	fb05 f000 	mul.w	r0, r5, r0
 80114a6:	11c0      	asrs	r0, r0, #7
 80114a8:	6020      	str	r0, [r4, #0]
}
 80114aa:	b002      	add	sp, #8
 80114ac:	bd70      	pop	{r4, r5, r6, pc}
    interp = 4;
 80114ae:	2504      	movs	r5, #4
 80114b0:	e7e1      	b.n	8011476 <SUBGRF_GetCFO+0x42>
 80114b2:	bf00      	nop
 80114b4:	0c0a0804 	.word	0x0c0a0804
 80114b8:	01e84800 	.word	0x01e84800

080114bc <RFW_TransmitLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 80114bc:	f04f 30ff 	mov.w	r0, #4294967295
 80114c0:	4770      	bx	lr

080114c2 <RFW_ReceiveLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 80114c2:	f04f 30ff 	mov.w	r0, #4294967295
 80114c6:	4770      	bx	lr

080114c8 <RFW_DeInit>:
void RFW_DeInit( void )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 80114c8:	4770      	bx	lr

080114ca <RFW_Is_Init>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 80114ca:	2000      	movs	r0, #0
 80114cc:	4770      	bx	lr

080114ce <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 80114ce:	2000      	movs	r0, #0
 80114d0:	4770      	bx	lr

080114d2 <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 80114d2:	4770      	bx	lr

080114d4 <RFW_TransmitInit>:

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
}
 80114d4:	f04f 30ff 	mov.w	r0, #4294967295
 80114d8:	4770      	bx	lr

080114da <RFW_ReceiveInit>:
    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
#endif /* RFW_ENABLE == 1 */
}
 80114da:	f04f 30ff 	mov.w	r0, #4294967295
 80114de:	4770      	bx	lr

080114e0 <RFW_DeInit_TxLongPacket>:
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 80114e0:	4770      	bx	lr

080114e2 <RFW_ReceivePayload>:
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 80114e2:	4770      	bx	lr

080114e4 <RFW_SetRadioModem>:
void RFW_SetRadioModem( RadioModems_t Modem )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 80114e4:	4770      	bx	lr
	...

080114e8 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 80114e8:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80114ea:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80114ee:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 80114f0:	4b1e      	ldr	r3, [pc, #120]	@ (801156c <TRACE_AllocateBufer+0x84>)
 80114f2:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 80114f6:	8a1a      	ldrh	r2, [r3, #16]
 80114f8:	4596      	cmp	lr, r2
 80114fa:	d011      	beq.n	8011520 <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80114fc:	4596      	cmp	lr, r2
 80114fe:	d921      	bls.n	8011544 <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8011500:	f5ce 6380 	rsb	r3, lr, #1024	@ 0x400
 8011504:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8011506:	4283      	cmp	r3, r0
 8011508:	d81f      	bhi.n	801154a <TRACE_AllocateBufer+0x62>
 801150a:	4282      	cmp	r2, r0
 801150c:	d91d      	bls.n	801154a <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801150e:	4b17      	ldr	r3, [pc, #92]	@ (801156c <TRACE_AllocateBufer+0x84>)
 8011510:	2401      	movs	r4, #1
 8011512:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8011514:	f8a3 e000 	strh.w	lr, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8011518:	2400      	movs	r4, #0
 801151a:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801151c:	4613      	mov	r3, r2
 801151e:	e014      	b.n	801154a <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8011520:	f5ce 6380 	rsb	r3, lr, #1024	@ 0x400
 8011524:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 8011526:	4298      	cmp	r0, r3
 8011528:	d30f      	bcc.n	801154a <TRACE_AllocateBufer+0x62>
 801152a:	4282      	cmp	r2, r0
 801152c:	d90d      	bls.n	801154a <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801152e:	4b0f      	ldr	r3, [pc, #60]	@ (801156c <TRACE_AllocateBufer+0x84>)
 8011530:	2401      	movs	r4, #1
 8011532:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8011534:	f8a3 e000 	strh.w	lr, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 8011538:	f04f 0e00 	mov.w	lr, #0
 801153c:	f8a3 e012 	strh.w	lr, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8011540:	4613      	mov	r3, r2
 8011542:	e002      	b.n	801154a <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8011544:	eba2 020e 	sub.w	r2, r2, lr
 8011548:	b293      	uxth	r3, r2
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801154a:	4283      	cmp	r3, r0
 801154c:	d90a      	bls.n	8011564 <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801154e:	4a07      	ldr	r2, [pc, #28]	@ (801156c <TRACE_AllocateBufer+0x84>)
 8011550:	8a53      	ldrh	r3, [r2, #18]
 8011552:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8011554:	4403      	add	r3, r0
 8011556:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801155a:	8253      	strh	r3, [r2, #18]
    ret = 0;
 801155c:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801155e:	f38c 8810 	msr	PRIMASK, ip
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 8011562:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 8011564:	f04f 30ff 	mov.w	r0, #4294967295
 8011568:	e7f9      	b.n	801155e <TRACE_AllocateBufer+0x76>
 801156a:	bf00      	nop
 801156c:	20001634 	.word	0x20001634

08011570 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011570:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011574:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 8011576:	4a03      	ldr	r2, [pc, #12]	@ (8011584 <TRACE_Lock+0x14>)
 8011578:	8ad3      	ldrh	r3, [r2, #22]
 801157a:	3301      	adds	r3, #1
 801157c:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801157e:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8011582:	4770      	bx	lr
 8011584:	20001634 	.word	0x20001634

08011588 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011588:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801158c:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 801158e:	4a03      	ldr	r2, [pc, #12]	@ (801159c <TRACE_UnLock+0x14>)
 8011590:	8ad3      	ldrh	r3, [r2, #22]
 8011592:	3b01      	subs	r3, #1
 8011594:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011596:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801159a:	4770      	bx	lr
 801159c:	20001634 	.word	0x20001634

080115a0 <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 80115a0:	4b02      	ldr	r3, [pc, #8]	@ (80115ac <TRACE_IsLocked+0xc>)
 80115a2:	8ad8      	ldrh	r0, [r3, #22]
}
 80115a4:	3800      	subs	r0, #0
 80115a6:	bf18      	it	ne
 80115a8:	2001      	movne	r0, #1
 80115aa:	4770      	bx	lr
 80115ac:	20001634 	.word	0x20001634

080115b0 <UTIL_ADV_TRACE_Init>:
{
 80115b0:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 80115b2:	2218      	movs	r2, #24
 80115b4:	2100      	movs	r1, #0
 80115b6:	4807      	ldr	r0, [pc, #28]	@ (80115d4 <UTIL_ADV_TRACE_Init+0x24>)
 80115b8:	f000 f98f 	bl	80118da <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 80115bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80115c0:	2100      	movs	r1, #0
 80115c2:	4805      	ldr	r0, [pc, #20]	@ (80115d8 <UTIL_ADV_TRACE_Init+0x28>)
 80115c4:	f000 f989 	bl	80118da <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 80115c8:	4b04      	ldr	r3, [pc, #16]	@ (80115dc <UTIL_ADV_TRACE_Init+0x2c>)
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	4804      	ldr	r0, [pc, #16]	@ (80115e0 <UTIL_ADV_TRACE_Init+0x30>)
 80115ce:	4798      	blx	r3
}
 80115d0:	bd08      	pop	{r3, pc}
 80115d2:	bf00      	nop
 80115d4:	20001634 	.word	0x20001634
 80115d8:	20001234 	.word	0x20001234
 80115dc:	08012c14 	.word	0x08012c14
 80115e0:	08011761 	.word	0x08011761

080115e4 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 80115e4:	4b01      	ldr	r3, [pc, #4]	@ (80115ec <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 80115e6:	6058      	str	r0, [r3, #4]
}
 80115e8:	4770      	bx	lr
 80115ea:	bf00      	nop
 80115ec:	20001634 	.word	0x20001634

080115f0 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 80115f0:	4b01      	ldr	r3, [pc, #4]	@ (80115f8 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 80115f2:	7218      	strb	r0, [r3, #8]
}
 80115f4:	4770      	bx	lr
 80115f6:	bf00      	nop
 80115f8:	20001634 	.word	0x20001634

080115fc <TRACE_Send>:
{
 80115fc:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80115fe:	f3ef 8310 	mrs	r3, PRIMASK
 8011602:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8011604:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 8011606:	f7ff ffcb 	bl	80115a0 <TRACE_IsLocked>
 801160a:	b118      	cbz	r0, 8011614 <TRACE_Send+0x18>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801160c:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8011610:	2000      	movs	r0, #0
}
 8011612:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 8011614:	f7ff ffac 	bl	8011570 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8011618:	4b1c      	ldr	r3, [pc, #112]	@ (801168c <TRACE_Send+0x90>)
 801161a:	8a1a      	ldrh	r2, [r3, #16]
 801161c:	8a5b      	ldrh	r3, [r3, #18]
 801161e:	429a      	cmp	r2, r3
 8011620:	d02e      	beq.n	8011680 <TRACE_Send+0x84>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8011622:	491a      	ldr	r1, [pc, #104]	@ (801168c <TRACE_Send+0x90>)
 8011624:	7889      	ldrb	r1, [r1, #2]
 8011626:	2901      	cmp	r1, #1
 8011628:	d017      	beq.n	801165a <TRACE_Send+0x5e>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801162a:	4a18      	ldr	r2, [pc, #96]	@ (801168c <TRACE_Send+0x90>)
 801162c:	7892      	ldrb	r2, [r2, #2]
 801162e:	b932      	cbnz	r2, 801163e <TRACE_Send+0x42>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8011630:	4a16      	ldr	r2, [pc, #88]	@ (801168c <TRACE_Send+0x90>)
 8011632:	8a12      	ldrh	r2, [r2, #16]
 8011634:	4293      	cmp	r3, r2
 8011636:	d91e      	bls.n	8011676 <TRACE_Send+0x7a>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8011638:	1a9b      	subs	r3, r3, r2
 801163a:	4a14      	ldr	r2, [pc, #80]	@ (801168c <TRACE_Send+0x90>)
 801163c:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801163e:	4e13      	ldr	r6, [pc, #76]	@ (801168c <TRACE_Send+0x90>)
 8011640:	8a35      	ldrh	r5, [r6, #16]
 8011642:	4b13      	ldr	r3, [pc, #76]	@ (8011690 <TRACE_Send+0x94>)
 8011644:	441d      	add	r5, r3
 8011646:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 801164a:	f7f0 f999 	bl	8001980 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801164e:	4b11      	ldr	r3, [pc, #68]	@ (8011694 <TRACE_Send+0x98>)
 8011650:	68db      	ldr	r3, [r3, #12]
 8011652:	8ab1      	ldrh	r1, [r6, #20]
 8011654:	4628      	mov	r0, r5
 8011656:	4798      	blx	r3
 8011658:	e7db      	b.n	8011612 <TRACE_Send+0x16>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801165a:	480c      	ldr	r0, [pc, #48]	@ (801168c <TRACE_Send+0x90>)
 801165c:	8801      	ldrh	r1, [r0, #0]
 801165e:	1a8a      	subs	r2, r1, r2
 8011660:	b292      	uxth	r2, r2
 8011662:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8011664:	2102      	movs	r1, #2
 8011666:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8011668:	2100      	movs	r1, #0
 801166a:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801166c:	2a00      	cmp	r2, #0
 801166e:	d1dc      	bne.n	801162a <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8011670:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8011672:	8201      	strh	r1, [r0, #16]
 8011674:	e7d9      	b.n	801162a <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8011676:	f5c2 6280 	rsb	r2, r2, #1024	@ 0x400
 801167a:	4b04      	ldr	r3, [pc, #16]	@ (801168c <TRACE_Send+0x90>)
 801167c:	829a      	strh	r2, [r3, #20]
 801167e:	e7de      	b.n	801163e <TRACE_Send+0x42>
      TRACE_UnLock();
 8011680:	f7ff ff82 	bl	8011588 <TRACE_UnLock>
 8011684:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8011688:	2000      	movs	r0, #0
}
 801168a:	e7c2      	b.n	8011612 <TRACE_Send+0x16>
 801168c:	20001634 	.word	0x20001634
 8011690:	20001234 	.word	0x20001234
 8011694:	08012c14 	.word	0x08012c14

08011698 <UTIL_ADV_TRACE_COND_FSend>:
{
 8011698:	b408      	push	{r3}
 801169a:	b530      	push	{r4, r5, lr}
 801169c:	b086      	sub	sp, #24
 801169e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
  uint16_t timestamp_size = 0u;
 80116a0:	2300      	movs	r3, #0
 80116a2:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 80116a6:	4b2b      	ldr	r3, [pc, #172]	@ (8011754 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 80116a8:	7a1b      	ldrb	r3, [r3, #8]
 80116aa:	4283      	cmp	r3, r0
 80116ac:	d34c      	bcc.n	8011748 <UTIL_ADV_TRACE_COND_FSend+0xb0>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 80116ae:	4b29      	ldr	r3, [pc, #164]	@ (8011754 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 80116b0:	68db      	ldr	r3, [r3, #12]
 80116b2:	4399      	bics	r1, r3
 80116b4:	d14b      	bne.n	801174e <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 80116b6:	4b27      	ldr	r3, [pc, #156]	@ (8011754 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 80116b8:	685b      	ldr	r3, [r3, #4]
 80116ba:	b123      	cbz	r3, 80116c6 <UTIL_ADV_TRACE_COND_FSend+0x2e>
 80116bc:	b11a      	cbz	r2, 80116c6 <UTIL_ADV_TRACE_COND_FSend+0x2e>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 80116be:	f10d 0102 	add.w	r1, sp, #2
 80116c2:	a801      	add	r0, sp, #4
 80116c4:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 80116c6:	ab0a      	add	r3, sp, #40	@ 0x28
 80116c8:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 80116ca:	4622      	mov	r2, r4
 80116cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80116d0:	4821      	ldr	r0, [pc, #132]	@ (8011758 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 80116d2:	f000 fcd1 	bl	8012078 <tiny_vsnprintf_like>
 80116d6:	b285      	uxth	r5, r0
  TRACE_Lock();
 80116d8:	f7ff ff4a 	bl	8011570 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 80116dc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80116e0:	18e8      	adds	r0, r5, r3
 80116e2:	4669      	mov	r1, sp
 80116e4:	b280      	uxth	r0, r0
 80116e6:	f7ff feff 	bl	80114e8 <TRACE_AllocateBufer>
 80116ea:	f1b0 3fff 	cmp.w	r0, #4294967295
 80116ee:	d026      	beq.n	801173e <UTIL_ADV_TRACE_COND_FSend+0xa6>
    for (idx = 0u; idx < timestamp_size; idx++)
 80116f0:	2300      	movs	r3, #0
 80116f2:	e00d      	b.n	8011710 <UTIL_ADV_TRACE_COND_FSend+0x78>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 80116f4:	f8bd 2000 	ldrh.w	r2, [sp]
 80116f8:	f103 0118 	add.w	r1, r3, #24
 80116fc:	4469      	add	r1, sp
 80116fe:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 8011702:	4916      	ldr	r1, [pc, #88]	@ (801175c <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8011704:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 8011706:	3201      	adds	r2, #1
 8011708:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 801170c:	3301      	adds	r3, #1
 801170e:	b29b      	uxth	r3, r3
 8011710:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8011714:	429a      	cmp	r2, r3
 8011716:	d8ed      	bhi.n	80116f4 <UTIL_ADV_TRACE_COND_FSend+0x5c>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8011718:	f8bd 0000 	ldrh.w	r0, [sp]
 801171c:	9b05      	ldr	r3, [sp, #20]
 801171e:	4622      	mov	r2, r4
 8011720:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8011724:	4c0d      	ldr	r4, [pc, #52]	@ (801175c <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8011726:	4420      	add	r0, r4
 8011728:	f000 fca6 	bl	8012078 <tiny_vsnprintf_like>
    TRACE_UnLock();
 801172c:	f7ff ff2c 	bl	8011588 <TRACE_UnLock>
    return TRACE_Send();
 8011730:	f7ff ff64 	bl	80115fc <TRACE_Send>
}
 8011734:	b006      	add	sp, #24
 8011736:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801173a:	b001      	add	sp, #4
 801173c:	4770      	bx	lr
  TRACE_UnLock();
 801173e:	f7ff ff23 	bl	8011588 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 8011742:	f06f 0002 	mvn.w	r0, #2
 8011746:	e7f5      	b.n	8011734 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_GIVEUP;
 8011748:	f06f 0004 	mvn.w	r0, #4
 801174c:	e7f2      	b.n	8011734 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_REGIONMASKED;
 801174e:	f06f 0005 	mvn.w	r0, #5
 8011752:	e7ef      	b.n	8011734 <UTIL_ADV_TRACE_COND_FSend+0x9c>
 8011754:	20001634 	.word	0x20001634
 8011758:	20001034 	.word	0x20001034
 801175c:	20001234 	.word	0x20001234

08011760 <TRACE_TxCpltCallback>:
{
 8011760:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011762:	f3ef 8310 	mrs	r3, PRIMASK
 8011766:	4619      	mov	r1, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8011768:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801176a:	4b26      	ldr	r3, [pc, #152]	@ (8011804 <TRACE_TxCpltCallback+0xa4>)
 801176c:	789b      	ldrb	r3, [r3, #2]
 801176e:	2b02      	cmp	r3, #2
 8011770:	d016      	beq.n	80117a0 <TRACE_TxCpltCallback+0x40>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8011772:	4a24      	ldr	r2, [pc, #144]	@ (8011804 <TRACE_TxCpltCallback+0xa4>)
 8011774:	8a13      	ldrh	r3, [r2, #16]
 8011776:	8a90      	ldrh	r0, [r2, #20]
 8011778:	4403      	add	r3, r0
 801177a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801177e:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 8011780:	4b20      	ldr	r3, [pc, #128]	@ (8011804 <TRACE_TxCpltCallback+0xa4>)
 8011782:	8a1a      	ldrh	r2, [r3, #16]
 8011784:	8a5b      	ldrh	r3, [r3, #18]
 8011786:	429a      	cmp	r2, r3
 8011788:	d003      	beq.n	8011792 <TRACE_TxCpltCallback+0x32>
 801178a:	481e      	ldr	r0, [pc, #120]	@ (8011804 <TRACE_TxCpltCallback+0xa4>)
 801178c:	8ac0      	ldrh	r0, [r0, #22]
 801178e:	2801      	cmp	r0, #1
 8011790:	d00b      	beq.n	80117aa <TRACE_TxCpltCallback+0x4a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011792:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 8011796:	f7f0 f8f9 	bl	800198c <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801179a:	f7ff fef5 	bl	8011588 <TRACE_UnLock>
}
 801179e:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80117a0:	4b18      	ldr	r3, [pc, #96]	@ (8011804 <TRACE_TxCpltCallback+0xa4>)
 80117a2:	2200      	movs	r2, #0
 80117a4:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 80117a6:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 80117a8:	e7ea      	b.n	8011780 <TRACE_TxCpltCallback+0x20>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 80117aa:	4816      	ldr	r0, [pc, #88]	@ (8011804 <TRACE_TxCpltCallback+0xa4>)
 80117ac:	7880      	ldrb	r0, [r0, #2]
 80117ae:	2801      	cmp	r0, #1
 80117b0:	d014      	beq.n	80117dc <TRACE_TxCpltCallback+0x7c>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 80117b2:	4a14      	ldr	r2, [pc, #80]	@ (8011804 <TRACE_TxCpltCallback+0xa4>)
 80117b4:	7892      	ldrb	r2, [r2, #2]
 80117b6:	b932      	cbnz	r2, 80117c6 <TRACE_TxCpltCallback+0x66>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80117b8:	4a12      	ldr	r2, [pc, #72]	@ (8011804 <TRACE_TxCpltCallback+0xa4>)
 80117ba:	8a12      	ldrh	r2, [r2, #16]
 80117bc:	4293      	cmp	r3, r2
 80117be:	d91b      	bls.n	80117f8 <TRACE_TxCpltCallback+0x98>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 80117c0:	1a9b      	subs	r3, r3, r2
 80117c2:	4a10      	ldr	r2, [pc, #64]	@ (8011804 <TRACE_TxCpltCallback+0xa4>)
 80117c4:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 80117c6:	4b0f      	ldr	r3, [pc, #60]	@ (8011804 <TRACE_TxCpltCallback+0xa4>)
 80117c8:	8a18      	ldrh	r0, [r3, #16]
 80117ca:	4a0f      	ldr	r2, [pc, #60]	@ (8011808 <TRACE_TxCpltCallback+0xa8>)
 80117cc:	4410      	add	r0, r2
 80117ce:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 80117d2:	4a0e      	ldr	r2, [pc, #56]	@ (801180c <TRACE_TxCpltCallback+0xac>)
 80117d4:	68d2      	ldr	r2, [r2, #12]
 80117d6:	8a99      	ldrh	r1, [r3, #20]
 80117d8:	4790      	blx	r2
 80117da:	e7e0      	b.n	801179e <TRACE_TxCpltCallback+0x3e>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 80117dc:	4c09      	ldr	r4, [pc, #36]	@ (8011804 <TRACE_TxCpltCallback+0xa4>)
 80117de:	8820      	ldrh	r0, [r4, #0]
 80117e0:	1a82      	subs	r2, r0, r2
 80117e2:	b292      	uxth	r2, r2
 80117e4:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 80117e6:	2002      	movs	r0, #2
 80117e8:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 80117ea:	2000      	movs	r0, #0
 80117ec:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 80117ee:	2a00      	cmp	r2, #0
 80117f0:	d1df      	bne.n	80117b2 <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80117f2:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 80117f4:	8220      	strh	r0, [r4, #16]
 80117f6:	e7dc      	b.n	80117b2 <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 80117f8:	f5c2 6280 	rsb	r2, r2, #1024	@ 0x400
 80117fc:	4b01      	ldr	r3, [pc, #4]	@ (8011804 <TRACE_TxCpltCallback+0xa4>)
 80117fe:	829a      	strh	r2, [r3, #20]
 8011800:	e7e1      	b.n	80117c6 <TRACE_TxCpltCallback+0x66>
 8011802:	bf00      	nop
 8011804:	20001634 	.word	0x20001634
 8011808:	20001234 	.word	0x20001234
 801180c:	08012c14 	.word	0x08012c14

08011810 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8011810:	2300      	movs	r3, #0
 8011812:	4a02      	ldr	r2, [pc, #8]	@ (801181c <UTIL_LPM_Init+0xc>)
 8011814:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8011816:	4a02      	ldr	r2, [pc, #8]	@ (8011820 <UTIL_LPM_Init+0x10>)
 8011818:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801181a:	4770      	bx	lr
 801181c:	20001650 	.word	0x20001650
 8011820:	2000164c 	.word	0x2000164c

08011824 <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011824:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011828:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 801182a:	b141      	cbz	r1, 801183e <UTIL_LPM_SetStopMode+0x1a>
 801182c:	2901      	cmp	r1, #1
 801182e:	d103      	bne.n	8011838 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8011830:	4906      	ldr	r1, [pc, #24]	@ (801184c <UTIL_LPM_SetStopMode+0x28>)
 8011832:	680a      	ldr	r2, [r1, #0]
 8011834:	4302      	orrs	r2, r0
 8011836:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011838:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801183c:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 801183e:	4903      	ldr	r1, [pc, #12]	@ (801184c <UTIL_LPM_SetStopMode+0x28>)
 8011840:	680a      	ldr	r2, [r1, #0]
 8011842:	ea22 0200 	bic.w	r2, r2, r0
 8011846:	600a      	str	r2, [r1, #0]
      break;
 8011848:	e7f6      	b.n	8011838 <UTIL_LPM_SetStopMode+0x14>
 801184a:	bf00      	nop
 801184c:	20001650 	.word	0x20001650

08011850 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011850:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011854:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 8011856:	b141      	cbz	r1, 801186a <UTIL_LPM_SetOffMode+0x1a>
 8011858:	2901      	cmp	r1, #1
 801185a:	d103      	bne.n	8011864 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801185c:	4906      	ldr	r1, [pc, #24]	@ (8011878 <UTIL_LPM_SetOffMode+0x28>)
 801185e:	680a      	ldr	r2, [r1, #0]
 8011860:	4302      	orrs	r2, r0
 8011862:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011864:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8011868:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 801186a:	4903      	ldr	r1, [pc, #12]	@ (8011878 <UTIL_LPM_SetOffMode+0x28>)
 801186c:	680a      	ldr	r2, [r1, #0]
 801186e:	ea22 0200 	bic.w	r2, r2, r0
 8011872:	600a      	str	r2, [r1, #0]
      break;
 8011874:	e7f6      	b.n	8011864 <UTIL_LPM_SetOffMode+0x14>
 8011876:	bf00      	nop
 8011878:	2000164c 	.word	0x2000164c

0801187c <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801187c:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801187e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011882:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8011884:	4b0c      	ldr	r3, [pc, #48]	@ (80118b8 <UTIL_LPM_EnterLowPower+0x3c>)
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	b13b      	cbz	r3, 801189a <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801188a:	4d0c      	ldr	r5, [pc, #48]	@ (80118bc <UTIL_LPM_EnterLowPower+0x40>)
 801188c:	682b      	ldr	r3, [r5, #0]
 801188e:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8011890:	686b      	ldr	r3, [r5, #4]
 8011892:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011894:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8011898:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801189a:	4b09      	ldr	r3, [pc, #36]	@ (80118c0 <UTIL_LPM_EnterLowPower+0x44>)
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	b12b      	cbz	r3, 80118ac <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 80118a0:	4d06      	ldr	r5, [pc, #24]	@ (80118bc <UTIL_LPM_EnterLowPower+0x40>)
 80118a2:	68ab      	ldr	r3, [r5, #8]
 80118a4:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 80118a6:	68eb      	ldr	r3, [r5, #12]
 80118a8:	4798      	blx	r3
 80118aa:	e7f3      	b.n	8011894 <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 80118ac:	4d03      	ldr	r5, [pc, #12]	@ (80118bc <UTIL_LPM_EnterLowPower+0x40>)
 80118ae:	692b      	ldr	r3, [r5, #16]
 80118b0:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 80118b2:	696b      	ldr	r3, [r5, #20]
 80118b4:	4798      	blx	r3
 80118b6:	e7ed      	b.n	8011894 <UTIL_LPM_EnterLowPower+0x18>
 80118b8:	20001650 	.word	0x20001650
 80118bc:	08012414 	.word	0x08012414
 80118c0:	2000164c 	.word	0x2000164c

080118c4 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 80118c4:	e004      	b.n	80118d0 <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 80118c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80118ca:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 80118ce:	461a      	mov	r2, r3
 80118d0:	1e53      	subs	r3, r2, #1
 80118d2:	b29b      	uxth	r3, r3
 80118d4:	2a00      	cmp	r2, #0
 80118d6:	d1f6      	bne.n	80118c6 <UTIL_MEM_cpy_8+0x2>
    }
}
 80118d8:	4770      	bx	lr

080118da <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 80118da:	e002      	b.n	80118e2 <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 80118dc:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 80118e0:	461a      	mov	r2, r3
 80118e2:	1e53      	subs	r3, r2, #1
 80118e4:	b29b      	uxth	r3, r3
 80118e6:	2a00      	cmp	r2, #0
 80118e8:	d1f8      	bne.n	80118dc <UTIL_MEM_set_8+0x2>
  }
}
 80118ea:	4770      	bx	lr

080118ec <UTIL_SEQ_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80118ec:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80118f0:	b672      	cpsid	i

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 80118f2:	4a06      	ldr	r2, [pc, #24]	@ (801190c <UTIL_SEQ_SetTask+0x20>)
 80118f4:	6813      	ldr	r3, [r2, #0]
 80118f6:	4303      	orrs	r3, r0
 80118f8:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80118fa:	4a05      	ldr	r2, [pc, #20]	@ (8011910 <UTIL_SEQ_SetTask+0x24>)
 80118fc:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 8011900:	4303      	orrs	r3, r0
 8011902:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011906:	f38c 8810 	msr	PRIMASK, ip

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 801190a:	4770      	bx	lr
 801190c:	20001678 	.word	0x20001678
 8011910:	20001654 	.word	0x20001654

08011914 <UTIL_SEQ_PreIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8011914:	4770      	bx	lr

08011916 <UTIL_SEQ_PostIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8011916:	4770      	bx	lr

08011918 <SEQ_BitPosition>:
uint8_t SEQ_BitPosition(uint32_t Value)
{
uint8_t n = 0U;
uint32_t lvalue = Value;

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8011918:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801191c:	d216      	bcs.n	801194c <SEQ_BitPosition+0x34>
 801191e:	0400      	lsls	r0, r0, #16
 8011920:	2310      	movs	r3, #16
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8011922:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8011926:	d202      	bcs.n	801192e <SEQ_BitPosition+0x16>
 8011928:	3308      	adds	r3, #8
 801192a:	b2db      	uxtb	r3, r3
 801192c:	0200      	lsls	r0, r0, #8
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801192e:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
 8011932:	d202      	bcs.n	801193a <SEQ_BitPosition+0x22>
 8011934:	3304      	adds	r3, #4
 8011936:	b2db      	uxtb	r3, r3
 8011938:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801193a:	0f00      	lsrs	r0, r0, #28
 801193c:	4a04      	ldr	r2, [pc, #16]	@ (8011950 <SEQ_BitPosition+0x38>)
 801193e:	5c10      	ldrb	r0, [r2, r0]
 8011940:	4418      	add	r0, r3
 8011942:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 8011944:	f1c0 001f 	rsb	r0, r0, #31
}
 8011948:	b2c0      	uxtb	r0, r0
 801194a:	4770      	bx	lr
uint8_t n = 0U;
 801194c:	2300      	movs	r3, #0
 801194e:	e7e8      	b.n	8011922 <SEQ_BitPosition+0xa>
 8011950:	080132ac 	.word	0x080132ac

08011954 <UTIL_SEQ_Run>:
{
 8011954:	b570      	push	{r4, r5, r6, lr}
  super_mask_backup = SuperMask;
 8011956:	4b42      	ldr	r3, [pc, #264]	@ (8011a60 <UTIL_SEQ_Run+0x10c>)
 8011958:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 801195a:	4020      	ands	r0, r4
 801195c:	6018      	str	r0, [r3, #0]
  local_taskset = TaskSet;
 801195e:	4b41      	ldr	r3, [pc, #260]	@ (8011a64 <UTIL_SEQ_Run+0x110>)
 8011960:	681a      	ldr	r2, [r3, #0]
  local_evtset = EvtSet;
 8011962:	4b41      	ldr	r3, [pc, #260]	@ (8011a68 <UTIL_SEQ_Run+0x114>)
 8011964:	681b      	ldr	r3, [r3, #0]
  local_taskmask = TaskMask;
 8011966:	4941      	ldr	r1, [pc, #260]	@ (8011a6c <UTIL_SEQ_Run+0x118>)
 8011968:	6808      	ldr	r0, [r1, #0]
  local_evtwaited =  EvtWaited;
 801196a:	4941      	ldr	r1, [pc, #260]	@ (8011a70 <UTIL_SEQ_Run+0x11c>)
 801196c:	6809      	ldr	r1, [r1, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801196e:	e02f      	b.n	80119d0 <UTIL_SEQ_Run+0x7c>
      counter++;
 8011970:	3301      	adds	r3, #1
 8011972:	e034      	b.n	80119de <UTIL_SEQ_Run+0x8a>
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8011974:	4d3f      	ldr	r5, [pc, #252]	@ (8011a74 <UTIL_SEQ_Run+0x120>)
 8011976:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801197a:	6868      	ldr	r0, [r5, #4]
 801197c:	4010      	ands	r0, r2
 801197e:	f7ff ffcb 	bl	8011918 <SEQ_BitPosition>
 8011982:	4e3d      	ldr	r6, [pc, #244]	@ (8011a78 <UTIL_SEQ_Run+0x124>)
 8011984:	6030      	str	r0, [r6, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8011986:	686a      	ldr	r2, [r5, #4]
 8011988:	2301      	movs	r3, #1
 801198a:	fa03 f000 	lsl.w	r0, r3, r0
 801198e:	ea22 0200 	bic.w	r2, r2, r0
 8011992:	606a      	str	r2, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011994:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011998:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 801199a:	6832      	ldr	r2, [r6, #0]
 801199c:	fa03 f202 	lsl.w	r2, r3, r2
 80119a0:	43d6      	mvns	r6, r2
 80119a2:	4d30      	ldr	r5, [pc, #192]	@ (8011a64 <UTIL_SEQ_Run+0x110>)
 80119a4:	6828      	ldr	r0, [r5, #0]
 80119a6:	ea20 0202 	bic.w	r2, r0, r2
 80119aa:	602a      	str	r2, [r5, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d12d      	bne.n	8011a0c <UTIL_SEQ_Run+0xb8>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80119b0:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 80119b4:	4b30      	ldr	r3, [pc, #192]	@ (8011a78 <UTIL_SEQ_Run+0x124>)
 80119b6:	681a      	ldr	r2, [r3, #0]
 80119b8:	4b30      	ldr	r3, [pc, #192]	@ (8011a7c <UTIL_SEQ_Run+0x128>)
 80119ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119be:	4798      	blx	r3
    local_taskset = TaskSet;
 80119c0:	4b28      	ldr	r3, [pc, #160]	@ (8011a64 <UTIL_SEQ_Run+0x110>)
 80119c2:	681a      	ldr	r2, [r3, #0]
    local_evtset = EvtSet;
 80119c4:	4b28      	ldr	r3, [pc, #160]	@ (8011a68 <UTIL_SEQ_Run+0x114>)
 80119c6:	681b      	ldr	r3, [r3, #0]
    local_taskmask = TaskMask;
 80119c8:	4928      	ldr	r1, [pc, #160]	@ (8011a6c <UTIL_SEQ_Run+0x118>)
 80119ca:	6808      	ldr	r0, [r1, #0]
    local_evtwaited = EvtWaited;
 80119cc:	4928      	ldr	r1, [pc, #160]	@ (8011a70 <UTIL_SEQ_Run+0x11c>)
 80119ce:	6809      	ldr	r1, [r1, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80119d0:	4002      	ands	r2, r0
 80119d2:	4d23      	ldr	r5, [pc, #140]	@ (8011a60 <UTIL_SEQ_Run+0x10c>)
 80119d4:	682d      	ldr	r5, [r5, #0]
 80119d6:	422a      	tst	r2, r5
 80119d8:	d020      	beq.n	8011a1c <UTIL_SEQ_Run+0xc8>
 80119da:	400b      	ands	r3, r1
 80119dc:	d11e      	bne.n	8011a1c <UTIL_SEQ_Run+0xc8>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80119de:	4a25      	ldr	r2, [pc, #148]	@ (8011a74 <UTIL_SEQ_Run+0x120>)
 80119e0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80119e4:	4002      	ands	r2, r0
 80119e6:	422a      	tst	r2, r5
 80119e8:	d0c2      	beq.n	8011970 <UTIL_SEQ_Run+0x1c>
    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 80119ea:	4922      	ldr	r1, [pc, #136]	@ (8011a74 <UTIL_SEQ_Run+0x120>)
 80119ec:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 80119f0:	4002      	ands	r2, r0
 80119f2:	402a      	ands	r2, r5
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80119f4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80119f8:	6849      	ldr	r1, [r1, #4]
 80119fa:	4211      	tst	r1, r2
 80119fc:	d1ba      	bne.n	8011974 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80119fe:	491d      	ldr	r1, [pc, #116]	@ (8011a74 <UTIL_SEQ_Run+0x120>)
 8011a00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011a04:	f04f 30ff 	mov.w	r0, #4294967295
 8011a08:	6048      	str	r0, [r1, #4]
 8011a0a:	e7b3      	b.n	8011974 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8011a0c:	3b01      	subs	r3, #1
 8011a0e:	4819      	ldr	r0, [pc, #100]	@ (8011a74 <UTIL_SEQ_Run+0x120>)
 8011a10:	f850 2033 	ldr.w	r2, [r0, r3, lsl #3]
 8011a14:	4032      	ands	r2, r6
 8011a16:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8011a1a:	e7c7      	b.n	80119ac <UTIL_SEQ_Run+0x58>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8011a1c:	4b16      	ldr	r3, [pc, #88]	@ (8011a78 <UTIL_SEQ_Run+0x124>)
 8011a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8011a22:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8011a24:	f7ff ff76 	bl	8011914 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011a28:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011a2c:	b672      	cpsid	i
  local_taskset = TaskSet;
 8011a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8011a64 <UTIL_SEQ_Run+0x110>)
 8011a30:	681b      	ldr	r3, [r3, #0]
  local_evtset = EvtSet;
 8011a32:	4a0d      	ldr	r2, [pc, #52]	@ (8011a68 <UTIL_SEQ_Run+0x114>)
 8011a34:	6811      	ldr	r1, [r2, #0]
  local_taskmask = TaskMask;
 8011a36:	4a0d      	ldr	r2, [pc, #52]	@ (8011a6c <UTIL_SEQ_Run+0x118>)
 8011a38:	6812      	ldr	r2, [r2, #0]
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8011a3a:	4013      	ands	r3, r2
 8011a3c:	4a08      	ldr	r2, [pc, #32]	@ (8011a60 <UTIL_SEQ_Run+0x10c>)
 8011a3e:	6812      	ldr	r2, [r2, #0]
 8011a40:	4213      	tst	r3, r2
 8011a42:	d103      	bne.n	8011a4c <UTIL_SEQ_Run+0xf8>
    if ((local_evtset & EvtWaited)== 0U)
 8011a44:	4b0a      	ldr	r3, [pc, #40]	@ (8011a70 <UTIL_SEQ_Run+0x11c>)
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	420b      	tst	r3, r1
 8011a4a:	d006      	beq.n	8011a5a <UTIL_SEQ_Run+0x106>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011a4c:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 8011a50:	f7ff ff61 	bl	8011916 <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 8011a54:	4b02      	ldr	r3, [pc, #8]	@ (8011a60 <UTIL_SEQ_Run+0x10c>)
 8011a56:	601c      	str	r4, [r3, #0]
}
 8011a58:	bd70      	pop	{r4, r5, r6, pc}
      UTIL_SEQ_Idle( );
 8011a5a:	f7ef ff17 	bl	800188c <UTIL_SEQ_Idle>
 8011a5e:	e7f5      	b.n	8011a4c <UTIL_SEQ_Run+0xf8>
 8011a60:	20000100 	.word	0x20000100
 8011a64:	20001678 	.word	0x20001678
 8011a68:	20001674 	.word	0x20001674
 8011a6c:	20000104 	.word	0x20000104
 8011a70:	20001670 	.word	0x20001670
 8011a74:	20001654 	.word	0x20001654
 8011a78:	2000166c 	.word	0x2000166c
 8011a7c:	2000165c 	.word	0x2000165c

08011a80 <UTIL_SEQ_RegTask>:
{
 8011a80:	b538      	push	{r3, r4, r5, lr}
 8011a82:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011a84:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011a88:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8011a8a:	f7ff ff45 	bl	8011918 <SEQ_BitPosition>
 8011a8e:	4b03      	ldr	r3, [pc, #12]	@ (8011a9c <UTIL_SEQ_RegTask+0x1c>)
 8011a90:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011a94:	f385 8810 	msr	PRIMASK, r5
}
 8011a98:	bd38      	pop	{r3, r4, r5, pc}
 8011a9a:	bf00      	nop
 8011a9c:	2000165c 	.word	0x2000165c

08011aa0 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8011aa0:	b082      	sub	sp, #8
 8011aa2:	b082      	sub	sp, #8
 8011aa4:	f10d 0c08 	add.w	ip, sp, #8
 8011aa8:	e90c 0006 	stmdb	ip, {r1, r2}
 8011aac:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 8011aae:	2200      	movs	r2, #0
 8011ab0:	6002      	str	r2, [r0, #0]
 8011ab2:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds + b.Seconds;
 8011ab4:	440b      	add	r3, r1
 8011ab6:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8011ab8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8011abc:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8011ac0:	440a      	add	r2, r1
 8011ac2:	b291      	uxth	r1, r2
 8011ac4:	b212      	sxth	r2, r2
 8011ac6:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 8011ac8:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8011acc:	db04      	blt.n	8011ad8 <SysTimeAdd+0x38>
  {
    c.Seconds++;
 8011ace:	3301      	adds	r3, #1
 8011ad0:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 8011ad2:	f5a1 717a 	sub.w	r1, r1, #1000	@ 0x3e8
 8011ad6:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 8011ad8:	b002      	add	sp, #8
 8011ada:	b002      	add	sp, #8
 8011adc:	4770      	bx	lr

08011ade <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8011ade:	b082      	sub	sp, #8
 8011ae0:	b082      	sub	sp, #8
 8011ae2:	f10d 0c08 	add.w	ip, sp, #8
 8011ae6:	e90c 0006 	stmdb	ip, {r1, r2}
 8011aea:	9303      	str	r3, [sp, #12]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8011aec:	2200      	movs	r2, #0
 8011aee:	6002      	str	r2, [r0, #0]
 8011af0:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds - b.Seconds;
 8011af2:	1acb      	subs	r3, r1, r3
 8011af4:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8011af6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8011afa:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8011afe:	1a52      	subs	r2, r2, r1
 8011b00:	b291      	uxth	r1, r2
 8011b02:	b212      	sxth	r2, r2
 8011b04:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds < 0 )
 8011b06:	2a00      	cmp	r2, #0
 8011b08:	db02      	blt.n	8011b10 <SysTimeSub+0x32>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
  }
  return c;
}
 8011b0a:	b002      	add	sp, #8
 8011b0c:	b002      	add	sp, #8
 8011b0e:	4770      	bx	lr
    c.Seconds--;
 8011b10:	3b01      	subs	r3, #1
 8011b12:	6003      	str	r3, [r0, #0]
    c.SubSeconds += 1000;
 8011b14:	f501 717a 	add.w	r1, r1, #1000	@ 0x3e8
 8011b18:	8081      	strh	r1, [r0, #4]
  return c;
 8011b1a:	e7f6      	b.n	8011b0a <SysTimeSub+0x2c>

08011b1c <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8011b1c:	b530      	push	{r4, r5, lr}
 8011b1e:	b089      	sub	sp, #36	@ 0x24
 8011b20:	ac02      	add	r4, sp, #8
 8011b22:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8011b26:	2300      	movs	r3, #0
 8011b28:	9304      	str	r3, [sp, #16]
 8011b2a:	f8ad 3014 	strh.w	r3, [sp, #20]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8011b2e:	4d0b      	ldr	r5, [pc, #44]	@ (8011b5c <SysTimeSet+0x40>)
 8011b30:	692b      	ldr	r3, [r5, #16]
 8011b32:	a805      	add	r0, sp, #20
 8011b34:	4798      	blx	r3
 8011b36:	4603      	mov	r3, r0
 8011b38:	9004      	str	r0, [sp, #16]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 8011b3a:	9a05      	ldr	r2, [sp, #20]
 8011b3c:	9200      	str	r2, [sp, #0]
 8011b3e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8011b42:	a806      	add	r0, sp, #24
 8011b44:	f7ff ffcb 	bl	8011ade <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8011b48:	682b      	ldr	r3, [r5, #0]
 8011b4a:	9806      	ldr	r0, [sp, #24]
 8011b4c:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8011b4e:	68ab      	ldr	r3, [r5, #8]
 8011b50:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8011b54:	4798      	blx	r3
}
 8011b56:	b009      	add	sp, #36	@ 0x24
 8011b58:	bd30      	pop	{r4, r5, pc}
 8011b5a:	bf00      	nop
 8011b5c:	08012bd4 	.word	0x08012bd4

08011b60 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8011b60:	b530      	push	{r4, r5, lr}
 8011b62:	b087      	sub	sp, #28
 8011b64:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8011b66:	2300      	movs	r3, #0
 8011b68:	9304      	str	r3, [sp, #16]
 8011b6a:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8011b6e:	6003      	str	r3, [r0, #0]
 8011b70:	8083      	strh	r3, [r0, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8011b72:	4d0b      	ldr	r5, [pc, #44]	@ (8011ba0 <SysTimeGet+0x40>)
 8011b74:	692b      	ldr	r3, [r5, #16]
 8011b76:	a805      	add	r0, sp, #20
 8011b78:	4798      	blx	r3
 8011b7a:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8011b7c:	68eb      	ldr	r3, [r5, #12]
 8011b7e:	4798      	blx	r3
 8011b80:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8011b84:	686b      	ldr	r3, [r5, #4]
 8011b86:	4798      	blx	r3
 8011b88:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8011b8a:	9b05      	ldr	r3, [sp, #20]
 8011b8c:	9300      	str	r3, [sp, #0]
 8011b8e:	9b04      	ldr	r3, [sp, #16]
 8011b90:	aa02      	add	r2, sp, #8
 8011b92:	ca06      	ldmia	r2, {r1, r2}
 8011b94:	4620      	mov	r0, r4
 8011b96:	f7ff ff83 	bl	8011aa0 <SysTimeAdd>

  return sysTime;
}
 8011b9a:	4620      	mov	r0, r4
 8011b9c:	b007      	add	sp, #28
 8011b9e:	bd30      	pop	{r4, r5, pc}
 8011ba0:	08012bd4 	.word	0x08012bd4

08011ba4 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8011ba4:	b530      	push	{r4, r5, lr}
 8011ba6:	b083      	sub	sp, #12
 8011ba8:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8011baa:	2300      	movs	r3, #0
 8011bac:	9300      	str	r3, [sp, #0]
 8011bae:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8011bb2:	4b06      	ldr	r3, [pc, #24]	@ (8011bcc <SysTimeGetMcuTime+0x28>)
 8011bb4:	691b      	ldr	r3, [r3, #16]
 8011bb6:	466d      	mov	r5, sp
 8011bb8:	a801      	add	r0, sp, #4
 8011bba:	4798      	blx	r3
 8011bbc:	9000      	str	r0, [sp, #0]

  return calendarTime;
 8011bbe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011bc2:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8011bc6:	4620      	mov	r0, r4
 8011bc8:	b003      	add	sp, #12
 8011bca:	bd30      	pop	{r4, r5, pc}
 8011bcc:	08012bd4 	.word	0x08012bd4

08011bd0 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8011bd0:	b530      	push	{r4, r5, lr}
 8011bd2:	b089      	sub	sp, #36	@ 0x24
 8011bd4:	ac02      	add	r4, sp, #8
 8011bd6:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8011bda:	4d0c      	ldr	r5, [pc, #48]	@ (8011c0c <SysTimeToMs+0x3c>)
 8011bdc:	68eb      	ldr	r3, [r5, #12]
 8011bde:	4798      	blx	r3
 8011be0:	f8ad 001c 	strh.w	r0, [sp, #28]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8011be4:	686b      	ldr	r3, [r5, #4]
 8011be6:	4798      	blx	r3
 8011be8:	4603      	mov	r3, r0
 8011bea:	9006      	str	r0, [sp, #24]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8011bec:	9a07      	ldr	r2, [sp, #28]
 8011bee:	9200      	str	r2, [sp, #0]
 8011bf0:	e894 0006 	ldmia.w	r4, {r1, r2}
 8011bf4:	a804      	add	r0, sp, #16
 8011bf6:	f7ff ff72 	bl	8011ade <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8011bfa:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
}
 8011bfe:	9a04      	ldr	r2, [sp, #16]
 8011c00:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011c04:	fb00 3002 	mla	r0, r0, r2, r3
 8011c08:	b009      	add	sp, #36	@ 0x24
 8011c0a:	bd30      	pop	{r4, r5, pc}
 8011c0c:	08012bd4 	.word	0x08012bd4

08011c10 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8011c10:	b530      	push	{r4, r5, lr}
 8011c12:	b087      	sub	sp, #28
 8011c14:	4604      	mov	r4, r0
  uint32_t seconds = timeMs / 1000;
 8011c16:	4b12      	ldr	r3, [pc, #72]	@ (8011c60 <SysTimeFromMs+0x50>)
 8011c18:	fba3 2301 	umull	r2, r3, r3, r1
 8011c1c:	099b      	lsrs	r3, r3, #6
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8011c1e:	9304      	str	r3, [sp, #16]
 8011c20:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8011c24:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8011c28:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 8011c2c:	f8ad 1014 	strh.w	r1, [sp, #20]
  SysTime_t DeltaTime = { 0 };
 8011c30:	2300      	movs	r3, #0
 8011c32:	9302      	str	r3, [sp, #8]
 8011c34:	9303      	str	r3, [sp, #12]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8011c36:	4d0b      	ldr	r5, [pc, #44]	@ (8011c64 <SysTimeFromMs+0x54>)
 8011c38:	68eb      	ldr	r3, [r5, #12]
 8011c3a:	4798      	blx	r3
 8011c3c:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8011c40:	686b      	ldr	r3, [r5, #4]
 8011c42:	4798      	blx	r3
 8011c44:	4603      	mov	r3, r0
 8011c46:	9002      	str	r0, [sp, #8]
  return SysTimeAdd( sysTime, DeltaTime );
 8011c48:	9a03      	ldr	r2, [sp, #12]
 8011c4a:	9200      	str	r2, [sp, #0]
 8011c4c:	aa06      	add	r2, sp, #24
 8011c4e:	e912 0006 	ldmdb	r2, {r1, r2}
 8011c52:	4620      	mov	r0, r4
 8011c54:	f7ff ff24 	bl	8011aa0 <SysTimeAdd>
}
 8011c58:	4620      	mov	r0, r4
 8011c5a:	b007      	add	sp, #28
 8011c5c:	bd30      	pop	{r4, r5, pc}
 8011c5e:	bf00      	nop
 8011c60:	10624dd3 	.word	0x10624dd3
 8011c64:	08012bd4 	.word	0x08012bd4

08011c68 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 8011c68:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8011c6a:	4b03      	ldr	r3, [pc, #12]	@ (8011c78 <UTIL_TIMER_Init+0x10>)
 8011c6c:	2200      	movs	r2, #0
 8011c6e:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8011c70:	4b02      	ldr	r3, [pc, #8]	@ (8011c7c <UTIL_TIMER_Init+0x14>)
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	4798      	blx	r3
}
 8011c76:	bd08      	pop	{r3, pc}
 8011c78:	2000167c 	.word	0x2000167c
 8011c7c:	08012be8 	.word	0x08012be8

08011c80 <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 8011c80:	b1a8      	cbz	r0, 8011cae <UTIL_TIMER_Create+0x2e>
{
 8011c82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c84:	4617      	mov	r7, r2
 8011c86:	461e      	mov	r6, r3
 8011c88:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 8011c8a:	b193      	cbz	r3, 8011cb2 <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 8011c8c:	2500      	movs	r5, #0
 8011c8e:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8011c90:	4b09      	ldr	r3, [pc, #36]	@ (8011cb8 <UTIL_TIMER_Create+0x38>)
 8011c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c94:	4608      	mov	r0, r1
 8011c96:	4798      	blx	r3
 8011c98:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 8011c9a:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 8011c9c:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8011c9e:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 8011ca0:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 8011ca2:	9b06      	ldr	r3, [sp, #24]
 8011ca4:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 8011ca6:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 8011ca8:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 8011caa:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 8011cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 8011cae:	2001      	movs	r0, #1
}
 8011cb0:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 8011cb2:	2001      	movs	r0, #1
 8011cb4:	e7fa      	b.n	8011cac <UTIL_TIMER_Create+0x2c>
 8011cb6:	bf00      	nop
 8011cb8:	08012be8 	.word	0x08012be8

08011cbc <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8011cbc:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8011cbe:	4c03      	ldr	r4, [pc, #12]	@ (8011ccc <UTIL_TIMER_GetCurrentTime+0x10>)
 8011cc0:	69e3      	ldr	r3, [r4, #28]
 8011cc2:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 8011cc4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8011cc6:	4798      	blx	r3
}
 8011cc8:	bd10      	pop	{r4, pc}
 8011cca:	bf00      	nop
 8011ccc:	08012be8 	.word	0x08012be8

08011cd0 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8011cd0:	b570      	push	{r4, r5, r6, lr}
 8011cd2:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8011cd4:	4d05      	ldr	r5, [pc, #20]	@ (8011cec <UTIL_TIMER_GetElapsedTime+0x1c>)
 8011cd6:	69eb      	ldr	r3, [r5, #28]
 8011cd8:	4798      	blx	r3
 8011cda:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8011cdc:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8011cde:	4630      	mov	r0, r6
 8011ce0:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 8011ce2:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8011ce4:	1a20      	subs	r0, r4, r0
 8011ce6:	4798      	blx	r3
}
 8011ce8:	bd70      	pop	{r4, r5, r6, pc}
 8011cea:	bf00      	nop
 8011cec:	08012be8 	.word	0x08012be8

08011cf0 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8011cf0:	4b05      	ldr	r3, [pc, #20]	@ (8011d08 <TimerExists+0x18>)
 8011cf2:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 8011cf4:	e000      	b.n	8011cf8 <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 8011cf6:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 8011cf8:	b11b      	cbz	r3, 8011d02 <TimerExists+0x12>
    if( cur == TimerObject )
 8011cfa:	4283      	cmp	r3, r0
 8011cfc:	d1fb      	bne.n	8011cf6 <TimerExists+0x6>
      return true;
 8011cfe:	2001      	movs	r0, #1
  }
  return false;
}
 8011d00:	4770      	bx	lr
  return false;
 8011d02:	2000      	movs	r0, #0
 8011d04:	4770      	bx	lr
 8011d06:	bf00      	nop
 8011d08:	2000167c 	.word	0x2000167c

08011d0c <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8011d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d0e:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8011d10:	4e09      	ldr	r6, [pc, #36]	@ (8011d38 <TimerSetTimeout+0x2c>)
 8011d12:	6a33      	ldr	r3, [r6, #32]
 8011d14:	4798      	blx	r3
 8011d16:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 8011d18:	2301      	movs	r3, #1
 8011d1a:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8011d1c:	6827      	ldr	r7, [r4, #0]
 8011d1e:	69b6      	ldr	r6, [r6, #24]
 8011d20:	47b0      	blx	r6
 8011d22:	4428      	add	r0, r5
 8011d24:	4287      	cmp	r7, r0
 8011d26:	d202      	bcs.n	8011d2e <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8011d28:	47b0      	blx	r6
 8011d2a:	4428      	add	r0, r5
 8011d2c:	6020      	str	r0, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8011d2e:	4b02      	ldr	r3, [pc, #8]	@ (8011d38 <TimerSetTimeout+0x2c>)
 8011d30:	689b      	ldr	r3, [r3, #8]
 8011d32:	6820      	ldr	r0, [r4, #0]
 8011d34:	4798      	blx	r3
}
 8011d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d38:	08012be8 	.word	0x08012be8

08011d3c <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 8011d3c:	b368      	cbz	r0, 8011d9a <UTIL_TIMER_Stop+0x5e>
{
 8011d3e:	b510      	push	{r4, lr}
 8011d40:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011d42:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011d46:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8011d48:	4b15      	ldr	r3, [pc, #84]	@ (8011da0 <UTIL_TIMER_Stop+0x64>)
 8011d4a:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 8011d4c:	2301      	movs	r3, #1
 8011d4e:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 8011d50:	b1e1      	cbz	r1, 8011d8c <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 8011d52:	2300      	movs	r3, #0
 8011d54:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8011d56:	4288      	cmp	r0, r1
 8011d58:	d006      	beq.n	8011d68 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8011d5a:	460b      	mov	r3, r1
        while( cur != NULL )
 8011d5c:	b1b3      	cbz	r3, 8011d8c <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 8011d5e:	4293      	cmp	r3, r2
 8011d60:	d011      	beq.n	8011d86 <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 8011d62:	4619      	mov	r1, r3
            cur = cur->Next;
 8011d64:	695b      	ldr	r3, [r3, #20]
 8011d66:	e7f9      	b.n	8011d5c <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 8011d68:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 8011d6a:	6948      	ldr	r0, [r1, #20]
 8011d6c:	b120      	cbz	r0, 8011d78 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 8011d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8011da0 <UTIL_TIMER_Stop+0x64>)
 8011d70:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 8011d72:	f7ff ffcb 	bl	8011d0c <TimerSetTimeout>
 8011d76:	e009      	b.n	8011d8c <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 8011d78:	4b0a      	ldr	r3, [pc, #40]	@ (8011da4 <UTIL_TIMER_Stop+0x68>)
 8011d7a:	68db      	ldr	r3, [r3, #12]
 8011d7c:	4798      	blx	r3
            TimerListHead = NULL;
 8011d7e:	4b08      	ldr	r3, [pc, #32]	@ (8011da0 <UTIL_TIMER_Stop+0x64>)
 8011d80:	2200      	movs	r2, #0
 8011d82:	601a      	str	r2, [r3, #0]
 8011d84:	e002      	b.n	8011d8c <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 8011d86:	695b      	ldr	r3, [r3, #20]
 8011d88:	b123      	cbz	r3, 8011d94 <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 8011d8a:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011d8c:	f384 8810 	msr	PRIMASK, r4
}
 8011d90:	2000      	movs	r0, #0
}
 8011d92:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 8011d94:	2300      	movs	r3, #0
 8011d96:	614b      	str	r3, [r1, #20]
 8011d98:	e7f8      	b.n	8011d8c <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 8011d9a:	2001      	movs	r0, #1
}
 8011d9c:	4770      	bx	lr
 8011d9e:	bf00      	nop
 8011da0:	2000167c 	.word	0x2000167c
 8011da4:	08012be8 	.word	0x08012be8

08011da8 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8011da8:	4b09      	ldr	r3, [pc, #36]	@ (8011dd0 <TimerInsertTimer+0x28>)
 8011daa:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8011dac:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 8011dae:	e001      	b.n	8011db4 <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 8011db0:	461a      	mov	r2, r3
        next = next->Next;
 8011db2:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 8011db4:	6951      	ldr	r1, [r2, #20]
 8011db6:	b139      	cbz	r1, 8011dc8 <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 8011db8:	6819      	ldr	r1, [r3, #0]
 8011dba:	f8d0 c000 	ldr.w	ip, [r0]
 8011dbe:	458c      	cmp	ip, r1
 8011dc0:	d8f6      	bhi.n	8011db0 <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 8011dc2:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 8011dc4:	6143      	str	r3, [r0, #20]
        return;
 8011dc6:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 8011dc8:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 8011dca:	2300      	movs	r3, #0
 8011dcc:	6143      	str	r3, [r0, #20]
}
 8011dce:	4770      	bx	lr
 8011dd0:	2000167c 	.word	0x2000167c

08011dd4 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8011dd4:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8011dd6:	4b05      	ldr	r3, [pc, #20]	@ (8011dec <TimerInsertNewHeadTimer+0x18>)
 8011dd8:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 8011dda:	b10b      	cbz	r3, 8011de0 <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 8011ddc:	2200      	movs	r2, #0
 8011dde:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8011de0:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 8011de2:	4b02      	ldr	r3, [pc, #8]	@ (8011dec <TimerInsertNewHeadTimer+0x18>)
 8011de4:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 8011de6:	f7ff ff91 	bl	8011d0c <TimerSetTimeout>
}
 8011dea:	bd08      	pop	{r3, pc}
 8011dec:	2000167c 	.word	0x2000167c

08011df0 <UTIL_TIMER_Start>:
{
 8011df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8011df2:	2800      	cmp	r0, #0
 8011df4:	d036      	beq.n	8011e64 <UTIL_TIMER_Start+0x74>
 8011df6:	4604      	mov	r4, r0
 8011df8:	f7ff ff7a 	bl	8011cf0 <TimerExists>
 8011dfc:	2800      	cmp	r0, #0
 8011dfe:	d134      	bne.n	8011e6a <UTIL_TIMER_Start+0x7a>
 8011e00:	7a65      	ldrb	r5, [r4, #9]
 8011e02:	2d00      	cmp	r5, #0
 8011e04:	d133      	bne.n	8011e6e <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011e06:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011e0a:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 8011e0c:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8011e0e:	4b19      	ldr	r3, [pc, #100]	@ (8011e74 <UTIL_TIMER_Start+0x84>)
 8011e10:	6a1b      	ldr	r3, [r3, #32]
 8011e12:	4798      	blx	r3
    if( ticks < minValue )
 8011e14:	4287      	cmp	r7, r0
 8011e16:	d300      	bcc.n	8011e1a <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 8011e18:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 8011e1a:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 8011e1c:	2300      	movs	r3, #0
 8011e1e:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 8011e20:	2201      	movs	r2, #1
 8011e22:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8011e24:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 8011e26:	4b14      	ldr	r3, [pc, #80]	@ (8011e78 <UTIL_TIMER_Start+0x88>)
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	b183      	cbz	r3, 8011e4e <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8011e2c:	4b11      	ldr	r3, [pc, #68]	@ (8011e74 <UTIL_TIMER_Start+0x84>)
 8011e2e:	699b      	ldr	r3, [r3, #24]
 8011e30:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 8011e32:	6823      	ldr	r3, [r4, #0]
 8011e34:	4418      	add	r0, r3
 8011e36:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8011e38:	4b0f      	ldr	r3, [pc, #60]	@ (8011e78 <UTIL_TIMER_Start+0x88>)
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	4298      	cmp	r0, r3
 8011e40:	d20c      	bcs.n	8011e5c <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 8011e42:	4620      	mov	r0, r4
 8011e44:	f7ff ffc6 	bl	8011dd4 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011e48:	f386 8810 	msr	PRIMASK, r6
}
 8011e4c:	e00b      	b.n	8011e66 <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 8011e4e:	4b09      	ldr	r3, [pc, #36]	@ (8011e74 <UTIL_TIMER_Start+0x84>)
 8011e50:	691b      	ldr	r3, [r3, #16]
 8011e52:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8011e54:	4620      	mov	r0, r4
 8011e56:	f7ff ffbd 	bl	8011dd4 <TimerInsertNewHeadTimer>
 8011e5a:	e7f5      	b.n	8011e48 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 8011e5c:	4620      	mov	r0, r4
 8011e5e:	f7ff ffa3 	bl	8011da8 <TimerInsertTimer>
 8011e62:	e7f1      	b.n	8011e48 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 8011e64:	2501      	movs	r5, #1
}
 8011e66:	4628      	mov	r0, r5
 8011e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 8011e6a:	2501      	movs	r5, #1
 8011e6c:	e7fb      	b.n	8011e66 <UTIL_TIMER_Start+0x76>
 8011e6e:	2501      	movs	r5, #1
 8011e70:	e7f9      	b.n	8011e66 <UTIL_TIMER_Start+0x76>
 8011e72:	bf00      	nop
 8011e74:	08012be8 	.word	0x08012be8
 8011e78:	2000167c 	.word	0x2000167c

08011e7c <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 8011e7c:	b198      	cbz	r0, 8011ea6 <UTIL_TIMER_SetPeriod+0x2a>
{
 8011e7e:	b510      	push	{r4, lr}
 8011e80:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8011e82:	4b0a      	ldr	r3, [pc, #40]	@ (8011eac <UTIL_TIMER_SetPeriod+0x30>)
 8011e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e86:	4608      	mov	r0, r1
 8011e88:	4798      	blx	r3
 8011e8a:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 8011e8c:	4620      	mov	r0, r4
 8011e8e:	f7ff ff2f 	bl	8011cf0 <TimerExists>
 8011e92:	b908      	cbnz	r0, 8011e98 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8011e94:	2000      	movs	r0, #0
}
 8011e96:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 8011e98:	4620      	mov	r0, r4
 8011e9a:	f7ff ff4f 	bl	8011d3c <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8011e9e:	4620      	mov	r0, r4
 8011ea0:	f7ff ffa6 	bl	8011df0 <UTIL_TIMER_Start>
 8011ea4:	e7f7      	b.n	8011e96 <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 8011ea6:	2001      	movs	r0, #1
}
 8011ea8:	4770      	bx	lr
 8011eaa:	bf00      	nop
 8011eac:	08012be8 	.word	0x08012be8

08011eb0 <UTIL_TIMER_IRQ_Handler>:
{
 8011eb0:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011eb2:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011eb6:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8011eb8:	4c1e      	ldr	r4, [pc, #120]	@ (8011f34 <UTIL_TIMER_IRQ_Handler+0x84>)
 8011eba:	6963      	ldr	r3, [r4, #20]
 8011ebc:	4798      	blx	r3
 8011ebe:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8011ec0:	6923      	ldr	r3, [r4, #16]
 8011ec2:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 8011ec4:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 8011ec6:	4b1c      	ldr	r3, [pc, #112]	@ (8011f38 <UTIL_TIMER_IRQ_Handler+0x88>)
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	b923      	cbnz	r3, 8011ed6 <UTIL_TIMER_IRQ_Handler+0x26>
 8011ecc:	e018      	b.n	8011f00 <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 8011ece:	2200      	movs	r2, #0
 8011ed0:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 8011ed2:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 8011ed4:	b1a3      	cbz	r3, 8011f00 <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 8011ed6:	681a      	ldr	r2, [r3, #0]
 8011ed8:	42a2      	cmp	r2, r4
 8011eda:	d9f8      	bls.n	8011ece <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 8011edc:	1a31      	subs	r1, r6, r0
 8011ede:	440a      	add	r2, r1
 8011ee0:	601a      	str	r2, [r3, #0]
 8011ee2:	e7f6      	b.n	8011ed2 <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 8011ee4:	4b14      	ldr	r3, [pc, #80]	@ (8011f38 <UTIL_TIMER_IRQ_Handler+0x88>)
 8011ee6:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 8011ee8:	6962      	ldr	r2, [r4, #20]
 8011eea:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 8011eec:	2300      	movs	r3, #0
 8011eee:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 8011ef0:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 8011ef2:	68e3      	ldr	r3, [r4, #12]
 8011ef4:	6920      	ldr	r0, [r4, #16]
 8011ef6:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8011ef8:	8963      	ldrh	r3, [r4, #10]
 8011efa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011efe:	d012      	beq.n	8011f26 <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8011f00:	4b0d      	ldr	r3, [pc, #52]	@ (8011f38 <UTIL_TIMER_IRQ_Handler+0x88>)
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	b13b      	cbz	r3, 8011f16 <UTIL_TIMER_IRQ_Handler+0x66>
 8011f06:	681c      	ldr	r4, [r3, #0]
 8011f08:	2c00      	cmp	r4, #0
 8011f0a:	d0eb      	beq.n	8011ee4 <UTIL_TIMER_IRQ_Handler+0x34>
 8011f0c:	4b09      	ldr	r3, [pc, #36]	@ (8011f34 <UTIL_TIMER_IRQ_Handler+0x84>)
 8011f0e:	699b      	ldr	r3, [r3, #24]
 8011f10:	4798      	blx	r3
 8011f12:	4284      	cmp	r4, r0
 8011f14:	d3e6      	bcc.n	8011ee4 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8011f16:	4b08      	ldr	r3, [pc, #32]	@ (8011f38 <UTIL_TIMER_IRQ_Handler+0x88>)
 8011f18:	6818      	ldr	r0, [r3, #0]
 8011f1a:	b108      	cbz	r0, 8011f20 <UTIL_TIMER_IRQ_Handler+0x70>
 8011f1c:	7a03      	ldrb	r3, [r0, #8]
 8011f1e:	b133      	cbz	r3, 8011f2e <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011f20:	f385 8810 	msr	PRIMASK, r5
}
 8011f24:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 8011f26:	4620      	mov	r0, r4
 8011f28:	f7ff ff62 	bl	8011df0 <UTIL_TIMER_Start>
 8011f2c:	e7e8      	b.n	8011f00 <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 8011f2e:	f7ff feed 	bl	8011d0c <TimerSetTimeout>
 8011f32:	e7f5      	b.n	8011f20 <UTIL_TIMER_IRQ_Handler+0x70>
 8011f34:	08012be8 	.word	0x08012be8
 8011f38:	2000167c 	.word	0x2000167c

08011f3c <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8011f3c:	4601      	mov	r1, r0
  int i = 0;
 8011f3e:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8011f40:	e008      	b.n	8011f54 <ee_skip_atoi+0x18>
 8011f42:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8011f46:	1c53      	adds	r3, r2, #1
 8011f48:	600b      	str	r3, [r1, #0]
 8011f4a:	7813      	ldrb	r3, [r2, #0]
 8011f4c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8011f50:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 8011f54:	680a      	ldr	r2, [r1, #0]
 8011f56:	7813      	ldrb	r3, [r2, #0]
 8011f58:	3b30      	subs	r3, #48	@ 0x30
 8011f5a:	b2db      	uxtb	r3, r3
 8011f5c:	2b09      	cmp	r3, #9
 8011f5e:	d9f0      	bls.n	8011f42 <ee_skip_atoi+0x6>
  return i;
}
 8011f60:	4770      	bx	lr
	...

08011f64 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8011f64:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 8011f68:	b093      	sub	sp, #76	@ 0x4c
 8011f6a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8011f6c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 8011f6e:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8011f72:	d110      	bne.n	8011f96 <ee_number+0x32>
  char *dig = lower_digits;
 8011f74:	f8df a0f8 	ldr.w	sl, [pc, #248]	@ 8012070 <ee_number+0x10c>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8011f78:	1e9f      	subs	r7, r3, #2
 8011f7a:	2f22      	cmp	r7, #34	@ 0x22
 8011f7c:	d875      	bhi.n	801206a <ee_number+0x106>

  c = (type & ZEROPAD) ? '0' : ' ';
 8011f7e:	f016 0401 	ands.w	r4, r6, #1
 8011f82:	d00b      	beq.n	8011f9c <ee_number+0x38>
 8011f84:	f04f 0e30 	mov.w	lr, #48	@ 0x30
  sign = 0;
  if (type & SIGN)
 8011f88:	f016 0f02 	tst.w	r6, #2
 8011f8c:	d00f      	beq.n	8011fae <ee_number+0x4a>
  {
    if (num < 0)
 8011f8e:	2a00      	cmp	r2, #0
 8011f90:	db07      	blt.n	8011fa2 <ee_number+0x3e>
  sign = 0;
 8011f92:	2700      	movs	r7, #0
 8011f94:	e00c      	b.n	8011fb0 <ee_number+0x4c>
  if (type & UPPERCASE)  dig = upper_digits;
 8011f96:	f8df a0dc 	ldr.w	sl, [pc, #220]	@ 8012074 <ee_number+0x110>
 8011f9a:	e7ed      	b.n	8011f78 <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 8011f9c:	f04f 0e20 	mov.w	lr, #32
 8011fa0:	e7f2      	b.n	8011f88 <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 8011fa2:	4252      	negs	r2, r2
      size--;
 8011fa4:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8011fa6:	3e01      	subs	r6, #1
 8011fa8:	961a      	str	r6, [sp, #104]	@ 0x68
      sign = '-';
 8011faa:	272d      	movs	r7, #45	@ 0x2d
 8011fac:	e000      	b.n	8011fb0 <ee_number+0x4c>
  sign = 0;
 8011fae:	2700      	movs	r7, #0
  }
#endif

  i = 0;

  if (num == 0)
 8011fb0:	bb5a      	cbnz	r2, 801200a <ee_number+0xa6>
    tmp[i++] = '0';
 8011fb2:	2330      	movs	r3, #48	@ 0x30
 8011fb4:	f88d 3004 	strb.w	r3, [sp, #4]
 8011fb8:	f04f 0c01 	mov.w	ip, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 8011fbc:	45ac      	cmp	ip, r5
 8011fbe:	dd00      	ble.n	8011fc2 <ee_number+0x5e>
 8011fc0:	4665      	mov	r5, ip
  size -= precision;
 8011fc2:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8011fc4:	1b5b      	subs	r3, r3, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8011fc6:	b31c      	cbz	r4, 8012010 <ee_number+0xac>
  if (sign) ASSIGN_STR(sign);
 8011fc8:	b11f      	cbz	r7, 8011fd2 <ee_number+0x6e>
 8011fca:	f800 7b01 	strb.w	r7, [r0], #1
 8011fce:	3901      	subs	r1, #1
 8011fd0:	d007      	beq.n	8011fe2 <ee_number+0x7e>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	f103 33ff 	add.w	r3, r3, #4294967295
 8011fd8:	dd24      	ble.n	8012024 <ee_number+0xc0>
 8011fda:	f800 eb01 	strb.w	lr, [r0], #1
 8011fde:	3901      	subs	r1, #1
 8011fe0:	d1f7      	bne.n	8011fd2 <ee_number+0x6e>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 8011fe2:	b013      	add	sp, #76	@ 0x4c
 8011fe4:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8011fe8:	fbb2 f6f3 	udiv	r6, r2, r3
 8011fec:	fb03 2216 	mls	r2, r3, r6, r2
 8011ff0:	f81a 8002 	ldrb.w	r8, [sl, r2]
 8011ff4:	f10c 0248 	add.w	r2, ip, #72	@ 0x48
 8011ff8:	446a      	add	r2, sp
 8011ffa:	f802 8c44 	strb.w	r8, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 8011ffe:	4632      	mov	r2, r6
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8012000:	f10c 0c01 	add.w	ip, ip, #1
    while (num != 0)
 8012004:	2a00      	cmp	r2, #0
 8012006:	d1ef      	bne.n	8011fe8 <ee_number+0x84>
 8012008:	e7d8      	b.n	8011fbc <ee_number+0x58>
  i = 0;
 801200a:	f04f 0c00 	mov.w	ip, #0
 801200e:	e7f9      	b.n	8012004 <ee_number+0xa0>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8012010:	2b00      	cmp	r3, #0
 8012012:	f103 33ff 	add.w	r3, r3, #4294967295
 8012016:	ddd7      	ble.n	8011fc8 <ee_number+0x64>
 8012018:	2220      	movs	r2, #32
 801201a:	f800 2b01 	strb.w	r2, [r0], #1
 801201e:	3901      	subs	r1, #1
 8012020:	d1f6      	bne.n	8012010 <ee_number+0xac>
 8012022:	e7de      	b.n	8011fe2 <ee_number+0x7e>
  while (i < precision--) ASSIGN_STR('0');
 8012024:	4565      	cmp	r5, ip
 8012026:	f105 35ff 	add.w	r5, r5, #4294967295
 801202a:	dd05      	ble.n	8012038 <ee_number+0xd4>
 801202c:	2230      	movs	r2, #48	@ 0x30
 801202e:	f800 2b01 	strb.w	r2, [r0], #1
 8012032:	3901      	subs	r1, #1
 8012034:	d1f6      	bne.n	8012024 <ee_number+0xc0>
 8012036:	e7d4      	b.n	8011fe2 <ee_number+0x7e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8012038:	4662      	mov	r2, ip
 801203a:	2a00      	cmp	r2, #0
 801203c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012040:	dd09      	ble.n	8012056 <ee_number+0xf2>
 8012042:	f10c 0248 	add.w	r2, ip, #72	@ 0x48
 8012046:	446a      	add	r2, sp
 8012048:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 801204c:	f800 2b01 	strb.w	r2, [r0], #1
 8012050:	3901      	subs	r1, #1
 8012052:	d1f1      	bne.n	8012038 <ee_number+0xd4>
 8012054:	e7c5      	b.n	8011fe2 <ee_number+0x7e>
  while (size-- > 0) ASSIGN_STR(' ');
 8012056:	2b00      	cmp	r3, #0
 8012058:	f103 33ff 	add.w	r3, r3, #4294967295
 801205c:	ddc1      	ble.n	8011fe2 <ee_number+0x7e>
 801205e:	2220      	movs	r2, #32
 8012060:	f800 2b01 	strb.w	r2, [r0], #1
 8012064:	3901      	subs	r1, #1
 8012066:	d1f6      	bne.n	8012056 <ee_number+0xf2>
 8012068:	e7bb      	b.n	8011fe2 <ee_number+0x7e>
  if (base < 2 || base > 36) return 0;
 801206a:	2000      	movs	r0, #0
 801206c:	e7b9      	b.n	8011fe2 <ee_number+0x7e>
 801206e:	bf00      	nop
 8012070:	08012b7c 	.word	0x08012b7c
 8012074:	08012ba4 	.word	0x08012ba4

08012078 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8012078:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801207c:	b087      	sub	sp, #28
 801207e:	9205      	str	r2, [sp, #20]
 8012080:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 8012082:	1e0f      	subs	r7, r1, #0
 8012084:	f340 80b8 	ble.w	80121f8 <tiny_vsnprintf_like+0x180>
 8012088:	4606      	mov	r6, r0
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801208a:	4604      	mov	r4, r0
 801208c:	e004      	b.n	8012098 <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);

    if (*fmt != '%')
    {
      *str++ = *fmt;
 801208e:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8012092:	9b05      	ldr	r3, [sp, #20]
 8012094:	3301      	adds	r3, #1
 8012096:	9305      	str	r3, [sp, #20]
 8012098:	9905      	ldr	r1, [sp, #20]
 801209a:	780a      	ldrb	r2, [r1, #0]
 801209c:	b922      	cbnz	r2, 80120a8 <tiny_vsnprintf_like+0x30>
 801209e:	1ba3      	subs	r3, r4, r6
 80120a0:	1e78      	subs	r0, r7, #1
 80120a2:	4283      	cmp	r3, r0
 80120a4:	f2c0 80a2 	blt.w	80121ec <tiny_vsnprintf_like+0x174>
    CHECK_STR_SIZE(buf, str, size);
 80120a8:	1ba3      	subs	r3, r4, r6
 80120aa:	f107 38ff 	add.w	r8, r7, #4294967295
 80120ae:	4543      	cmp	r3, r8
 80120b0:	f280 809c 	bge.w	80121ec <tiny_vsnprintf_like+0x174>
    if (*fmt != '%')
 80120b4:	2a25      	cmp	r2, #37	@ 0x25
 80120b6:	d1ea      	bne.n	801208e <tiny_vsnprintf_like+0x16>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 80120b8:	1c4b      	adds	r3, r1, #1
 80120ba:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 80120bc:	784b      	ldrb	r3, [r1, #1]
 80120be:	2b30      	cmp	r3, #48	@ 0x30
 80120c0:	d020      	beq.n	8012104 <tiny_vsnprintf_like+0x8c>
    flags = 0;
 80120c2:	f04f 0900 	mov.w	r9, #0
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 80120c6:	3b30      	subs	r3, #48	@ 0x30
 80120c8:	b2db      	uxtb	r3, r3
 80120ca:	2b09      	cmp	r3, #9
 80120cc:	d91d      	bls.n	801210a <tiny_vsnprintf_like+0x92>
    field_width = -1;
 80120ce:	f04f 35ff 	mov.w	r5, #4294967295
#endif

    // Default base
    base = 10;

    switch (*fmt)
 80120d2:	9b05      	ldr	r3, [sp, #20]
 80120d4:	781a      	ldrb	r2, [r3, #0]
 80120d6:	f1a2 0358 	sub.w	r3, r2, #88	@ 0x58
 80120da:	2b20      	cmp	r3, #32
 80120dc:	d867      	bhi.n	80121ae <tiny_vsnprintf_like+0x136>
 80120de:	e8df f003 	tbb	[pc, r3]
 80120e2:	664a      	.short	0x664a
 80120e4:	66666666 	.word	0x66666666
 80120e8:	66666666 	.word	0x66666666
 80120ec:	66621e66 	.word	0x66621e66
 80120f0:	62666666 	.word	0x62666666
 80120f4:	66666666 	.word	0x66666666
 80120f8:	66666666 	.word	0x66666666
 80120fc:	19662866 	.word	0x19662866
 8012100:	6666      	.short	0x6666
 8012102:	7c          	.byte	0x7c
 8012103:	00          	.byte	0x00
      flags |= ZEROPAD;
 8012104:	f04f 0901 	mov.w	r9, #1
 8012108:	e7dd      	b.n	80120c6 <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 801210a:	a805      	add	r0, sp, #20
 801210c:	f7ff ff16 	bl	8011f3c <ee_skip_atoi>
 8012110:	4605      	mov	r5, r0
 8012112:	e7de      	b.n	80120d2 <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 8012114:	230a      	movs	r3, #10
 8012116:	e031      	b.n	801217c <tiny_vsnprintf_like+0x104>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8012118:	2320      	movs	r3, #32
 801211a:	f804 3b01 	strb.w	r3, [r4], #1
 801211e:	3d01      	subs	r5, #1
 8012120:	2d00      	cmp	r5, #0
 8012122:	dcf9      	bgt.n	8012118 <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 8012124:	9b04      	ldr	r3, [sp, #16]
 8012126:	1d1a      	adds	r2, r3, #4
 8012128:	9204      	str	r2, [sp, #16]
 801212a:	781b      	ldrb	r3, [r3, #0]
 801212c:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8012130:	e7af      	b.n	8012092 <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 8012132:	9b04      	ldr	r3, [sp, #16]
 8012134:	1d1a      	adds	r2, r3, #4
 8012136:	9204      	str	r2, [sp, #16]
 8012138:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 801213c:	f1b8 0f00 	cmp.w	r8, #0
 8012140:	d003      	beq.n	801214a <tiny_vsnprintf_like+0xd2>
#ifdef TINY_PRINTF
        len = strlen(s);
 8012142:	4640      	mov	r0, r8
 8012144:	f7ee f818 	bl	8000178 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8012148:	e006      	b.n	8012158 <tiny_vsnprintf_like+0xe0>
        if (!s) s = "<NULL>";
 801214a:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 80121fc <tiny_vsnprintf_like+0x184>
 801214e:	e7f8      	b.n	8012142 <tiny_vsnprintf_like+0xca>
          while (len < field_width--) *str++ = ' ';
 8012150:	2220      	movs	r2, #32
 8012152:	f804 2b01 	strb.w	r2, [r4], #1
 8012156:	461d      	mov	r5, r3
 8012158:	1e6b      	subs	r3, r5, #1
 801215a:	4285      	cmp	r5, r0
 801215c:	dcf8      	bgt.n	8012150 <tiny_vsnprintf_like+0xd8>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801215e:	2200      	movs	r2, #0
 8012160:	e006      	b.n	8012170 <tiny_vsnprintf_like+0xf8>
 8012162:	4643      	mov	r3, r8
 8012164:	f813 1b01 	ldrb.w	r1, [r3], #1
 8012168:	f804 1b01 	strb.w	r1, [r4], #1
 801216c:	3201      	adds	r2, #1
 801216e:	4698      	mov	r8, r3
 8012170:	4282      	cmp	r2, r0
 8012172:	dbf6      	blt.n	8012162 <tiny_vsnprintf_like+0xea>
 8012174:	e78d      	b.n	8012092 <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 8012176:	f049 0940 	orr.w	r9, r9, #64	@ 0x40

      case 'x':
        base = 16;
 801217a:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 801217c:	f019 0f02 	tst.w	r9, #2
 8012180:	d02f      	beq.n	80121e2 <tiny_vsnprintf_like+0x16a>
      num = va_arg(args, int);
 8012182:	9a04      	ldr	r2, [sp, #16]
 8012184:	1d11      	adds	r1, r2, #4
 8012186:	9104      	str	r1, [sp, #16]
 8012188:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801218a:	1ba1      	subs	r1, r4, r6
 801218c:	f8cd 9008 	str.w	r9, [sp, #8]
 8012190:	f04f 30ff 	mov.w	r0, #4294967295
 8012194:	9001      	str	r0, [sp, #4]
 8012196:	9500      	str	r5, [sp, #0]
 8012198:	eba8 0101 	sub.w	r1, r8, r1
 801219c:	4620      	mov	r0, r4
 801219e:	f7ff fee1 	bl	8011f64 <ee_number>
 80121a2:	4604      	mov	r4, r0
 80121a4:	e775      	b.n	8012092 <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 80121a6:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 80121aa:	230a      	movs	r3, #10
 80121ac:	e7e6      	b.n	801217c <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 80121ae:	2a25      	cmp	r2, #37	@ 0x25
 80121b0:	d002      	beq.n	80121b8 <tiny_vsnprintf_like+0x140>
 80121b2:	2325      	movs	r3, #37	@ 0x25
 80121b4:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 80121b8:	1ba3      	subs	r3, r4, r6
 80121ba:	4598      	cmp	r8, r3
 80121bc:	dd0f      	ble.n	80121de <tiny_vsnprintf_like+0x166>
        if (*fmt)
 80121be:	9b05      	ldr	r3, [sp, #20]
 80121c0:	781a      	ldrb	r2, [r3, #0]
 80121c2:	b13a      	cbz	r2, 80121d4 <tiny_vsnprintf_like+0x15c>
          *str++ = *fmt;
 80121c4:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 80121c8:	1ba3      	subs	r3, r4, r6
 80121ca:	4598      	cmp	r8, r3
 80121cc:	f73f af61 	bgt.w	8012092 <tiny_vsnprintf_like+0x1a>
    base = 10;
 80121d0:	230a      	movs	r3, #10
 80121d2:	e7d3      	b.n	801217c <tiny_vsnprintf_like+0x104>
          --fmt;
 80121d4:	3b01      	subs	r3, #1
 80121d6:	9305      	str	r3, [sp, #20]
 80121d8:	e7f6      	b.n	80121c8 <tiny_vsnprintf_like+0x150>
        base = 16;
 80121da:	2310      	movs	r3, #16
 80121dc:	e7ce      	b.n	801217c <tiny_vsnprintf_like+0x104>
    base = 10;
 80121de:	230a      	movs	r3, #10
 80121e0:	e7cc      	b.n	801217c <tiny_vsnprintf_like+0x104>
      num = va_arg(args, unsigned int);
 80121e2:	9a04      	ldr	r2, [sp, #16]
 80121e4:	1d11      	adds	r1, r2, #4
 80121e6:	9104      	str	r1, [sp, #16]
 80121e8:	6812      	ldr	r2, [r2, #0]
 80121ea:	e7ce      	b.n	801218a <tiny_vsnprintf_like+0x112>
  }

  *str = '\0';
 80121ec:	2300      	movs	r3, #0
 80121ee:	7023      	strb	r3, [r4, #0]
  return str - buf;
 80121f0:	1ba0      	subs	r0, r4, r6
}
 80121f2:	b007      	add	sp, #28
 80121f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 80121f8:	2000      	movs	r0, #0
 80121fa:	e7fa      	b.n	80121f2 <tiny_vsnprintf_like+0x17a>
 80121fc:	08012bcc 	.word	0x08012bcc

08012200 <memset>:
 8012200:	4402      	add	r2, r0
 8012202:	4603      	mov	r3, r0
 8012204:	4293      	cmp	r3, r2
 8012206:	d100      	bne.n	801220a <memset+0xa>
 8012208:	4770      	bx	lr
 801220a:	f803 1b01 	strb.w	r1, [r3], #1
 801220e:	e7f9      	b.n	8012204 <memset+0x4>

08012210 <strstr>:
 8012210:	780a      	ldrb	r2, [r1, #0]
 8012212:	b570      	push	{r4, r5, r6, lr}
 8012214:	b96a      	cbnz	r2, 8012232 <strstr+0x22>
 8012216:	bd70      	pop	{r4, r5, r6, pc}
 8012218:	429a      	cmp	r2, r3
 801221a:	d109      	bne.n	8012230 <strstr+0x20>
 801221c:	460c      	mov	r4, r1
 801221e:	4605      	mov	r5, r0
 8012220:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8012224:	2b00      	cmp	r3, #0
 8012226:	d0f6      	beq.n	8012216 <strstr+0x6>
 8012228:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801222c:	429e      	cmp	r6, r3
 801222e:	d0f7      	beq.n	8012220 <strstr+0x10>
 8012230:	3001      	adds	r0, #1
 8012232:	7803      	ldrb	r3, [r0, #0]
 8012234:	2b00      	cmp	r3, #0
 8012236:	d1ef      	bne.n	8012218 <strstr+0x8>
 8012238:	4618      	mov	r0, r3
 801223a:	e7ec      	b.n	8012216 <strstr+0x6>

0801223c <__libc_init_array>:
 801223c:	b570      	push	{r4, r5, r6, lr}
 801223e:	4d0d      	ldr	r5, [pc, #52]	@ (8012274 <__libc_init_array+0x38>)
 8012240:	4c0d      	ldr	r4, [pc, #52]	@ (8012278 <__libc_init_array+0x3c>)
 8012242:	1b64      	subs	r4, r4, r5
 8012244:	10a4      	asrs	r4, r4, #2
 8012246:	2600      	movs	r6, #0
 8012248:	42a6      	cmp	r6, r4
 801224a:	d109      	bne.n	8012260 <__libc_init_array+0x24>
 801224c:	4d0b      	ldr	r5, [pc, #44]	@ (801227c <__libc_init_array+0x40>)
 801224e:	4c0c      	ldr	r4, [pc, #48]	@ (8012280 <__libc_init_array+0x44>)
 8012250:	f000 f89a 	bl	8012388 <_init>
 8012254:	1b64      	subs	r4, r4, r5
 8012256:	10a4      	asrs	r4, r4, #2
 8012258:	2600      	movs	r6, #0
 801225a:	42a6      	cmp	r6, r4
 801225c:	d105      	bne.n	801226a <__libc_init_array+0x2e>
 801225e:	bd70      	pop	{r4, r5, r6, pc}
 8012260:	f855 3b04 	ldr.w	r3, [r5], #4
 8012264:	4798      	blx	r3
 8012266:	3601      	adds	r6, #1
 8012268:	e7ee      	b.n	8012248 <__libc_init_array+0xc>
 801226a:	f855 3b04 	ldr.w	r3, [r5], #4
 801226e:	4798      	blx	r3
 8012270:	3601      	adds	r6, #1
 8012272:	e7f2      	b.n	801225a <__libc_init_array+0x1e>
 8012274:	080132c8 	.word	0x080132c8
 8012278:	080132c8 	.word	0x080132c8
 801227c:	080132c8 	.word	0x080132c8
 8012280:	080132cc 	.word	0x080132cc
 8012284:	00000000 	.word	0x00000000

08012288 <floor>:
 8012288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801228c:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8012290:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 8012294:	2e13      	cmp	r6, #19
 8012296:	4602      	mov	r2, r0
 8012298:	460b      	mov	r3, r1
 801229a:	460c      	mov	r4, r1
 801229c:	4605      	mov	r5, r0
 801229e:	4680      	mov	r8, r0
 80122a0:	dc35      	bgt.n	801230e <floor+0x86>
 80122a2:	2e00      	cmp	r6, #0
 80122a4:	da17      	bge.n	80122d6 <floor+0x4e>
 80122a6:	a334      	add	r3, pc, #208	@ (adr r3, 8012378 <floor+0xf0>)
 80122a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ac:	f7ed ff72 	bl	8000194 <__adddf3>
 80122b0:	2200      	movs	r2, #0
 80122b2:	2300      	movs	r3, #0
 80122b4:	f7ee f9a2 	bl	80005fc <__aeabi_dcmpgt>
 80122b8:	b150      	cbz	r0, 80122d0 <floor+0x48>
 80122ba:	2c00      	cmp	r4, #0
 80122bc:	da57      	bge.n	801236e <floor+0xe6>
 80122be:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80122c2:	432c      	orrs	r4, r5
 80122c4:	2500      	movs	r5, #0
 80122c6:	42ac      	cmp	r4, r5
 80122c8:	4c2d      	ldr	r4, [pc, #180]	@ (8012380 <floor+0xf8>)
 80122ca:	bf08      	it	eq
 80122cc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80122d0:	4623      	mov	r3, r4
 80122d2:	462a      	mov	r2, r5
 80122d4:	e024      	b.n	8012320 <floor+0x98>
 80122d6:	4f2b      	ldr	r7, [pc, #172]	@ (8012384 <floor+0xfc>)
 80122d8:	4137      	asrs	r7, r6
 80122da:	ea01 0c07 	and.w	ip, r1, r7
 80122de:	ea5c 0c00 	orrs.w	ip, ip, r0
 80122e2:	d01d      	beq.n	8012320 <floor+0x98>
 80122e4:	a324      	add	r3, pc, #144	@ (adr r3, 8012378 <floor+0xf0>)
 80122e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ea:	f7ed ff53 	bl	8000194 <__adddf3>
 80122ee:	2200      	movs	r2, #0
 80122f0:	2300      	movs	r3, #0
 80122f2:	f7ee f983 	bl	80005fc <__aeabi_dcmpgt>
 80122f6:	2800      	cmp	r0, #0
 80122f8:	d0ea      	beq.n	80122d0 <floor+0x48>
 80122fa:	2c00      	cmp	r4, #0
 80122fc:	bfbe      	ittt	lt
 80122fe:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8012302:	4133      	asrlt	r3, r6
 8012304:	18e4      	addlt	r4, r4, r3
 8012306:	ea24 0407 	bic.w	r4, r4, r7
 801230a:	2500      	movs	r5, #0
 801230c:	e7e0      	b.n	80122d0 <floor+0x48>
 801230e:	2e33      	cmp	r6, #51	@ 0x33
 8012310:	dd0a      	ble.n	8012328 <floor+0xa0>
 8012312:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8012316:	d103      	bne.n	8012320 <floor+0x98>
 8012318:	f7ed ff3c 	bl	8000194 <__adddf3>
 801231c:	4602      	mov	r2, r0
 801231e:	460b      	mov	r3, r1
 8012320:	4610      	mov	r0, r2
 8012322:	4619      	mov	r1, r3
 8012324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012328:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 801232c:	f04f 3cff 	mov.w	ip, #4294967295
 8012330:	fa2c f707 	lsr.w	r7, ip, r7
 8012334:	4207      	tst	r7, r0
 8012336:	d0f3      	beq.n	8012320 <floor+0x98>
 8012338:	a30f      	add	r3, pc, #60	@ (adr r3, 8012378 <floor+0xf0>)
 801233a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801233e:	f7ed ff29 	bl	8000194 <__adddf3>
 8012342:	2200      	movs	r2, #0
 8012344:	2300      	movs	r3, #0
 8012346:	f7ee f959 	bl	80005fc <__aeabi_dcmpgt>
 801234a:	2800      	cmp	r0, #0
 801234c:	d0c0      	beq.n	80122d0 <floor+0x48>
 801234e:	2c00      	cmp	r4, #0
 8012350:	da0a      	bge.n	8012368 <floor+0xe0>
 8012352:	2e14      	cmp	r6, #20
 8012354:	d101      	bne.n	801235a <floor+0xd2>
 8012356:	3401      	adds	r4, #1
 8012358:	e006      	b.n	8012368 <floor+0xe0>
 801235a:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801235e:	2301      	movs	r3, #1
 8012360:	40b3      	lsls	r3, r6
 8012362:	441d      	add	r5, r3
 8012364:	4545      	cmp	r5, r8
 8012366:	d3f6      	bcc.n	8012356 <floor+0xce>
 8012368:	ea25 0507 	bic.w	r5, r5, r7
 801236c:	e7b0      	b.n	80122d0 <floor+0x48>
 801236e:	2500      	movs	r5, #0
 8012370:	462c      	mov	r4, r5
 8012372:	e7ad      	b.n	80122d0 <floor+0x48>
 8012374:	f3af 8000 	nop.w
 8012378:	8800759c 	.word	0x8800759c
 801237c:	7e37e43c 	.word	0x7e37e43c
 8012380:	bff00000 	.word	0xbff00000
 8012384:	000fffff 	.word	0x000fffff

08012388 <_init>:
 8012388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801238a:	bf00      	nop
 801238c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801238e:	bc08      	pop	{r3}
 8012390:	469e      	mov	lr, r3
 8012392:	4770      	bx	lr

08012394 <_fini>:
 8012394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012396:	bf00      	nop
 8012398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801239a:	bc08      	pop	{r3}
 801239c:	469e      	mov	lr, r3
 801239e:	4770      	bx	lr
